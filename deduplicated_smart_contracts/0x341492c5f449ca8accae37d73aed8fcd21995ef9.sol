/**

 *Submitted for verification at Etherscan.io on 2019-06-05

*/



pragma solidity ^0.4.18;



interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }



contract WEIPAY {

    /* 公共变量 */

    string public name;

    string public symbol;

    uint8 public decimals = 4;

    uint256 public totalSupply;

    mapping (address => uint256) public balanceOf;

    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Burn(address indexed from, uint256 value);



    /* 初始化合约，并且把初始的所有代币都给这合约的创建者

     * @param initialSupply 代币的总数

     * @param tokenName 代币名称

     * @param tokenSymbol 代币符号

     */

    constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public {

        totalSupply = initialSupply * 10 ** uint256(decimals);

        balanceOf[msg.sender] = totalSupply;

        name = tokenName;

        symbol = tokenSymbol;

    }





    /**

     * 私有方法从一个帐户发送给另一个帐户代币

     * @param  _from address 发送代币的地址

     * @param  _to address 接受代币的地址

     * @param  _value uint256 接受代币的数量

     */

    function _transfer(address _from, address _to, uint256 _value) internal {

      require(_to != 0x0);

      require(balanceOf[_from] >= _value);

      require(balanceOf[_to] + _value > balanceOf[_to]);

      uint previousBalances = balanceOf[_from] + balanceOf[_to];

      balanceOf[_from] -= _value;

      balanceOf[_to] += _value;

      emit Transfer(_from, _to, _value);

      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);

    }



    /**

     * 从主帐户合约调用者发送给别人代币

     * @param  _to address 接受代币的地址

     * @param  _value uint256 接受代币的数量

     */

    function transfer(address _to, uint256 _value) public {

        _transfer(msg.sender, _to, _value);

    }



    /**

     * 从某个指定的帐户中，向另一个帐户发送代币

     *

     * 调用过程，会检查设置的允许最大交易额

     *

     * @param  _from address 发送者地址

     * @param  _to address 接受者地址

     * @param  _value uint256 要转移的代币数量

     * @return success        是否交易成功

     */

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {

        require(_value <= allowance[_from][msg.sender]);

        allowance[_from][msg.sender] -= _value;

        _transfer(_from, _to, _value);

        return true;

    }



    /**

     * 设置帐户允许支付的最大金额

     *

     * 一般在智能合约的时候，避免支付过多，造成风险

     *

     * @param _spender 帐户地址

     * @param _value 金额

     */

    function approve(address _spender, uint256 _value) public returns (bool success) {

        allowance[msg.sender][_spender] = _value;

        return true;

    }



    /**

     * 设置帐户允许支付的最大金额

     *

     * 一般在智能合约的时候，避免支付过多，造成风险，加入时间参数，可以在 tokenRecipient 中做其他操作

     *

     * @param _spender 帐户地址

     * @param _value 金额

     * @param _extraData 操作的时间

     */

    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {

        tokenRecipient spender = tokenRecipient(_spender);

        if (approve(_spender, _value)) {

            spender.receiveApproval(msg.sender, _value, this, _extraData);

            return true;

        }

    }



    /**

     * 减少代币调用者的余额

     *

     * 操作以后是不可逆的

     *

     * @param _value 要删除的数量

     */

    function burn(uint256 _value) public returns (bool success) {

        require(balanceOf[msg.sender] >= _value);

        balanceOf[msg.sender] -= _value;

        totalSupply -= _value;

        emit Burn(msg.sender, _value);

        return true;

    }

    /**

     * 删除帐户的余额（含其他帐户）

     *

     * 删除以后是不可逆的

     *

     * @param _from 要操作的帐户地址

     * @param _value 要减去的数量

     */

    function burnFrom(address _from, uint256 _value) public returns (bool success) {

        require(balanceOf[_from] >= _value);

        require(_value <= allowance[_from][msg.sender]);

        balanceOf[_from] -= _value;

        allowance[_from][msg.sender] -= _value;

        totalSupply -= _value;

        emit Burn(_from, _value);

        return true;

    }



}