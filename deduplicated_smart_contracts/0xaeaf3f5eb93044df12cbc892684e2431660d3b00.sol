/**
 *Submitted for verification at Etherscan.io on 2021-04-04
*/

pragma solidity ^0.5.0;
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWXkol:,'.....',;cdOXWMMMWMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMWOl'.';loxkOOOkxdl;..;o0WWWNNWWWWMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMWXl..;d0NWMMMMMMMMMWNOo,.':c:;;:coxOXWMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc..oXWMMMMMMMMMMMMMMMWKd,..'col:;..;o0WWWMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..oNMMMMMMMMMMMMMMMMMMWW0c..oXWWXOo,.'oXWMWMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:.;0MWMMMMMMMMMMMMMMMMMMWWXl..lNMWWWXo..cKWMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0,.cKMWMMMMMMMMMMMMMMMMMWWMMXl..dWMMWWNx'.:KMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0,.:KWWMMMMMMMMMMMMMMMMMMMMMMK:.,OMMMMMNd..lXMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX:.,OMMMMMMMMMMMMMMMMMMMMMMMMWo..xMMMMMMXc.'kMMMMMMMMMMM
//MMMMMMMMMMMMMMWNNNNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..dWMMMMMMMWWWNWMMMMMMMMMMMMx..dWMMMMMMd..dWMMMMMMMMMM
//MMMMMMMMMMMMMMNXNNXNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXXKK0OkkkkxxxxxxkO00KXNNWMMMMMMMMMMO,.;KMMMMMMWXXNXNMMMMMMMMMMMWd..dWMMMMMMx..oNMMMMMMMWWW
//MMMMMMMMMMMMMMWNNNNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWMMMMMMMMMMMMMMMMMMMMMMWNX0kdoc:;,,''...',''........''',::codxkOOxol:'..oNMMMMMWNNNXNMMMMMMMMMMMWo..xWMMMMMWx..dWMMMWWWWWWW
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWMMMMMMMMMMMMMMMMMMMMWXOxl:'..',:clodxkO00KKKKKKKKK00Okxdolc:;'.....';cl;.'kWMMMMMMWWWMMMMMMMMMMMMNl..,oONMMMNl.'kMMMWWWWWWMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWMMMMMMMMMMMMMMMMMMWKkoc,..,coxOKXNMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXK0000XXWM0;.;OWMMMMMMMMMMMMMMMMMMMM0;.',..;d0WO'.cKMMMWWWWMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0dc'.':ok0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWk,.;0WMMMMMMMMMMMMMMMMMMMk'.cKOo;.'c;.'kWMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMN0d:'.,cx0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk,.;OWMMMMMMMMMMMMMMMMMWd..dWWWXx:...cXMMMMMMMMMMMM
//MMMMMMMMMWWWMWWNXXKKKXXNWMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWKx:..,oOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO,.,kWWMMMWMMMMMMMMMMMXc.,OWMMMMNk:..l0WWMWWMMMMMM
//MMMMMMMMMNKOdl:;,''''',;cox0NMWMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMN0o,.'lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWW0:.'oXMWMMMMMMMMMMMMMO,.:XMMMWMMMNx,.,dXWWMMMMMMM
//MMMMWMWXxc'.',coodxxxdol:'.':dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMNOc'.,dKWWMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXo..:ONWMMMMMMMMMMMMk'.xWMWWMMMWWWKl'.c0WMMMMMMM
//MWMMMXx;.'cx0NWWMMMMMMMMWXkl,.'oKWMMWWMMMMMMMMMMMMMMMMMMMNkc..:kXWMMMMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMNk;.'l0WMMWMMMMMMMMN00NWWWWWMMMWMMNk;.,xNMMMMMM
//MMWW0:.'cONWMMMMMMMMMMMMMWMWKo,.,kWWWMMMMMMMMMMMMMWWMMMW0c..:kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWXd,.,OWWWMMMMMMMMMMMMMMWWMMMMMMMMWKc..dNMMMMM
//MWWk,.,kNWWWMMMMMMMMMMMMMMMWWW0:.'dNMMMMMMMMMMMMMMMWWWKo'.;xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkkXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl..oXMMMM
//MWk,.:0WMMMMMMMMMMMMMMMMMMMWWWWKc.'xWWMMMMMMMMMMMMMWNk,.,oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo..lXMMM
//M0;.;OWMMMMMMMMMMMMMMMMMMMMMWWWWO;.:KMMMMMMMMMMMMMWKl..c0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNo..oXWM
//Xl.'xWMMMMMMMMMMMMMMMMMMMMMMMMMMWo..xWMMMMMMMMMMMWk;.'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xdodk0NMWMWWMMMMWXl..dNW
//k'.cXMMMMMMMMMMMMMMMMMMMMMMMMMMMMk'.lNMMMMMMMMMMXd'.:0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd;'.','.':kNWWWMWWMWMK:.,kW
//o.'kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMO,.lXMMMMMMMMMKl..lXWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl..cOXNXk:..dNWWMMMMMWWO,.:KM
//;.;KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO'.lXMMMMMMMWK:.'dNMMWNNNNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO,.:KMWWMM0,.:KWWWMMMMMMNl.'kM
//,.cXMMMMMMMMMMMWWWWMMMMMMMMMMMMMWd..dWMMMMMMW0:.,xNMMMWXXNXNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMMMMMK:.,kWMWMNd'.cXWWWMMMMMMWx',dM
//..oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc.'OMMMMMMM0:.'kWMWMMWNNWNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO;.'codo;..:0WWWMMMMMMMM0;.cM
//..dWMMMMMMMMMMMMMMMMMMMMMMMMMMMWx..oNWMMMMMK:.'xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxc;,',;lONMMMMMMMMMMMMK:.,M
//..dWMMMMMMMMMMMMMMMMMMMMMMMMMMMO;.;0MMMMMMXl.'dNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXXXNWMMMMMMMMMMMMMMNl.'M
//..dWMMMMMMMMMMMMMMMMMMMMMMMMWWK:.'kWMWMMMWd..lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..M
//'.lNMMMMMMMMMMMMMMMMMMMMMMMMMXl..dWMMMMMMO,.;KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..M
//,.:KMMMMMMMMMMMMMMMMMMMMMMMMWx'.cXMMMMMMXc.'kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..M
//:.,OMMMMMMMMMMMMMMMMMMMMMMMM0;.;0WMMMMMMk'.lXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx..M
//d..dWMMMMMMMMMMMMMMMMMMMMMMNo..dWMMMMWMNl.'kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..M
//O,.:KMMMMMMMMMMMMMMMMMMMMMM0,.:KMMMMWWW0;.:KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMWd..M
//Xl..xWMMMMMMMMMMMMMMMMMMMMWd..xWMMMMMWWk..lNMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMWo..M
//WO,.;KMMMMMMMMMMMMMMMMMMMMNc.,0WWMMMMMWd..dWMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:.,M
//MNo..lNMMMMMMMMMMMMMMMMMMMK:.:KMMMMMMMWo..xMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMWXl..oM
//WWXc.'xWWMMMMMMMMMMMMMMMMMK:.;KMMMMMMMNo.'kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd;..oXM
//MWW0:.'xWMMMMMMMMMMMMMMMMMNl.'xWMMMMMMNo..xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMWWWNXK0koc'.'lOWW
//MMMW0;.,xWMMMMMMMMMMMMMMMMMO,.;0WMMMMMWd..dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMN0dlcccccc::ccc::;,'..';lxKWMWM
//MMMMW0:.'dNMMMMMMMMWWWWWMMMWk,.,xXWWWWWk..lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWN0o;..,ccccccccccccllodkOKNWMMMMMM
//MMMMWWKc..lKWWMMWWWWWWWWMMMWW0c..;okKNWK:.;0WWMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNNNNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMWWWWXkc..;oONWMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMWWNd'.:kXWWWWWWMMMMMMMWWWN0d:'.';co;..oNMMMMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXXXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWKd;''ckNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMW
//MMMMMMMWW0c;,cONWWMMMMMMMMMMMMWMMWKkdl:;,'.'xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNWNNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWN0o,.'l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMWNOo;,:d0WMMMMMMMWMMWMMMMMMMMWNXO:.,xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWXkl'.,oKWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMWWWWNOl,.':dOXWMMMMMMWMMMMMMMMMMWWK:.'oXWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMWWWXko;..:dKWMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMWWWMWKkl,..,cldk0KNWWWMMMMMMMWMWWKl..;dKWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0kdc,...'oKNWWWMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMWMMWN0xo:,...',;:clllooollllc:,....,ckKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNX0kdoc,..':lxo;..,:clodkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMWX0Oxdolc::;;;;;;;::cclodddc'.':oxO0KXNNWWWMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWNNXK0Okxdlc:;,..';cldOKNWMWXkdolc:;..':oONMMMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNNNNNNWWWWWWMMMMNKko:'..'',,;;:clloooooddxxxkkkkkkOOOOOOOOOkkkkxxxdddooollc:;;,,'...',,.....:dOXNWMMMMMMMMMMMMWN0xo;.'oXMMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMMMMMMMMMMWX0Okxdool:'.........'',,,'..........'''.'....',,,;;::lllodxkkO0KXX0xoc,...,:coddxkOO0000000Oxdc'.,OMMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMWKkoc;,....,;cooodxkO00000000000d,.'oKXNNNWWMMMMMMMMMMMMWWMMWXKOxoc:;,''...........'',:lONMMMMMWWMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOxdlc;,'...',;:loodkOO0KKKx,.;0MMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXXK00OOOkkkOO0KXXWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXKOkxdollc;,''..''',,..cKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
//ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddooddddddooooolc:;;,'...';loddddddddddddddddddddddddddddodddddddddddddddddddddddddddddddddddddddddddddddddd
//
// Telegram: https://t.me/chinchilla_finance
//
// Website: chinchilla.finance
//
//
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
  function transferFrom(address from, address to, uint256 value) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }

  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }
}

contract ERC20Detailed is IERC20 {

  string private _name;
  string private _symbol;
  uint8 private _decimals;

  constructor(string memory name, string memory symbol, uint8 decimals) public {
    _name = name;
    _symbol = symbol;
    _decimals = decimals;
  }

  function name() public view returns(string memory) {
    return _name;
  }

  function symbol() public view returns(string memory) {
    return _symbol;
  }

  function decimals() public view returns(uint8) {
    return _decimals;
  }
}

contract Chinchilla is ERC20Detailed {

  using SafeMath for uint256;
  mapping (address => uint256) private _balances;
  mapping (address => mapping (address => uint256)) private _allowed;

  string constant tokenName = "Chinchilla.finance";
  string constant tokenSymbol = "CHIN";
  uint8  constant tokenDecimals = 18;
  uint256 _totalSupply = 1000000000000*10**18;
  uint256 public basePercent = 100;
  uint256 public _burnStopAmount;
  uint256 public _lastTokenSupply;
  
  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {

    _mint(msg.sender, _totalSupply);
    _burnStopAmount = 0;
    _lastTokenSupply = 100000000 * 10**18;
  }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address owner) public view returns (uint256) {
    return _balances[owner];
  }

  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowed[owner][spender];
  }

  function findOnePercent(uint256 value) public view returns (uint256)  {
    uint256 roundValue = value.ceil(basePercent);
    uint256 onePercent = roundValue.mul(basePercent).div(10000);
    return onePercent;
  }

  function transfer(address to, uint256 value) public returns (bool) {
    require(value <= _balances[msg.sender]);
    require(to != address(0));

    uint256 tokensToBurn = findOnePercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);

    _balances[msg.sender] = _balances[msg.sender].sub(value);
    _balances[to] = _balances[to].add(tokensToTransfer);

    _totalSupply = _totalSupply.sub(tokensToBurn);

    emit Transfer(msg.sender, to, tokensToTransfer);
    emit Transfer(msg.sender, address(0), tokensToBurn);
    return true;
  }

  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
    for (uint256 i = 0; i < receivers.length; i++) {
      transfer(receivers[i], amounts[i]);
    }
  }

  function approve(address spender, uint256 value) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = value;
    emit Approval(msg.sender, spender, value);
    return true;
  }

  function transferFrom(address from, address to, uint256 value) public returns (bool) {
    require(value <= _balances[from]);
    require(value <= _allowed[from][msg.sender]);
    require(to != address(0));

    _balances[from] = _balances[from].sub(value);

    uint256 tokensToBurn = findOnePercent(value);
    uint256 tokensToTransfer = value.sub(tokensToBurn);

    _balances[to] = _balances[to].add(tokensToTransfer);
    _totalSupply = _totalSupply.sub(tokensToBurn);

    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);

    emit Transfer(from, to, tokensToTransfer);
    emit Transfer(from, address(0), tokensToBurn);

    return true;
  }

  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    require(spender != address(0));
    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
    return true;
  }

  function _mint(address account, uint256 amount) internal {
    require(amount != 0);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }

  function burn(uint256 amount) external {
    _burn(msg.sender, amount);
  }
  function _burn(address account, uint256 amount) internal {
    require(amount != 0);
    require(amount <= _balances[account]);
    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = _balances[account].sub(amount);
    emit Transfer(account, address(0), amount);
  }

  function burnFrom(address account, uint256 amount) external {
    require(amount <= _allowed[account][msg.sender]);
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
    _burn(account, amount);
  }
}