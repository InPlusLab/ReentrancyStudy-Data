pragma solidity >=0.6.0 <0.8.0;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/GSN/Context.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract FirstPrinciples is Context, AccessControl, ERC721 {

    uint256 public constant MAX_SUPPLY = 1000;
    uint256 public constant PRICE = 10000000000000000;
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    address public constant recipient = 0xD2927a91570146218eD700566DF516d67C5ECFAB;



    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(string memory baseURI, address admin) public ERC721("First Principles", "FIRSTPRINCIPLES") {
        _setupRole(DEFAULT_ADMIN_ROLE, admin);
        _setupRole(MINTER_ROLE, admin);
        _setBaseURI(baseURI);
    }


    function setBaseURI(string memory newBaseURI) public {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()));
        _setBaseURI(newBaseURI);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to) public payable virtual {
        require(msg.value == PRICE || hasRole(MINTER_ROLE, _msgSender()));
        require(totalSupply() + 1 < MAX_SUPPLY);
        uint256 IDToMint = totalSupply();
        _mint(to, IDToMint);
        payable(recipient).transfer(msg.value);
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721) {
        super._beforeTokenTransfer(from, to, tokenId);
    }
}