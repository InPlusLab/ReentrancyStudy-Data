/**
 *Submitted for verification at Etherscan.io on 2021-07-19
*/

// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol

pragma solidity ^0.8.0;

interface LinkTokenInterface {

  function allowance(
    address owner,
    address spender
  )
    external
    view
    returns (
      uint256 remaining
    );

  function approve(
    address spender,
    uint256 value
  )
    external
    returns (
      bool success
    );

  function balanceOf(
    address owner
  )
    external
    view
    returns (
      uint256 balance
    );

  function decimals()
    external
    view
    returns (
      uint8 decimalPlaces
    );

  function decreaseApproval(
    address spender,
    uint256 addedValue
  )
    external
    returns (
      bool success
    );

  function increaseApproval(
    address spender,
    uint256 subtractedValue
  ) external;

  function name()
    external
    view
    returns (
      string memory tokenName
    );

  function symbol()
    external
    view
    returns (
      string memory tokenSymbol
    );

  function totalSupply()
    external
    view
    returns (
      uint256 totalTokensIssued
    );

  function transfer(
    address to,
    uint256 value
  )
    external
    returns (
      bool success
    );

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  )
    external
    returns (
      bool success
    );

  function transferFrom(
    address from,
    address to,
    uint256 value
  )
    external
    returns (
      bool success
    );

}

// File: @chainlink/contracts/src/v0.8/dev/VRFRequestIDBase.sol

pragma solidity ^0.8.0;

contract VRFRequestIDBase {

  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  )
    internal
    pure
    returns (
      uint256
    )
  {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(
    bytes32 _keyHash,
    uint256 _vRFInputSeed
  )
    internal
    pure
    returns (
      bytes32
    )
  {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// File: @chainlink/contracts/src/v0.8/dev/VRFConsumerBase.sol

pragma solidity ^0.8.0;



/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(
    bytes32 requestId,
    uint256 randomness
  )
    internal
    virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 constant private USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(
    bytes32 _keyHash,
    uint256 _fee
  )
    internal
    returns (
      bytes32 requestId
    )
  {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface immutable internal LINK;
  address immutable private vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(
    address _vrfCoordinator,
    address _link
  ) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(
    bytes32 requestId,
    uint256 randomness
  )
    external
  {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol


pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;

        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping (bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs
            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.

            bytes32 lastvalue = set._values[lastIndex];

            // Move the last value to the index where the value to delete is
            set._values[toDeleteIndex] = lastvalue;
            // Update the index for the moved value
            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }


    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   /**
    * @dev Returns the value stored at position `index` in the set. O(1).
    *
    * Note that there are no guarantees on the ordering of values inside the
    * array, and it may change when more values are added or removed.
    *
    * Requirements:
    *
    * - `index` must be strictly less than {length}.
    */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}

// File: contracts/OwnershipAgreementv3.sol

pragma solidity >=0.7.0 <0.9.0;


/// @title Creates an Ownership Agreement, with an optional Operator role
/// @author Dr. Jonathan Shahen at UREEQA
/// @notice TODO
/// @dev Maximum number of Owners is set to 255 (unit8.MAX_VALUE)
contract OwnershipAgreementv3 {
    /*
     * Storage
     */

    // ResolutionTypes:
    uint constant private resTypeNone = 0; // This indicates that the resolution hasn't been set (default value)
    uint constant private resTypeAddOwner = 1;
    uint constant private resTypeRemoveOwner = 2;
    uint constant private resTypeReplaceOwner = 3;
    uint constant private resTypeAddOperator = 4;
    uint constant private resTypeRemoveOperator = 5;
    uint constant private resTypeReplaceOperator = 6;
    uint constant private resTypeUpdateThreshold = 7;
    uint constant private resTypeUpdateTransactionLimit = 8;
    uint constant private resTypePause = 9;
    uint constant private resTypeUnpause = 10;
    uint constant private resTypeCustom = 1000; // Custom resoutions for each subclass

    struct Resolution {
        // Has the resolution already been passed
        bool passed;
        // The type of resolution
        uint256 resType;
        // The old address, can be address(0). oldAddress and newAddress cannot both equal address(0).
        address oldAddress;
        // The new address, can be address(0). oldAddress and newAddress cannot both equal address(0).
        address newAddress;
        // Able to store extra information for custom resolutions
        bytes32[] extra;
    }
    using EnumerableSet for EnumerableSet.AddressSet;
    // Set of owners
    // NOTE: we utilize a set, so we can enumerate the owners and so that the list only contains one instance of an account
    // NOTE: address(0) is not a valid owner
    EnumerableSet.AddressSet private _owners;
    // Value to indicate if the smart contract is paused
    bool private _paused;
    // An address, usually controlled by a computer, that performs regular/automated operations within the smart contract
    // NOTE: address(0) is not a valid operator
    EnumerableSet.AddressSet private _operators;
    // Limit the number of operators
    uint256 public operatorLimit = 1;
    // The number of owners it takes to come to an agreement
    uint256 public ownerAgreementThreshold = 1;
    // Limit per Transaction to impose
    // A limit of zero means no limit imposed
    uint256 public transactionLimit = 0;
    // Stores each vote for each resolution number (int)
    mapping(address => mapping(uint256 => bool)) public ownerVotes;
    // The next available resolution number
    uint256 public nextResolution = 1;
    mapping(address => uint256) lastOwnerResolutionNumber;
    // Stores the resolutions
    mapping(uint256 => Resolution) public resolutions;

    // ////////////////////////////////////////////////////
    // EVENTS
    // ////////////////////////////////////////////////////
    event OwnerAddition(address owner);
    event OwnerRemoval(address owner);
    event OwnerReplacement(address oldOwner, address newOwner);

    event OperatorAddition(address newOperator);
    event OperatorRemoval(address oldOperator);
    event OperatorReplacement(address oldOperator, address newOperator);

    event UpdateThreshold(uint256 newThreshold);
    event UpdateNumberOfOperators(uint256 newOperators);
    event UpdateTransactionLimit(uint256 newLimit);
    /// @dev Emitted when the pause is triggered by `account`.
    event Paused(address account);
    /// @dev Emitted when the pause is lifted by `account`.
    event Unpaused(address account);

    // ////////////////////////////////////////////////////
    // MODIFIERS
    // ////////////////////////////////////////////////////
    function isValidAddress(address newAddr) public pure {
        require(newAddr != address(0), "Invaild Address");
    }

    modifier onlyOperators() {
        isValidAddress(msg.sender);
        require(
            EnumerableSet.contains(_operators, msg.sender) == true,
            "Only the operator can run this function."
        );
        _;
    }
    modifier onlyOwners() {
        isValidAddress(msg.sender);
        require(
            EnumerableSet.contains(_owners, msg.sender) == true,
            "Only an owner can run this function."
        );
        _;
    }

    modifier onlyOwnersOrOperator() {
        isValidAddress(msg.sender);
        require(
            EnumerableSet.contains(_operators, msg.sender) == true ||
                EnumerableSet.contains(_owners, msg.sender) == true,
            "Only an owner or the operator can run this function."
        );
        _;
    }

    modifier ownerExists(address thisOwner) {
        require(
            EnumerableSet.contains(_owners, thisOwner) == true,
            "Owner does not exists."
        );
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     * Requirements: The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!_paused, "Smart Contract is paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     * Requirements: The contract must be paused.
     */
    modifier whenPaused() {
        require(_paused, "Smart Contract is not paused");
        _;
    }

    /// @dev Modifier to make a function callable only when the amount is within the transaction limit
    modifier withinLimit(uint256 amount) {
        require(
            transactionLimit == 0 || amount <= transactionLimit,
            "Amount is over the transaction limit"
        );
        _;
    }

    // ////////////////////////////////////////////////////
    // CONSTRUCTOR
    // ////////////////////////////////////////////////////
    constructor() {
        _addOwner(msg.sender);
        _paused = false;
    }

    // ////////////////////////////////////////////////////
    // VIEW FUNCTIONS
    // ////////////////////////////////////////////////////

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        if(EnumerableSet.length(_owners) == 0) return address(0);
        return EnumerableSet.at(_owners, 0);
    }

    /// @dev Returns list of owners.
    /// @return List of owner addresses.
    function getOwners() public view returns (address[] memory) {
        uint256 len = EnumerableSet.length(_owners);
        address[] memory o = new address[](len);

        for (uint256 i = 0; i < len; i++) {
            o[i] = EnumerableSet.at(_owners, i);
        }

        return o;
    }

    /// @dev Returns the number of owners.
    /// @return Number of owners.
    function getNumberOfOwners() public view returns (uint) {
        return EnumerableSet.length(_owners);
    }

    /// @dev Returns list of owners.
    /// @return List of owner addresses.
    function getOperators() public view returns (address[] memory) {
        uint256 len = EnumerableSet.length(_operators);
        address[] memory o = new address[](len);

        for (uint256 i = 0; i < len; i++) {
            o[i] = EnumerableSet.at(_operators, i);
        }

        return o;
    }

    /// @dev Returns the number of operators.
    /// @return Number of operators.
    function getNumberOfOperators() public view returns (uint8) {
        return uint8(EnumerableSet.length(_operators));
    }

    /// @dev How many owners does it take to approve a resolution
    /// @return minimum number of owner votes
    function getVoteThreshold() public view returns (uint256) {
        return ownerAgreementThreshold;
    }

    /// @dev Returns the maximum amount a transaction can contain
    /// @return maximum amount or zero is no limit
    function getTransactionLimit() public view returns (uint256) {
        return transactionLimit;
    }

    /// @dev Returns the next available resolution.
    /// @return The next available resolution number
    function getNextResolutionNumber() public view returns (uint256) {
        return nextResolution;
    }

    /// @dev Returns the next available resolution.
    /// @return The next available resolution number
    function getLastOwnerResolutionNumber(address thisOwner)
        public
        view
        returns (uint256)
    {
        return lastOwnerResolutionNumber[thisOwner];
    }

    /// @dev Returns true if the contract is paused, and false otherwise.
    function paused() public view returns (bool) {
        return _paused;
    }

    /// @dev Helper function to fail if resolution number is already in use.
    function resolutionAlreadyUsed(uint256 resNum) public view {
        require(
            // atleast one of the address must not be equal to address(0)
            !(resolutions[resNum].oldAddress != address(0) ||
                resolutions[resNum].newAddress != address(0)),
            "Resolution is already in use."
        );
    }

    function isResolutionPassed(uint256 resNum) public view returns (bool) {
        return resolutions[resNum].passed;
    }

    function canResolutionPass(uint256 resNum) public view returns (bool) {
        uint256 voteCount = 0;
        uint256 len = EnumerableSet.length(_owners);

        for (uint256 i = 0; i < len; i++) {
            if (ownerVotes[EnumerableSet.at(_owners, i)][resNum] == true) {
                voteCount++;
            }
        }

        return voteCount >= ownerAgreementThreshold;
    }

    // ////////////////////////////////////////////////////
    // PUBLIC FUNCTIONS
    // ////////////////////////////////////////////////////

    /// @notice Vote Yes on a Resolution.
    /// @dev The owner who tips the agreement threshold will pay the gas for performing the resolution.
    /// @return TRUE if the resolution passed
    function voteResolution(uint256 resNum) public onlyOwners() returns (bool) {
        ownerVotes[msg.sender][resNum] = true;

        // If the reolution has already passed, then do nothing
        if (isResolutionPassed(resNum)) {
            return true;
        }

        // If the resolution can now be passed, then do so
        if (canResolutionPass(resNum)) {
            _performResolution(resNum);
            return true;
        }

        // The resolution cannot be passed yet
        return false;
    }

    /// @dev Create a resolution to add an owner. Performs addition if threshold is 1 or zero.
    function createResolutionAddOwner(address newOwner) public onlyOwners() {
        isValidAddress(newOwner);
        require(
            !EnumerableSet.contains(_owners, newOwner),
            "newOwner already exists."
        );

        createResolution(resTypeAddOwner, address(0), newOwner, new bytes32[](0));
    }

    /// @dev Create a resolution to remove an owner. Performs removal if threshold is 1 or zero.
    /// @dev Updates the threshold to keep it less than or equal to the number of new owners
    function createResolutionRemoveOwner(address oldOwner) public onlyOwners() {
        isValidAddress(oldOwner);
        require(getNumberOfOwners() > 1, "Must always be one owner");
        require(
            EnumerableSet.contains(_owners, oldOwner),
            "owner is not an owner."
        );

        createResolution(resTypeRemoveOwner, oldOwner, address(0), new bytes32[](0));
    }

    /// @dev Create a resolution to repalce an owner. Performs replacement if threshold is 1 or zero.
    function createResolutionReplaceOwner(address oldOwner, address newOwner)
        public
        onlyOwners()
    {
        isValidAddress(oldOwner);
        isValidAddress(newOwner);
        require(
            EnumerableSet.contains(_owners, oldOwner),
            "oldOwner is not an owner."
        );
        require(
            !EnumerableSet.contains(_owners, newOwner),
            "newOwner already exists."
        );

        createResolution(resTypeReplaceOwner, oldOwner, newOwner, new bytes32[](0));
    }

    /// @dev Create a resolution to add an operator. Performs addition if threshold is 1 or zero.
    function createResolutionAddOperator(address newOperator)
        public
        onlyOwners()
    {
        isValidAddress(newOperator);
        require(
            !EnumerableSet.contains(_operators, newOperator),
            "newOperator already exists."
        );

        createResolution(resTypeAddOperator, address(0), newOperator, new bytes32[](0));
    }

    /// @dev Create a resolution to remove the operator. Performs removal if threshold is 1 or zero.
    function createResolutionRemoveOperator(address operator)
        public
        onlyOwners()
    {
        require(
            EnumerableSet.contains(_operators, operator),
            "operator is not an Operator."
        );
        createResolution(resTypeRemoveOperator, operator, address(0), new bytes32[](0));
    }

    /// @dev Create a resolution to replace the operator account. Performs replacement if threshold is 1 or zero.
    function createResolutionReplaceOperator(
        address oldOperator,
        address newOperator
    ) public onlyOwners() {
        isValidAddress(oldOperator);
        isValidAddress(newOperator);
        require(
            EnumerableSet.contains(_operators, oldOperator),
            "oldOperator is not an Operator."
        );
        require(
            !EnumerableSet.contains(_operators, newOperator),
            "newOperator already exists."
        );

        createResolution(resTypeReplaceOperator, oldOperator, newOperator,new bytes32[](0));
    }

    /// @dev Create a resolution to update the transaction limit. Performs update if threshold is 1 or zero.
    function createResolutionUpdateTransactionLimit(uint160 newLimit)
        public
        onlyOwners()
    {
        createResolution(
            resTypeUpdateTransactionLimit,
            address(0),
            address(newLimit),
            new bytes32[](0)
        );
    }

    /// @dev Create a resolution to update the owner agreement threshold. Performs update if threshold is 1 or zero.
    function createResolutionUpdateThreshold(uint160 threshold)
        public
        onlyOwners()
    {
        createResolution(
            resTypeUpdateThreshold,
            address(0),
            address(threshold),
            new bytes32[](0)
        );
    }

    /// @dev Pause the contract. Does not require owner agreement.
    function pause() public onlyOwners() {
        _pause();
    }

    /// @dev Create a resolution to unpause the contract. Performs update if threshold is 1 or zero.
    function createResolutionUnpause() public onlyOwners() {
        createResolution(resTypeUnpause, address(1), address(1), new bytes32[](0));
    }

    // ////////////////////////////////////////////////////
    // INTERNAL FUNCTIONS
    // ////////////////////////////////////////////////////
    /// @dev Create a resolution and check if we can call perofrm the resolution with 1 vote.
    function createResolution(
        uint256 resType,
        address oldAddress,
        address newAddress,
        bytes32[] memory extra
    ) internal {
        uint256 resNum = nextResolution;
        nextResolution++;
        resolutionAlreadyUsed(resNum);

        resolutions[resNum].resType = resType;
        resolutions[resNum].oldAddress = oldAddress;
        resolutions[resNum].newAddress = newAddress;
        resolutions[resNum].extra = extra;

        ownerVotes[msg.sender][resNum] = true;
        lastOwnerResolutionNumber[msg.sender] = resNum;

        // Check if agreement is already reached
        if (ownerAgreementThreshold <= 1) {
            _performResolution(resNum);
        }
    }

    /// @dev Performs the resolution and then marks it as passed. No checks prevent it from performing the resolutions.
    function _performResolution(uint256 resNum) internal {
        if (resolutions[resNum].resType == resTypeAddOwner) {
            _addOwner(resolutions[resNum].newAddress);
        } else if (resolutions[resNum].resType == resTypeRemoveOwner) {
            _removeOwner(resolutions[resNum].oldAddress);
        } else if (resolutions[resNum].resType == resTypeReplaceOwner) {
            _replaceOwner(
                resolutions[resNum].oldAddress,
                resolutions[resNum].newAddress
            );
        } else if (resolutions[resNum].resType == resTypeAddOperator) {
            _addOperator(resolutions[resNum].newAddress);
        } else if (resolutions[resNum].resType == resTypeRemoveOperator) {
            _removeOperator(resolutions[resNum].oldAddress);
        } else if (resolutions[resNum].resType == resTypeReplaceOperator) {
            _replaceOperator(
                resolutions[resNum].oldAddress,
                resolutions[resNum].newAddress
            );
        } else if (
            resolutions[resNum].resType == resTypeUpdateTransactionLimit
        ) {
            _updateTransactionLimit(uint160(resolutions[resNum].newAddress));
        } else if (resolutions[resNum].resType == resTypeUpdateThreshold) {
            _updateThreshold(uint160(resolutions[resNum].newAddress));
        } else if (resolutions[resNum].resType == resTypePause) {
            _pause();
        } else if (resolutions[resNum].resType == resTypeUnpause) {
            _unpause();
        } else {
            _customResolutions(resNum);
            return;
        }

        resolutions[resNum].passed = true;
    }

    /**
     * @dev Able to handle Custom Resolutions.
     * 
     * Requirements:
     * 
     * - Must set the resolution passed: resolutions[resNum].passed = true;
     * - You should check the resolutions[resNum].resType to know what to perform
     */
    function _customResolutions(uint256 resNum) internal virtual {}

    /// @dev
    function _addOwner(address newOwner) internal {
        EnumerableSet.add(_owners, newOwner);
        emit OwnerAddition(newOwner);
    }

    /// @dev
    function _removeOwner(address newOwner) internal {
        EnumerableSet.remove(_owners, newOwner);
        emit OwnerRemoval(newOwner);

        uint numOwners = getNumberOfOwners();
        if (ownerAgreementThreshold > numOwners) {
            _updateThreshold(numOwners);
        }
    }

    /// @dev
    function _replaceOwner(address oldOwner, address newOwner) internal {
        EnumerableSet.remove(_owners, oldOwner);
        EnumerableSet.add(_owners, newOwner);
        emit OwnerReplacement(oldOwner, newOwner);
    }

    /// @dev
    function _addOperator(address operator) internal {
        EnumerableSet.add(_operators, operator);
        emit OperatorAddition(operator);
    }

    /// @dev
    function _removeOperator(address operator) internal {
        EnumerableSet.remove(_operators, operator);
        emit OperatorRemoval(operator);
    }

    /// @dev
    function _replaceOperator(address oldOperator, address newOperator)
        internal
    {
        emit OperatorReplacement(oldOperator, newOperator);
        EnumerableSet.remove(_operators, oldOperator);
        EnumerableSet.add(_operators, newOperator);
    }

    /// @dev Internal function to update and emit the new transaction limit
    function _updateTransactionLimit(uint256 newLimit) internal {
        emit UpdateTransactionLimit(newLimit);
        transactionLimit = newLimit;
    }

    /// @dev Internal function to update and emit the new voting threshold
    function _updateThreshold(uint threshold) internal {
        require(
            threshold <= getNumberOfOwners(),
            "Unable to set threshold above the number of owners"
        );
        emit UpdateThreshold(threshold);
        ownerAgreementThreshold = threshold;
    }

    /// @dev Internal function to update and emit the new voting threshold
    function _updateNumberOfOperators(uint160 numOperators) internal {
        require(
            numOperators >= getNumberOfOperators(),
            "Unable to set number of Operators below the number of operators"
        );
        emit UpdateNumberOfOperators(numOperators);
        operatorLimit = numOperators;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements: The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(msg.sender);
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements: The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(msg.sender);
    }
}

// File: contracts/UreeqaRandomNumberv1.sol

pragma solidity >=0.7.0 <0.9.0;



/// @title Random Numbers by UREEQA.
/// @author Dr. Jonathan Shahen at UREEQA
/// @notice Random number generatation for UREEQA that utilizes ChainLink
/// @dev Utilize the block number if you require to check state of other smart contracts
contract UreeqaRandomNumberv1 is OwnershipAgreementv3, VRFConsumerBase {
    // ////////////////////////////////////////////////////
    // STORAGE
    // ////////////////////////////////////////////////////
    struct RandomNumber {
        uint256 id;
        bytes32 fileHash;
        bytes32 requestId;
        uint256 blockTime;
        uint256 blockNumber;
        uint256 randomNumber;
    }

    // ChainLink settings
    bytes32 keyHash;
    // How much LINK it costs for a random number
    uint256 fee;

    // Store all the staked content. ID => RandomNumber
    mapping(uint256 => RandomNumber) randomNumbers;
    // Store all the staked content. ID => RandomNumber
    mapping(bytes32 => uint256) requestIdToId;
    // Last ID Used
    uint256 lastId;
    // Number of Random Numbers
    uint256 numberOfRandomNumbers;
    // Reference filehash to id
    mapping(bytes32 => uint256) hashToId;

    // ////////////////////////////////////////////////////
    // CONSTRUCTOR
    // ////////////////////////////////////////////////////
    constructor(
        address vrfCoordinator,
        address linkToken,
        bytes32 _keyHash,
        uint256 _fee,
        address operator
    ) VRFConsumerBase(vrfCoordinator, linkToken) {
        keyHash = _keyHash;
        fee = _fee;
        if (operator != address(0)) {
            createResolutionAddOperator(operator);
        }
    }

    // ////////////////////////////////////////////////////
    // EVENTS
    // ////////////////////////////////////////////////////
    event NewRandomNumber(uint256 id, bytes32 fileHash);

    event RandomNumberGenerated(
        uint256 id,
        bytes32 fileHash,
        uint256 blockNumber,
        uint256 randomNumber
    );

    event FileHashChanged(
        uint256 id,
        bytes32 old_fileHash,
        bytes32 new_fileHash
    );

    // ////////////////////////////////////////////////////
    // MODIFIERS
    // ////////////////////////////////////////////////////

    modifier nonZeroId(uint256 id) {
        require(id != 0, "Content Staking ID cannot be 0.");
        _;
    }
    modifier nonZeroFileHash(bytes32 fileHash) {
        require(fileHash != 0, "File hash cannot be 0.");
        _;
    }
    modifier idMustExists(uint256 id) {
        require(randomNumbers[id].id != 0, "ID does not exists");
        _;
    }
    modifier idMustBeUnique(uint256 id) {
        require(randomNumbers[id].id == 0, "ID must be unique");
        _;
    }
    modifier hashMustBeUnique(bytes32 fileHash) {
        require(hashToId[fileHash] == 0, "File Hash must be unique");
        _;
    }

    // ////////////////////////////////////////////////////
    // VIEW FUNCTIONS
    // ////////////////////////////////////////////////////

    /// @dev Returns the last id that was created
    function getLastId() public view returns (uint256) {
        return lastId;
    }

    /// @dev Get the ID from a filehash
    function getId(bytes32 fileHash)
        public
        view
        nonZeroFileHash(fileHash)
        returns (uint256)
    {
        return hashToId[fileHash];
    }

    /// @dev Get the ID from a filehash
    function getFileHash(uint256 id)
        public
        view
        nonZeroId(id)
        idMustExists(id)
        returns (bytes32)
    {
        return randomNumbers[id].fileHash;
    }

    /// @dev Get the Block Time when the random number was generated
    function getBlockTime(uint256 id)
        public
        view
        nonZeroId(id)
        idMustExists(id)
        returns (uint256)
    {
        return randomNumbers[id].blockTime;
    }

    /// @dev Get the Block Number when the random number was generated
    function getBlockNumber(uint256 id)
        public
        view
        nonZeroId(id)
        idMustExists(id)
        returns (uint256)
    {
        return randomNumbers[id].blockNumber;
    }

    /// @dev Return the generated random number. Zero represents a non-generated number.
    function getRandomNumber(uint256 id)
        public
        view
        nonZeroId(id)
        idMustExists(id)
        returns (uint256)
    {
        return randomNumbers[id].randomNumber;
    }

    // ////////////////////////////////////////////////////
    // PUBLIC/OPERATOR FUNCTIONS
    // ////////////////////////////////////////////////////

    /// @dev Creates a new random number
    function newRandomNumber(uint256 id, bytes32 fileHash)
        public
        onlyOperators()
        nonZeroId(id)
        idMustBeUnique(id)
        nonZeroFileHash(fileHash)
        hashMustBeUnique(fileHash)
    {
        randomNumbers[id].id = id;
        randomNumbers[id].fileHash = fileHash;

        emit NewRandomNumber(id, fileHash);

        hashToId[fileHash] = id;
        lastId = id;
        numberOfRandomNumbers += 1;
    }

    /// @dev Bulk creation to reduce gas fees.
    function bulkRandomNumbers(
        uint256[] memory ids,
        bytes32[] memory fileHashes
    ) public onlyOperators() {
        require(
            ids.length == fileHashes.length,
            "Arrays must be the same length"
        );

        for (uint256 i = 0; i < ids.length; i++) {
            newRandomNumber(ids[i], fileHashes[i]);
        }
    }

    /// @dev Generate the random number
    function generateRandomNumber(uint256 id)
        public
        onlyOperators()
        nonZeroId(id)
        idMustExists(id)
    {
        require(
            randomNumbers[id].requestId == 0,
            "Request already exists for this ID."
        );
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK");
        bytes32 requestId = requestRandomness(keyHash, fee);
        randomNumbers[id].requestId = requestId;
        requestIdToId[requestId] = id;
    }

    /// @dev Generate the random numbers
    function bulkGenerateRandomNumbers(uint256[] memory ids)
        public
        onlyOperators()
    {
        require(
            LINK.balanceOf(address(this)) >= fee * ids.length,
            "Not enough LINK"
        );

        for (uint256 i = 0; i < ids.length; i++) {
            require(ids[i] != 0, "ID cannot be 0");
            require(randomNumbers[ids[i]].fileHash != 0, "ID does not exists");
            require(
                randomNumbers[ids[i]].requestId == 0,
                "Request already exists for this ID."
            );

            bytes32 requestId = requestRandomness(keyHash, fee);
            randomNumbers[ids[i]].requestId = requestId;
            requestIdToId[requestId] = ids[i];
        }
    }

    // ////////////////////////////////////////////////////
    // OWNER FUNCTIONS
    // ////////////////////////////////////////////////////

    /// @dev Update a file hash, resets the old file hash.
    function updateFileHash(uint256 id, bytes32 newFileHash)
        public
        onlyOwners()
        nonZeroId(id)
        idMustExists(id)
    {
        bytes32 oldFileHash = randomNumbers[id].fileHash;

        emit FileHashChanged(id, oldFileHash, newFileHash);

        randomNumbers[id].fileHash = newFileHash;
        hashToId[oldFileHash] = 0;
        hashToId[newFileHash] = id;
    }

    /// @dev transfer LINK tokens from this contract to another address
    function transferLINK(address sendTo, uint256 amount) public onlyOwners() {
        LINK.transfer(sendTo, amount);
    }

    /// @dev updates the CHAINLINK fee
    function updateLINKFee(uint256 new_fee) public onlyOwners() {
        fee = new_fee;
    }

    // ////////////////////////////////////////////////////
    // CHAINLINK FUNCTIONS
    // ////////////////////////////////////////////////////

    /**
     * Callback function used by VRF Coordinator
     */
    function fulfillRandomness(bytes32 requestId, uint256 randomness)
        internal
        override
    {
        require(requestIdToId[requestId] != 0, "Unknown request ID");
        require(randomNumbers[requestIdToId[requestId]].randomNumber == 0, "Request ID already fulfilled");
        
        randomNumbers[requestIdToId[requestId]].randomNumber = randomness;
        randomNumbers[requestIdToId[requestId]].blockTime = block.timestamp;
        randomNumbers[requestIdToId[requestId]].blockNumber = block.number;

        emit RandomNumberGenerated(
            requestIdToId[requestId],
            randomNumbers[requestIdToId[requestId]].fileHash,
            randomNumbers[requestIdToId[requestId]].blockNumber,
            randomNumbers[requestIdToId[requestId]].randomNumber
        );
    }

    // ////////////////////////////////////////////////////
    // INTERNAL FUNCTIONS
    // ////////////////////////////////////////////////////
}