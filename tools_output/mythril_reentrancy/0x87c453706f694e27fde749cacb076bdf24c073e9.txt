==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: URUNCrowdsale
Function name: constructor
PC address: 247
Estimated Gas Usage: 32003 - 155529
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d0e0f8bdfa9942d31234cd6b8fa9ec31.sol:137

tTime);
   
    owner = _

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: URUNCrowdsale
Function name: fallback
PC address: 1179
Estimated Gas Usage: 1910 - 2335
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d0e0f8bdfa9942d31234cd6b8fa9ec31.sol:191

 // calculate token amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 800efbfefdb00231e4309cbdce04200234c06e00000000000001c00c0027208100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: URUNCrowdsale
Function name: manualTokenTransfer(address,uint256)
PC address: 3000
Estimated Gas Usage: 9730 - 65142
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d0e0f8bdfa9942d31234cd6b8fa9ec31.sol:300
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9b00f5fffda00000000000000000000010000000000008611000c082271b4280000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: manualTokenTransfer(address,uint256), txdata: 0x7c359dc3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: URUNCrowdsale
Function name: manualTokenTransfer(address,uint256)
PC address: 3064
Estimated Gas Usage: 9730 - 65142
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d0e0f8bdfa9942d31234cd6b8fa9ec31.sol:300
Initial State:

Account: [CREATOR], balance: 0x802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f6b805fb7edf1000004e109e00638dc83ef0a1c800000000000042887fd7a080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: manualTokenTransfer(address,uint256), txdata: 0x7c359dc3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: URUNCrowdsale
Function name: manualTokenTransfer(address,uint256)
PC address: 3083
Estimated Gas Usage: 9730 - 65142
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d0e0f8bdfa9942d31234cd6b8fa9ec31.sol:300
Initial State:

Account: [CREATOR], balance: 0x802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f6b805fb7edf1000004e109e00638dc83ef0a1c800000000000042887fd7a080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: manualTokenTransfer(address,uint256), txdata: 0x7c359dc3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: URUNCrowdsale
Function name: fallback
PC address: 3779
Estimated Gas Usage: 1825 - 2250
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d0e0f8bdfa9942d31234cd6b8fa9ec31.sol:218

t returns (bool) {
    return now 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000100000200000d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80000000000000001fffffffffffffffff80000000000000000000000013210000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: URUNCrowdsale
Function name: fallback
PC address: 3803
Estimated Gas Usage: 1869 - 2294
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d0e0f8bdfa9942d31234cd6b8fa9ec31.sol:223

timestamp of the ico
    * can 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 013fd6fffffffffffffffffde00000000000000000000000000000000013808100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: URUNCrowdsale
Function name: fallback
PC address: 3872
Estimated Gas Usage: 3798 - 4223
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d0e0f8bdfa9942d31234cd6b8fa9ec31.sol:277

er time periods
            
        return true;
     }
     
     /**
      * function through which owner can take back the tokens from the contract
      **/ 
     function takeTokensBack() public onlyOwner
     {
         uint remaini

--------------------
Initial State:

Account: [CREATOR], balance: 0x4002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: effffffffffffffffffffffffffffffffffffffffffffffffffffffffff7218000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: URUNCrowdsale
Function name: fallback
PC address: 4449
Estimated Gas Usage: 3619 - 4044
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d0e0f8bdfa9942d31234cd6b8fa9ec31.sol:27

n a - b;
  }



--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: effffffffffffffffffffffffffffffffffffffffffffffffffffffffff7218000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1