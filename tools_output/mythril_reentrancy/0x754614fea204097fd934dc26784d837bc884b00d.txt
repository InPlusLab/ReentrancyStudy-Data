==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Erc20TokenMarket
Function name: disToken(address)
PC address: 2187
Estimated Gas Usage: 18698 - 164553
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:307

           token.tran

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disToken(address), txdata: 0x27af1d98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Erc20TokenMarket
Function name: disToken(address)
PC address: 2420
Estimated Gas Usage: 18698 - 164553
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:313
Initial State:

Account: [CREATOR], balance: 0x1000000000000011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disToken(address), txdata: 0x27af1d98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Erc20TokenMarket
Function name: disToken(address)
PC address: 2420
Estimated Gas Usage: 18698 - 164553
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:313
Initial State:

Account: [CREATOR], balance: 0x400800027f6102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: disToken(address), txdata: 0x27af1d98, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: disToken(address)
PC address: 2491
Estimated Gas Usage: 18698 - 164553
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:313
Initial State:

Account: [CREATOR], balance: 0x2000000000400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: disToken(address), txdata: 0x27af1d98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Erc20TokenMarket
Function name: disToken(address)
PC address: 2668
Estimated Gas Usage: 18698 - 164553
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:313
Initial State:

Account: [CREATOR], balance: 0x1000000000000011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disToken(address), txdata: 0x27af1d98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: disToken(address)
PC address: 2668
Estimated Gas Usage: 18698 - 164553
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:313
Initial State:

Account: [CREATOR], balance: 0x2000000000400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: disToken(address), txdata: 0x27af1d98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: disToken(address)
PC address: 2704
Estimated Gas Usage: 18698 - 164553
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:313
Initial State:

Account: [CREATOR], balance: 0x2000000000400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: disToken(address), txdata: 0x27af1d98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: disToken(address)
PC address: 2718
Estimated Gas Usage: 18698 - 164553
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:313
Initial State:

Account: [CREATOR], balance: 0x2000000000400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: disToken(address), txdata: 0x27af1d98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Erc20TokenMarket
Function name: setSellingToken(address,uint256,uint256)
PC address: 2829
Estimated Gas Usage: 429 - 524
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:158

金，

        Erc20To

--------------------
Initial State:

Account: [CREATOR], balance: 0x200001cc0058b7bd4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setSellingToken(address,uint256,uint256), txdata: 0x558b5aab000000000000000000000000000000000000010000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Erc20TokenMarket
Function name: setSellingToken(address,uint256,uint256)
PC address: 3099
Estimated Gas Usage: 28028 - 145536
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:164

        //if (sa < _sellingAmoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1090401008802033, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setSellingToken(address,uint256,uint256), txdata: 0x558b5aab000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010104010001000001014002000000000000000000000000000000200001400402, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: setSellingToken(address,uint256,uint256)
PC address: 3256
Estimated Gas Usage: 28028 - 145536
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:174

der, _sellingAmount, _price, _

--------------------
Initial State:

Account: [CREATOR], balance: 0x218020289962a033, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSellingToken(address,uint256,uint256), txdata: 0x558b5aab000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef040040010801020002000101000000000000000000000000000000028080808002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: setSellingToken(address,uint256,uint256)
PC address: 3265
Estimated Gas Usage: 28028 - 145536
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:174

t.cancel);
    } 

--------------------
Initial State:

Account: [CREATOR], balance: 0x218020289962a033, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSellingToken(address,uint256,uint256), txdata: 0x558b5aab000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef040040010801020002000101000000000000000000000000000000028080808002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: setSellingToken(address,uint256,uint256)
PC address: 3274
Estimated Gas Usage: 28028 - 145536
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:177

ction cancelSellingToke

--------------------
Initial State:

Account: [CREATOR], balance: 0x218020289962a033, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSellingToken(address,uint256,uint256), txdata: 0x558b5aab000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef040040010801020002000101000000000000000000000000000000028080808002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: setSellingToken(address,uint256,uint256)
PC address: 3289
Estimated Gas Usage: 28028 - 145536
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:177

tokenAddress)  pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x218020289962a033, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSellingToken(address,uint256,uint256), txdata: 0x558b5aab000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef040040010801020002000101000000000000000000000000000000028080808002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: setSellingToken(address,uint256,uint256)
PC address: 3303
Estimated Gas Usage: 28028 - 145536
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:177

tokenAddress)  pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x218020289962a033, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSellingToken(address,uint256,uint256), txdata: 0x558b5aab000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef040040010801020002000101000000000000000000000000000000028080808002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: setSellingToken(address,uint256,uint256)
PC address: 3372
Estimated Gas Usage: 28028 - 145536
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:178


        

--------------------
Initial State:

Account: [CREATOR], balance: 0x218020289962a033, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSellingToken(address,uint256,uint256), txdata: 0x558b5aab000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef040040010801020002000101000000000000000000000000000000028080808002, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Erc20TokenMarket
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 4004
Estimated Gas Usage: 795 - 3477
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:132

也要写一个智能合约来攻击！
        require(

--------------------
Initial State:

Account: [CREATOR], balance: 0x30141b0881, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Erc20TokenMarket
Function name: cancelSellingToken(address)
PC address: 5203
Estimated Gas Usage: 17706 - 94413
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:188

t, st.price, st.lineTime, st.can

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000004d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cancelSellingToken(address), txdata: 0xe01cd37a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: cancelSellingToken(address)
PC address: 5234
Estimated Gas Usage: 17706 - 94413
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:191

ianBuyerEtherAmount, address 

--------------------
Initial State:

Account: [CREATOR], balance: 0x103, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cancelSellingToken(address), txdata: 0xe01cd37a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: cancelSellingToken(address)
PC address: 5240
Estimated Gas Usage: 17706 - 94413
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:191

ount, ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x103, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cancelSellingToken(address), txdata: 0xe01cd37a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: cancelSellingToken(address)
PC address: 5303
Estimated Gas Usage: 17706 - 94413
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:191

256 indexed

--------------------
Initial State:

Account: [CREATOR], balance: 0x103, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cancelSellingToken(address), txdata: 0xe01cd37a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Erc20TokenMarket
Function name: cancelSellingToken(address)
PC address: 5311
Estimated Gas Usage: 17706 - 94413
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:191

tokenPric

--------------------
Initial State:

Account: [CREATOR], balance: 0x103, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cancelSellingToken(address), txdata: 0xe01cd37a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Erc20TokenMarket
Function name: setSellerGuarantee(bool,uint256)
PC address: 9808
Estimated Gas Usage: 13231 - 53986
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:94

Ether < 0.1 ethe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setSellerGuarantee(bool,uint256), txdata: 0xf7a06a88, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Erc20TokenMarket
Function name: setSellerGuarantee(bool,uint256)
PC address: 9815
Estimated Gas Usage: 2297 - 2722
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/edaea311374c0b1ec80bcf5cdfa9cdb9.sol:94

_gurateeEther < 0.1 ether);     //

--------------------
Initial State:

Account: [CREATOR], balance: 0xc2800002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setSellerGuarantee(bool,uint256), txdata: 0xf7a06a88, value: 0x0