==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getTokenCount(bytes32,string)
PC address: 395
Estimated Gas Usage: 3299 - 43270
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:198

));
    }

    function getTokenByIndex(bytes32 _platform, string _platformId, uint _index) view external returns (address token) {
        return db.getAddress(keccak256(abi.encodePacked("claims.token.addre

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0400000000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: getTokenCount(bytes32,string), txdata: 0x5afb540c010101010101010101010101010101010101010101010f010101010101010000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getSolverAddress(bytes32,string)
PC address: 523
Estimated Gas Usage: 3421 - 46307
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:190

ess", _platform, _platformId)));
    }

    function getSolver(bytes32 _platform, string _platformId) view external returns (string){
        return db.getString(keccak256(abi.encodePacked("claims.solver", _platform, _platformId

--------------------
Initial State:

Account: [CREATOR], balance: 0x20d0000000040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, value: 0x0
Caller: [CREATOR], function: getSolverAddress(bytes32,string), txdata: 0x99f3379f0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: isClaimed(bytes32,string)
PC address: 594
Estimated Gas Usage: 3490 - 46376
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:186

orm, _platformId))) != address(0);
    }

    function getSolverAddress(bytes32 _platform, string _platformId) view external returns (address solverAddress) {
        return db.getAddress(keccak256(abi.encodePacked("claims.sol

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000002001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: isClaimed(bytes32,string), txdata: 0xbeab35370000000000001000800140400140048001008000100402808000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getTokenByIndex(bytes32,string,uint256)
PC address: 630
Estimated Gas Usage: 3493 - 43889
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:202

atform, _platformId, _index)));
    }

    function getAmountByToken(bytes32 _platform, string _platformId, address _token) view external returns (uint token) {
        return db.getUint(keccak256(abi.encodePacked("claims.token.amount", _p

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getTokenByIndex(bytes32,string,uint256), txdata: 0xc61132050000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getTokenCount(bytes32,string)
PC address: 1476
Estimated Gas Usage: 3299 - 43270
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: getTokenCount(bytes32,string), txdata: 0x5afb540c000000000000000000000000000000000000000000000000000000000000000f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getSolverAddress(bytes32,string)
PC address: 1476
Estimated Gas Usage: 3421 - 46307
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000400a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getSolverAddress(bytes32,string), txdata: 0x99f3379f000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ClaimRepository
Function name: getTokenCount(bytes32,string)
PC address: 1589
Estimated Gas Usage: 3299 - 43270
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:201

address token) {
        return db.getAddress(keccak256(abi.encodePacked("claims.tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x181080000003f22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getTokenCount(bytes32,string), txdata: 0x5afb540c000000000000000000000000000000000000000000000000000000000000000f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ClaimRepository
Function name: getSolverAddress(bytes32,string)
PC address: 1589
Estimated Gas Usage: 3421 - 46307
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:201

address token) {
        return db.getAddress(keccak256(abi.encodePacked("claims.tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getSolverAddress(bytes32,string), txdata: 0x99f3379f000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EternalStorage
Function name: getString(bytes32)
PC address: 1606
Estimated Gas Usage: 1651 - 2781
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:92

eturns (address) {
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getString(bytes32), txdata: 0x986e791a, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getSolverAddress(bytes32,string)
PC address: 1801
Estimated Gas Usage: 3421 - 46307
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2501, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getSolverAddress(bytes32,string), txdata: 0x99f3379f000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EternalStorage
Function name: getBytes(bytes32)
PC address: 1917
Estimated Gas Usage: 1739 - 2869
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:100

) {
        return boolSt

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000040040000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getBytes(bytes32), txdata: 0xc031a180, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: isClaimed(bytes32,string)
PC address: 2017
Estimated Gas Usage: 3490 - 46376
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x400000020a1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: isClaimed(bytes32,string), txdata: 0xbeab3537000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ClaimRepository
Function name: isClaimed(bytes32,string)
PC address: 2130
Estimated Gas Usage: 3490 - 46376
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:189

ew external returns (address solverAddress) {
        return db.getAddress(keccak256(abi.en

--------------------
Initial State:

Account: [CREATOR], balance: 0x2482002002820, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: isClaimed(bytes32,string), txdata: 0xbeab3537000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getTokenByIndex(bytes32,string,uint256)
PC address: 2282
Estimated Gas Usage: 3493 - 43889
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:205

) {
        return db.getUint(keccak256(abi.encodePacked("claims.token.a

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getTokenByIndex(bytes32,string,uint256), txdata: 0xc6113205ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getTokenByIndex(bytes32,string,uint256)
PC address: 2346
Estimated Gas Usage: 3493 - 43889
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getTokenByIndex(bytes32,string,uint256), txdata: 0xc6113205ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ClaimRepository
Function name: getTokenByIndex(bytes32,string,uint256)
PC address: 2459
Estimated Gas Usage: 3493 - 43889
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:205

rnal returns (uint token) {
        return db.getUint(keccak256(abi.encodePacked("claims.token.amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x181080002021208, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getTokenByIndex(bytes32,string,uint256), txdata: 0xc6113205ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getAmountByToken(bytes32,string,address)
PC address: 5891
Estimated Gas Usage: 3613 - 44669
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/03bd16ba3d3dcdc0da9155e8179aef84.sol:208
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getAmountByToken(bytes32,string,address), txdata: 0xfc91a274fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ClaimRepository
Function name: getAmountByToken(bytes32,string,address)
PC address: 5987
Estimated Gas Usage: 3613 - 44669
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x18000000000160a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, value: 0x0
Caller: [ATTACKER], function: getAmountByToken(bytes32,string,address), txdata: 0xfc91a274fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9, value: 0x0


