==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PlayerBook
Function name: account_info_rotate_tine(uint256)
PC address: 6468
Estimated Gas Usage: 13331 - 90579
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e45a13d992653671c145752e7d5433a2.sol:1657

roposal].count);

    }

    

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deleteAnyProposal(bytes32), txdata: 0x0efcf295, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PlayerBook
Function name: account_info_rotate_tine(uint256)
PC address: 6601
Estimated Gas Usage: 13331 - 90579
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e45a13d992653671c145752e7d5433a2.sol:1675

 allowed");

        bytes32 _whatPr

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deleteAnyProposal(bytes32), txdata: 0x0efcf295, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PlayerBook
Function name: account_info_rotate_tine(uint256)
PC address: 6605
Estimated Gas Usage: 13331 - 90579
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e45a13d992653671c145752e7d5433a2.sol:1675

 allowed");

        bytes32 _whatPr

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deleteAnyProposal(bytes32), txdata: 0x0efcf295, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: registerNameXID(string,bool)
PC address: 7072
Estimated Gas Usage: 2643 - 10359
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e45a13d992653671c145752e7d5433a2.sol:1071

0x2f && 

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000a0000008000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerNameXaddr(string,bool), txdata: 0x1684844b80, value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 7072
Estimated Gas Usage: 1318 - 9034
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e45a13d992653671c145752e7d5433a2.sol:1071

0x2f && 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkIfNameValid(string), txdata: 0x6c52660d80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlayerBook
Function name: account_info_rotate_tine(uint256)
PC address: 9895
Estimated Gas Usage: 13331 - 90579
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deleteAnyProposal(bytes32), txdata: 0x0efcf295, value: 0x0