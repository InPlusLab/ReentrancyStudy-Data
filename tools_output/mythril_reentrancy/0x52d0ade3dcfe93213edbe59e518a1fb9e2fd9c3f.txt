==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: SetBuyer
Function name: fallback
PC address: 251
Estimated Gas Usage: 71 - 166
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:661

his) > 0) {

                req

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SetBuyer
Function name: transferTokenAmount(address,bytes,address,uint256)
PC address: 1211
Estimated Gas Usage: 3046 - 74288
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:773

div) external {

        uint256 amount = token.balanceOf(this).mul(mul).div(div);

        // solium-disable-next-line security/no-tx-origin

        require(token.transfer(tx.origin, amount));

    }



    // Kyber Network



    function kyberSendEthPro

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokenAmount(address,bytes,address,uint256), txdata: 0x9a509aff0101010101010101010101010101010101010101010101010101010100000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SetBuyer
Function name: change(bytes,uint256[])
PC address: 1837
Estimated Gas Usage: 826 - 6188
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:699

-disable-next-line security/no-call-value

        require(target.call.value(value)(data));

    }



    function approveTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {

        if (fromToken.allowance(this, target) != 0) {

             fromToken.approve(ta

--------------------
Initial State:

Account: [CREATOR], balance: 0x3e7c0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: change(bytes,uint256[]), txdata: 0xdc0ba228fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SetBuyer
Function name: sendEthProportion(address,bytes,uint256,uint256)
PC address: 6200
Estimated Gas Usage: 2207 - 38792
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:735

 require(target.call(data));



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendEthProportion(address,bytes,uint256,uint256), txdata: 0x846f1185000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SetBuyer
Function name: transferTokenAmount(address,bytes,address,uint256)
PC address: 8280
Estimated Gas Usage: 3046 - 74288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:777

ecurity/no-tx-origin

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferTokenAmount(address,bytes,address,uint256), txdata: 0x9a509aff0000000000000000000000000000000000000000000000000000000000000000800000000800000000000000000000000000000000000000000000000000000c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SetBuyer
Function name: transferTokenAmount(address,bytes,address,uint256)
PC address: 8418
Estimated Gas Usage: 3046 - 74288
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:785

r Network



    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokenAmount(address,bytes,address,uint256), txdata: 0x9a509aff010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SetBuyer
Function name: transferTokenAmount(address,bytes,address,uint256)
PC address: 8418
Estimated Gas Usage: 3046 - 74288
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:785

r Network



    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferTokenAmount(address,bytes,address,uint256), txdata: 0x9a509aff01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SetBuyer
Function name: sendEthValue(address,bytes,uint256)
PC address: 10109
Estimated Gas Usage: 1351 - 37936
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:723

 data, IERC20 fromToken, uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3fb9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendEthValue(address,bytes,uint256), txdata: 0xd2e9236b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SetBuyer
Function name: buy(address,bytes,uint256[])
PC address: 10749
Estimated Gas Usage: 708 - 6163
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:581

    fitAmount = amount;



--------------------
Initial State:

Account: [CREATOR], balance: 0x40000009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buy(address,bytes,uint256[]), txdata: 0x3143b224, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SetBuyer
Function name: change(bytes,uint256[])
PC address: 10749
Estimated Gas Usage: 856 - 6311
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7655a25bbc2a5ca6919270f55e88d436.sol:699

-disable-next-line security/no-call-value

        require(target.call.value(value)(data));

    }



    function approveTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {

        if (fromToken.allowance(this, target) != 0) {

             fromToken.approve(ta

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000027, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: change(bytes,uint256[]), txdata: 0xdc0ba228, value: 0x0