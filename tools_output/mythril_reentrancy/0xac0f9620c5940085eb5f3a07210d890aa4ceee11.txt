==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Dispatch
Function name: fallback
PC address: 1305
Estimated Gas Usage: 3107 - 40918
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCancel(uint256), txdata: 0x027521ce, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Dispatch
Function name: getSubscriber(uint256)
PC address: 1934
Estimated Gas Usage: 3178 - 41319
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getSubscriber(uint256), txdata: 0x25df1e77, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Dispatch
Function name: getSubscriberOnchain(uint256)
PC address: 2606
Estimated Gas Usage: 3254 - 41065
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getSubscriberOnchain(uint256), txdata: 0x37a8c560, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Dispatch
Function name: getProvider(uint256)
PC address: 3393
Estimated Gas Usage: 3288 - 41429
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getProvider(uint256), txdata: 0x5c42d079, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Dispatch
Function name: getStatus(uint256)
PC address: 3532
Estimated Gas Usage: 3311 - 43707
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getStatus(uint256), txdata: 0x5c622a0e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Dispatch
Function name: cancelQuery(uint256)
PC address: 4097
Estimated Gas Usage: 12245 - 164005
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:1181

id, 'subscriber')), uint256(subscriber));

        db.setBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')), endpoint);

        db.setString(keccak25

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cancelQuery(uint256), txdata: 0x7237dc0b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Dispatch
Function name: getEndpoint(uint256)
PC address: 5827
Estimated Gas Usage: 3436 - 41247
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getEndpoint(uint256), txdata: 0x937bbc4a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Dispatch
Function name: respondBytes32Array(uint256,bytes32[])
PC address: 7147
Estimated Gas Usage: 6211 - 83761
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:1181

id, 'subscriber')), uint256(subscriber));

        db.setBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')), endpoint);

        db.setString(keccak25

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffff9, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: respondBytes32Array(uint256,bytes32[]), txdata: 0x0cbe69a1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Dispatch
Function name: respond1(uint256,string)
PC address: 7147
Estimated Gas Usage: 6387 - 83937
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:1181

id, 'subscriber')), uint256(subscriber));

        db.setBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')), endpoint);

        db.setString(keccak25

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffefc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffef9, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: respond1(uint256,string), txdata: 0x6843581c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Dispatch
Function name: respond3(uint256,string,string,string)
PC address: 7147
Estimated Gas Usage: 6365 - 83915
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:1181

id, 'subscriber')), uint256(subscriber));

        db.setBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')), endpoint);

        db.setString(keccak25

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: respond3(uint256,string,string,string), txdata: 0x3b90dfa8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Dispatch
Function name: respond4(uint256,string,string,string,string)
PC address: 7147
Estimated Gas Usage: 6354 - 83904
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:1181

id, 'subscriber')), uint256(subscriber));

        db.setBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')), endpoint);

        db.setString(keccak25

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: respond4(uint256,string,string,string,string), txdata: 0x3485d34c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Dispatch
Function name: respondIntArray(uint256,int256[])
PC address: 7147
Estimated Gas Usage: 6607 - 84157
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:1181

id, 'subscriber')), uint256(subscriber));

        db.setBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')), endpoint);

        db.setString(keccak25

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: respondIntArray(uint256,int256[]), txdata: 0xef05ab0b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Dispatch
Function name: respond2(uint256,string,string)
PC address: 7147
Estimated Gas Usage: 6684 - 84234
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:1181

id, 'subscriber')), uint256(subscriber));

        db.setBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')), endpoint);

        db.setString(keccak25

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: respond2(uint256,string,string), txdata: 0xfedea288, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Dispatch
Function name: updateDependencies()
PC address: 8041
Estimated Gas Usage: 23718 - 154967
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:653

rns (uint256 id)

    {

        ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x400080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Dispatch
Function name: updateDependencies()
PC address: 8086
Estimated Gas Usage: 23718 - 154967
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:657

bondage.getBoundDots(msg.sender, provid

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Dispatch
Function name: updateDependencies()
PC address: 8127
Estimated Gas Usage: 23718 - 154967
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:657

bondage.getBoundDots(msg.sender, provid

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Dispatch
Function name: updateDependencies()
PC address: 8130
Estimated Gas Usage: 23718 - 154967
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:659

inProvider 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Dispatch
Function name: updateDependencies()
PC address: 8273
Estimated Gas Usage: 23718 - 154967
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:659

inProvider = isContract(provider);

--------------------
Initial State:

Account: [CREATOR], balance: 0x400080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Dispatch
Function name: updateDependencies()
PC address: 8273
Estimated Gas Usage: 23718 - 154967
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:659

inProvider = isContract(provider);

--------------------
Initial State:

Account: [CREATOR], balance: 0x2300040000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Dispatch
Function name: updateDependencies()
PC address: 8273
Estimated Gas Usage: 23718 - 154967
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:659

inProvider = isContract(provider);

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Dispatch
Function name: updateDependencies()
PC address: 8318
Estimated Gas Usage: 23718 - 154967
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:659

       bool onchainProvider = isContract(provider);

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Dispatch
Function name: updateDependencies()
PC address: 8359
Estimated Gas Usage: 23718 - 154967
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:659

       bool onchainProvider = isContract(provider);

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Dispatch
Function name: updateDependencies()
PC address: 8363
Estimated Gas Usage: 23718 - 154967
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:661

l onchainSubscriber = isContract(msg.sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Dispatch
Function name: updateDependencies()
PC address: 8372
Estimated Gas Usage: 23718 - 154967
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37dc4880a79431cb8511e0b261d7d574.sol:661

l onchainSubscriber = isContract(msg.sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0


