==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: T1WinTokenConfig
Function name: tokenListMap(address)
PC address: 1045
Estimated Gas Usage: 3276 - 6011
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:69

Map;

    //address -> add config user map  

    mapping (address => T

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: tokenListMap(address), txdata: 0x41224d0b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: T1WinTokenConfig
Function name: getTokenNameByAddress(address)
PC address: 1243
Estimated Gas Usage: 1545 - 3665
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:165

          T1Wdatasets.T

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getTokenNameByAddress(address), txdata: 0x5f765d8b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: T1WinTokenConfig
Function name: tokenListArray(uint256)
PC address: 1384
Estimated Gas Usage: 1037 - 1462
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:67

oken address -> token object map 

    mapping (addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: tokenListArray(uint256), txdata: 0x7b90a582, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: T1WinTokenConfig
Function name: getTokenByAddress(address)
PC address: 1589
Estimated Gas Usage: 3438 - 6173
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:145

   public 

        view

        returns (string ) {

             T1Wdata

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getTokenByAddress(address), txdata: 0x91ded8fa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: T1WinTokenConfig
Function name: removeNewTokenByAdmin(address)
PC address: 1885
Estimated Gas Usage: 26341 - 143733
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:83

;

        _;

    }

    modifier

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeNewTokenByAdmin(address), txdata: 0xa1c182d6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: T1WinTokenConfig
Function name: removeNewTokenByAdmin(address)
PC address: 1911
Estimated Gas Usage: 26341 - 143733
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:83

;

        _;

    }

    modifier

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeNewTokenByAdmin(address), txdata: 0xa1c182d6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: T1WinTokenConfig
Function name: removeNewTokenByAdmin(address)
PC address: 1950
Estimated Gas Usage: 26341 - 143733
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:211

{

                    tokenListAr

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeNewTokenByAdmin(address), txdata: 0xa1c182d6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: T1WinTokenConfig
Function name: removeNewTokenByAdmin(address)
PC address: 1962
Estimated Gas Usage: 26341 - 143733
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:211

{

                    tokenListAr

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeNewTokenByAdmin(address), txdata: 0xa1c182d6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: T1WinTokenConfig
Function name: removeNewTokenByAdmin(address)
PC address: 1982
Estimated Gas Usage: 26341 - 143733
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:211

{

                    tokenListAr

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeNewTokenByAdmin(address), txdata: 0xa1c182d6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: T1WinTokenConfig
Function name: removeNewTokenByAdmin(address)
PC address: 1989
Estimated Gas Usage: 26341 - 143733
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:211

{

                    tokenListAr

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeNewTokenByAdmin(address), txdata: 0xa1c182d6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: T1WinTokenConfig
Function name: removeNewTokenByAdmin(address)
PC address: 1996
Estimated Gas Usage: 26341 - 143733
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:215

okenListArray.length 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeNewTokenByAdmin(address), txdata: 0xa1c182d6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: T1WinTokenConfig
Function name: getToken(uint256)
PC address: 3122
Estimated Gas Usage: 1206 - 1631
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/deb578ac782e7929ca79ae3efb3d411b.sol:127

 

    function g

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getToken(uint256), txdata: 0xe4b50cb8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: T1WinTokenConfig
Function name: removeNewTokenByAdmin(address)
PC address: 3645
Estimated Gas Usage: 26341 - 143733
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeNewTokenByAdmin(address), txdata: 0xa1c182d6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: T1WinTokenConfig
Function name: removeNewTokenByAdmin(address)
PC address: 3666
Estimated Gas Usage: 26341 - 143733
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeNewTokenByAdmin(address), txdata: 0xa1c182d6, value: 0x0