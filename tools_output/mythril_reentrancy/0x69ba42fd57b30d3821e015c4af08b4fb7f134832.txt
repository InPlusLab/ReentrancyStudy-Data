==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: constructor
PC address: 264
Estimated Gas Usage: 27660 - 149046
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:347

ame

    function initiateProvider(

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Registry
Function name: constructor
PC address: 311
Estimated Gas Usage: 27660 - 149046
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:351

t256 publicKey,

        bytes32 title


--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Registry
Function name: constructor
PC address: 338
Estimated Gas Usage: 27660 - 149046
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:351

t256 publicKey,

        bytes32 title


--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: getCurveUnset(address,bytes32)
PC address: 4399
Estimated Gas Usage: 3505 - 44844
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCurveUnset(address,bytes32), txdata: 0x54a365df, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: getProviderPublicKey(address)
PC address: 6268
Estimated Gas Usage: 3337 - 41808
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getProviderPublicKey(address), txdata: 0x4ff6e86e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: getPublicKey(address)
PC address: 6268
Estimated Gas Usage: 3429 - 41900
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPublicKey(address), txdata: 0x857cdbb8, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: getEndpointBroker(address,bytes32)
PC address: 9517
Estimated Gas Usage: 3687 - 42771
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getEndpointBroker(address,bytes32), txdata: 0x9c39c8ea, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: fallback
PC address: 10532
Estimated Gas Usage: 3253 - 41724
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: isProviderInitiated(address), txdata: 0x186b79c9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: getProviderTitle(address)
PC address: 10532
Estimated Gas Usage: 3355 - 41826
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getProviderTitle(address), txdata: 0x5481f43e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: getTitle(address)
PC address: 10532
Estimated Gas Usage: 3667 - 42138
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getTitle(address), txdata: 0xf51d7d5f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: setProviderTitle(bytes32)
PC address: 10532
Estimated Gas Usage: 6649 - 81853
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setProviderTitle(bytes32), txdata: 0xf5d1d299, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: initiateProvider(uint256,bytes32)
PC address: 10532
Estimated Gas Usage: 13889 - 163703
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initiateProvider(uint256,bytes32), txdata: 0xaf87c833, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: setProviderTitle(bytes32)
PC address: 10643
Estimated Gas Usage: 6649 - 81853
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:541

te

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setProviderTitle(bytes32), txdata: 0xf5d1d299, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: setProviderTitle(bytes32)
PC address: 10785
Estimated Gas Usage: 6649 - 81853
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setProviderTitle(bytes32), txdata: 0xf5d1d299, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Registry
Function name: setProviderTitle(bytes32)
PC address: 10909
Estimated Gas Usage: 6649 - 81853
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:541

tes32[] memory endpoints =  db.getBytesArray(keccak256(abi.encodePacked("oracles"

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setProviderTitle(bytes32), txdata: 0xf5d1d299, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: setProviderTitle(bytes32)
PC address: 10909
Estimated Gas Usage: 6649 - 81853
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:541

tes32[] memory endpoints =  db.getBytesArray(keccak256(abi.encodePacked("oracles"

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setProviderTitle(bytes32), txdata: 0xf5d1d299, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: updateDependencies()
PC address: 12676
Estimated Gas Usage: 9591 - 65758
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:347

ame

    function initiateProvider(

--------------------
Initial State:

Account: [CREATOR], balance: 0xe8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Registry
Function name: updateDependencies()
PC address: 12721
Estimated Gas Usage: 9591 - 65758
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:351

t256 publicKey,

        bytes32 title


--------------------
Initial State:

Account: [CREATOR], balance: 0xe8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Registry
Function name: updateDependencies()
PC address: 12761
Estimated Gas Usage: 9591 - 65758
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:351

t256 publicKey,

        bytes32 title


--------------------
Initial State:

Account: [CREATOR], balance: 0xe8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateDependencies(), txdata: 0x6e5ecdff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: initiateProvider(uint256,bytes32)
PC address: 12767
Estimated Gas Usage: 13889 - 163703
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:751

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initiateProvider(uint256,bytes32), txdata: 0xaf87c833, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: initiateProvider(uint256,bytes32)
PC address: 12913
Estimated Gas Usage: 13889 - 163703
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initiateProvider(uint256,bytes32), txdata: 0xaf87c833, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Registry
Function name: initiateProvider(uint256,bytes32)
PC address: 13037
Estimated Gas Usage: 13889 - 163703
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:751

  bytes32 endpoint,

        int[] curve

    )

        private

    {

        uint prevEnd =

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initiateProvider(uint256,bytes32), txdata: 0xaf87c833, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: initiateProvider(uint256,bytes32)
PC address: 13037
Estimated Gas Usage: 13889 - 163703
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:751

  bytes32 endpoint,

        int[] curve

    )

        private

    {

        uint prevEnd =

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initiateProvider(uint256,bytes32), txdata: 0xaf87c833, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: initiateProvider(uint256,bytes32)
PC address: 13059
Estimated Gas Usage: 13889 - 163703
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:763

ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initiateProvider(uint256,bytes32), txdata: 0xaf87c833, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Registry
Function name: initiateProvider(uint256,bytes32)
PC address: 13204
Estimated Gas Usage: 13889 - 163703
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initiateProvider(uint256,bytes32), txdata: 0xaf87c833, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: initiateProvider(uint256,bytes32)
PC address: 13328
Estimated Gas Usage: 13889 - 163703
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:763

uint index = 0;



        // Validate the curve

        while ( index < curve

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initiateProvider(uint256,bytes32), txdata: 0xaf87c833, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: initiateProvider(uint256,bytes32)
PC address: 13357
Estimated Gas Usage: 13889 - 163703
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/197c7887d3c9d638fb93e3ce2b59c91d.sol:775

va

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initiateProvider(uint256,bytes32), txdata: 0xaf87c833, value: 0x0


