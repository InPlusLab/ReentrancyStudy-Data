==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GazeAccessControls
Function name: renounceRole(bytes32,address)
PC address: 2596
Estimated Gas Usage: 32248 - 133830
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:332

eIndex - 1;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000004000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: renounceRole(bytes32,address), txdata: 0x36568abe0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GazeAccessControls
Function name: revokeRole(bytes32,address)
PC address: 2596
Estimated Gas Usage: 34132 - 136284
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:332

eIndex - 1;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: revokeRole(bytes32,address), txdata: 0xd547741f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GazeAccessControls
Function name: removeAdminRole(address)
PC address: 2596
Estimated Gas Usage: 35766 - 138360
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:332

eIndex - 1;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeAdminRole(address), txdata: 0xdccfe310000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GazeAccessControls
Function name: renounceRole(bytes32,address)
PC address: 2600
Estimated Gas Usage: 32248 - 133830
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:333

_values.length - 1;

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: renounceRole(bytes32,address), txdata: 0x36568abe0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GazeAccessControls
Function name: revokeRole(bytes32,address)
PC address: 2600
Estimated Gas Usage: 34132 - 136284
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:333

_values.length - 1;

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: revokeRole(bytes32,address), txdata: 0xd547741f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GazeAccessControls
Function name: removeAdminRole(address)
PC address: 2600
Estimated Gas Usage: 35766 - 138360
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:333

_values.length - 1;

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeAdminRole(address), txdata: 0xdccfe310000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 2741
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1548

rdsContract.LPR

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 2841
Estimated Gas Usage: 28983 - 160852
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1548

rdsContract.LPRewards(uint256(lastUpdateTime), block.timestamp);

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 2885
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1550

edLPTotal > 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 2983
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1556

UpdateTime = uint64(block.timestamp);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 3017
Estimated Gas Usage: 28983 - 160852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1556

UpdateTime = uint64(block.timestamp);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 3065
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1560

er.rewardsEarned).ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 3090
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1560

er.rewardsEarned = uint128(uint256(staker.rewardsEarned).add(rewards));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 3118
Estimated Gas Usage: 28983 - 160852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1560

er.rewardsEarned = uint128(uint256(staker.rewardsEarned).add(rewards));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 3121
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1561

rdsPerTokenPoints; 
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 3126
Estimated Gas Usage: 28983 - 160852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1561

er.lastRewardPoints = rewardsPerTokenPoints; 
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 4064
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1577

er memory staker = stakers[_user];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 4071
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1577

er memory staker = stakers[_user];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 4083
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1577

er memory staker = stakers[_user];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GazeLPStaking
Function name: updateReward(address)
PC address: 4119
Estimated Gas Usage: 28983 - 160852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:1579

rdsPerTokenPoints.sub

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateReward(address), txdata: 0x632447c90000000000000000000000000101010001010101010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GazeLPStaking
Function name: emergencyUnstake()
PC address: 9519
Estimated Gas Usage: 16513 - 94295
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e0e219486d90d31596d85eaaa88a033.sol:211

et.call{ value: weiValue }(data);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyUnstake(), txdata: 0x7589cf2f, value: 0x0