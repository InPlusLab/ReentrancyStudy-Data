==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 1695
Estimated Gas Usage: 1837 - 1932
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:184

 greater than 0.01 ETH")

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BernCommunitySales
Function name: withdrawTokens(uint256)
PC address: 2438
Estimated Gas Usage: 4515 - 40257
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:256

     _token.transfer(teamAddress,

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101020101010101020102010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawTokens(uint256), txdata: 0x315a095d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BernCommunitySales
Function name: transferFunds(address[],uint256[])
PC address: 2666
Estimated Gas Usage: 1472 - 1897
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:273

 SafeMath.sub(_saleSupply,values[i]);
            _token.transfer(recipients[i], x); 
        }
    } 


}

--------------------
Initial State:

Account: [CREATOR], balance: 0x184200000940020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000084008800202100001010400048002100000101000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: transferFunds(address[],uint256[]), txdata: 0x4603ae388000000000000000000000000000000000000000000000000000000000000004ff, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: grantDevelopmentToken(address)
PC address: 3249
Estimated Gas Usage: 2996 - 3421
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:265

feMath.add(developmentCounter, 1);        
    }
    
    functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010201020101200101010101010101010100000000000000000000000004, value: 0x0
Caller: [CREATOR], function: grantDevelopmentToken(address), txdata: 0x6045f189, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: grantTeamToken(address)
PC address: 3731
Estimated Gas Usage: 3084 - 3509
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:258



    function grantDevelopmentToken(address devel

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101102001010101010101010101010100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: grantTeamToken(address), txdata: 0xa8ded318, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 4479
Estimated Gas Usage: 913 - 1008
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:240

 crowdsale event has ended
    funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x2420, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 4521
Estimated Gas Usage: 1774 - 1869
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:246

     _wallet.transfer(msg.value

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 4530
Estimated Gas Usage: 1794 - 1889
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:246

     _wallet.transfer(msg.value);
    }
    fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 4882
Estimated Gas Usage: 3680 - 3775
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:216

eMath.add(tokenAmount, weiAmount.mul(_tierTwoBonus));
      } else if (( accessTime <= _weekThree ) && (accessTime > _weekFour)) { 
        tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_tierThreeBonus));
      } else if (( accessTime <= _weekFour ) && (accessTime > _weekThree)) { 
        tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_tierFourBonus));
      } 
        tokenAmount = tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_rate));
        
        require(_saleSupply >= tokenAmount, "sale supply should be greater or equals to tokenAmount");
        
        _sal

--------------------
Initial State:

Account: [CREATOR], balance: 0x401c100000004220f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 4931
Estimated Gas Usage: 4512 - 4607
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:217


        tokenAmount = SafeMath.add(tokenAmount, weiA

--------------------
Initial State:

Account: [CREATOR], balance: 0x2106080040085133, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 4943
Estimated Gas Usage: 4529 - 4624
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:217

) { 
        tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_tierThreeBonus));
      } else if (( accessTime <= _weekFour ) && (accessTime > _weekThree)) { 
        tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_tierFourBonus));
      } 
        tokenAmount = tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_rate));
        
        require(_saleSupply >= tokenAmount, "sale supply should be greater or equals to tokenAmount");
        
        _sal

--------------------
Initial State:

Account: [CREATOR], balance: 0x7160002032603, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 4992
Estimated Gas Usage: 5361 - 5456
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:219

 { 
        tokenAmount = SafeMath.add(tokenAmount, weiA

--------------------
Initial State:

Account: [CREATOR], balance: 0x461a0400022789, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 5004
Estimated Gas Usage: 5378 - 5473
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:219

ee)) { 
        tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_tierFourBonus));
      } 
        tokenAmount = tokenAmount = SafeMath.add(tokenAmount, weiAmount.mul(_rate));
        
        require(_saleSupply >= tokenAmount, "sale supply should be greater or equals to tokenAmount");
        
        _sal

--------------------
Initial State:

Account: [CREATOR], balance: 0x401a24000223a3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 5053
Estimated Gas Usage: 6210 - 6305
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:222

unt.mul(_rate));
        
        require(_saleSupply >=

--------------------
Initial State:

Account: [CREATOR], balance: 0x414601200450a1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BernCommunitySales
Function name: fallback
PC address: 5065
Estimated Gas Usage: 6227 - 6322
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9ad2f6efa60e98a07307871c9b5cc2bd.sol:222

iAmount.mul(_rate));
        
        require(_saleSupply >= tokenAmount, "sale supply should be greater or equals to tokenAmount");
        
        _sal

--------------------
Initial State:

Account: [CREATOR], balance: 0x180082102044283, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x2386f26fc10000