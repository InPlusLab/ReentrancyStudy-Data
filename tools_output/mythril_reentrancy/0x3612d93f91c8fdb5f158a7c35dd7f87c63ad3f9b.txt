==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: transferToOwner() or transferToOwner()
PC address: 824
Estimated Gas Usage: 1806 - 2231
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferToOwner(), txdata: 0x2d90ae94, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: updateLock(bool) or updateLock(bool)
PC address: 1247
Estimated Gas Usage: 1117 - 1542
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateLock(bool), txdata: 0xa1f91057, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRPerSellControl
Function name: GetPerSellInfo(uint16) or GetPerSellInfo(uint16)
PC address: 1355
Estimated Gas Usage: 2940 - 38584
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:191

; uint256 price; bool isOver;



--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: GetPerSellInfo(uint16), txdata: 0x227ac0cf, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 1687
Estimated Gas Usage: 1139 - 1564
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRPerSellControl
Function name: transferToOwner() or transferToOwner()
PC address: 1902
Estimated Gas Usage: 1872 - 2297
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferToOwner(), txdata: 0x2d90ae94, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRPerSellControl
Function name: buyPerSell(uint16,bytes32)
PC address: 2723
Estimated Gas Usage: 2003 - 2428
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyPerSell(uint16,bytes32), txdata: 0x8a3907b9, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRPerSellControl
Function name: updateInteface(address,address)
PC address: 4143
Estimated Gas Usage: 1238 - 1663
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x200003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateInteface(address,address), txdata: 0x8a874084, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRPerSellControl
Function name: updateInteface(address,address)
PC address: 4475
Estimated Gas Usage: 2030 - 2455
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateInteface(address,address), txdata: 0x8a874084, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRPerSellControl
Function name: updateLock(bool) or updateLock(bool)
PC address: 4888
Estimated Gas Usage: 1249 - 1674
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateLock(bool), txdata: 0xa1f91057, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BRPerSellControl
Function name: mBuyList(address,uint256)
PC address: 5268
Estimated Gas Usage: 1330 - 1615
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:145

event buyPerSellEvent(uint16 perSellId,bytes3

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mBuyList(address,uint256), txdata: 0xde10ef9f, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRPerSellControl
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 5398
Estimated Gas Usage: 1293 - 1718
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/ae1a1cdf0bf20381c9fec87c9343ad00.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0