==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: constructor
PC address: 256
Estimated Gas Usage: 17064 - 81529
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:246

    require(msg.se

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000401048080088008080810801020400101100010d281289c48d64a9a6a7997da95b0a20d19169a686080a2600004200000060c9f50a02d4448666a484a20908aa4a0b0d42b05144ca084a0a008040000000a340180, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DecentralandVesting
Function name: constructor
PC address: 315
Estimated Gas Usage: 17124 - 81775
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:246

    require(msg.se

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002001024010200080200801200480402002802004e4218e97725aa156823535799db6a5421d18c8ae4ef01930e779da6e67b0240a80288430940a231802d66309100464010808400440801020020410c01a100202a0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TerraformReserve
Function name: fallback
PC address: 680
Estimated Gas Usage: 10952 - 67468
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:189

}
}

contract TokenVesting is Ownable {
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: lockMana(address,uint256), txdata: 0x6b7006d7bebebebebebebebebebebebe000000000000000000000000000000000000008002, value: 0x0
Caller: [CREATOR], function: setTargetContract(address), txdata: 0x47fc822f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 859
Estimated Gas Usage: 6184 - 41452
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:332

rawing any token othe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2140, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008082000080101102001400200082020100102013ff72a3a72b1ae575e858dfcf8df799be1c774efdf1ce2c2cff77fef6de931773fdf7ffffff01fdfffff45ffffff7fffffffffffdfffeeddffec3810d4280ba03ffb15ffd1b01e09fe9d8c75ffe75fe7e2c7f4fe96b406c013fb3fff3eef39760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: releasableAmount()
PC address: 859
Estimated Gas Usage: 7117 - 42385
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:332

rawing any token othe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2184, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020200140100102104040082010200808010101011fdfff089779d75f30b761627ffadffffd90fcf7c0304071acdfef6dfcbf334d1feffffffbfeffff7fffef7effff5fffffffffffdfffffffae8ff8957fc100111fffff180039df3f74efe6e27fe53ffff39fefded0cfbff0ac9dff5ac7a5f50c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 903
Estimated Gas Usage: 6184 - 41452
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

oreignTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002001001040401010440014020100210010110200ffc4497e483bf07b32ea51cb72257e0bf736753db6bdb34eedeffdacfebb7df01e3fff77cfffffffffefffdffec27e0ffffffb77b7fdfa6ffbc8041c08848030ffc00b76087bf03ffdf6b08331bffe0a5dd66539b08cd04eab3ffda7fffb7de0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 903
Estimated Gas Usage: 7117 - 42385
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

oreignTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008200801040210100108080408040810200101022fffb6564a64ffffee3ffe18ef7df30e35e039891e54df3f5d4f9fda5cceb7ed1afffffffffdfffffffffffffff9ffbffffffbffff3fffff7f7e58267e1487fe2fffb6000e00bfffee3ff9efeeeff731f76038480b17efc57b4afeaa7cfffff60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 928
Estimated Gas Usage: 6184 - 41452
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

nt256

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002001001040401010440014020100210010110200ffc4497e483bf07b32ea51cb72257e0bf736753db6bdb34eedeffdacfebb7df01e3fff77cfffffffffefffdffec27e0ffffffb77b7fdfa6ffbc8041c08848030ffc00b76087bf03ffdf6b08331bffe0a5dd66539b08cd04eab3ffda7fffb7de0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 928
Estimated Gas Usage: 7117 - 42385
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

nt256

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008200801040210100108080408040810200101022fffb6564a64ffffee3ffe18ef7df30e35e039891e54df3f5d4f9fda5cceb7ed1afffffffffdfffffffffffffff9ffbffffffbffff3fffff7f7e58267e1487fe2fffb6000e00bfffee3ff9efeeeff731f76038480b17efc57b4afeaa7cfffff60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 935
Estimated Gas Usage: 4365 - 39352
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

_token, uint256 amount) onlyOwner {
    require(_token != token);
    _token.transfer(owner, amount);
  }
}

contract DecentralandVesting is TokenVesting {
  using SafeERC20 for ERC20;

  event LockedMAN

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 947
Estimated Gas Usage: 6184 - 41452
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:336

 _token.

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002001001040401010440014020100210010110200ffc4497e483bf07b32ea51cb72257e0bf736753db6bdb34eedeffdacfebb7df01e3fff77cfffffffffefffdffec27e0ffffffb77b7fdfa6ffbc8041c08848030ffc00b76087bf03ffdf6b08331bffe0a5dd66539b08cd04eab3ffda7fffb7de0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 947
Estimated Gas Usage: 7117 - 42385
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:336

 _token.

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008200801040210100108080408040810200101022fffb6564a64ffffee3ffe18ef7df30e35e039891e54df3f5d4f9fda5cceb7ed1afffffffffdfffffffffffffff9ffbffffffbffff3fffff7f7e58267e1487fe2fffb6000e00bfffee3ff9efeeeff731f76038480b17efc57b4afeaa7cfffff60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 950
Estimated Gas Usage: 6184 - 41452
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002001001040401010440014020100210010110200ffc4497e483bf07b32ea51cb72257e0bf736753db6bdb34eedeffdacfebb7df01e3fff77cfffffffffefffdffec27e0ffffffb77b7fdfa6ffbc8041c08848030ffc00b76087bf03ffdf6b08331bffe0a5dd66539b08cd04eab3ffda7fffb7de0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 950
Estimated Gas Usage: 7117 - 42385
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008200801040210100108080408040810200101022fffb6564a64ffffee3ffe18ef7df30e35e039891e54df3f5d4f9fda5cceb7ed1afffffffffdfffffffffffffff9ffbffffffbffff3fffff7f7e58267e1487fe2fffb6000e00bfffee3ff9efeeeff731f76038480b17efc57b4afeaa7cfffff60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 973
Estimated Gas Usage: 6079 - 41066
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

en != token);
    _token.transfer(own

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 977
Estimated Gas Usage: 7117 - 42385
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:336

fer(own

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008200801040210100108080408040810200101022fffb6564a64ffffee3ffe18ef7df30e35e039891e54df3f5d4f9fda5cceb7ed1afffffffffdfffffffffffffff9ffbffffffbffff3fffff7f7e58267e1487fe2fffb6000e00bfffee3ff9efeeeff731f76038480b17efc57b4afeaa7cfffff60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 977
Estimated Gas Usage: 6184 - 41452
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:336

fer(own

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002001001040401010440014020100210010110200ffc4497e483bf07b32ea51cb72257e0bf736753db6bdb34eedeffdacfebb7df01e3fff77cfffffffffefffdffec27e0ffffffb77b7fdfa6ffbc8041c08848030ffc00b76087bf03ffdf6b08331bffe0a5dd66539b08cd04eab3ffda7fffb7de0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 988
Estimated Gas Usage: 6228 - 41496
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:332

rawing any token othe

--------------------
Initial State:

Account: [CREATOR], balance: 0x9800280801000044, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000004002010042000202001020880100401201002404000a2a804c257738a8084a20cfa578d9d828a1003d40896d572be0cccb5f9286045e08ffc00c6c246077c2e7b89ef400b800000060311600009416002020c5f8000a2a82d4010001a10848e0920c208910188fffe0c0930000d483a489680260000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DecentralandVesting
Function name: releasableAmount()
PC address: 988
Estimated Gas Usage: 7161 - 42429
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:332

rawing any token othe

--------------------
Initial State:

Account: [CREATOR], balance: 0x4004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010800201020120010101404001020101010101101fbff327a71fffff07c01409608090a8008bfbfffdffdb562b52082fab3515770ffffffffffeffffbffff7ffffff837fffffffff5febc18ff8ffffffb3be7a721fffef1fa30bfff100006ffdffefa9bfffddffdf479e255624f00035ab1073660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 991
Estimated Gas Usage: 6096 - 41083
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

_token != token);
    _token.transfer(owner, amount);
  }
}

contract DecentralandVesting is TokenVesting {
  using SafeERC20 for ERC20;

  event LockedMAN

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1005
Estimated Gas Usage: 6184 - 41452
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:343

  event 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002001001040401010440014020100210010110200ffc4497e483bf07b32ea51cb72257e0bf736753db6bdb34eedeffdacfebb7df01e3fff77cfffffffffefffdffec27e0ffffffb77b7fdfa6ffbc8041c08848030ffc00b76087bf03ffdf6b08331bffe0a5dd66539b08cd04eab3ffda7fffb7de0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 1005
Estimated Gas Usage: 7117 - 42385
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:343

  event 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008200801040210100108080408040810200101022fffb6564a64ffffee3ffe18ef7df30e35e039891e54df3f5d4f9fda5cceb7ed1afffffffffdfffffffffffffff9ffbffffffbffff3fffff7f7e58267e1487fe2fffb6000e00bfffee3ff9efeeeff731f76038480b17efc57b4afeaa7cfffff60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 1014
Estimated Gas Usage: 6184 - 41452
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:341

for E

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002001001040401010440014020100210010110200ffc4497e483bf07b32ea51cb72257e0bf736753db6bdb34eedeffdacfebb7df01e3fff77cfffffffffefffdffec27e0ffffffb77b7fdfa6ffbc8041c08848030ffc00b76087bf03ffdf6b08331bffe0a5dd66539b08cd04eab3ffda7fffb7de0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1032
Estimated Gas Usage: 6228 - 41496
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

oreignTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002040104040102400102020800020101010101103fffffff276f77dfca7ef97b664023000410402280204ec2ff9f83c334b01b5f36ffffc7270007fffebffbffeefffffffffffffe9f22e45fffbbf7fff7c7f3df3fffffff66fb77ffc0bedb7fe64fe79ffbffffde3fe254460d9f83c73d101a560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: releasableAmount()
PC address: 1032
Estimated Gas Usage: 7161 - 42429
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

oreignTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 20202020202020202020202080800808020140010100022000400101010108013fffe1792edfcc448af1b3b244b17bdc21a161a3000004128fc36cc1adcdcfb91ffffd00d0dfffff7bffffb5ffff77ff7bfff1d02602ffffff9fffffbdfdfffd3fffe176f5ffcfcc77b5ef91fcbfffdc03e060073fffffefff9f4dc2bdf9afa02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1057
Estimated Gas Usage: 6228 - 41496
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

nt256

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002040104040102400102020800020101010101103fffffff276f77dfca7ef97b664023000410402280204ec2ff9f83c334b01b5f36ffffc7270007fffebffbffeefffffffffffffe9f22e45fffbbf7fff7c7f3df3fffffff66fb77ffc0bedb7fe64fe79ffbffffde3fe254460d9f83c73d101a560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: releasableAmount()
PC address: 1057
Estimated Gas Usage: 7161 - 42429
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

nt256

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 20202020202020202020202080800808020140010100022000400101010108013fffe1792edfcc448af1b3b244b17bdc21a161a3000004128fc36cc1adcdcfb91ffffd00d0dfffff7bffffb5ffff77ff7bfff1d02602ffffff9fffffbdfdfffd3fffe176f5ffcfcc77b5ef91fcbfffdc03e060073fffffefff9f4dc2bdf9afa02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1064
Estimated Gas Usage: 4409 - 39396
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:334

_token, uint256 amount) onlyOwner {
    require(_token != token);
    _token.transfer(owner, amount);
  }
}

contract DecentralandVesting is TokenVesting {
  using SafeERC20 for ERC20;

  event LockedMAN

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1076
Estimated Gas Usage: 6228 - 41496
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:336

 _token.

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002040104040102400102020800020101010101103fffffff276f77dfca7ef97b664023000410402280204ec2ff9f83c334b01b5f36ffffc7270007fffebffbffeefffffffffffffe9f22e45fffbbf7fff7c7f3df3fffffff66fb77ffc0bedb7fe64fe79ffbffffde3fe254460d9f83c73d101a560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: releasableAmount()
PC address: 1076
Estimated Gas Usage: 7161 - 42429
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:336

 _token.

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 20202020202020202020202080800808020140010100022000400101010108013fffe1792edfcc448af1b3b244b17bdc21a161a3000004128fc36cc1adcdcfb91ffffd00d0dfffff7bffffb5ffff77ff7bfff1d02602ffffff9fffffbdfdfffd3fffe176f5ffcfcc77b5ef91fcbfffdc03e060073fffffefff9f4dc2bdf9afa02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1079
Estimated Gas Usage: 6228 - 41496
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002040104040102400102020800020101010101103fffffff276f77dfca7ef97b664023000410402280204ec2ff9f83c334b01b5f36ffffc7270007fffebffbffeefffffffffffffe9f22e45fffbbf7fff7c7f3df3fffffff66fb77ffc0bedb7fe64fe79ffbffffde3fe254460d9f83c73d101a560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: releasableAmount()
PC address: 1079
Estimated Gas Usage: 7161 - 42429
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 20202020202020202020202080800808020140010100022000400101010108013fffe1792edfcc448af1b3b244b17bdc21a161a3000004128fc36cc1adcdcfb91ffffd00d0dfffff7bffffb5ffff77ff7bfff1d02602ffffff9fffffbdfdfffd3fffe176f5ffcfcc77b5ef91fcbfffdc03e060073fffffefff9f4dc2bdf9afa02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1102
Estimated Gas Usage: 6123 - 41110
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

en != token);
    _token.transfer(own

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: releasableAmount()
PC address: 1106
Estimated Gas Usage: 7161 - 42429
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:336

fer(own

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 20202020202020202020202080800808020140010100022000400101010108013fffe1792edfcc448af1b3b244b17bdc21a161a3000004128fc36cc1adcdcfb91ffffd00d0dfffff7bffffb5ffff77ff7bfff1d02602ffffff9fffffbdfdfffd3fffe176f5ffcfcc77b5ef91fcbfffdc03e060073fffffefff9f4dc2bdf9afa02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1106
Estimated Gas Usage: 6228 - 41496
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:336

fer(own

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002040104040102400102020800020101010101103fffffff276f77dfca7ef97b664023000410402280204ec2ff9f83c334b01b5f36ffffc7270007fffebffbffeefffffffffffffe9f22e45fffbbf7fff7c7f3df3fffffff66fb77ffc0bedb7fe64fe79ffbffffde3fe254460d9f83c73d101a560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1120
Estimated Gas Usage: 6140 - 41127
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

_token != token);
    _token.transfer(owner, amount);
  }
}

contract DecentralandVesting is TokenVesting {
  using SafeERC20 for ERC20;

  event LockedMAN

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 1124
Estimated Gas Usage: 16158 - 92817
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:167

 the owner of the contract to pause accep

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: adadadadadadadadadadadaddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: lockMana(address,uint256), txdata: 0x6b7006d7bebebebebebebebebebebebe000000000000000000000000000000000000000140, value: 0x0
Caller: [SOMEGUY], function: lockMana(address,uint256), txdata: 0x6b7006d7bebebebebebebebebebebebe000000000000000000000000000000000000002020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1134
Estimated Gas Usage: 6228 - 41496
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:343

  event 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002040104040102400102020800020101010101103fffffff276f77dfca7ef97b664023000410402280204ec2ff9f83c334b01b5f36ffffc7270007fffebffbffeefffffffffffffe9f22e45fffbbf7fff7c7f3df3fffffff66fb77ffc0bedb7fe64fe79ffbffffde3fe254460d9f83c73d101a560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: releasableAmount()
PC address: 1134
Estimated Gas Usage: 7161 - 42429
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:343

  event 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 20202020202020202020202080800808020140010100022000400101010108013fffe1792edfcc448af1b3b244b17bdc21a161a3000004128fc36cc1adcdcfb91ffffd00d0dfffff7bffffb5ffff77ff7bfff1d02602ffffff9fffffbdfdfffd3fffe176f5ffcfcc77b5ef91fcbfffdc03e060073fffffefff9f4dc2bdf9afa02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: release()
PC address: 1142
Estimated Gas Usage: 1914 - 2339
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:272

liff);
    _releaseTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x248610820019c3f1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 1143
Estimated Gas Usage: 6228 - 41496
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:341

for E

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002040104040102400102020800020101010101103fffffff276f77dfca7ef97b664023000410402280204ec2ff9f83c334b01b5f36ffffc7270007fffebffbffeefffffffffffffe9f22e45fffbbf7fff7c7f3df3fffffff66fb77ffc0bedb7fe64fe79ffbffffde3fe254460d9f83c73d101a560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 1206
Estimated Gas Usage: 16158 - 92817
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:167

ts
   */
  function changeCo

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000000000000000000000000000000000000000008040, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 1208
Estimated Gas Usage: 16158 - 92817
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:167

ts
   */
  function changeCo

--------------------
Initial State:

Account: [CREATOR], balance: 0x21010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: lockMana(address,uint256), txdata: 0x6b7006d7020202020202020202020202000000000000000000000000000000000000004080, value: 0x0
Caller: [CREATOR], function: lockMana(address,uint256), txdata: 0x6b7006d7020202020202020202020202000000000000000000000000000000000000004080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 1210
Estimated Gas Usage: 16158 - 92817
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:167

ts
   */
  function changeCo

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000000000000000000000000000000000000000008040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 1214
Estimated Gas Usage: 16158 - 92817
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:169

tate(bool _acceptin

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000000000000000000000000000000000000000008040, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 1216
Estimated Gas Usage: 16158 - 92817
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:169

tate(bool _acceptin

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000804000800000000000000000000000000000000180, value: 0x0
Caller: [SOMEGUY], function: lockMana(address,uint256), txdata: 0x6b7006d7020202020202020202020202804000800000000000000000000000000000000180, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TerraformReserve
Function name: lockMana(address,uint256)
PC address: 1218
Estimated Gas Usage: 16158 - 92817
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:169

tate(bool _acceptin

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: lockMana(address,uint256), txdata: 0x6b7006d7000000000000000000000000000000000000000000000000000000000000008040, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentralandVesting
Function name: release()
PC address: 1271
Estimated Gas Usage: 1958 - 2383
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:272

liff);
    _releaseTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: releaseForeignToken(address,uint256)
PC address: 1365
Estimated Gas Usage: 4572 - 40551
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:350

       _start,
    uint256    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: releaseForeignToken(address,uint256), txdata: 0x980c2f21000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DecentralandVesting
Function name: releaseForeignToken(address,uint256)
PC address: 1494
Estimated Gas Usage: 4616 - 40595
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:350

       _start,
    uint256    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: releaseForeignToken(address,uint256), txdata: 0x980c2f21020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: releaseTo(address)
PC address: 1773
Estimated Gas Usage: 2099 - 2854
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:284

nsfer(target, unrelea

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000402100082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: releaseTo(address), txdata: 0xd1fb5646, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 2058
Estimated Gas Usage: 6043 - 41030
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken);
    _token.t

--------------------
Initial State:

Account: [CREATOR], balance: 0xf101044096c78052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000180040840800101020810800120108001200880c68c220e2cae041cc264adaaa0c0b1291128b60c518a522908850a648a17d5370621e0124060008801c08518a0468c29116c6a195b480661180b0a9c9628941180, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount()
PC address: 2058
Estimated Gas Usage: 6889 - 41876
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken);
    _token.t

--------------------
Initial State:

Account: [CREATOR], balance: 0x81002022604094d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080100804801008804001012004104010080410107e6e7d4624451376a4ac925d14d271605d0b63d34425cc0c3b0383795c21f330022303440420000000000000000000000000000000000000000000000000000084, value: 0x0
Caller: [ATTACKER], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: release()
PC address: 2058
Estimated Gas Usage: 9469 - 45116
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken);
    _token.t

--------------------
Initial State:

Account: [CREATOR], balance: 0x900161800074cb14, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa80d767e817d4cb634d13d88f18928951a4185022940105216a1c9059a9a24b731f58b200103718b8b330b0800bc976dca7a840aea485491d1bc69d0058bac921a0, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: releaseTo(address)
PC address: 2058
Estimated Gas Usage: 8826 - 44473
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken);
    _token.t

--------------------
Initial State:

Account: [CREATOR], balance: 0x818036800d898bc2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef12075f80e64300000263dc0d284a0473d024c5548c0100884021780500344a48b0f8a0bf6404000000aca4010016ff9040000156040140886061080502541ae2ef, value: 0x0
Caller: [ATTACKER], function: releaseTo(address), txdata: 0xd1fb5646, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: revoke()
PC address: 2058
Estimated Gas Usage: 10420 - 46067
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken);
    _token.t

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800820040102040108020802400880200480200119148254208521992c6167120c4792a0875bd794339c8ab6f24633755521840111318012e01a800037c8008df8a8ade78ab04e50685c0068b049e04445209efff08600188020027202404a7674dc366b7942802c66109590865a6120ac6301ff01, value: 0x0
Caller: [CREATOR], function: revoke(), txdata: 0xb6549f75, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 2076
Estimated Gas Usage: 8591 - 43578
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:38

 }

  function

--------------------
Initial State:

Account: [CREATOR], balance: 0x30000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000082001000420010102080202018040024040041072c61b7db0088994b5db4181584897aa2030836ae200379f2e09a4978f82af0310008000000039002508a08149080021a09000aa820a091c000000000000008080, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount()
PC address: 2118
Estimated Gas Usage: 8734 - 43721
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:24

== b);
    return c;
  }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x6006002100020414, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000004800820102080400401011002201008018020007f50d5ded3a74a821266d4122600600010524dbf67578f742de8004c7f8f6e3d000f42a800197e0dee21989ca11232825212090000009001f01800238071820140, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount()
PC address: 2119
Estimated Gas Usage: 8744 - 43731
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:340

ting {
  using SafeERC20 for ERC

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000014004010101018080020102010101108001020402dd034667a9b23ab11f0c3c0dab82cc0754295528323ad15699a942607e2320021c04081020e01082e8b4e07848801000e404e36a265006cab41881c001762080, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentralandVesting
Function name: releaseTo(address)
PC address: 2657
Estimated Gas Usage: 2165 - 2920
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:284

nsfer(target, unrelea

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0c0012005054d10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: releaseTo(address), txdata: 0xd1fb5646, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 2942
Estimated Gas Usage: 6087 - 41074
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken);
    _token.t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000030088, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000810100004108010800804084002080401401010d8282da6926129698a008c094283e245c209a8cb316c5acce08a95489120e020042bf6a2069f60c8400413f8007d0dc25e0318424f80010148760b019700910850, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DecentralandVesting
Function name: releasableAmount()
PC address: 2942
Estimated Gas Usage: 6933 - 41920
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken);
    _token.t

--------------------
Initial State:

Account: [CREATOR], balance: 0x2060032, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 40404040404040404040404010400801020880001080012080800410018040106669cbe48004101adc0c4eb1d650f0839aba8c49a0a2ea5183649a359a2d818a42192400000d208450f3d861040000bd6246784a268190d4de0d8a1088a08306c2, value: 0x0
Caller: [CREATOR], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DecentralandVesting
Function name: release()
PC address: 2942
Estimated Gas Usage: 9513 - 45160
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:335

oken);
    _token.t

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaae01001418b3189a5c1489d80415a66c0b156cd4336d400646059656381084429000008003c568a604ab970bfc830204f53484541205123c047d52ca0c01044e180, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 2960
Estimated Gas Usage: 8635 - 43622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:38

 }

  function

--------------------
Initial State:

Account: [CREATOR], balance: 0x1441000008020c19, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xc09, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000004021040021000010102102008202001000820802d218cbb527183f2441705a128a92db204b75a51969a28105490100345440e10626134222e114012c4312440a8ab249601a46050788628300c908a00c44c023180, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentralandVesting
Function name: vestedAmount()
PC address: 3002
Estimated Gas Usage: 8778 - 43765
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05d477778c9e0c947440d5b993d843ec.sol:24

== b);
    return c;
  }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x31000000010000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000140020100200420400801000810010201022001b788e9ab80840126006618a11f800d144078a2eb0f6b5c2109348ed09341941a044048c040a006da8d121040008006048040a02940cb80a0184d024191008ca044, value: 0x0
Caller: [CREATOR], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0


