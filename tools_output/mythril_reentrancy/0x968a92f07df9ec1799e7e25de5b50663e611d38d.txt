==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SetBuyer
Function name: transferTokenAmount(address,bytes,address,uint256)
PC address: 547
Estimated Gas Usage: 2104 - 38836
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/773115480f694a82901a8d70f6c4fa36.sol:713

rTokenProportionToOrigin(IERC20 token, uint256 mul, uint256 div) external {

        uint256 amount = token.balanceOf(this).mul(mul).div(div);

        // solium-disable-next-line security/no-tx-origin

        require(token.transfer(tx.origin, amount));

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferTokenAmount(address,bytes,address,uint256), txdata: 0x9a509aff0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SetBuyer
Function name: change(bytes,uint256[])
PC address: 789
Estimated Gas Usage: 762 - 6454
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/773115480f694a82901a8d70f6c4fa36.sol:637

 address(this).balance.mul(mul).div(div);

        // solium-disable-next-line security/no-call-value

        require(target.call.value(value)(data));

    }



    function approveTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {

        if (fromToken.allowa

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: change(bytes,uint256[]), txdata: 0xdc0ba228fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SetBuyer
Function name: change(bytes,uint256[])
PC address: 823
Estimated Gas Usage: 762 - 6454
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/773115480f694a82901a8d70f6c4fa36.sol:637

 address(this).balance.mul(mul).div(div);

        // solium-disable-next-line security/no-call-value

        require(target.call.value(value)(data));

    }



    function approveTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {

        if (fromToken.allowa

--------------------
Initial State:

Account: [CREATOR], balance: 0x26000016008400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: change(bytes,uint256[]), txdata: 0xdc0ba228ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SetBuyer
Function name: sendEthProportion(address,bytes,uint256,uint256)
PC address: 3703
Estimated Gas Usage: 2089 - 39664
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/773115480f694a82901a8d70f6c4fa36.sol:671

      }

        fromToken.app

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendEthProportion(address,bytes,uint256,uint256), txdata: 0x846f1185000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SetBuyer
Function name: transferTokenAmount(address,bytes,address,uint256)
PC address: 4081
Estimated Gas Usage: 2104 - 38836
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/773115480f694a82901a8d70f6c4fa36.sol:715

s).mul(mul).div(div);

        // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokenAmount(address,bytes,address,uint256), txdata: 0x9a509aff00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SetBuyer
Function name: sendEthValue(address,bytes,uint256)
PC address: 5096
Estimated Gas Usage: 1273 - 38848
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/773115480f694a82901a8d70f6c4fa36.sol:660




    function approveTokenPr

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendEthValue(address,bytes,uint256), txdata: 0xd2e9236b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SetBuyer
Function name: buy(address,bytes,uint256[])
PC address: 5467
Estimated Gas Usage: 670 - 6785
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/773115480f694a82901a8d70f6c4fa36.sol:647

ken, uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buy(address,bytes,uint256[]), txdata: 0x3143b224, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SetBuyer
Function name: change(bytes,uint256[])
PC address: 5467
Estimated Gas Usage: 792 - 6577
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/773115480f694a82901a8d70f6c4fa36.sol:647

ken, uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: change(bytes,uint256[]), txdata: 0xdc0ba228, value: 0x0