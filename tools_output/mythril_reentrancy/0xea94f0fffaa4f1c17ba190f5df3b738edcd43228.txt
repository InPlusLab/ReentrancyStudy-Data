==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Arbitrage
Function name: getRepayAmount(uint256)
PC address: 933
Estimated Gas Usage: 3105 - 38278
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:1021
Initial State:

Account: [CREATOR], balance: 0x800020f3f89, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getRepayAmount(uint256), txdata: 0x6ec32f9c0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1886
Estimated Gas Usage: 23586 - 206878
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:593

 _fee;

    }



    /**

    * 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 464646464646464646464646deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1962
Estimated Gas Usage: 23586 - 206878
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:601

rbi

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1999
Estimated Gas Usage: 23586 - 206878
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:655

tion

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2245
Estimated Gas Usage: 23586 - 206878
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:655

  function setBank(address _bank) external onlyO

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 464646464646464646464646deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2245
Estimated Gas Usage: 23586 - 206878
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:655

  function setBank(address _bank) external onlyO

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2245
Estimated Gas Usage: 23586 - 206878
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:655

  function setBank(address _bank) external onlyO

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2518
Estimated Gas Usage: 23586 - 206878
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:665

t the fee.

    * @param _fee Fee to borrow, as a percentage of pr

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2518
Estimated Gas Usage: 23586 - 206878
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:665

t the fee.

    * @param _fee Fee to borrow, as a percentage of pr

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2601
Estimated Gas Usage: 23586 - 206878
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:601

lbac

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2787
Estimated Gas Usage: 23586 - 206878
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:601

's callback function.

    * @pa

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 464646464646464646464646deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2787
Estimated Gas Usage: 23586 - 206878
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:601

's callback function.

    * @pa

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2871
Estimated Gas Usage: 23586 - 206878
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:195

sol



/**

 * @title 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 2885
Estimated Gas Usage: 23586 - 206878
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:195

sol



/**

 * @title 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Arbitrage
Function name: submitTrade(address,uint256,address,bytes)
PC address: 3717
Estimated Gas Usage: 3147 - 40818
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:921

uint256 amount,

        address dest,

        bytes

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: submitTrade(address,uint256,address,bytes), txdata: 0xf3d791ea, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Arbitrage
Function name: getRepayAmount(uint256)
PC address: 3826
Estimated Gas Usage: 2796 - 37688
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:1021
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getRepayAmount(uint256), txdata: 0x6ec32f9c01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Arbitrage
Function name: executeArbitrage(address,uint256,address,bytes) or executeArbitrage(address,uint256,address,bytes)
PC address: 3826
Estimated Gas Usage: 8239 - 115458
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/97088ee05262cfb9d1d5535aaa358fee.sol:1021
Initial State:

Account: [CREATOR], balance: 0x1000c0000088005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: executeArbitrage(address,uint256,address,bytes), txdata: 0x7b0f6f18000000000000000000000000021008044008040101400808201001024002200281, value: 0x0