==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TeamJust
Function name: account_info_rotate_tine(uint256)
PC address: 4899
Estimated Gas Usage: 57445 - 246592
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeRequiredSignatures(uint256), txdata: 0x39f636ab000000000000000000000000000000000000000000000000000000000000000101010101010101010102040101010101010101010101010101010100, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PlayerBook
Function name: account_info_rotate_tine(uint256)
PC address: 8452
Estimated Gas Usage: 14209 - 91787
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2cbd7f82e10631f5ea272483e4cbf079.sol:681

{

        return(keccak256(abi.enc

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deleteAnyProposal(bytes32), txdata: 0x0efcf295, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PlayerBook
Function name: account_info_rotate_tine(uint256)
PC address: 8585
Estimated Gas Usage: 14209 - 91787
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2cbd7f82e10631f5ea272483e4cbf079.sol:695

or any given function

    function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deleteAnyProposal(bytes32), txdata: 0x0efcf295, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PlayerBook
Function name: account_info_rotate_tine(uint256)
PC address: 8589
Estimated Gas Usage: 14209 - 91787
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2cbd7f82e10631f5ea272483e4cbf079.sol:695

or any given function

    function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deleteAnyProposal(bytes32), txdata: 0x0efcf295, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: checkIfNameValid(string)
PC address: 9056
Estimated Gas Usage: 1362 - 9078
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2cbd7f82e10631f5ea272483e4cbf079.sol:1543

)

     */

    funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: checkIfNameValid(string), txdata: 0x6c52660d80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PlayerBook
Function name: registerNameXaddr(string,address,bool)
PC address: 9056
Estimated Gas Usage: 2853 - 10899
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2cbd7f82e10631f5ea272483e4cbf079.sol:1739

    // if no affiliate code was gi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2201400002000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerNameXaddr(string,address,bool), txdata: 0x3ddd469880, value: 0x2386f26fc10000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PlayerBook
Function name: account_info_rotate_tine(uint256)
PC address: 11946
Estimated Gas Usage: 14209 - 91787
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deleteAnyProposal(bytes32), txdata: 0x0efcf295, value: 0x0


