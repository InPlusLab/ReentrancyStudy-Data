==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: UCycle
Function name: constructor
PC address: 244
Estimated Gas Usage: 30293 - 202011
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/070acc0e085ebba411188842c894d973.sol:91

  if(isExchangeListed == false){
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10c0542020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x6f05b59d3b20000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UCycle
Function name: constructor
PC address: 244
Estimated Gas Usage: 30293 - 202011
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/070acc0e085ebba411188842c894d973.sol:91

  if(isExchangeListed == false){
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10c0542020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x6f05b59d3b20000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UCycle
Function name: constructor
PC address: 275
Estimated Gas Usage: 30293 - 202011
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/070acc0e085ebba411188842c894d973.sol:92

0000);
         

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10c0542020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x6f05b59d3b20000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UCycle
Function name: constructor
PC address: 324
Estimated Gas Usage: 30293 - 202011
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/070acc0e085ebba411188842c894d973.sol:95

                  originalFeeReceive.transfer(1

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10c0542020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x6f05b59d3b20000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UCycle
Function name: constructor
PC address: 411
Estimated Gas Usage: 30293 - 202011
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/070acc0e085ebba411188842c894d973.sol:100

        }

        //allows owner to burn tokens t

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10c0542020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x6f05b59d3b20000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UCycle
Function name: constructor
PC address: 453
Estimated Gas Usage: 30293 - 202011
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/070acc0e085ebba411188842c894d973.sol:100

        }

        //allows owner to burn tokens t

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10c0542020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x6f05b59d3b20000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UCycle
Function name: constructor
PC address: 457
Estimated Gas Usage: 30293 - 202011
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/070acc0e085ebba411188842c894d973.sol:103

      functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10c0542020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x6f05b59d3b20000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UCycle
Function name: constructor
PC address: 485
Estimated Gas Usage: 30293 - 202011
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/070acc0e085ebba411188842c894d973.sol:102

 in a crowdsale
        functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10c0542020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x6f05b59d3b20000


