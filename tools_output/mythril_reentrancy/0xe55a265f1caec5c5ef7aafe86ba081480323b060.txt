==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FlashToken
Function name: name()
PC address: 1186
Estimated Gas Usage: 1359 - 2299
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9fadd0b8b9f01687d3bcb7fffe6e870e.sol:847

 = ERC20Detailed(b

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FlashToken
Function name: symbol()
PC address: 1767
Estimated Gas Usage: 1358 - 2298
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9fadd0b8b9f01687d3bcb7fffe6e870e.sol:847

n);
        name = s

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlashToken
Function name: deposit(uint256)
PC address: 5190
Estimated Gas Usage: 16306 - 92070
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fadd0b8b9f01687d3bcb7fffe6e870e.sol:380

` cannot be 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000402024824, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f25f12c40b30255085b2580bf1d0524ac06c087ac4e02022a03e00680032e1326f4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlashToken
Function name: deposit(uint256)
PC address: 5209
Estimated Gas Usage: 16306 - 92070
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fadd0b8b9f01687d3bcb7fffe6e870e.sol:380

   * - `account` cannot be the zero add

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000402024824, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f25f12c40b30255085b2580bf1d0524ac06c087ac4e02022a03e00680032e1326f4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlashToken
Function name: deposit(uint256)
PC address: 5234
Estimated Gas Usage: 16306 - 92070
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fadd0b8b9f01687d3bcb7fffe6e870e.sol:381

ve at least `amoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000402024824, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f25f12c40b30255085b2580bf1d0524ac06c087ac4e02022a03e00680032e1326f4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlashToken
Function name: deposit(uint256)
PC address: 5279
Estimated Gas Usage: 16306 - 92070
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fadd0b8b9f01687d3bcb7fffe6e870e.sol:381

* - `account` must have at least `amount` tokens.
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000402024824, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f25f12c40b30255085b2580bf1d0524ac06c087ac4e02022a03e00680032e1326f4, value: 0x0