==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address) or setOwner(address) or setOwner(address)
PC address: 479
Estimated Gas Usage: 12497 - 69436
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:29

t LogSetOwner(

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address) or setOwner(address) or setOwner(address)
PC address: 532
Estimated Gas Usage: 12497 - 69436
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:29

t LogSetOwner(

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address) or setOwner(address) or setOwner(address)
PC address: 539
Estimated Gas Usage: 12497 - 69436
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:32

setAu

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address) or setAuthority(address)
PC address: 704
Estimated Gas Usage: 12519 - 69458
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:37

t LogSetAuthority(auth

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address) or setAuthority(address)
PC address: 757
Estimated Gas Usage: 12519 - 69458
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:37

t LogSetAuthority(auth

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address) or setAuthority(address)
PC address: 763
Estimated Gas Usage: 12519 - 69458
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:40

 {
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DSAuth
Function name: setOwner(address) or setOwner(address) or setOwner(address)
PC address: 1502
Estimated Gas Usage: 12497 - 69436
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:56



library DSMath {
    function a

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address) or setAuthority(address)
PC address: 1502
Estimated Gas Usage: 12519 - 69458
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:56



library DSMath {
    function a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TheButton
Function name: fallback
PC address: 3629
Estimated Gas Usage: 1692 - 1787
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:379

st camp

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TheButton
Function name: press() or press()
PC address: 3629
Estimated Gas Usage: 2067 - 2162
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:716

.total, msg.sender, msg.value);//handle ETH
        } 
    }

    function start() external payable auth {
        require(stopped, "Already started!");
        stopped = false;
        
        if(campaigns.length != 0) {//if there was a past campaign
            ButtonCampaign storage c = campaigns[lastCampaignID];
            require(c.finalized, "Last campaign not finalized!");//make sure it was finalized
        }             
        _newCampaign();//start new campaign
        c = campaigns[lastCampaignID];
        _press(c);
        depositETH(c.total, msg.sender, msg.value);// deposit ETH        
    }

    ///Stopping will only affect new campaigns, not already running ones
    function stop() external auth {
        require(!stopped, "Already stopped!");
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: press(), txdata: 0x5b372532, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TheButton
Function name: nextCampaignBalance() or nextCampaignBalance()
PC address: 4257
Estimated Gas Usage: 1805 - 1900
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:564

   } else {
            return totalPresses;
        }
    }

    /// Total cumulative charity for all campaigns
    function totalCharity() external view returns(uint) {
        if (!campaigns[lastCampaignID].finalized) {
            return totalCharity.add(campaigns[lastCampaignID].total.balanceETH.wmul(campaigns[

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: nextCampaignBalance(), txdata: 0x0b781385, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TheButton
Function name: winner(uint256) or winner(uint256)
PC address: 6612
Estimated Gas Usage: 1193 - 1288
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:524

stCampaignID].jackpotFraction)
                    .wmul(campaigns[lastCampaignID].newCampaignFraction);
            } else

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000006403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: winner(uint256), txdata: 0x1cbeae5e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TheButton
Function name: totalPresses() or totalPresses()
PC address: 6688
Estimated Gas Usage: 1959 - 2054
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:574

    return totalCharity;
        }
    }

    /// Total cumulative revenue for all campaigns
    function totalRevenue() external view returns(uint) {
        if (!campaigns[lastCampaignID].finalized) {
            return totalRevenue.add(campaigns[

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000c0c0b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: totalPresses(), txdata: 0x2741876a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TheButton
Function name: deadline() or deadline()
PC address: 6839
Estimated Gas Usage: 1981 - 2076
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:513

   /// Returns the winner for any given campaign ID
    function winner(uint campaignID) external view returns

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000800000fdc3f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deadline(), txdata: 0x29dcb0cf, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TheButton
Function name: jackpot() or jackpot()
PC address: 8213
Estimated Gas Usage: 3057 - 3152
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:380

iew returns(
        uint price, uint jackpot, uint char, uint64 deadline, uint presses, address lastPresser
        ) {
        price = this.price();
        jackpot = this.jackpot();
        char = this.char

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: jackpot(), txdata: 0x6b31ee01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TheButton
Function name: finalizeCampaign(uint256)
PC address: 8475
Estimated Gas Usage: 2294 - 2719
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:764

adline - uint64(now));
        c.deadline = uint64(now.add(c.period)); // set the new deadline
    }

    /// starting a new campaign
    function _newCampaign()

--------------------
Initial State:

Account: [CREATOR], balance: 0xfd800400400068b5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: finalizeCampaign(uint256), txdata: 0x6b5ca27d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TheButton
Function name: charityBalance() or charityBalance()
PC address: 9474
Estimated Gas Usage: 3233 - 3328
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5b3a825271fb2fe408e2833c8589a12a.sol:380

iew returns(
        uint price, uint jackpot, uint char, uint64 deadline, uint presses, address lastPresser
        ) {
        price = this.price();
        jackpot = this.jackpot();
        char = this.char

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fc00080022080003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: charityBalance(), txdata: 0x99b8a3f0, value: 0x0