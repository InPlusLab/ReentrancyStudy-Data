==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20NFTWrapper
Function name: name()
PC address: 1123
Estimated Gas Usage: 1379 - 2319
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d67abee5a4ac1a8cd6f10986079437ee.sol:819

equire(
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20NFTWrapper
Function name: transferFrom(address,address,uint256)
PC address: 1298
Estimated Gas Usage: 21830 - 135408
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d67abee5a4ac1a8cd6f10986079437ee.sol:899

ransfer amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x1020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000200001000000000000002000001004010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20NFTWrapper
Function name: transferFrom(address,address,uint256)
PC address: 1341
Estimated Gas Usage: 21830 - 135408
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d67abee5a4ac1a8cd6f10986079437ee.sol:901

ent].add(amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000200001000000000000002000001004010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ERC20NFTWrapper
Function name: transferFrom(address,address,uint256)
PC address: 1444
Estimated Gas Usage: 21830 - 135408
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/d67abee5a4ac1a8cd6f10986079437ee.sol:901

es[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        if (_msgSender() != _main

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20NFTWrapper
Function name: symbol()
PC address: 1928
Estimated Gas Usage: 1400 - 2340
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d67abee5a4ac1a8cd6f10986079437ee.sol:823

ner, amount);


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0