==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Locker
Function name: fallback
PC address: 466
Estimated Gas Usage: 17168 - 95098
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6063cde57989f8fc4667e7952b14baf3.sol:127

 totalLockedBala

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000040000100802008002010100040000001004000202, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea0680202020202020202020202020400001008020080020101000400000010040002ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Locker
Function name: fallback
PC address: 491
Estimated Gas Usage: 17168 - 95098
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6063cde57989f8fc4667e7952b14baf3.sol:131

;



        lockedBalances[

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000000000000000000000000000000000000201, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Locker
Function name: fallback
PC address: 493
Estimated Gas Usage: 17168 - 95098
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6063cde57989f8fc4667e7952b14baf3.sol:131

;



        lockedBalances[

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000000180001000002000001000000001001041, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea0682121212121212121212121210000000001800010000020000010000000010010e0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Locker
Function name: fallback
PC address: 497
Estimated Gas Usage: 17168 - 95098
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6063cde57989f8fc4667e7952b14baf3.sol:131

;



        lockedBalances[

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000000000000000000000000000000000000201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Locker
Function name: fallback
PC address: 515
Estimated Gas Usage: 17168 - 95098
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6063cde57989f8fc4667e7952b14baf3.sol:141

urn true;

    }



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000000000000000000000000000000000000201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Locker
Function name: fallback
PC address: 558
Estimated Gas Usage: 17168 - 95098
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6063cde57989f8fc4667e7952b14baf3.sol:151

*/

    function unlock() publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000000000000000000000000000000000000201, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Locker
Function name: getContractRhemBalance()
PC address: 985
Estimated Gas Usage: 2684 - 37952
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/6063cde57989f8fc4667e7952b14baf3.sol:107

     */

    function addLock

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000020400000000000000000000000000004002, value: 0x0
Caller: [ATTACKER], function: getContractRhemBalance(), txdata: 0x87f404cd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Locker
Function name: fallback
PC address: 985
Estimated Gas Usage: 17168 - 95098
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/6063cde57989f8fc4667e7952b14baf3.sol:107

     */

    function addLock

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000140010202008000000101000001000000000039, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068404040404040404040404040000140010202008000000101000001000000000008, value: 0x0