==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NamiMarket
Function name: withdrawNac(uint256)
PC address: 2097
Estimated Gas Usage: 6959 - 77407
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:2117

       require(msg.value > 0);

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x82, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010402100001010100010104010100400401000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NamiMarket
Function name: withdrawNac(uint256)
PC address: 2193
Estimated Gas Usage: 6959 - 77407
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:2119

 now);

    }

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x40041000000001006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000001002020140400801010140408001402001080101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NamiMarket
Function name: withdrawNac(uint256)
PC address: 2359
Estimated Gas Usage: 6959 - 77407
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:2119

.sender, msg.value, now);

    }

    

    fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x82, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010402100001010100010104010100400401000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NamiMarket
Function name: withdrawNac(uint256)
PC address: 2359
Estimated Gas Usage: 6959 - 77407
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:2119

.sender, msg.value, now);

    }

    

    fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x2101000000084001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000008, value: 0x0
Caller: [CREATOR], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NamiMarket
Function name: withdrawNac(uint256)
PC address: 2359
Estimated Gas Usage: 6959 - 77407
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:2119

.sender, msg.value, now);

    }

    

    fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x40041000000001006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000001002020140400801010140408001402001080101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NamiCrowdSale
Function name: setPresalePhase(uint8)
PC address: 4287
Estimated Gas Usage: 2172 - 2927
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1473

ase == Phase.Migrated

                && totalSupply == 0);



        require(canSwitchPhase);

        currentPhase = _nextPhase;

        emit LogPhaseSwitch(_nextPhase);

    }





    function withdrawEther(uint _amount) public

        onlyEscrow

    {

        require(namiMultiSigWallet != 0x0);

        // Available at any phase.

        if (address(this).balance > 0) {

            namiMultiSigWallet.transfer(_amount);

        }

    }

    

    function safeWithdraw(address _withdraw, uint _amount) public

        onlyEscrow

    {

        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);

        if (namiWallet.isOwner(_withdraw)) {

            _withdraw.transfer(_amount);

        }

    }





    function setCrowdsaleManager(address _mgr) public

        onlyEscrow

    {

        // You can't change crowdsale contract when migration is in progress.

        require(

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000080, value: 0x0
Caller: [CREATOR], function: setPresalePhase(uint8), txdata: 0x1ca2e94a101010101010101010101010000000000000000000000000000000000000000d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NamiCrowdSale
Function name: safeWithdraw(address,uint256)
PC address: 6065
Estimated Gas Usage: 4721 - 74224
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1567

d(newToken);

        // add 

--------------------
Initial State:

Account: [CREATOR], balance: 0x61000b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 606060606060606060606060aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa606060606060606060606060deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: safeWithdraw(address,uint256), txdata: 0x5058c460, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NamiCrowdSale
Function name: safeWithdraw(address,uint256)
PC address: 6174
Estimated Gas Usage: 4721 - 74224
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1569

Supply

        totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x100040000002002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x16fcbe088130, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000040, value: 0x0
Caller: [ATTACKER], function: safeWithdraw(address,uint256), txdata: 0x5058c460, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NamiCrowdSale
Function name: safeWithdraw(address,uint256)
PC address: 6174
Estimated Gas Usage: 4721 - 74224
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1569

Supply

        totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x910009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 606060606060606060606060aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa606060606060606060606060deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: safeWithdraw(address,uint256), txdata: 0x5058c460, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8028
Estimated Gas Usage: 559 - 654
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1323

} else if (1520467200 < now && now <= 1521072000) {

            // 6th week

            return 1900;

        } else if (1521072000 < now && now <= 1521676800) {

            // 7th week

            return 1800;

        } else if (1521676800 < now && now <= 1522281600) {

            // 8th week

            return 1700;

        } else {

            return binary;

        }

    }





    function() payable public {

        buy(msg.sender);

    }

    

    

    function buy(address _buyer) payable public {

        // Available only if presale is running.

        require(currentPhase == Phase.Running);

        // require ICO time or binary option

        require(now <= 1522281600 || msg.sender == binaryAddress);

        require(msg.value != 0);

        uint newTokens = msg.value * getPrice();

        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8051
Estimated Gas Usage: 587 - 682
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1327

1900;

        } else if (1521072000 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8066
Estimated Gas Usage: 604 - 699
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1327

urn 1900;

        } else if (1521072000 < now && now <= 1521676800) {

            // 7th week

            return 1800;

        } else if (1521676800 < now && now <= 1522281600) {

            // 8th week

            return 1700;

        } else {

            return binary;

        }

    }





    function() payable public {

        buy(msg.sender);

    }

    

    

    function buy(address _buyer) payable public {

        // Available only if presale is running.

        require(currentPhase == Phase.Running);

        // require ICO time or binary option

        require(now <= 1522281600 || msg.sender == binaryAddress);

        require(msg.value != 0);

        uint newTokens = msg.value * getPrice();

        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSu

--------------------
Initial State:

Account: [CREATOR], balance: 0x2180000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8089
Estimated Gas Usage: 632 - 727
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1333

0;

        } else if (1521676800 < n

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8104
Estimated Gas Usage: 649 - 744
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1333

 1800;

        } else if (1521676800 < now && now <= 1522281600) {

            // 8th week

            return 1700;

        } else {

            return binary;

        }

    }





    function() payable public {

        buy(msg.sender);

    }

    

    

    function buy(address _buyer) payable public {

        // Available only if presale is running.

        require(currentPhase == Phase.Running);

        // require ICO time or binary option

        require(now <= 1522281600 || msg.sender == binaryAddress);

        require(msg.value != 0);

        uint newTokens = msg.value * getPrice();

        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSu

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8127
Estimated Gas Usage: 677 - 772
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1340


        } else {

            return

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8142
Estimated Gas Usage: 694 - 789
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1339

00;

        } else {

            return binary;

        }

    }





    function() payable public {

        buy(msg.sender);

    }

    

    

    function buy(address _buyer) payable public {

        // Available only if presale is running.

        require(currentPhase == Phase.Running);

        // require ICO time or binary option

        require(now <= 1522281600 || msg.sender == binaryAddress);

        require(msg.value != 0);

        uint newTokens = msg.value * getPrice();

        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8165
Estimated Gas Usage: 722 - 817
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1355

sg.sender);

    }

    

    

    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000008080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8180
Estimated Gas Usage: 739 - 834
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1355

uy(msg.sender);

    }

    

    

    function buy(address _buyer) payable public {

        // Available only if presale is running.

        require(currentPhase == Phase.Running);

        // require ICO time or binary option

        require(now <= 1522281600 || msg.sender == binaryAddress);

        require(msg.value != 0);

        uint newTokens = msg.value * getPrice();

        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSu

--------------------
Initial State:

Account: [CREATOR], balance: 0x3ab, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8203
Estimated Gas Usage: 767 - 862
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1365

sale is running.

        require(cur

--------------------
Initial State:

Account: [CREATOR], balance: 0x1a9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8218
Estimated Gas Usage: 784 - 879
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1365

 presale is running.

        require(currentPhase == Phase.Running);

        // require ICO time or binary option

        require(now <= 1522281600 || msg.sender == binaryAddress);

        require(msg.value != 0);

        uint newTokens = msg.value * getPrice();

        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSu

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000018a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8241
Estimated Gas Usage: 812 - 907
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1371

      require(now <= 1522281600 || ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x502010003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8256
Estimated Gas Usage: 829 - 924
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1369



        require(now <= 1522281600 || msg.sender == binaryAddress);

        require(msg.value != 0);

        uint newTokens = msg.value * getPrice();

        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1ab, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8279
Estimated Gas Usage: 857 - 952
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1375

wTokens = msg.value * getPrice();

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1a2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8294
Estimated Gas Usage: 874 - 969
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1375

t newTokens = msg.value * getPrice();

        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSu

--------------------
Initial State:

Account: [CREATOR], balance: 0x20004a3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8317
Estimated Gas Usage: 902 - 997
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1379

new token to buyer

        balanceOf

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8332
Estimated Gas Usage: 919 - 1014
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1379

add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSu

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000100000201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NamiCrowdSale
Function name: transferToBuyer(address,uint256,address)
PC address: 11266
Estimated Gas Usage: 2249 - 2534
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1761

y 0

    uint c = a / b;

    // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x68003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000001001000000000000000000080000000000000000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: transferToBuyer(address,uint256,address), txdata: 0x78044ba5000000000000000000000000000000000000000000000000000000000000008001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NamiCrowdSale
Function name: transferToExchange(address,uint256,uint256)
PC address: 11266
Estimated Gas Usage: 2265 - 2550
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a26e8cdde5aab723acede3c427692574.sol:1693

unt of tokens that will be transf

--------------------
Initial State:

Account: [CREATOR], balance: 0x400040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000004001010101010201040202010201040140000100000000000000000000000010, value: 0x0
Caller: [CREATOR], function: transferToExchange(address,uint256,uint256), txdata: 0x8d70c0ce000000000000000000000000000000000000000000000000000000000000002001, value: 0x0