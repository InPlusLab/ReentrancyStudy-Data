==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BCDCVault
Function name: fallback
PC address: 164
Estimated Gas Usage: 857 - 952
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:535

ion
    string public constant name = "BCDC Token";

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BCDCToken
Function name: constructor
PC address: 336
Estimated Gas Usage: 29735 - 134809
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:625

 = _fundingEndBlock;
        tokenSaleMax = _

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: 0x72c68108a82e82617b93d1be0d7975d762035015
Function name: constructor
PC address: 450
Estimated Gas Usage: 46307 - 211153
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:637

        // MultiSigWallet is n

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010102010101010101040401010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: 0x72c68108a82e82617b93d1be0d7975d762035015
Function name: constructor
PC address: 497
Estimated Gas Usage: 46367 - 211213
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:640

 // Ownership related modife

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001000801400180008002042008010804020100010000000000000000000000000102010802100101020110040401010180010802e573e10de9fe76c5f07f399a0739fe20c806d1ff42064100032c02104d36fd00e685e1c7245eb755fc3f849c04ab3f40cc07000000800100033402404d5afd0100000000000000000001000000000000000000000000000000000000000002010000000000000000000000000000000000000000000000000000000000000040010101010101010101010101010101010101010000000000000000000000000194, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BCDCVault
Function name: unlockForFounders()
PC address: 596
Estimated Gas Usage: 1065 - 1160
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:516

allow payment after unlock block
    function () p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, value: 0x0
Caller: [CREATOR], function: unlockForFounders(), txdata: 0x829c0095, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BCDCToken
Function name: constructor
PC address: 874
Estimated Gas Usage: 180468 - 769391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:651

ner {
      if (newOwner != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101040401080101040101020104010101010000000000000000000000000202010808010001010801042002020104012001f040000000000c016007affc5b00d6cf800005e06023794101011994ea0b0100f0400000000024200000a27d0b00e90c004005e20129698101012180220b0101208002804002004100028010080100040402400120048001108041200101020c200800000100404080010002000004000000080008000001000001000001000801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BCDCToken
Function name: constructor
PC address: 927
Estimated Gas Usage: 180468 - 769391
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:651

ner {
      if (newOwner != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101040401080101040101020104010101010000000000000000000000000202010808010001010801042002020104012001f040000000000c016007affc5b00d6cf800005e06023794101011994ea0b0100f0400000000024200000a27d0b00e90c004005e20129698101012180220b0101208002804002004100028010080100040402400120048001108041200101020c200800000100404080010002000004000000080008000001000001000001000801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BCDCToken
Function name: constructor
PC address: 939
Estimated Gas Usage: 180468 - 769391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:654

      }
    }

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101040401080101040101020104010101010000000000000000000000000202010808010001010801042002020104012001f040000000000c016007affc5b00d6cf800005e06023794101011994ea0b0100f0400000000024200000a27d0b00e90c004005e20129698101012180220b0101208002804002004100028010080100040402400120048001108041200101020c200800000100404080010002000004000000080008000001000001000001000801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BCDCToken
Function name: constructor
PC address: 992
Estimated Gas Usage: 180468 - 769391
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:654

      }
    }

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101040401080101040101020104010101010000000000000000000000000202010808010001010801042002020104012001f040000000000c016007affc5b00d6cf800005e06023794101011994ea0b0100f0400000000024200000a27d0b00e90c004005e20129698101012180220b0101208002804002004100028010080100040402400120048001108041200101020c200800000100404080010002000004000000080008000001000001000001000801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BCDCToken
Function name: constructor
PC address: 999
Estimated Gas Usage: 180468 - 769391
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:658

called befor

--------------------
Initial State:

Account: [CREATOR], balance: 0x18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101040401080101040101020104010101010000000000000000000000000202010808010001010801042002020104012001f040000000000c016007affc5b00d6cf800005e06023794101011994ea0b0100f0400000000024200000a27d0b00e90c004005e20129698101012180220b0101208002804002004100028010080100040402400120048001108041200101020c200800000100404080010002000004000000080008000001000001000001000801, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BCDCToken
Function name: constructor
PC address: 1142
Estimated Gas Usage: 180468 - 769391
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:658

This has to be called before preAllocation
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101020101010101080101010180010100080101f062268804801400dfffbf82e9d719c7d5bf2380023c3ea4ac096e4ab03a2000f068269100801600dffffff3eaf7bb6fd75f6580023c4720b0116e683202400180111a0101802081080101041004010110200101011202080804004002040401001104401040204000000000000000000000000000100200000000000200000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BCDCToken
Function name: constructor
PC address: 1142
Estimated Gas Usage: 180468 - 769391
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:658

This has to be called before preAllocation
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020204001010402800280100820010210080040010000000000000000000000000101010201018001014001400201010180010101800005000d010c5058140297ceebffffffffffc0d5b800594b001082085e0026800106404904149060940c43cf14cff2446e0e40d5b800594b002082085e00270211010000801010200808200810804008408001100211008002080410098200000840200120002020080120010180400102000000001080800002010201802001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BCDCToken
Function name: constructor
PC address: 1142
Estimated Gas Usage: 180468 - 769391
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:658

This has to be called before preAllocation
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101040401080101040101020104010101010000000000000000000000000202010808010001010801042002020104012001f040000000000c016007affc5b00d6cf800005e06023794101011994ea0b0100f0400000000024200000a27d0b00e90c004005e20129698101012180220b0101208002804002004100028010080100040402400120048001108041200101020c200800000100404080010002000004000000080008000001000001000001000801, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BCDCVault
Function name: unlockForDevelopment()
PC address: 1296
Estimated Gas Usage: 1115 - 1210
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:499

bcdcToken.transfer(bcdcMultisig, developmentT

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unlockForDevelopment(), txdata: 0xa1fc2a2e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BCDCToken
Function name: fallback
PC address: 3384
Estimated Gas Usage: 1760 - 2185
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/aae188db9d08c02fd91696f842a2997c.sol:894

f (value > balances[msg.sender]) throw;

        // update the balances here first before calling out (reentrancy)
        balances[msg.sender] = safeSub(balances[msg.sender], value);
        totalSupply = safeSub(totalSupply, value);
        totalUpgraded = safeAdd(totalUpgraded, val

--------------------
Initial State:

Account: [CREATOR], balance: 0x4a022000800000300, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080082004010208010102800410021001400102400000000000000000000000000210400202024080040804400280020840202010ffffff04000080080105083741003600a246f0052000240282000008806f7016ffffff04000080140209203742015608a4a30006200024028300002091cc70330103041020024004202080060108000801100101841002000104010100100805000280102002010210200002000000000100010180000100010400010010080402, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0