==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2451
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:260

         
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2485
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:261

e
        u

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2531
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:267

vidends;
        stakers[msg.sender].r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2535
Estimated Gas Usage: 55345 - 234517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:267

vidends;
        stakers[msg.sender].r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2536
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:270

;
        
        emit STAKED(m

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2589
Estimated Gas Usage: 55345 - 234517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:269

  
        totalStakes = totalStakes.add(tokens.sub(_stakingFee));
        
        emit STAKED(ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2596
Estimated Gas Usage: 55345 - 234517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:272

okens.sub(_stakingFee), _stakingFee);
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2599
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:275

--------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2604
Estimated Gas Usage: 55345 - 234517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:275

 // -------------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2607
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:276

n sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2613
Estimated Gas Usage: 55345 - 234517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:275

------------
    // Owners can sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2635
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:276

akers using

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 2650
Estimated Gas Usage: 55345 - 234517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:276

tributed to stakers using this function
    // @param 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3047
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:332

payouts

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3076
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:332

256 amount =  ((totalDividen

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3082
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:331

56 _pendingReward) {


--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3096
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:331

ns(uint256 _pendingReward) {
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3099
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:331

) public view 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3132
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:333

aker].r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3161
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:333

lDividends.sub(payouts[stake

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3167
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:332

caling);
        amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3182
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:332

)).div(scaling);
        amount +=

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3185
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:332

taker].stakedT

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3248
Estimated Gas Usage: 55345 - 234517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:332

ker].round - 1])).mul(stakers[staker].stakedTokens)).div(scaling);
        amount += ((totalDividends.sub(payouts[stakers[staker].r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FairyStaking
Function name: STAKE(uint256)
PC address: 3256
Estimated Gas Usage: 55345 - 234517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7430c181a11ec9ee5f77bf4bf3261ff1.sol:332

ker].round - 1])).mul(stakers[staker].stakedTokens)).div(scaling);
        amount += ((totalDividends.sub(payouts[stakers[staker].r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c181c4000602201204021c079e6db82392e116502082108a2620009d6823b4a0, value: 0x0