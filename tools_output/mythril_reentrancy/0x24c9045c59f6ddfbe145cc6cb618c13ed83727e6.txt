==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ContractReceiver
Function name: tokenFallback(address,uint256,bytes)
PC address: 128
Estimated Gas Usage: 1163 - 6810
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:63

_from, uint _value, bytes _data){

      TKN memory tkn;

      tkn.sender = _from;

      tkn.value = _value;

      tkn.data = _data;

      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);

      tkn.sig = bytes4(u);

      

      /* tkn variable is analogue of msg variable of Ether transaction

      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)

      *  tkn.value the number of tokens that were sent   (analogue of msg.value)

      *  tkn.data is data of token transaction   (analogue of msg.data)

      *  tkn.sig is 4 bytes signature of function

      *  if data of token transaction is a function execution

      */

    }

}

 /**

 * ERC23 token by Dexaran

 *

 * h

--------------------
Initial State:

Account: [CREATOR], balance: 0x181080500000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a01010101010101010101010101010101010101010101010101010101010700000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ContractReceiver
Function name: tokenFallback(address,uint256,bytes)
PC address: 296
Estimated Gas Usage: 690 - 4601
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Ownable
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 339
Estimated Gas Usage: 1035 - 1460
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:195

    owner = newOwner;

    }

  }



}



contract Haltable is Ownable {

  bool public halted;



  modifier stopInEmergency {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2bb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Haltable
Function name: halt() or halt()
PC address: 422
Estimated Gas Usage: 973 - 1398
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:243

s to normal state

  function unhalt() external onlyOwner onlyI

--------------------
Initial State:

Account: [CREATOR], balance: 0x500000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: halt(), txdata: 0x5ed7ca5b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ContractReceiver
Function name: tokenFallback(address,uint256,bytes)
PC address: 434
Estimated Gas Usage: 803 - 5230
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ContractReceiver
Function name: tokenFallback(address,uint256,bytes)
PC address: 572
Estimated Gas Usage: 916 - 5859
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Haltable
Function name: unhalt() or unhalt()
PC address: 597
Estimated Gas Usage: 1039 - 1464
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:257

th, Haltable {



  mapping(address => uint) balances;

  

  string public symbol

--------------------
Initial State:

Account: [CREATOR], balance: 0x500000202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unhalt(), txdata: 0xcb3e64fd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Haltable
Function name: unhalt() or unhalt()
PC address: 621
Estimated Gas Usage: 1898 - 2653
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:257

th, Haltable {



  mapping(address => uint) balances;

  

  string public symbol

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unhalt(), txdata: 0xcb3e64fd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: ContractReceiver
Function name: tokenFallback(address,uint256,bytes)
PC address: 708
Estimated Gas Usage: 1026 - 6485
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x405, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Haltable
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 740
Estimated Gas Usage: 1101 - 1526
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:195

    owner = newOwner;

    }

  }



}



contract Haltable is Ownable {

  bool public halted;



  modifier stopInEmergency {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x500000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Tablow
Function name: BurnTokens(uint256)
PC address: 5299
Estimated Gas Usage: 15856 - 57686
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:713

xDistribPubli

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c62, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: BurnTokens(uint256), txdata: 0x2cd3fd7080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Tablow
Function name: unhalt() or unhalt()
PC address: 8159
Estimated Gas Usage: 2466 - 3221
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:257

th, Haltable {



  mapping(address => uint) balances;

  

  string public symbol

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unhalt(), txdata: 0xcb3e64fd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 8650
Estimated Gas Usage: 5923 - 76554
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:823

urns (bool success) {

      


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 8707
Estimated Gas Usage: 5923 - 76554
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:829

  ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 8884
Estimated Gas Usage: 5923 - 76554
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:827

_to)) {

        return trans

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 8884
Estimated Gas Usage: 5923 - 76554
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:827

_to)) {

        return trans

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 8884
Estimated Gas Usage: 5923 - 76554
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:827

_to)) {

        return trans

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Tablow
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 9719
Estimated Gas Usage: 2475 - 3043
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:957
Initial State:

Account: [CREATOR], balance: 0x40000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000000008001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Tablow
Function name: transfer(address,uint256,bytes) or transfer(address,uint256,bytes)
PC address: 9719
Estimated Gas Usage: 2724 - 5596
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:957
Initial State:

Account: [CREATOR], balance: 0x100080000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256,bytes), txdata: 0xbe45fd62000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Tablow
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 10521
Estimated Gas Usage: 2474 - 3042
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:957
Initial State:

Account: [CREATOR], balance: 0x40000000001000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Tablow
Function name: transfer(address,uint256,bytes) or transfer(address,uint256,bytes)
PC address: 10521
Estimated Gas Usage: 2723 - 5595
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ceeac2bee467cf462e4556ee5b4c8bc2.sol:957
Initial State:

Account: [CREATOR], balance: 0x403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256,bytes), txdata: 0xbe45fd62000000000000000000000000000000000000000000000000000000000000004002, value: 0x0