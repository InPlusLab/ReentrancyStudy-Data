==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PriceWatcher
Function name: constructor
PC address: 319
Estimated Gas Usage: 84865 - 404020
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:3125
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PriceWatcher
Function name: constructor
PC address: 1472
Estimated Gas Usage: 84865 - 404020
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:647

setNetwo

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PriceWatcher
Function name: constructor
PC address: 1497
Estimated Gas Usage: 84865 - 404020
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:649

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PriceWatcher
Function name: constructor
PC address: 1603
Estimated Gas Usage: 84865 - 404020
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:649

     return orac

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PriceWatcher
Function name: constructor
PC address: 1650
Estimated Gas Usage: 84865 - 404020
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:647

ool _networkSet) {

      return oracl

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PriceWatcher
Function name: constructor
PC address: 1677
Estimated Gas Usage: 84865 - 404020
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:647

ool _networkSet) {

      return oracl

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PriceWatcher
Function name: constructor
PC address: 1682
Estimated Gas Usage: 84865 - 404020
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:843

urns (by

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PriceWatcher
Function name: constructor
PC address: 1890
Estimated Gas Usage: 84865 - 404020
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:843

urns (bytes32 _id) {

        uint price

--------------------
Initial State:

Account: [CREATOR], balance: 0x42e48548000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PriceWatcher
Function name: constructor
PC address: 1890
Estimated Gas Usage: 84865 - 404020
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:843

urns (bytes32 _id) {

        uint price

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PriceWatcher
Function name: constructor
PC address: 1947
Estimated Gas Usage: 84865 - 404020
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:846


        if (price > 1 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PriceWatcher
Function name: constructor
PC address: 1948
Estimated Gas Usage: 84865 - 404020
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:845

asource);

        if (price > 1 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000040000000142, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PriceWatcher
Function name: constructor
PC address: 1972
Estimated Gas Usage: 84865 - 404020
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ff89c76bb1174db8ec5b311b4fdd8c8.sol:851

    }

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0


