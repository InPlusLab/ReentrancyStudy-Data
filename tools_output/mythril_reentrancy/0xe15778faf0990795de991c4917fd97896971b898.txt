==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherWin
Function name: JPBlocks(uint256)
PC address: 5251
Estimated Gas Usage: 1113 - 1208
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b1103146a97e74bd54195640d5225690.sol:154

nt public lastPayout;


--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: JPBlocks(uint256), txdata: 0xa23e52db0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: EtherWin
Function name: addWinBlock(uint256)
PC address: 6172
Estimated Gas Usage: 387 - 482
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b1103146a97e74bd54195640d5225690.sol:202

_blockNum);
        uint8 lastByte = uint8(bhash[31]);

        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x208af99, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addWinBlock(uint256), txdata: 0xc257581d0000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: EtherWin
Function name: addWinBlock(uint256)
PC address: 6185
Estimated Gas Usage: 401 - 496
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b1103146a97e74bd54195640d5225690.sol:202

lockhash(_blockNum);
        uint8 lastByte = uint8(bhash[31]);

        require

--------------------
Initial State:

Account: [CREATOR], balance: 0x220080001c06bc22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addWinBlock(uint256), txdata: 0xc257581d8000000000000000000000000000000025602d38648404021a2104f01801fffa, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EtherWin
Function name: transferEthersToDividendManager()
PC address: 6495
Estimated Gas Usage: 1146 - 1241
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b1103146a97e74bd54195640d5225690.sol:342

ds,5000));
        ownerWallet2.transfe

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000204300b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferEthersToDividendManager(), txdata: 0xd436a677, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtherWin
Function name: claimTokens(address)
PC address: 7846
Estimated Gas Usage: 5430 - 75404
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b1103146a97e74bd54195640d5225690.sol:391
Initial State:

Account: [CREATOR], balance: 0x188008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTokens(address), txdata: 0xdf8de3e7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EtherWin
Function name: claimTokens(address)
PC address: 7846
Estimated Gas Usage: 5430 - 75404
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/b1103146a97e74bd54195640d5225690.sol:391
Initial State:

Account: [CREATOR], balance: 0xf400040202801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTokens(address), txdata: 0xdf8de3e70000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherWin
Function name: jackpotValue(uint256,uint256)
PC address: 9614
Estimated Gas Usage: 3029 - 3314
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b1103146a97e74bd54195640d5225690.sol:311

 function chan

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: jackpotValue(uint256,uint256), txdata: 0xe23e5a41000000000000000000000000000000000000000000000000000000000000000180410000000000083294a5292294a52900000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherWin
Function name: jackpotValue(uint256,uint256)
PC address: 9637
Estimated Gas Usage: 4441 - 4726
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b1103146a97e74bd54195640d5225690.sol:314

     divider = _divider;


--------------------
Initial State:

Account: [CREATOR], balance: 0x48000041830041e83, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: jackpotValue(uint256,uint256), txdata: 0xe23e5a4100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherWin
Function name: addWinBlock(uint256)
PC address: 9971
Estimated Gas Usage: 345 - 440
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b1103146a97e74bd54195640d5225690.sol:202

blockNum);
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addWinBlock(uint256), txdata: 0xc257581dfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0