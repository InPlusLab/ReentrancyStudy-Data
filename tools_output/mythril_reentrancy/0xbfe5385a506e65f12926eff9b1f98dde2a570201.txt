==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RivetzRegistrar
Function name: renew(uint256,uint256)
PC address: 5442
Estimated Gas Usage: 4905 - 40602
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:634


        requireRegistrantOrGreater(spEntry);

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: renew(uint256,uint256), txdata: 0xc475abff, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 6521
Estimated Gas Usage: 39812 - 197271
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:461

t256 pubKeyHash, uint256 infoHash, address spidRegistrant, address 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 6612
Estimated Gas Usage: 39812 - 197271
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:463

wEntry(spid);

        spEntry.

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 6665
Estimated Gas Usage: 39812 - 197271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:463

wEntry(spid);

        spEntry.

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 6679
Estimated Gas Usage: 39812 - 197271
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:465

spidRegistrant;

        s

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 6732
Estimated Gas Usage: 39812 - 197271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:465

spidRegistrant;

        s

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 6741
Estimated Gas Usage: 39812 - 197271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:467

= spidAdmin;

        spEntry.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 6750
Estimated Gas Usage: 39812 - 197271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:469

ubKeyHash;

        spEntry

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 6765
Estimated Gas Usage: 39812 - 197271
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:471

nfoHash;

        spE

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 6779
Estimated Gas Usage: 39812 - 197271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:471

nfoHash;

        spE

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RivetzRegistrar
Function name: setAdmin(uint256,address)
PC address: 6949
Estimated Gas Usage: 6473 - 9022
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:801

 spEntry.expiration;

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAdmin(uint256,address), txdata: 0x142e8e25, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RivetzRegistrar
Function name: renew(uint256,uint256)
PC address: 7085
Estimated Gas Usage: 5882 - 41579
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:335

egistrant - ma

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: renew(uint256,uint256), txdata: 0xc475abff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 7130
Estimated Gas Usage: 39812 - 197271
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:515

y.registrant = reg

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RivetzRegistrar
Function name: rivetzRegister(uint256,uint256,uint256,address,address)
PC address: 7210
Estimated Gas Usage: 36460 - 158837
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:523

e admin, must be

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rivetzRegister(uint256,uint256,uint256,address,address), txdata: 0xc9fca8a5, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 7210
Estimated Gas Usage: 39812 - 197271
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:523

e admin, must be

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RivetzRegistrar
Function name: register(uint256,uint256,uint256)
PC address: 7217
Estimated Gas Usage: 39812 - 197271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:521

    /**

     * Change admin, must be

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: register(uint256,uint256,uint256), txdata: 0xfaa5c564, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RivetzRegistrar
Function name: setInfo(uint256,uint256)
PC address: 7799
Estimated Gas Usage: 6933 - 9575
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d49eef14b03130770adbd960352ca2e2.sol:781

o convert to seconds

     * @return seconds

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setInfo(uint256,uint256), txdata: 0xf3fb9a02, value: 0x0