==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MyEtherHODL
Function name: fallback
PC address: 2009
Estimated Gas Usage: 41436 - 164393
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:126

   }
        H

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d00102120514112a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MyEtherHODL
Function name: hodlFor3y()
PC address: 2009
Estimated Gas Usage: 40302 - 163069
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:126

   }
        H

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c1c10001b1000082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: hodlFor3y(), txdata: 0x35c05ab0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MyEtherHODL
Function name: hodlFor2y()
PC address: 2009
Estimated Gas Usage: 40324 - 163091
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:126

   }
        H

--------------------
Initial State:

Account: [CREATOR], balance: 0x2081140000038003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4040600000872826a, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: hodlFor2y(), txdata: 0x3618b290, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MyEtherHODL
Function name: hodlFor1y()
PC address: 2009
Estimated Gas Usage: 40346 - 163113
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:126

   }
        H

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000120000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400400601603080a5, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: hodlFor1y(), txdata: 0x46205ac3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MyEtherHODL
Function name: fallback
PC address: 2080
Estimated Gas Usage: 27435 - 109000
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:125

dFor[msg.sender] = duration;
        }
        Ho

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MyEtherHODL
Function name: fallback
PC address: 2088
Estimated Gas Usage: 41436 - 164393
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:127

.sender], lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d00102120514112a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MyEtherHODL
Function name: hodlFor3y()
PC address: 2088
Estimated Gas Usage: 40302 - 163069
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:127

.sender], lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c1c10001b1000082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: hodlFor3y(), txdata: 0x35c05ab0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MyEtherHODL
Function name: hodlFor2y()
PC address: 2088
Estimated Gas Usage: 40324 - 163091
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:127

.sender], lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x2081140000038003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4040600000872826a, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: hodlFor2y(), txdata: 0x3618b290, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MyEtherHODL
Function name: hodlFor1y()
PC address: 2088
Estimated Gas Usage: 40346 - 163113
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:127

.sender], lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000120000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400400601603080a5, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: hodlFor1y(), txdata: 0x46205ac3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MyEtherHODL
Function name: reclaimToken(address)
PC address: 4134
Estimated Gas Usage: 5156 - 75506
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:170
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MyEtherHODL
Function name: reclaimToken(address)
PC address: 4190
Estimated Gas Usage: 5156 - 75506
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:170
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MyEtherHODL
Function name: reclaimToken(address)
PC address: 4367
Estimated Gas Usage: 5156 - 75506
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:170
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MyEtherHODL
Function name: reclaimToken(address)
PC address: 4367
Estimated Gas Usage: 5156 - 75506
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:170
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MyEtherHODL
Function name: reclaimToken(address)
PC address: 4367
Estimated Gas Usage: 5156 - 75506
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:170
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MyEtherHODL
Function name: get2(uint256)
PC address: 4432
Estimated Gas Usage: 1077 - 1172
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:57

rns(address hodler1, uint balance1, uint lockedUntil1, uint lockedFor1,
                address hodler2, uint balance2, uint lockedUntil2, uint lockedFor2)
    {
        hodler1 = hodlers[index];
        balance1 = balanceOf[hodler1];
        lockedUntil1 = lockedUntil[hodler1];
        lockedFor1 = lockedFor[hodler1];

        hodler2 = hodlers[index + 1];
        balance2 = balanceOf[hodler2];
        lockedUntil2 = lockedUntil[hodler2];
        lockedFor2 = lockedFor[hodler2];
    }

    function get3(uint index) public constant 
        returns(add

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: get2(uint256), txdata: 0x31184dc3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MyEtherHODL
Function name: hodlers(uint256)
PC address: 5067
Estimated Gas Usage: 1207 - 1302
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:42

dress => uint) public in

--------------------
Initial State:

Account: [CREATOR], balance: 0x12001000000008002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: hodlers(uint256), txdata: 0x7a3b1e86, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MyEtherHODL
Function name: get1(uint256)
PC address: 5197
Estimated Gas Usage: 1285 - 1380
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:48

     returns(address hodler1, uint balance1, uint lockedUntil1, uint lockedFor1)
    {
        hodler1 = hodlers[index];
        balance1 = balanceOf[hodler1];
        lockedUntil1 = lockedUntil[hodler1];
        lockedFor1 = lockedFor[hodler1];
    }

    function get2(uint index) public constant 
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: get1(uint256), txdata: 0x9c117f0f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MyEtherHODL
Function name: get3(uint256)
PC address: 5481
Estimated Gas Usage: 1331 - 1426
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/59368431c44cb7bdad4d09d59f9cacca.sol:72

ler1, uint balance1, uint lockedUntil1, uint lockedFor1,
                address hodler2, uint balance2, uint lockedUntil2, uint lockedFor2,
                address hodler3, uint balance3, uint lockedUntil3, uint lockedFor3)
    {
        hodler1 = hodlers[index];
        balance1 = balanceOf[hodler1];
        lockedUntil1 = lockedUntil[hodler1];
        lockedFor1 = lockedFor[hodler1];

        hodler2 = hodlers[index + 1];
        balance2 = balanceOf[hodler2];
        lockedUntil2 = lockedUntil[hodler2];
        lockedFor2 = lockedFor[hodler2];

        hodler3 = hodlers[index + 2];
        balance3 = balanceOf[hodler3];
        lockedUntil3 = lockedUntil[hodler3];
        lockedFor3 = lockedFor[hodler3];
    }
    
    function hodlersCount() public constant returns(uint) {
        return hodlers.

--------------------
Initial State:

Account: [CREATOR], balance: 0x48000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: get3(uint256), txdata: 0xed09d19a, value: 0x0