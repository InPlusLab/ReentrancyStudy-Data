==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RC
Function name: fallback
PC address: 0
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000100010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010180010101010101010101010101800101012002010101010000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RC
Function name: fallback
PC address: 199
Estimated Gas Usage: 860 - 955
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:170

m"); 
        require( remainingTokens > 0, "

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000101041001000101010100010100080110010101012001080101010180010101010101010101010400010101010101010100010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RC
Function name: fallback
PC address: 320
Estimated Gas Usage: 1688 - 1783
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:171

kens > 0" );
        
        uint256 tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000080101100004080108010400080108011000010001010101010101010401010101010101010101000101010101010001010101010101010101010101010101010101010101040101010101010101400101010101000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RC
Function name: constructor
PC address: 760
Estimated Gas Usage: 39215 - 219791
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:115

Time == 0 ) {
            end

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01010101010101010201010101010101080101020101010101010101010201010101010102010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RC
Function name: fallback
PC address: 885
Estimated Gas Usage: 21787 - 100185
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:176

oldTokens = soldTokens.add(tokenAmount);
        
        emit BuyRC( msg.sender, msg.data, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40014040000402208002800401044008800410800420020420020140400808028001080800000000000000000000000000008010012008800102048020802008000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x02021001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RC
Function name: fallback
PC address: 951
Estimated Gas Usage: 21787 - 100185
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:178

ei );
    }
}



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef20400101028020021020808004080402010401024080400280048080000120408000400000001000000000000000000020088080000880200480800120802004000000000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x10104000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RC
Function name: fallback
PC address: 970
Estimated Gas Usage: 21787 - 100185
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:178

t, oneTokenInFiatWei );
    }
}

contract DaicoCoi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef20400101028020021020808004080402010401024080400280048080000120408000400000001000000000000000000020088080000880200480800120802004000000000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x10104000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RC
Function name: fallback
PC address: 978
Estimated Gas Usage: 21787 - 100185
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:183

using Safe

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef20400101028020021020808004080402010401024080400280048080000120408000400000001000000000000000000020088080000880200480800120802004000000000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x10104000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RC
Function name: constructor
PC address: 980
Estimated Gas Usage: 39215 - 219791
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:122

yTokenSaleOwner() {
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01010101010101010201010101010101080101020101010101010101010201010101010102010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RC
Function name: fallback
PC address: 997
Estimated Gas Usage: 21787 - 100185
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:182

wnable {
    using SafeMath for uint256;

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef20400101028020021020808004080402010401024080400280048080000120408000400000001000000000000000000020088080000880200480800120802004000000000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x10104000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RC
Function name: constructor
PC address: 1041
Estimated Gas Usage: 39215 - 219791
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:122

difier onlyTokenSaleOwner() {
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40014040010101010101010201010108010101010080010101011001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RC
Function name: fallback
PC address: 1062
Estimated Gas Usage: 21500 - 99898
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:185

;
    
    addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000008000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01800400040102801008042000020401048004010802200801800280000404008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RC
Function name: fallback
PC address: 1683
Estimated Gas Usage: 8382 - 43559
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:178

ei );
    }
}

contract DaicoCoi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000400120010104001000040201400008008010400100000000000000000000000000000001000000800080000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RC
Function name: ended()
PC address: 1741
Estimated Gas Usage: 963 - 1058
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:148

    function endTime() public view re

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010401010001081008100800080000100801100101010100010101010101010101010101010108010101010101010101010800010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: ended(), txdata: 0x12fa6feb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RC
Function name: started()
PC address: 1766
Estimated Gas Usage: 985 - 1080
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:141

ainingTokens == 0;
    }
    
    funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x2042040100053401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010001101001080104100100011000010001100101010102010101010101010101080180010101010101010001010101010100010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: started(), txdata: 0x1f2698ab, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RC
Function name: price()
PC address: 2841
Estimated Gas Usage: 3973 - 39241
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ff5486ad2c429ebdbf5d0059a092ed15.sol:165

256 valueTokenInUsdWei );
	
    function () public pay

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01200101010101010101010101010101010102010101400201010101010101010101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202020202020202020201, value: 0x0
Caller: [ATTACKER], function: price(), txdata: 0xa035b1fe, value: 0x0