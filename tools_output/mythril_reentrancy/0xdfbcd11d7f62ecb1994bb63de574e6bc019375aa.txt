==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ExchangePool
Function name: getback(address)
PC address: 1541
Estimated Gas Usage: 12351 - 154734
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/966b6ea1c8516e06fd02abd1c7070c4f.sol:443
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getback(address), txdata: 0x7336b3db0000000000000000000000000000000000000000000000000000000001010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ExchangePool
Function name: getback(address)
PC address: 1619
Estimated Gas Usage: 9196 - 114997
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/966b6ea1c8516e06fd02abd1c7070c4f.sol:443
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getback(address), txdata: 0x7336b3db0000000000000000000000000000000000000000000000000000000001010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ExchangePool
Function name: getback(address)
PC address: 1671
Estimated Gas Usage: 12351 - 154734
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/966b6ea1c8516e06fd02abd1c7070c4f.sol:443
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getback(address), txdata: 0x7336b3db0000000000000000000000000000000000000000000000000000000001010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ExchangePool
Function name: getback(address)
PC address: 3718
Estimated Gas Usage: 12351 - 154734
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getback(address), txdata: 0x7336b3db0000000000000000000000000000000000000000000000000000000001010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ExchangePool
Function name: getback(address)
PC address: 3782
Estimated Gas Usage: 12351 - 154734
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/966b6ea1c8516e06fd02abd1c7070c4f.sol:291

C20 operation did not suc

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getback(address), txdata: 0x7336b3db0000000000000000000000000000000000000000000000000000000001010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ExchangePool
Function name: getback(address)
PC address: 3782
Estimated Gas Usage: 12351 - 154734
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/966b6ea1c8516e06fd02abd1c7070c4f.sol:291

C20 operation did not suc

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getback(address), txdata: 0x7336b3db0000000000000000000000000000000000000000000000000000000001010101, value: 0x0