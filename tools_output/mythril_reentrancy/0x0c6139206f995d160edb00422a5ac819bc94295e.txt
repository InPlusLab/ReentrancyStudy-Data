==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ChainBot3000
Function name: constructor
PC address: 726
Estimated Gas Usage: 25000 - 128383
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:210

TransferOutput.value(msg.value)(_token

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ChainBot3000
Function name: fallback
PC address: 1088
Estimated Gas Usage: 3618 - 39641
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:210

TransferOutput.value(msg.value)(_token

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setAllowance(address,uint256), txdata: 0x310ec4a700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ChainBot3000
Function name: depositInput(bytes32,uint256,uint256)
PC address: 1257
Estimated Gas Usage: 10324 - 66513
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:222

ht, msg.value);
    }
    
    function depositDai(bytes32 _steamid, uint _amount) external {
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4004022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x200000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000002000000000000000000000000000000020000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: depositInput(bytes32,uint256,uint256), txdata: 0x355627ef00000000000000000000000000000000000000000000000000000000000000008b80194cc026842008012020010008004002a0b080024508b0a80204000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ChainBot3000
Function name: depositInput(bytes32,uint256,uint256)
PC address: 1314
Estimated Gas Usage: 10324 - 66513
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:226

erFrom(msg.sender,

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x8000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: depositInput(bytes32,uint256,uint256), txdata: 0x355627ef000000000000000000000000000000000000000000000000000000000000000088015830269726480802413148000b10982858b644730d8120001102000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ChainBot3000
Function name: depositInput(bytes32,uint256,uint256)
PC address: 1355
Estimated Gas Usage: 10324 - 66513
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:226

rt(DaiContract.transferFrom(msg.sender, address(this), _am

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x8000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: depositInput(bytes32,uint256,uint256), txdata: 0x355627ef000000000000000000000000000000000000000000000000000000000000000088015830269726480802413148000b10982858b644730d8120001102000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ChainBot3000
Function name: sendEth(uint256,uint256,uint256,address,bytes32,bytes32)
PC address: 1646
Estimated Gas Usage: 5378 - 42367
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:236

 _steamid, bytes32 _offerid) external onlyOwner {
    	assert(DaiContract.transfer(_ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sendEth(uint256,uint256,uint256,address,bytes32,bytes32), txdata: 0x4e3a7873000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ChainBot3000
Function name: depositDai(bytes32,uint256)
PC address: 2305
Estimated Gas Usage: 10445 - 66539
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:231

 uint256 _min_eth, uint256 _deadline, address _recipient, by

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: depositDai(bytes32,uint256), txdata: 0x7c81e1c610100102020400000402800000000000000000010104000000100001010400004060a581687fdd977183158e1611222c9c0199004018c1100416aec30136c104, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ChainBot3000
Function name: depositDai(bytes32,uint256)
PC address: 2369
Estimated Gas Usage: 10445 - 66539
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:231

 external onlyOwne

--------------------
Initial State:

Account: [CREATOR], balance: 0x4a08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: depositDai(bytes32,uint256), txdata: 0x7c81e1c60008108004800200010204020202020400080480000240000010040002020000a08000201723ec301981a08204888040040821043102101000040270a680130c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ChainBot3000
Function name: depositDai(bytes32,uint256)
PC address: 2407
Estimated Gas Usage: 10445 - 66539
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:231

id, bytes32 _offerid) external onlyOwner {
	    uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x4a08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: depositDai(bytes32,uint256), txdata: 0x7c81e1c60008108004800200010204020202020400080480000240000010040002020000a08000201723ec301981a08204888040040821043102101000040270a680130c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ChainBot3000
Function name: sendDai(address,uint256,bytes32,bytes32)
PC address: 3153
Estimated Gas Usage: 5483 - 42187
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c78e1eec2fdb7b56cf24ff83801996bb.sol:244

r(address(this).balance);
	}
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sendDai(address,uint256,bytes32,bytes32), txdata: 0xdb558c540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0