with mythril_dir
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 662
Estimated Gas Usage: 16104 - 105988
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3e1d1e3b7e429a064f91745d5693e578.sol:162

   return true;
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x410c00020fbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf760000000000010804000400000000000000000000001000020100000100000008000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002010101010400000101000100000202400101000820010420201002080408800802048010014008010110010101010101010101, value: 0x0
Caller: [SOMEGUY], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000010804000400000000000000000000001000020100000100000008008080808080808080808080800110100100011001020102010802010201200204, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 705
Estimated Gas Usage: 16104 - 105988
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3e1d1e3b7e429a064f91745d5693e578.sol:164
Initial State:

Account: [CREATOR], balance: 0x3e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf760000002001000000004004010400000180040102010000010000000400800020000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000200000001000001000000000000000100000000000000000000000000000400040002080202010180010000000000010401040840010140081004802002020201040101018001010101010101010101, value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400002001000000004004010400000180040102010000010000000400800020008080808080808080808080800108010104020201010202020102020101020102, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 711
Estimated Gas Usage: 16104 - 105988
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3e1d1e3b7e429a064f91745d5693e578.sol:164
Initial State:

Account: [CREATOR], balance: 0x3e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf760000002001000000004004010400000180040102010000010000000400800020000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000200000001000001000000000000000100000000000000000000000000000400040002080202010180010000000000010401040840010140081004802002020201040101018001010101010101010101, value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400002001000000004004010400000180040102010000010000000400800020008080808080808080808080800108010104020201010202020102020101020102, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 806
Estimated Gas Usage: 16104 - 105988
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3e1d1e3b7e429a064f91745d5693e578.sol:164
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf76008040400480000080040102020401020110004000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000100000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef4004080802400204100820080180010180200101400101800101010101010102, value: 0x0
Caller: [ATTACKER], function: executeSwap(uint256,address), txdata: 0x2fe6978480404004800000800401020204010201100040000000000000000000000800000101010101010101010101010102010102020101020101200104014001042002, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 806
Estimated Gas Usage: 16104 - 105988
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3e1d1e3b7e429a064f91745d5693e578.sol:164
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf7600000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000010000000000000000000000800800400104084004028010020000028001000000010020010000000000000000000000000000000000000001010402000100020201011001010180012004010201010180100101010101010101010102010101010101018001010101040210, value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400000000000400000000000000000000000000000000000000000000000000000404040404040404040404040101080120004000800820000000004001108020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 806
Estimated Gas Usage: 16104 - 105988
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3e1d1e3b7e429a064f91745d5693e578.sol:164
Initial State:

Account: [CREATOR], balance: 0x3e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf760000002001000000004004010400000180040102010000010000000400800020000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000200000001000001000000000000000100000000000000000000000000000400040002080202010180010000000000010401040840010140081004802002020201040101018001010101010101010101, value: 0x0
Caller: [CREATOR], function: executeSwap(uint256,address), txdata: 0x2fe6978400002001000000004004010400000180040102010000010000000400800020008080808080808080808080800108010104020201010202020102020101020102, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 854
Estimated Gas Usage: 16104 - 105988
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3e1d1e3b7e429a064f91745d5693e578.sol:164
Initial State:

Account: [CREATOR], balance: 0x20410c00020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf76000010800180008000100204020102040101008000000000000000000000010408000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0108100102020102801010040101010101080101400104010801010101100102, value: 0x0
Caller: [SOMEGUY], function: executeSwap(uint256,address), txdata: 0x2fe6978400108001800080001002040201020401010080000000000000000000000104088080808080808080808080800208010401010201010202010140021001010280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: P2pSwap
Function name: executeSwap(uint256,address)
PC address: 866
Estimated Gas Usage: 16104 - 105988
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3e1d1e3b7e429a064f91745d5693e578.sol:164
Initial State:

Account: [CREATOR], balance: 0x20410c00020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerSwap(uint256,address,address,uint256,address,uint256), txdata: 0x57cf76000010800180008000100204020102040101008000000000000000000000010408000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0108100102020102801010040101010101080101400104010801010101100102, value: 0x0
Caller: [SOMEGUY], function: executeSwap(uint256,address), txdata: 0x2fe6978400108001800080001002040201020401010080000000000000000000000104088080808080808080808080800208010401010201010202010140021001010280, value: 0x0


