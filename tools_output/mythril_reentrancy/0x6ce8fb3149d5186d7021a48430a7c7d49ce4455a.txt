==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EveryDappToken
Function name: setAdURI(uint256,string)
PC address: 2241
Estimated Gas Usage: 8151 - 31541
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15e90cf3b8f8c9390bdb6120b5e01094.sol:1921



        require(ads[_adId].forSale);

        require(msg.value == adPrice);

        require(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x240310a1008004222, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAdURI(uint256,string), txdata: 0xcf7018d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EveryDappToken
Function name: setAdURI(uint256,string)
PC address: 2248
Estimated Gas Usage: 8151 - 31541
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15e90cf3b8f8c9390bdb6120b5e01094.sol:1921



        require(ads[_adId].forSale);

        require(msg.value == adPrice);

        require(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAdURI(uint256,string), txdata: 0xcf7018d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EveryDappToken
Function name: setAdURI(uint256,string)
PC address: 2273
Estimated Gas Usage: 18291 - 81867
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15e90cf3b8f8c9390bdb6120b5e01094.sol:1921



        require(ads[_adId].forSale);

        require(msg.value == adPrice);

        require(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAdURI(uint256,string), txdata: 0xcf7018d40000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EveryDappToken
Function name: name()
PC address: 2712
Estimated Gas Usage: 2395 - 4136
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15e90cf3b8f8c9390bdb6120b5e01094.sol:1473

 uint256 rep

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EveryDappToken
Function name: ads(uint256)
PC address: 3068
Estimated Gas Usage: 5278 - 7447
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15e90cf3b8f8c9390bdb6120b5e01094.sol:1815

rl,

        string _href,

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ads(uint256), txdata: 0x11a7a4c0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EveryDappToken
Function name: ads(uint256)
PC address: 3230
Estimated Gas Usage: 5278 - 7447
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15e90cf3b8f8c9390bdb6120b5e01094.sol:1815

rl,

        string _href,

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: ads(uint256), txdata: 0x11a7a4c0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EveryDappToken
Function name: transferERC20Token(address,address,uint256)
PC address: 4617
Estimated Gas Usage: 3259 - 39001
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15e90cf3b8f8c9390bdb6120b5e01094.sol:2065
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferERC20Token(address,address,uint256), txdata: 0x92940bf9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EveryDappToken
Function name: symbol()
PC address: 4711
Estimated Gas Usage: 2923 - 4664
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15e90cf3b8f8c9390bdb6120b5e01094.sol:1479

function token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EveryDappToken
Function name: calculateOwnerFee(uint256)
PC address: 6362
Estimated Gas Usage: 1328 - 1423
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15e90cf3b8f8c9390bdb6120b5e01094.sol:2055

e

    ) public only

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateOwnerFee(uint256), txdata: 0x413e4aaf13, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: EveryDappToken
Function name: setAdURI(uint256,string)
PC address: 8033
Estimated Gas Usage: 8151 - 31541
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAdURI(uint256,string), txdata: 0xcf7018d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa2, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: EveryDappToken
Function name: setAdURI(uint256,string)
PC address: 8047
Estimated Gas Usage: 8151 - 31541
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAdURI(uint256,string), txdata: 0xcf7018d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80, value: 0x0


