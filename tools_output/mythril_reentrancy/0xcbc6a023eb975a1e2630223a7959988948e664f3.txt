==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenHolder
Function name: fallback
PC address: 498
Estimated Gas Usage: 2919 - 40311
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:931

ll also remove the owner's ab

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02020202020202020202020201, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverter
Function name: constructor
PC address: 552
Estimated Gas Usage: 64800 - 343527
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1379

ifier validConnectorWeight(uint32 _weight) {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SmartTokenController
Function name: fallback
PC address: 583
Estimated Gas Usage: 3432 - 39223
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1061

      ITokenHolder(token).withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SmartTokenController
Function name: disableTokenTransfers(bool)
PC address: 583
Estimated Gas Usage: 3523 - 38984
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1061

      ITokenHolder(token).withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: disableTokenTransfers(bool), txdata: 0x85d5e631, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SmartTokenController
Function name: acceptTokenOwnership()
PC address: 716
Estimated Gas Usage: 3440 - 39796
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1083

function withdraw(uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: acceptTokenOwnership(), txdata: 0x38a5e016, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BancorConverter
Function name: constructor
PC address: 721
Estimated Gas Usage: 64800 - 343527
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1389

ath - verifies that the number of elements is odd and that maximum numbe

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BancorConverter
Function name: constructor
PC address: 748
Estimated Gas Usage: 64800 - 343527
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1389



    modifier validConversionPath(I

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BancorConverter
Function name: constructor
PC address: 776
Estimated Gas Usage: 64800 - 343527
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1389



    modifier validConversionPath(I

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BancorConverter
Function name: constructor
PC address: 832
Estimated Gas Usage: 64800 - 343527
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:411

er = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SmartTokenController
Function name: withdrawFromToken(address,address,uint256)
PC address: 883
Estimated Gas Usage: 3546 - 39527
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1121

This is a security mechanism that prevents the need to k

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawFromToken(address,address,uint256), txdata: 0x41a5b33d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SmartTokenController
Function name: withdrawTokens(address,address,uint256)
PC address: 1101
Estimated Gas Usage: 3011 - 41063
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:931

ll also remove the owner's ab

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorConverter
Function name: connectorTokens(uint256)
PC address: 3430
Estimated Gas Usage: 1037 - 1462
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1235

    event PriceDataUpdate(

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000020180011001040201024040804002202040000200000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: connectorTokens(uint256), txdata: 0x19b64015, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorConverter
Function name: quickConvertPrioritized(address[],uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 3848
Estimated Gas Usage: 618 - 3723
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:2663

      @param _s                (signature[64:128]) associated with the signer address and helps to validate if the signature is legit



        @return tokens issued in return

    */

    function completeXConversion(

        IERC20Token[] _path,

        uint256 _minReturn,

        uint256 _conversionId,

        uint256 _block,

        uint8 _v,

        bytes32 _r,

        bytes32 _s

    )

        public

        returns (uint256)

    {

        IBancorX bancorX = IBancorX(registry.addressOf(ContractIds.BANCOR_X));

        IBancorNetwork bancorNetwork = IBancorNetwork(registry.addressOf(ContractIds.BANCOR_NETWORK));



        // verify that the first token in the path is BNT

        require(_path[0] == registry.addressOf(ContractIds.BNT_TOKEN));



        // get conversion amount from BancorX contract

        uint256 amount = bancorX.getXTransferAmount(_conversionId, msg.sender);



        // send BNT from msg.sender to the BancorNetwork contract

        token.destroy(msg.sender, amount);

        token.issue(bancorNetwork, amount);



        return bancorNetwork.convertForPrioritized3(_path, amount, _minReturn, msg.sender, _conversionId, _block, _v, _r, _s);

    }



    /**

        @dev buys the token with all connector tokens using the same percentage

        i.e. if the caller increases the supply by 10%, it will cost an amount equal to

        10% of each connector token balance

        can only be called if the max total weight is exactly 100% and while conversions are enabled



        @param _amount  amount to increase the supply by (in the smart

--------------------
Initial State:

Account: [CREATOR], balance: 0x88001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000080101010101010101040101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: quickConvertPrioritized(address[],uint256,uint256,uint256,uint8,bytes32,bytes32), txdata: 0x22742564, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorConverter
Function name: acceptTokenOwnership()
PC address: 6275
Estimated Gas Usage: 3682 - 40038
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/251c4f76e4a044b0349a4cffdee65831.sol:1083

function withdraw(uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: acceptTokenOwnership(), txdata: 0x38a5e016, value: 0x0


