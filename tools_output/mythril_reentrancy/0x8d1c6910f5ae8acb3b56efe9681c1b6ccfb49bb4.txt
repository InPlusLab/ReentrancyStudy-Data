==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PriceOracleProxy
Function name: assetPrices(address) or assetPrices(address)
PC address: 672
Estimated Gas Usage: 13638 - 89236
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/642fbbdc6a92d5b7b096e53c3b08fa49.sol:90

   * @dev `error` corresponds to e

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: assetPrices(address), txdata: 0x5e9a523c, value: 0x0
Caller: [ATTACKER], function: assetPrices(address), txdata: 0x5e9a523c, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: NCStandardInterestRateModel
Function name: getSupplyRate(address,uint256,uint256) or getSupplyRate(address,uint256,uint256)
PC address: 2700
Estimated Gas Usage: 2074 - 6790
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/642fbbdc6a92d5b7b096e53c3b08fa49.sol:330

 uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getSupplyRate(address,uint256,uint256), txdata: 0x517cf73e0000000000000000000000000000000000000000000000000000000000000000c08f4fc3b19e9fde8030183a43dc20023674f07c567fd0fc03deff13373c896c80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: NCStandardInterestRateModel
Function name: getBorrowRate(address,uint256,uint256) or getBorrowRate(address,uint256,uint256)
PC address: 2700
Estimated Gas Usage: 5525 - 44897
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/642fbbdc6a92d5b7b096e53c3b08fa49.sol:330

 uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x2124006c4dd84e215, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getBorrowRate(address,uint256,uint256), txdata: 0xed2b5a3c00000000000000000000000000000000000000000000000000000000000000006446ca024986fc20587e1810ac5e4026f801c000001021800000000200020000ad, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NCStandardInterestRateModel
Function name: getBorrowRate(address,uint256,uint256) or getBorrowRate(address,uint256,uint256)
PC address: 3240
Estimated Gas Usage: 6697 - 47573
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/642fbbdc6a92d5b7b096e53c3b08fa49.sol:549

ID_LIQUIDATOR");

        allowLiquidation =

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getBorrowRate(address,uint256,uint256), txdata: 0xed2b5a3c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NCStandardInterestRateModel
Function name: getBorrowRate(address,uint256,uint256) or getBorrowRate(address,uint256,uint256)
PC address: 3322
Estimated Gas Usage: 6697 - 47573
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/642fbbdc6a92d5b7b096e53c3b08fa49.sol:558

.4 of the C

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getBorrowRate(address,uint256,uint256), txdata: 0xed2b5a3c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NCStandardInterestRateModel
Function name: getBorrowRate(address,uint256,uint256) or getBorrowRate(address,uint256,uint256)
PC address: 3453
Estimated Gas Usage: 6697 - 47573
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/642fbbdc6a92d5b7b096e53c3b08fa49.sol:558

.4 of the Compound W

--------------------
Initial State:

Account: [CREATOR], balance: 0x8002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getBorrowRate(address,uint256,uint256), txdata: 0xed2b5a3c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NCStandardInterestRateModel
Function name: getBorrowRate(address,uint256,uint256) or getBorrowRate(address,uint256,uint256)
PC address: 3453
Estimated Gas Usage: 6697 - 47573
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/642fbbdc6a92d5b7b096e53c3b08fa49.sol:558

.4 of the Compound W

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getBorrowRate(address,uint256,uint256), txdata: 0xed2b5a3c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0