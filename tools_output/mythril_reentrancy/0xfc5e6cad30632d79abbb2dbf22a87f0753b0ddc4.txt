==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtheremonPayment
Function name: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64)
PC address: 2988
Estimated Gas Usage: 6088 - 44937
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:715

param1, _param2, _param3, _param4);

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x40008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64), txdata: 0x30a95aa7000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EtheremonPayment
Function name: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64)
PC address: 3005
Estimated Gas Usage: 6088 - 44937
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:719

ype == uint32(Pay

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64), txdata: 0x30a95aa7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtheremonPayment
Function name: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64)
PC address: 3219
Estimated Gas Usage: 6088 - 44937
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:723

ram2, _param3, _param4);

         

--------------------
Initial State:

Account: [CREATOR], balance: 0x40008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64), txdata: 0x30a95aa7000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EtheremonPayment
Function name: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64)
PC address: 3236
Estimated Gas Usage: 6088 - 44937
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:727

} else {

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64), txdata: 0x30a95aa7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtheremonPayment
Function name: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64)
PC address: 3633
Estimated Gas Usage: 6088 - 44937
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:735
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64), txdata: 0x30a95aa7000000000000000000000000808080020020000400000210002008000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EtheremonPayment
Function name: getRandom(uint8,uint8,address)
PC address: 4103
Estimated Gas Usage: 905 - 1281
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:545

_amount);

    }

    

    function setContract(address _data

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandom(uint8,uint8,address), txdata: 0x3a34f09a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtheremonPayment
Function name: getRandom(uint8,uint8,address)
PC address: 4181
Estimated Gas Usage: 517 - 612
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:537

);

        if (_amount > token.balanceOf(address(this))) {

            revert();

        }

        token.transfer(_sendTo, _amount);

    }

    

    function setContract(address _dataContract, address _tokenContract, address _transformContract, address _energyContract, address _adventureContract, address _cubegoContract) onlyModerato

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getRandom(uint8,uint8,address), txdata: 0x3a34f09a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtheremonPayment
Function name: withdrawToken(address,uint256)
PC address: 7729
Estimated Gas Usage: 6479 - 77159
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:561

reContract;

        cubegoCon

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawToken(address,uint256), txdata: 0x9e281a98, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtheremonPayment
Function name: withdrawToken(address,uint256)
PC address: 7939
Estimated Gas Usage: 6479 - 77159
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:569

etConfig(uint _tokenPrice, uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawToken(address,uint256), txdata: 0x9e281a98, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EtheremonPayment
Function name: withdrawToken(address,uint256)
PC address: 7939
Estimated Gas Usage: 6479 - 77159
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:569

etConfig(uint _tokenPrice, uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0x640221, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 494949494949494949494949494949494949494949494949494949494949494949494949494949494949494901, value: 0x0
Caller: [CREATOR], function: withdrawToken(address,uint256), txdata: 0x9e281a98, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtheremonPayment
Function name: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64)
PC address: 9037
Estimated Gas Usage: 6088 - 44937
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/52115743c724d1e5263cb6db4e1fa928.sol:687

thToken(_trainer);

            

            return

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: payService(address,uint256,uint32,string,uint64,uint64,uint64,uint64,uint64,uint64), txdata: 0x30a95aa7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003, value: 0x0