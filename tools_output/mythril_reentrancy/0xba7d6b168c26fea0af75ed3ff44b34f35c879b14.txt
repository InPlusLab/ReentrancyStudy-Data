==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TxProxy
Function name: allocateToken(address[],uint256[])
PC address: 296
Estimated Gas Usage: 12012 - 90729
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:387
Initial State:

Account: [CREATOR], balance: 0x3f779f86918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateToken(address[],uint256[]), txdata: 0x315265f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TxProxy
Function name: account_info_rotate_tine(uint256)
PC address: 785
Estimated Gas Usage: 12012 - 90729
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:387
Initial State:

Account: [CREATOR], balance: 0x101000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateToken(address[],uint256[]), txdata: 0x315265f0800000000040000000000000000000000000800000000000000000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Owned
Function name: delOwner(address)
PC address: 791
Estimated Gas Usage: 28451 - 91942
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:149

geInitOwner(addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: delOwner(address), txdata: 0x73984188000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TxProxy
Function name: account_info_rotate_tine(uint256)
PC address: 815
Estimated Gas Usage: 12012 - 90729
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:387
Initial State:

Account: [CREATOR], balance: 0x101000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateToken(address[],uint256[]), txdata: 0x315265f0800000000040000000000000000000000000800000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TxProxy
Function name: account_info_rotate_tine(uint256)
PC address: 818
Estimated Gas Usage: 12012 - 90729
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:387
Initial State:

Account: [CREATOR], balance: 0x101000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateToken(address[],uint256[]), txdata: 0x315265f0800000000040000000000000000000000000800000000000000000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Owned
Function name: delOwner(address)
PC address: 900
Estimated Gas Usage: 28451 - 91942
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:149

onlyInitOwner {



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: delOwner(address), txdata: 0x73984188000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: owner(uint256)
PC address: 949
Estimated Gas Usage: 1024 - 1119
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:23

;

    address interna

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: owner(uint256), txdata: 0xa123c33e80, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TxProxy
Function name: account_info_rotate_tine(uint256)
PC address: 979
Estimated Gas Usage: 12012 - 90729
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:387
Initial State:

Account: [CREATOR], balance: 0x2090004040000a3fc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateToken(address[],uint256[]), txdata: 0x315265f0800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TxProxy
Function name: account_info_rotate_tine(uint256)
PC address: 979
Estimated Gas Usage: 12012 - 90729
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:387
Initial State:

Account: [CREATOR], balance: 0x101000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateToken(address[],uint256[]), txdata: 0x315265f0800000000040000000000000000000000000800000000000000000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TxProxy
Function name: delOwner(address)
PC address: 1468
Estimated Gas Usage: 28495 - 91986
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:149

geInitOwner(addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: delOwner(address), txdata: 0x73984188000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TxProxy
Function name: delOwner(address)
PC address: 1577
Estimated Gas Usage: 28495 - 91986
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:149

onlyInitOwner {



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: delOwner(address), txdata: 0x73984188000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TxProxy
Function name: owner(uint256)
PC address: 1626
Estimated Gas Usage: 1068 - 1163
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1cc26bb265c07a156096fa26e7d1e959.sol:23

;

    address interna

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000080000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: owner(uint256), txdata: 0xa123c33e80, value: 0x0


