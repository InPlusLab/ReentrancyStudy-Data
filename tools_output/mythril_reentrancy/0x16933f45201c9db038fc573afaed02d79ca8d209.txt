==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BSB_Locking_Development
Function name: withdraw()
PC address: 584
Estimated Gas Usage: 5441 - 5536
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b986c85d0646a262a3aa323618d3f01e.sol:145

ire(Token(tokenAddress).transfer(owner, amount_per_withd

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101010000000000000000000000010101010101010101, value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BSB_Locking_Development
Function name: getNumPeriods()
PC address: 1031
Estimated Gas Usage: 2941 - 3036
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b986c85d0646a262a3aa323618d3f01e.sol:115

       }

        return _numIntervals;
    }
    

    function getTiming()  public view returns (uint256){
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101000000000000000000000000010101010101010101, value: 0x0
Caller: [ATTACKER], function: getNumPeriods(), txdata: 0x96478ad6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BSB_Locking_Development
Function name: deposit(uint256)
PC address: 1452
Estimated Gas Usage: 18929 - 114152
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b986c85d0646a262a3aa323618d3f01e.sol:135

k.timestamp;
        return true;
        }
    
    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101000000000000000000000000010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BSB_Locking_Development
Function name: deposit(uint256)
PC address: 1458
Estimated Gas Usage: 18929 - 114152
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b986c85d0646a262a3aa323618d3f01e.sol:139

c onlyOwner returns(bo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101000000000000000000000000010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BSB_Locking_Development
Function name: deposit(uint256)
PC address: 1462
Estimated Gas Usage: 18929 - 114152
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b986c85d0646a262a3aa323618d3f01e.sol:140

 tokens >  0, "No tokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101000000000000000000000000010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BSB_Locking_Development
Function name: getTiming()
PC address: 1646
Estimated Gas Usage: 1014 - 1109
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b986c85d0646a262a3aa323618d3f01e.sol:29

a - b;
  }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getTiming(), txdata: 0x630e799f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BSB_Locking_Development
Function name: getTiming()
PC address: 1853
Estimated Gas Usage: 1064 - 1159
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: #utility.yul:15
Initial State:

Account: [CREATOR], balance: 0xac2540c000a2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getTiming(), txdata: 0x630e799f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BSB_Locking_Development
Function name: getTiming()
PC address: 1887
Estimated Gas Usage: 1069 - 1354
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:15
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101000000000000000000000000010101010101010101, value: 0x0
Caller: [SOMEGUY], function: getTiming(), txdata: 0x630e799f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BSB_Locking_Development
Function name: getNumPeriods()
PC address: 1887
Estimated Gas Usage: 2773 - 3058
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:15
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101000000000000000000000000010101010101010101, value: 0x0
Caller: [CREATOR], function: getNumPeriods(), txdata: 0x96478ad6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BSB_Locking_Development
Function name: withdraw()
PC address: 1887
Estimated Gas Usage: 4433 - 4718
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: #utility.yul:15
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101000000000000000000000000010101010101010101, value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0