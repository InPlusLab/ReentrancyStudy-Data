==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SimpleSaleToken
Function name: setName(string,string)
PC address: 1374
Estimated Gas Usage: 13902 - 59970
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4c210539bf16cc135a7c04d08dcfa43a.sol:435

r)

  function setBeneficiary(address _beneficiary, uint _decimals, uint _tokenPrice, uint _tokensRemaining) public

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setName(string,string), txdata: 0x5c707f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SimpleSaleToken
Function name: setName(string,string)
PC address: 1380
Estimated Gas Usage: 13935 - 59910
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4c210539bf16cc135a7c04d08dcfa43a.sol:435

r)

  function setBeneficiary(address _beneficiary, uint _decimals, uint _tokenPrice, uint _tokensRemaining) public

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setName(string,string), txdata: 0x5c707f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SimpleSaleToken
Function name: setName(string,string)
PC address: 1389
Estimated Gas Usage: 13935 - 59910
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4c210539bf16cc135a7c04d08dcfa43a.sol:435

r)

  function setBeneficiary(address _beneficiary, uint _decimals, uint _tokenPrice, uint _tokensRemaining) public

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000021, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setName(string,string), txdata: 0x5c707f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SimpleSaleToken
Function name: setName(string,string)
PC address: 1395
Estimated Gas Usage: 13902 - 59970
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4c210539bf16cc135a7c04d08dcfa43a.sol:435

r)

  function setBeneficiary(address _beneficiary, uint _decimals, uint _tokenPrice, uint _tokensRemaining) public

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000008022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setName(string,string), txdata: 0x5c707f07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeff0440, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SimpleSaleToken
Function name: setName(string,string)
PC address: 1462
Estimated Gas Usage: 13902 - 59970
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4c210539bf16cc135a7c04d08dcfa43a.sol:435

r)

  function setBeneficiary(address _beneficiary, uint _decimals, uint _tokenPrice, uint _tokensRemaining) public

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setName(string,string), txdata: 0x5c707f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SimpleSaleToken
Function name: approve(address,uint256) or approve(address,uint256)
PC address: 2494
Estimated Gas Usage: 255 - 350
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4c210539bf16cc135a7c04d08dcfa43a.sol:359

r, _spender, _value);

    return true;

  }





  function allowance(address _owner, address _spender) public constant returns (uint remaining) {

    return approvals[_owner][_spender];

  }



  //

  // END ERC20

  //



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SimpleSaleToken
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 2772
Estimated Gas Usage: 329 - 424
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4c210539bf16cc135a7c04d08dcfa43a.sol:321

rom] >= _value && approvals[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {

      balances[_from] -= _value;

      balances[_to] += _value;

      approvals[_from][msg.sender] -= _value;

      TransferEvent(_from, _to, _value);

      return true;

    } else {

      return false;

    }

  }





  function balanceOf(address _owner) public constant returns (uint balance) {

    balance = balances[_owner];

  }





  function approve(address _spender, uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SimpleSaleToken
Function name: endSale()
PC address: 3828
Estimated Gas Usage: 10125 - 65396
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4c210539bf16cc135a7c04d08dcfa43a.sol:489

Only unlockedOnly {

--------------------
Initial State:

Account: [CREATOR], balance: 0x20800000004000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SimpleSaleToken
Function name: transfer(address,uint256) or transfer(address,uint256)
PC address: 4539
Estimated Gas Usage: 541 - 636
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4c210539bf16cc135a7c04d08dcfa43a.sol:295

r] >= _value && balances[_to] + _value > balances[_to]) {

      balances[msg.sender] -= _value;

      balances[_to] += _value;

      TransferEvent(msg.sender, _to, _value);

      return true;

    } else {

      return false;

    }

  }





  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3*32) public returns (bool success) {

    //prevent wrap:

    if (

--------------------
Initial State:

Account: [CREATOR], balance: 0x10f400067441f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: SimpleSaleToken
Function name: setName(string,string)
PC address: 5725
Estimated Gas Usage: 13902 - 59970
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setName(string,string), txdata: 0x5c707f077ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: SimpleSaleToken
Function name: setName(string,string)
PC address: 5739
Estimated Gas Usage: 13935 - 59910
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setName(string,string), txdata: 0x5c707f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0, value: 0x0