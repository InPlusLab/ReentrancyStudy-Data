==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CuteCoin
Function name: mintBulk(address[],uint256[])
PC address: 1002
Estimated Gas Usage: 2260 - 2875
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9b6278464650a270d8383e7f78b51126.sol:493

.sender, 0, amount);

    }





    // ---------------------------- ERC20 ----------------------------



    function totalSupply() public constant returns (uint)

    {

        return _totalSupply;

    }



    // -----------------------------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintBulk(address[],uint256[]), txdata: 0x7fd30df0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc08, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CuteCoin
Function name: mintBulk(address[],uint256[])
PC address: 1013
Estimated Gas Usage: 2260 - 2875
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9b6278464650a270d8383e7f78b51126.sol:493

.sender, 0, amount);

    }





    // ---------------------------- ERC20 ----------------------------



    function totalSupply() public constant returns (uint)

    {

        return _totalSupply;

    }



    // -----------------------------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintBulk(address[],uint256[]), txdata: 0x7fd30df0008000000000000000000000000000000000000000000000000000000000002fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CuteCoin
Function name: transferBulk(address[],uint256[])
PC address: 1125
Estimated Gas Usage: 859 - 6407
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9b6278464650a270d8383e7f78b51126.sol:701

ansfer(address _to, uint _value, bytes _data) external returns (bool success) {

        if(isContract(_to)) {

            return transferToContract(_to, _value, _data);

        }

        else {

            return transferToAddress(_to,

--------------------
Initial State:

Account: [CREATOR], balance: 0x1102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferBulk(address[],uint256[]), txdata: 0x9316c3e7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc40, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CuteCoin
Function name: approveBulk(address[],uint256[])
PC address: 1390
Estimated Gas Usage: 969 - 6517
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9b6278464650a270d8383e7f78b51126.sol:711

ta);

        }

    }



    //function that is called when transaction target is a contract

    function transferToContract(address _to, uint _value, bytes _data) public returns (bool success) {

        balances[msg.sender] = balances[msg.sender].sub(_va

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approveBulk(address[],uint256[]), txdata: 0xb9edf911ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc40, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CuteCoin
Function name: fallback
PC address: 1746
Estimated Gas Usage: 2330 - 4071
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9b6278464650a270d8383e7f78b51126.sol:29

uint8 public decima

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CuteCoin
Function name: symbol()
PC address: 3803
Estimated Gas Usage: 2638 - 4379
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9b6278464650a270d8383e7f78b51126.sol:27

   string public  na

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CuteCoin
Function name: transferAnyERC20Token(address,uint256)
PC address: 5176
Estimated Gas Usage: 4055 - 40078
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9b6278464650a270d8383e7f78b51126.sol:457

dAmount);

        _totalSupply = _totalSupply.add(m

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,uint256), txdata: 0xdc39d06d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0