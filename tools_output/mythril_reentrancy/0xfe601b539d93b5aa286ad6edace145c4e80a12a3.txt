==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: againstRelease
Function name: fallback
PC address: 283
Estimated Gas Usage: 10896 - 122061
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:44

r(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c1080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: againstRelease
Function name: fallback
PC address: 303
Estimated Gas Usage: 10896 - 122061
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:44

EthBuy);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c1080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: againstRelease
Function name: fallback
PC address: 306
Estimated Gas Usage: 10896 - 122061
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:45

ender, am

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c1080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: againstRelease
Function name: fallback
PC address: 414
Estimated Gas Usage: 10896 - 122061
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:44

EthBuy);
        emit FundTransfer(msg.sender, amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x80080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: againstRelease
Function name: fallback
PC address: 414
Estimated Gas Usage: 10896 - 122061
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:44

EthBuy);
        emit FundTransfer(msg.sender, amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c1080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: againstRelease
Function name: fallback
PC address: 485
Estimated Gas Usage: 10722 - 121887
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:47

t FundTran

--------------------
Initial State:

Account: [CREATOR], balance: 0x2a00080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: againstRelease
Function name: fallback
PC address: 518
Estimated Gas Usage: 10722 - 121887
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:47

t FundTransfer(againstD

--------------------
Initial State:

Account: [CREATOR], balance: 0x2a00080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: againstRelease
Function name: fallback
PC address: 531
Estimated Gas Usage: 10722 - 121887
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:49



}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2a00080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: againstRelease
Function name: fallback
PC address: 930
Estimated Gas Usage: 2330 - 4071
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:13

c name = "AGAINST Release";
    string

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: againstRelease
Function name: symbol()
PC address: 1904
Estimated Gas Usage: 2440 - 4181
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:14

 symbol = "AGAINST";
    string 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: againstRelease
Function name: comment()
PC address: 1993
Estimated Gas Usage: 2456 - 4197
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4af73e7c597c7450260c48e5fcdbe378.sol:15

comment = "AGAINST Release Contract";
    token pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: comment(), txdata: 0xf4f3c8a4, value: 0x0