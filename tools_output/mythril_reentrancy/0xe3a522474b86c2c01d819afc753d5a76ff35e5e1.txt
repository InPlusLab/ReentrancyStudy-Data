==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reservation
Function name: constructor
PC address: 513
Estimated Gas Usage: 83956 - 426463
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:298

   * Make an investment.
    *
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002040010101010101010801010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001012001020120010802010104011004010101010000000000000000010000000000000000000000200000040000000000000800000000000000000001000000000000000000000020000004000000000000080101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reservation
Function name: constructor
PC address: 566
Estimated Gas Usage: 83956 - 426463
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:298

   * Make an investment.
    *
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002040010101010101010801010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001012001020120010802010104011004010101010000000000000000010000000000000000000000200000040000000000000800000000000000000001000000000000000000000020000004000000000000080101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reservation
Function name: constructor
PC address: 573
Estimated Gas Usage: 83956 - 426463
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:300

ation must be run

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002040010101010101010801010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001012001020120010802010104011004010101010000000000000000010000000000000000000000200000040000000000000800000000000000000001000000000000000000000020000004000000000000080101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reservation
Function name: constructor
PC address: 580
Estimated Gas Usage: 83956 - 426463
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:300

e to invest.


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002040010101010101010801010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001012001020120010802010104011004010101010000000000000000010000000000000000000000200000040000000000000800000000000000000001000000000000000000000020000004000000000000080101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reservation
Function name: constructor
PC address: 587
Estimated Gas Usage: 83956 - 426463
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:301

st have not pressed the emerge

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002040010101010101010801010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001012001020120010802010104011004010101010000000000000000010000000000000000000000200000040000000000000800000000000000000001000000000000000000000020000004000000000000080101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reservation
Function name: constructor
PC address: 594
Estimated Gas Usage: 83956 - 426463
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:302

    *
    * @param receiver The Ethereum

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002040010101010101010801010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001012001020120010802010104011004010101010000000000000000010000000000000000000000200000040000000000000800000000000000000001000000000000000000000020000004000000000000080101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PricingStrategy
Function name: calculateTokenAmount(uint256)
PC address: 663
Estimated Gas Usage: 3714 - 3809
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:193

dress */
    uint public

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0001010101010001010808010010010101200101010401000008000020010101000000000000000000000000000000000000000000000000000000000000010001010101010101010101010201010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000181, value: 0x0
Caller: [ATTACKER], function: calculateTokenAmount(uint256), txdata: 0xa24bcf4601, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Reservation
Function name: constructor
PC address: 915
Estimated Gas Usage: 83956 - 426463
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:393

 */
    function setMultisig(addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101018001200101200101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001010120010201010101200101100101080101040000000000000000000000020000002000000000000000000008000000000200000000000000000000000002000000200000000000000000000800000000020101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Reservation
Function name: getState()
PC address: 3520
Estimated Gas Usage: 1867 - 2292
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:450

* @return true if the reservation has raised enough money to be a successful.
    */
    function isMinimumGoalReached() public constant returns (bool reached) {
        return weiRaised >= minimumFundingGoal;
    }

    /**
    * Called from invest() to confirm if the curret investment does not break our cap rule.
    */
    function isBreakingCap(uint tokensSoldTotal) constant returns (bool) {
        return tokensSold

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000004080204010010101010108100101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001010101012001010402010101010101010102100000000000000000000000000000000000000000000000000000000000000001010000000401000000010201000200000400010000000001000200000001010201, value: 0x0
Caller: [ATTACKER], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Reservation
Function name: getState()
PC address: 3541
Estimated Gas Usage: 2698 - 3123
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:452

 function isMinimumGoalReached() public constant 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010220010101010101010101200101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001200110010804010101010101010140020201010000000400000000000002000000000000000000000000000000000200000001000000040000000000000200000000000000000000000000000000020000000201, value: 0x0
Caller: [ATTACKER], function: getState(), txdata: 0x1865c57d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Reservation
Function name: getState()
PC address: 3557
Estimated Gas Usage: 2715 - 3140
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:451


    function isMinimumGoalReached() public constant returns (bool reached) {
        return weiRaised >= minimumFundingGoal;
    }

    /**
    * Called from invest() to confirm if the curret investment does not break our cap rule.
    */
    function isBreakingCap(uint tokensSoldTotal) constant returns (bool) {
        return tokensSold

--------------------
Initial State:

Account: [CREATOR], balance: 0x42040000400090003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000020010108040201010101101002010101010101010000010000000000000100000001100100010000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getState(), txdata: 0x1865c57d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Reservation
Function name: setPricingStrategy(address)
PC address: 4192
Estimated Gas Usage: 9494 - 65234
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:393

 */
    function setMultisig(addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x28425090010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010201000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001010201010101010101100101200202080101080001000000000000080100000000000100000000000100000000000100010000000240000202800808010000000000010000010000008020100000000020010201, value: 0x0
Caller: [CREATOR], function: setPricingStrategy(address), txdata: 0x50c67734808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Reservation
Function name: setEndsAt(uint256)
PC address: 4768
Estimated Gas Usage: 1332 - 1757
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f8b4ce2a076b5c888998c3e27d51e353.sol:381

y);

        // Don&

--------------------
Initial State:

Account: [CREATOR], balance: 0x7, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101012001010101010101010101000000000000000000000000010101010101010101010101010101010101040100000000000000000000000008011020020104100102010102010110010110040110000280012001010102011008028000010000010202010101020080100900201010030108200104010201100803010802000101020201010102010090008001, value: 0x0
Caller: [CREATOR], function: setEndsAt(uint256), txdata: 0x6e50eb3f, value: 0x0