==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: fallback
PC address: 1549
Estimated Gas Usage: 1016 - 1111
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:735

t amount);



--------------------
Initial State:

Account: [CREATOR], balance: 0x800230f1908, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sponsorDAI(uint256,uint256), txdata: 0x045c123a000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: get_Sponsored_Amount_in_Job_By_Address(uint256,address)
PC address: 2160
Estimated Gas Usage: 1091 - 1846
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:821

or, bool _pr

--------------------
Initial State:

Account: [CREATOR], balance: 0x2bc74a00230f3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: get_Sponsored_Amount_in_Job_By_Address(uint256,address), txdata: 0x1ce10a9d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: cancelJob(uint256)
PC address: 2243
Estimated Gas Usage: 1034 - 1129
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:419

    }





 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cancelJob(uint256), txdata: 0x1dffa3dc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: Jobs(uint256)
PC address: 2602
Estimated Gas Usage: 1024 - 1119
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:197

t[]) public JobsB

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: Jobs(uint256), txdata: 0x2cc772f0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: get_Sponsors_list_by_Job(uint256)
PC address: 2898
Estimated Gas Usage: 1078 - 1173
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:841

sMade = job.

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: get_Sponsors_list_by_Job(uint256), txdata: 0x350dbcc5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: setEvaluator(uint256)
PC address: 3088
Estimated Gas Usage: 1097 - 1192
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:383

e DAI token 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setEvaluator(uint256), txdata: 0x3db8352d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: JobsByManager(address,uint256)
PC address: 3290
Estimated Gas Usage: 1187 - 1802
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:203

RC20 public DAI;



    uint public jobCount = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: JobsByManager(address,uint256), txdata: 0x3efdf840, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: payToEvaluator(uint256,uint256)
PC address: 3360
Estimated Gas Usage: 1195 - 1290
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:585

ob for which

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: payToEvaluator(uint256,uint256), txdata: 0x55c79f49000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Escrow
Function name: tip(address,uint256)
PC address: 5100
Estimated Gas Usage: 6365 - 78813
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:687

ublic {

        require(_JobID >= 0);



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: tip(address,uint256), txdata: 0x8b6fc452000000000000000000000000400201800240018040208008012080011004800220, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Escrow
Function name: tip(address,uint256)
PC address: 5229
Estimated Gas Usage: 6365 - 78813
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:697

  r

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: tip(address,uint256), txdata: 0x8b6fc45200000000000000000000000001010101010101010101010101010101010101010d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Escrow
Function name: tip(address,uint256)
PC address: 5326
Estimated Gas Usage: 6365 - 78813
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:697

  require(job.status == JobStatus.inProgre

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: tip(address,uint256), txdata: 0x8b6fc452000000000000000000000000400201800240018040208008012080011004800220, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Escrow
Function name: tip(address,uint256)
PC address: 5326
Estimated Gas Usage: 6365 - 78813
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:697

  require(job.status == JobStatus.inProgre

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: tip(address,uint256), txdata: 0x8b6fc452000000000000000000000000010101010101010101010101010101010101010104, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Escrow
Function name: tip(address,uint256)
PC address: 5326
Estimated Gas Usage: 6365 - 78813
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:697

  require(job.status == JobStatus.inProgre

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: tip(address,uint256), txdata: 0x8b6fc45200000000000000000000000001010101010101010101010101010101010101010d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: getJob(uint256)
PC address: 5414
Estimated Gas Usage: 1293 - 1388
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:859
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getJob(uint256), txdata: 0xbf22c457, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: claimPayment(uint256)
PC address: 5800
Estimated Gas Usage: 1276 - 1371
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:471

Approved(add

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claimPayment(uint256), txdata: 0xc63fdcc7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: provideProofOfWork(uint256)
PC address: 6114
Estimated Gas Usage: 1295 - 1390
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:655

 tip(address

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: provideProofOfWork(uint256), txdata: 0xc7d586c9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: approvePayment(uint256)
PC address: 6287
Estimated Gas Usage: 1320 - 1415
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:509

    job.noOf

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approvePayment(uint256), txdata: 0xde14c818, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: claimJob(uint256)
PC address: 6642
Estimated Gas Usage: 1361 - 1456
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:329

laimed(msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claimJob(uint256), txdata: 0xe3e4b9fb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Escrow
Function name: withdrawDAI(address,uint256)
PC address: 7076
Estimated Gas Usage: 7279 - 79112
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:795



    /// @param _JobID is t

--------------------
Initial State:

Account: [CREATOR], balance: 0x201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: withdrawDAI(address,uint256), txdata: 0xeabdd572000000000000000000000000010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Escrow
Function name: withdrawDAI(address,uint256)
PC address: 7131
Estimated Gas Usage: 7279 - 79112
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:797

we 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: withdrawDAI(address,uint256), txdata: 0xeabdd572000000000000000000000000010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Escrow
Function name: withdrawDAI(address,uint256)
PC address: 7242
Estimated Gas Usage: 7279 - 79112
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:797

we are retrieving the list of sp

--------------------
Initial State:

Account: [CREATOR], balance: 0x201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: withdrawDAI(address,uint256), txdata: 0xeabdd572000000000000000000000000010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Escrow
Function name: withdrawDAI(address,uint256)
PC address: 7242
Estimated Gas Usage: 7279 - 79112
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:797

we are retrieving the list of sp

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: withdrawDAI(address,uint256), txdata: 0xeabdd572000000000000000000000000010101010101010101010101010101010101010108, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Escrow
Function name: withdrawDAI(address,uint256)
PC address: 7242
Estimated Gas Usage: 7279 - 79112
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:797

we are retrieving the list of sp

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: withdrawDAI(address,uint256), txdata: 0xeabdd572000000000000000000000000010101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: JobsByWorker(address,uint256)
PC address: 7381
Estimated Gas Usage: 1473 - 2088
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:211

ddress public arbitrator;     // address of ar

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: JobsByWorker(address,uint256), txdata: 0xee99881f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Escrow
Function name: confirmProofOfWork(uint256)
PC address: 7410
Estimated Gas Usage: 1427 - 1522
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb3ea3f0a18b8038340097fbb0861e2e.sol:631

     job.pro

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: confirmProofOfWork(uint256), txdata: 0xfff9d5b9, value: 0x0