==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SGCDEXEthTokenSwap
Function name: createSwap(bytes20,address,uint256,address)
PC address: 3534
Estimated Gas Usage: 31083 - 169015
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/bf1925a86c8bc75ac51724005b84c028.sol:78

msg.sender][_participantAddress] = Swap(
      _token,
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000b022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SGCDEXEthTokenSwap
Function name: createSwap(bytes20,address,uint256,address)
PC address: 3819
Estimated Gas Usage: 31083 - 169015
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bf1925a86c8bc75ac51724005b84c028.sol:80

,
      _secretHash,
      now,
      _value
    );

    emit CreateSwap(now);
  }

  function getBalance(address _ownerAddress) publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000080000b01a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SGCDEXEthTokenSwap
Function name: createSwap(bytes20,address,uint256,address)
PC address: 3872
Estimated Gas Usage: 31083 - 169015
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bf1925a86c8bc75ac51724005b84c028.sol:80

,
      _secretHash,
      now,
      _value
    );

    emit CreateSwap(now);
  }

  function getBalance(address _ownerAddress) publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000080000b01a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SGCDEXEthTokenSwap
Function name: createSwap(bytes20,address,uint256,address)
PC address: 3883
Estimated Gas Usage: 31083 - 169015
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bf1925a86c8bc75ac51724005b84c028.sol:80

,
      _secretHash,
      now,
      _value
    );

    emit CreateSwap(now);
  }

  function getBalance(address _ownerAddress) publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000080000b01a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SGCDEXEthTokenSwap
Function name: createSwap(bytes20,address,uint256,address)
PC address: 3900
Estimated Gas Usage: 31083 - 169015
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bf1925a86c8bc75ac51724005b84c028.sol:80

,
      _secretHash,
      now,
      _value
    );

    emit CreateSwap(now);
  }

  function getBalance(address _ownerAddress) publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000080000b01a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SGCDEXEthTokenSwap
Function name: createSwap(bytes20,address,uint256,address)
PC address: 3934
Estimated Gas Usage: 31083 - 169015
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bf1925a86c8bc75ac51724005b84c028.sol:80

,
      _secretHash,
      now,
      _value
    );

    emit CreateSwap(now);
  }

  function getBalance(address _ownerAddress) publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000080000b01a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SGCDEXEthTokenSwap
Function name: createSwap(bytes20,address,uint256,address)
PC address: 3945
Estimated Gas Usage: 31083 - 169015
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bf1925a86c8bc75ac51724005b84c028.sol:80

,
      _secretHash,
      now,
      _value
    );

    emit CreateSwap(now);
  }

  function getBalance(address _ownerAddress) publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000080000b01a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SGCDEXEthTokenSwap
Function name: createSwap(bytes20,address,uint256,address)
PC address: 3955
Estimated Gas Usage: 31083 - 169015
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bf1925a86c8bc75ac51724005b84c028.sol:80

,
      _secretHash,
      now,
      _value
    );

    emit CreateSwap(now);
  }

  function getBalance(address _ownerAddress) publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000080000b01a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0