==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Withdrawable
Function name: withdrawToken(address,address,uint256) or withdrawToken(address,address,uint256)
PC address: 1012
Estimated Gas Usage: 3873 - 39963
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c5ab3a5a80d18e4adc942c68ccaa5525.sol:313

ou want to send tokens f

--------------------
Initial State:

Account: [CREATOR], balance: 0x8201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LockedStorage
Function name: addAccount(address,string,uint256)
PC address: 2938
Estimated Gas Usage: 36168 - 160737
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/c5ab3a5a80d18e4adc942c68ccaa5525.sol:503

 the account address in the list

     */

    function removeAccountAddress(address _wallet) internal returns (bool) {

        uint i = 0;

        for (;i < accountAddresses.length; i = i.add(1)) {

            if (accountAddresses[i] == _wallet) {

                break;

            }

        }



        if (i >= accountAddresses.length) {

            return false;

        }




--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAccount(address,string,uint256), txdata: 0xf235bfa40000000000000000000000000000800001200000200020000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LockedStorage
Function name: withdrawToken(address,address,uint256) or withdrawToken(address,address,uint256)
PC address: 3689
Estimated Gas Usage: 3873 - 39963
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c5ab3a5a80d18e4adc942c68ccaa5525.sol:313

ou want to send tokens f

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LockedStorage
Function name: addressByIndex(uint256)
PC address: 9169
Estimated Gas Usage: 1501 - 1596
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c5ab3a5a80d18e4adc942c68ccaa5525.sol:923

count

     *

     * @param _target the owner of some amount of tokens

     * @param _ind the stage index of the locke

--------------------
Initial State:

Account: [CREATOR], balance: 0xa000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addressByIndex(uint256), txdata: 0xd8ab9208, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LockedStorage
Function name: addLockedTime(address,uint256,uint256,uint256)
PC address: 10994
Estimated Gas Usage: 1484 - 2572
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c5ab3a5a80d18e4adc942c68ccaa5525.sol:649

es.length.sub(1)) {

            l

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addLockedTime(address,uint256,uint256,uint256), txdata: 0x21765d2300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000911085369b95150200cd45fffe42fff7fffffffbfffbfffffdfdf4fefffe4870b1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LockedStorage
Function name: decreaseBalance(address,uint256)
PC address: 11017
Estimated Gas Usage: 1853 - 2138
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c5ab3a5a80d18e4adc942c68ccaa5525.sol:751

eeze) {

           

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000000000100002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: decreaseBalance(address,uint256), txdata: 0xff056949000000000000000000000000000000000000000000000000000000408080040101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LockedStorage
Function name: removeAccount(address)
PC address: 11017
Estimated Gas Usage: 26178 - 107313
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c5ab3a5a80d18e4adc942c68ccaa5525.sol:605

 uint256 _r

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeAccount(address), txdata: 0xc4740a9500000000000000000000000001, value: 0x0