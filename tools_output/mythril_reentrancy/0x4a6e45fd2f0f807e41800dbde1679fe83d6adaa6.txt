==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20Batch
Function name: transferFromBatch(address[],uint256[])
PC address: 1081
Estimated Gas Usage: 9544 - 88556
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c2d0f87da0bc2df790c0bb0cbb0ec932.sol:182
Initial State:

Account: [CREATOR], balance: 0x4e040400080010003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: transferFromBatch(address[],uint256[]), txdata: 0x5941bb80fefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff980, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20Batch
Function name: transferFromBatch(address[],uint256[])
PC address: 1143
Estimated Gas Usage: 9544 - 88556
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c2d0f87da0bc2df790c0bb0cbb0ec932.sol:182
Initial State:

Account: [CREATOR], balance: 0x4e040400080010003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: transferFromBatch(address[],uint256[]), txdata: 0x5941bb80fefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff980, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC20Batch
Function name: transferFromBatch(address[],uint256[])
PC address: 1418
Estimated Gas Usage: 9544 - 88556
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c2d0f87da0bc2df790c0bb0cbb0ec932.sol:182
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, value: 0x0
Caller: [CREATOR], function: transferFromBatch(address[],uint256[]), txdata: 0x5941bb80ffff7ffffffffffffffff800000000000000000000000000000000000000001280, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ERC20Batch
Function name: transferFromBatch(address[],uint256[])
PC address: 1418
Estimated Gas Usage: 9544 - 88556
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/c2d0f87da0bc2df790c0bb0cbb0ec932.sol:182
Initial State:

Account: [CREATOR], balance: 0x80000000002041, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800420800201080201048002044080010208048000000000000000000000000040, value: 0x0
Caller: [CREATOR], function: transferFromBatch(address[],uint256[]), txdata: 0x5941bb80ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdcff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20Batch
Function name: transferFromBatch(address[],uint256[])
PC address: 1418
Estimated Gas Usage: 9544 - 88556
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c2d0f87da0bc2df790c0bb0cbb0ec932.sol:182
Initial State:

Account: [CREATOR], balance: 0x4e040400080010003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: transferFromBatch(address[],uint256[]), txdata: 0x5941bb80fefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff980, value: 0x0