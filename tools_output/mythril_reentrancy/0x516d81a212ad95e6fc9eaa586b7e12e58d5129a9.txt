==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: fathercontract
Function name: use(uint256)
PC address: 356
Estimated Gas Usage: 71923 - 287670
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:59

this,value

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b445680, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 886
Estimated Gas Usage: 71923 - 287670
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:65

g.sender,value[ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 1011
Estimated Gas Usage: 71923 - 287670
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:69

sg.sender,value[m

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 2125
Estimated Gas Usage: 71923 - 287670
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:87



        contr[_sender].call.

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 2215
Estimated Gas Usage: 71923 - 287670
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:87

tr[_sender],_value);

        contr[_sender].call.

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 2268
Estimated Gas Usage: 71923 - 287670
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:87

tr[_sender],_value);

        contr[_sender].call.

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 2275
Estimated Gas Usage: 71923 - 287670
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:92


  

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 2398
Estimated Gas Usage: 71923 - 287670
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:93

fallback(uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 2564
Estimated Gas Usage: 71923 - 287670
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:91

    }

    function fallback(uint num,addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 2564
Estimated Gas Usage: 71923 - 287670
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:91

    }

    function fallback(uint num,addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 2688
Estimated Gas Usage: 71923 - 287670
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:93

nt amount) pub

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000008022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: use(uint256), txdata: 0xab5b4456, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: fathercontract
Function name: use(uint256)
PC address: 2757
Estimated Gas Usage: 71923 - 287670
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/58f2f78ce6773b22286a3dcfe368f164.sol:93

nt amount) public {

        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000008022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: use(uint256), txdata: 0xab5b4456, value: 0x0