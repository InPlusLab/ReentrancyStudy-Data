==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 343
Estimated Gas Usage: 92580 - 471334
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:189

ing[3] = 5;
        sp

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 345
Estimated Gas Usage: 92580 - 471334
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:189

scMapping[3] = 5;
        sp

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 350
Estimated Gas Usage: 92580 - 471334
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:189

pecialRewardsDescMapping[3] = 5;
        sp

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 391
Estimated Gas Usage: 92580 - 471334
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:190

escMapping[4] = 5;
        special

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: InternalModule
Function name: fallback
PC address: 416
Estimated Gas Usage: 988 - 1083
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:13

ble[] public _contractOwners = [
        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)
    ];

    constru

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: _contractOwners(uint256), txdata: 0x5a49f4710000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 427
Estimated Gas Usage: 92580 - 471334
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:191

Mapping[5] = 5;
    }


    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 463
Estimated Gas Usage: 92580 - 471334
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:195

sAmount() external view returns 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 499
Estimated Gas Usage: 92580 - 471334
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:195


        return rewardsAmountMap

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 535
Estimated Gas Usage: 92580 - 471334
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:196

nder];
    }


    function With

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 574
Estimated Gas Usage: 92580 - 471334
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:200

() external returns (uint256) {


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: InternalModule
Function name: DelAuthAddress(address)
PC address: 901
Estimated Gas Usage: 27530 - 89750
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:69

 = _authAddress[j+1];
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a10000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: DelAuthAddress(address), txdata: 0xf602dd060000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: InternalModule
Function name: DelAuthAddress(address)
PC address: 1033
Estimated Gas Usage: 27530 - 89750
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:73

           return ;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a10000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: DelAuthAddress(address), txdata: 0xf602dd060000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: InternalModule
Function name: DelAuthAddress(address)
PC address: 1091
Estimated Gas Usage: 27530 - 89750
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:75



    }





}



pra

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a10000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: DelAuthAddress(address), txdata: 0xf602dd060000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckAssetsPoolA
Function name: _contractOwners(uint256)
PC address: 2390
Estimated Gas Usage: 1111 - 1536
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:13

ble[] public _contractOwners = [
        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)
    ];

    constru

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: _contractOwners(uint256), txdata: 0x5a49f4710000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckAssetsPoolA
Function name: _investList(uint256)
PC address: 3339
Estimated Gas Usage: 1309 - 1734
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/9e597f1116017f90abcde7a5fa4ed481.sol:173

DescMapping;


    mapping(

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: _investList(uint256), txdata: 0xa3280ffe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0