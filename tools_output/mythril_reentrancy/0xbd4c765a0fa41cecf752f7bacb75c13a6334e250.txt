==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniversalBasicIncome
Function name: claim()
PC address: 958
Estimated Gas Usage: 14783 - 140219
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:783

();
        // If not enou

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000000080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4e4e4e4e4e4e4e4e4e4e4e4e00000000000002080102100000040120000000044e4e4e4e4e4e4e4e4e4e4e4e04010804000200201000000800082080020100404e4e4e4e4e4e4e4e4e4e4e4edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: UniversalBasicIncome
Function name: claim()
PC address: 958
Estimated Gas Usage: 14783 - 140219
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:783

();
        // If not enou

--------------------
Initial State:

Account: [CREATOR], balance: 0x2200000000000a00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 993
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1005
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:783

();
        // If not enou

--------------------
Initial State:

Account: [CREATOR], balance: 0xc01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1038
Estimated Gas Usage: 14783 - 140219
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:789
Initial State:

Account: [CREATOR], balance: 0x80000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2d2d2d2d2d2d2d2d2d2d2d2d00400000018000000200021004010080800120002d2d2d2d2d2d2d2d2d2d2d2d80040104002000102000400101010000000000102d2d2d2d2d2d2d2d2d2d2d2ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1154
Estimated Gas Usage: 14783 - 140219
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:789
Initial State:

Account: [CREATOR], balance: 0x50000000080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4e4e4e4e4e4e4e4e4e4e4e4e00000000000002080102100000040120000000044e4e4e4e4e4e4e4e4e4e4e4e04010804000200201000000800082080020100404e4e4e4e4e4e4e4e4e4e4e4edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1154
Estimated Gas Usage: 14783 - 140219
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:789
Initial State:

Account: [CREATOR], balance: 0x80000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2d2d2d2d2d2d2d2d2d2d2d2d00400000018000000200021004010080800120002d2d2d2d2d2d2d2d2d2d2d2d80040104002000102000400101010000000000102d2d2d2d2d2d2d2d2d2d2d2ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1189
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1201
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:789
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1275
Estimated Gas Usage: 14783 - 140219
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:789
Initial State:

Account: [CREATOR], balance: 0x80000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2d2d2d2d2d2d2d2d2d2d2d2d00400000018000000200021004010080800120002d2d2d2d2d2d2d2d2d2d2d2d80040104002000102000400101010000000000102d2d2d2d2d2d2d2d2d2d2d2ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 1795
Estimated Gas Usage: 7057 - 77502
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:789
Initial State:

Account: [CREATOR], balance: 0x81, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 60606060606060606060606000400280000201040020040020204010200400046060606060606060606060600101000040000001040004028000100001100080606060606060606060606060deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 1795
Estimated Gas Usage: 7057 - 77502
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:789
Initial State:

Account: [CREATOR], balance: 0x40004400401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 1830
Estimated Gas Usage: 7057 - 77502
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 1842
Estimated Gas Usage: 7057 - 77502
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9e386358ea35342fed962ff7e89a6988.sol:789
Initial State:

Account: [CREATOR], balance: 0x8000c0000042001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 2396
Estimated Gas Usage: 7057 - 77502
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 2396
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x101001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claim(), txdata: 0x4e71d92d, value: 0x0