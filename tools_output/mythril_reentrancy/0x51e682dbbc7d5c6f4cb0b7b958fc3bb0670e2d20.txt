==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: orfeed
Function name: getSynthToEthInputAmount(bytes32,uint256)
PC address: 2712
Estimated Gas Usage: 5311 - 76651
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aedf50c222d0e37638884c2790963e5f.sol:385

Amount = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getSynthToEthInputAmount(bytes32,uint256), txdata: 0x4c1b78c4, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: orfeed
Function name: getSynthToEthInputAmount(bytes32,uint256)
PC address: 2819
Estimated Gas Usage: 5311 - 76651
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/aedf50c222d0e37638884c2790963e5f.sol:385

Amount = synthetix.getOutputAmount('sETH', synth, s

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getSynthToEthInputAmount(bytes32,uint256), txdata: 0x4c1b78c4, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: orfeed
Function name: getEthToSynthOutputAmount(bytes32,uint256)
PC address: 2819
Estimated Gas Usage: 5443 - 76783
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/aedf50c222d0e37638884c2790963e5f.sol:385

Amount = synthetix.getOutputAmount('sETH', synth, s

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getEthToSynthOutputAmount(bytes32,uint256), txdata: 0x80b3e2bf, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: orfeed
Function name: getSynthToEthInputAmount(bytes32,uint256)
PC address: 2819
Estimated Gas Usage: 5311 - 76651
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aedf50c222d0e37638884c2790963e5f.sol:385

Amount = synthetix.getOutputAmount('sETH', synth, s

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getSynthToEthInputAmount(bytes32,uint256), txdata: 0x4c1b78c4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: orfeed
Function name: getEthToSynthOutputAmount(bytes32,uint256)
PC address: 2819
Estimated Gas Usage: 5443 - 76783
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aedf50c222d0e37638884c2790963e5f.sol:385

Amount = synthetix.getOutputAmount('sETH', synth, s

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getEthToSynthOutputAmount(bytes32,uint256), txdata: 0x80b3e2bf, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: orfeed
Function name: getEthToSynthOutputAmount(bytes32,uint256)
PC address: 3889
Estimated Gas Usage: 5443 - 76783
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/aedf50c222d0e37638884c2790963e5f.sol:366

;
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getEthToSynthOutputAmount(bytes32,uint256), txdata: 0x80b3e2bf, value: 0x0