==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenMover
Function name: transferERC721(address,address,address,uint256)
PC address: 613
Estimated Gas Usage: 3085 - 37936
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1fca12e1a255bfb2e6239c70e32290ed.sol:1783
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addOperator(address), txdata: 0x9870d7fe000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: transferERC721(address,address,address,uint256), txdata: 0x789f93f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenMover
Function name: removeOperator(address)
PC address: 1296
Estimated Gas Usage: 31644 - 112829
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1fca12e1a255bfb2e6239c70e32290ed.sol:1783
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addOperator(address), txdata: 0x9870d7fe0000000000000000000000000000000800000000000010100108200201802001, value: 0x0
Caller: [CREATOR], function: removeOperator(address), txdata: 0xac8a584a0000000000000000000000000000000800000000000010100108200201802001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenMover
Function name: removeOperator(address)
PC address: 1311
Estimated Gas Usage: 31644 - 112829
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1fca12e1a255bfb2e6239c70e32290ed.sol:1783
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addOperator(address), txdata: 0x9870d7fe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: removeOperator(address), txdata: 0xac8a584a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0


