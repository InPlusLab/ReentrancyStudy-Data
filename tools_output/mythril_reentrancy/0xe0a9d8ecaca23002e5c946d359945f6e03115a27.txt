==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ProposalVoting
Function name: constructor
PC address: 229
Estimated Gas Usage: 6168 - 30210
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:211

 _bytes = bytes(_description);
        require(_bytes.leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatavalue: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: OTCProviderProposalVoting
Function name: constructor
PC address: 514
Estimated Gas Usage: 25154 - 111462
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:211

 _bytes = bytes(_description);
        require(_bytes.leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: OTCProviderProposalVoting
Function name: isActive()
PC address: 914
Estimated Gas Usage: 975 - 1070
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:283

   * @dev Get voters range.
    * @return voters range.
    */
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010801010101010101010201010108000000000000000000000000000000000000000000000000000000000000000140, value: 0x0
Caller: [ATTACKER], function: isActive(), txdata: 0x22f3e2d4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OTCProviderProposalVoting
Function name: voters(uint256)
PC address: 1291
Estimated Gas Usage: 1200 - 1295
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:197

ntract.
    * @param _c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0202020202020202020202020201010101040101010001010108010101080401000000000000000000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [ATTACKER], function: voters(uint256), txdata: 0xda58c7d9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OTCProviderProposalVoting
Function name: getVotersRange(uint256,uint256)
PC address: 1334
Estimated Gas Usage: 1567 - 2507
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:297

eturn rangeVoters;
    }

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101011080010101010102012001080208010401000000000000000000000000000000000000000000000000000000000000000102, value: 0x0
Caller: [ATTACKER], function: getVotersRange(uint256,uint256), txdata: 0xdd65db4c80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OTCProviderProposalVoting
Function name: getVotersRange(uint256,uint256)
PC address: 1423
Estimated Gas Usage: 2251 - 4933
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:311

Index the vote choice i

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101014020018001010180018020020401000000000000000000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [ATTACKER], function: getVotersRange(uint256,uint256), txdata: 0xdd65db4c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OTCProviderProposalVoting
Function name: choices(uint256)
PC address: 1524
Estimated Gas Usage: 463 - 558
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:331

  function voteB2C2() public
    {
        castVote(0);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001001010101084008800101082001100840014010000000000000000000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [ATTACKER], function: choices(uint256), txdata: 0xf6fd7fde80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OTCProviderProposalVoting
Function name: choices(uint256)
PC address: 1551
Estimated Gas Usage: 2666 - 4407
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:331

  function voteB2C2() public
    {
        castVote(0);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x800084022000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000202020202020202020202020202020202020302000080008040008100040004000008000002000000004000000000400000000301, value: 0x0
Caller: [SOMEGUY], function: choices(uint256), txdata: 0xf6fd7fde, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OTCProviderProposalVoting
Function name: getSGRAuthorizationManager()
PC address: 1787
Estimated Gas Usage: 2740 - 38338
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:111

r not the sender relates to one of the identifiers.
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000100002, value: 0x0
Caller: [SOMEGUY], function: getSGRAuthorizationManager(), txdata: 0x28e34d94, value: 0x0
Caller: [CREATOR], function: getSGRAuthorizationManager(), txdata: 0x28e34d94, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: OTCProviderProposalVoting
Function name: voteB2C2()
PC address: 1851
Estimated Gas Usage: 1229 - 1324
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/59956fe43c1cdebd3e6c5c388230c8ee.sol:242

already voted");
        _;
    }

    /**
    * 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000008008040101000101048002020201020101010820000000000000000000000000000000000000000000000000000000000000000102, value: 0x0
Caller: [ATTACKER], function: voteB2C2(), txdata: 0xa22ee8d9, value: 0x0