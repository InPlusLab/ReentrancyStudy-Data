==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BalanceChecker
Function name: allowances(address[],address,address)
PC address: 340
Estimated Gas Usage: 590 - 2190
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ae97450395b4564311df734717897954.sol:83

 returns (uint[]) {
    uint[] memory _allowances = new uint[](users.length);
    
    for (uint i = 0; i < users.length; i++) {
        if (token != address(0x0)) { 
            _allowances[i] = tokenAllowance(users[i], spender, token);
        } else {
            _allowances[i] = Token(0x0).allowance(users[i],spender); 
        }
    }  
    return _allowances;
  }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x8e36e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: allowances(address[],address,address), txdata: 0xe14401fbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BalanceChecker
Function name: balances(address[],address[])
PC address: 472
Estimated Gas Usage: 622 - 1892
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ae97450395b4564311df734717897954.sol:67

 returns (uint[]) {
    uint[] memory addrBalances = new uint[](tokens.length * users.length);
    
    for(uint i = 0; i < users.length; i++) {
      for (uint j = 0; j < tokens.length; j++) {
        uint addrIdx = j + tokens.length * i;
        if (tokens[j] != address(0x0)) { 
          addrBalances[addrIdx] = tokenBalance(users[i], tokens[j]);
        } else {
          addrBalances[addrIdx] = users[i].balance;   
        }
      }  
    }
  
    return addrBalances;
  }
function allowances(address[] users, address spender, address token) external vi

--------------------
Initial State:

Account: [CREATOR], balance: 0xe23fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balances(address[],address[]), txdata: 0xf0002ea9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BalanceChecker
Function name: balances(address[],address[])
PC address: 483
Estimated Gas Usage: 622 - 1892
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ae97450395b4564311df734717897954.sol:67

 returns (uint[]) {
    uint[] memory addrBalances = new uint[](tokens.length * users.length);
    
    for(uint i = 0; i < users.length; i++) {
      for (uint j = 0; j < tokens.length; j++) {
        uint addrIdx = j + tokens.length * i;
        if (tokens[j] != address(0x0)) { 
          addrBalances[addrIdx] = tokenBalance(users[i], tokens[j]);
        } else {
          addrBalances[addrIdx] = users[i].balance;   
        }
      }  
    }
  
    return addrBalances;
  }
function allowances(address[] users, address spender, address token) external vi

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000020383ba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balances(address[],address[]), txdata: 0xf0002ea90000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BalanceChecker
Function name: balances(address[],address[])
PC address: 485
Estimated Gas Usage: 622 - 1892
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ae97450395b4564311df734717897954.sol:67

 returns (uint[]) {
    uint[] memory addrBalances = new uint[](tokens.length * users.length);
    
    for(uint i = 0; i < users.length; i++) {
      for (uint j = 0; j < tokens.length; j++) {
        uint addrIdx = j + tokens.length * i;
        if (tokens[j] != address(0x0)) { 
          addrBalances[addrIdx] = tokenBalance(users[i], tokens[j]);
        } else {
          addrBalances[addrIdx] = users[i].balance;   
        }
      }  
    }
  
    return addrBalances;
  }
function allowances(address[] users, address spender, address token) external vi

--------------------
Initial State:

Account: [CREATOR], balance: 0xc3bba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balances(address[],address[]), txdata: 0xf0002ea90000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BalanceChecker
Function name: fallback
PC address: 593
Estimated Gas Usage: 1862 - 37604
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ae97450395b4564311df734717897954.sol:37

) {  
      return Token(token).bala

--------------------
Initial State:

Account: [CREATOR], balance: 0xac25c2800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenBalance(address,address), txdata: 0x1049334f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BalanceChecker
Function name: tokenAllowance(address,address,address)
PC address: 867
Estimated Gas Usage: 1925 - 37762
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ae97450395b4564311df734717897954.sol:50

  
      return Token(token).allowance(owner,s

--------------------
Initial State:

Account: [CREATOR], balance: 0x906ac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenAllowance(address,address,address), txdata: 0x8e8758d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0