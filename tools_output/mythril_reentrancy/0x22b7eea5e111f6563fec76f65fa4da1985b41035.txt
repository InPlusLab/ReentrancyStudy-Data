==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LTRToken
Function name: name()
PC address: 1870
Estimated Gas Usage: 4189 - 6308
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/92f90257913baaf56e9f6cb1ae0107cc.sol:168

its with 3 decimal

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: name(), txdata: 0x06fdde03, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transferForMultiAddresses(address[],uint256[]) or transferForMultiAddresses(address[],uint256[])
PC address: 1878
Estimated Gas Usage: 1680 - 7511
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/92f90257913baaf56e9f6cb1ae0107cc.sol:120

i = 0; i < _addresses.length; i++) {
      require(_addresses[i] != address(0));
      require(_amounts[i] <= balances[msg.sender]);
      require(_amounts[i] > 0);
      // SafeMath.sub will throw if there is not enough balance.
      balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);
      balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);
      Transfer(msg.sender, _addresses[i], _amounts[i]);
    }
    return true;
  }

    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }

    functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x4004000004b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferForMultiAddresses(address[],uint256[]), txdata: 0x204009d2800000000000000000000000000000000000000000000000000000000000000084, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LTRToken
Function name: transferForMultiAddresses(address[],uint256[]) or transferForMultiAddresses(address[],uint256[])
PC address: 2743
Estimated Gas Usage: 1702 - 7533
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/92f90257913baaf56e9f6cb1ae0107cc.sol:120

i = 0; i < _addresses.length; i++) {
      require(_addresses[i] != address(0));
      require(_amounts[i] <= balances[msg.sender]);
      require(_amounts[i] > 0);
      // SafeMath.sub will throw if there is not enough balance.
      balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);
      balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);
      Transfer(msg.sender, _addresses[i], _amounts[i]);
    }
    return true;
  }

    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }

    functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080000060403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferForMultiAddresses(address[],uint256[]), txdata: 0x204009d28000000000000000000000000000000000000000000000000000000000000000c0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LTRToken
Function name: approveAndCall(address,uint256,bytes)
PC address: 5319
Estimated Gas Usage: 9543 - 69259
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/92f90257913baaf56e9f6cb1ae0107cc.sol:193
Initial State:

Account: [CREATOR], balance: 0x1000002008112, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0