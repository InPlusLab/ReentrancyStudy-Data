==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 344
Estimated Gas Usage: 1740 - 2165
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:85

f the Crowdsale has ended     
      if (!crowdsaleHasStarted){  

--------------------
Initial State:

Account: [CREATOR], balance: 0x400c104010200114d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 382
Estimated Gas Usage: 3426 - 4181
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:87

e Crowdsale should start        
          crowdsaleHasStarted = true;                                           // Set that the Crowdsale has started         
          CrowdsaleStarted(block.number);                                       // Raise CrowdsaleStarted event     
        } else{
          throw;
        }
      }
      if (participantContribution[msg.sender] == 0){                            //

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 987
Estimated Gas Usage: 54342 - 191995
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:102

een reached on

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 1008
Estimated Gas Usage: 54342 - 191995
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:103

   CrowdsaleS

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 1011
Estimated Gas Usage: 54342 - 191995
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:102

me        
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 2930
Estimated Gas Usage: 38691 - 141543
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:179

rtBlock + blocksInADay * 7) return _ethSent * 3667; 
      if (_blockNumbe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 2949
Estimated Gas Usage: 40333 - 143185
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:179

 startBlock + blocksInADay * 7) return _ethSent * 3667; 
      if (_blockNumber >= startBlock + blocks

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ValusCrowdsale
Function name: getValusTokenIssuance(uint256,uint256)
PC address: 2954
Estimated Gas Usage: 14476 - 14852
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:180

tBlock + blocks

--------------------
Initial State:

Account: [CREATOR], balance: 0x100100000020084, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getValusTokenIssuance(uint256,uint256), txdata: 0x5b4786ea000000000000000000000001000000000000000000000000000000018001048040, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 2980
Estimated Gas Usage: 41979 - 144831
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:180

 _blockNumber < startBlock + blocksInADay * 14) return _ethSent * 3511; 
      if (_blockNumb

--------------------
Initial State:

Account: [CREATOR], balance: 0x42523, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 2999
Estimated Gas Usage: 43621 - 146473
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:180

7 && _blockNumber < startBlock + blocksInADay * 14) return _ethSent * 3511; 
      if (_blockNumber >= startBlock + block

--------------------
Initial State:

Account: [CREATOR], balance: 0x4010b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ValusCrowdsale
Function name: getValusTokenIssuance(uint256,uint256)
PC address: 3004
Estimated Gas Usage: 14476 - 14852
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:181

rtBlock + block

--------------------
Initial State:

Account: [CREATOR], balance: 0x41028, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getValusTokenIssuance(uint256,uint256), txdata: 0x5b4786ea000000000000000000000001000000000000000000000000000000000180808010, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 3030
Estimated Gas Usage: 45267 - 148119
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:181

& _blockNumber < startBlock + blocksInADay * 21) return _ethSent * 3402; 
      if (_blockNumb

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000000062810, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10042000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 3049
Estimated Gas Usage: 46909 - 149761
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:181

14 && _blockNumber < startBlock + blocksInADay * 21) return _ethSent * 3402; 
      if (_blockNumber >= startBlock + block

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000002093b39, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000003c0002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ValusCrowdsale
Function name: getValusTokenIssuance(uint256,uint256)
PC address: 3054
Estimated Gas Usage: 14476 - 14852
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:182

rtBlock + block

--------------------
Initial State:

Account: [CREATOR], balance: 0x440000402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getValusTokenIssuance(uint256,uint256), txdata: 0x5b4786ea0000000000000000000000010000000000000000000000000000000480208000b8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 3080
Estimated Gas Usage: 48555 - 151407
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:182

 return _ethSent * 3300;
    }
    
    /* Withdraw funds from contract */  
    function withd

--------------------
Initial State:

Account: [CREATOR], balance: 0x3d22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 3099
Estimated Gas Usage: 50197 - 153049
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:182

21 ) return _ethSent * 3300;
    }
    
    /* Withdraw funds from contract */  
    function withdrawEther() onlyOwner{   

--------------------
Initial State:

Account: [CREATOR], balance: 0x22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ValusCrowdsale
Function name: getValusTokenIssuance(uint256,uint256)
PC address: 3104
Estimated Gas Usage: 14476 - 14852
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:186

) onlyOwner{   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getValusTokenIssuance(uint256,uint256), txdata: 0x5b4786ea000000000000000000000001000000000000000000000000000000802010802040, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: fallback
PC address: 3129
Estimated Gas Usage: 51840 - 154692
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:187

f (this.balance == 0) throw;                                            // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2140000000000622, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ValusCrowdsale
Function name: getValusTokenIssuance(uint256,uint256)
PC address: 3134
Estimated Gas Usage: 14476 - 14852
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:187

            // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000084c40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getValusTokenIssuance(uint256,uint256), txdata: 0x5b4786ea00000000000000000000000400000000000000000000000000000000200200004c, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: claimEthIfFailed()
PC address: 4322
Estimated Gas Usage: 1200 - 1295
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:125

antContribution[msg.sender] == 0) throw;                   

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimEthIfFailed(), txdata: 0x7d6651b9, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: claimEthIfFailed()
PC address: 4337
Estimated Gas Usage: 1217 - 1312
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:125

icipantContribution[msg.sender] == 0) throw;                    // Che

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimEthIfFailed(), txdata: 0x7d6651b9, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: batchReturnEthIfFailed(uint256)
PC address: 4936
Estimated Gas Usage: 2135 - 2560
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:137

dress;    
      uint256 contribution;
      for (uint cnt

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100000100020401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: batchReturnEthIfFailed(uint256), txdata: 0x7f860330, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ValusCrowdsale
Function name: batchReturnEthIfFailed(uint256)
PC address: 4951
Estimated Gas Usage: 2152 - 2577
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:137

ntAddress;    
      uint256 contribution;
      for (uint cnt = 0; c

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: batchReturnEthIfFailed(uint256), txdata: 0x7f860330, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ValusCrowdsale
Function name: salvageTokensFromContract(address,address,uint256)
PC address: 5808
Estimated Gas Usage: 3068 - 38338
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/de8b5151b0b474a0c776ed23bd36704c.sol:207

ct);   
    }   
    
    function crowdsaleInPro

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: salvageTokensFromContract(address,address,uint256), txdata: 0xa0929cda000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0