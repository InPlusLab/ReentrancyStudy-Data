with mythril_dir
==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: URACCrowdSale
Function name: constructor
PC address: 642
Estimated Gas Usage: 128209 - 520231
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0bdd44cb35aefa81eb2c114367977f4b.sol:1206


    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000400800002040000102014001080020400000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: URACCrowdSale
Function name: constructor
PC address: 646
Estimated Gas Usage: 128209 - 520231
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0bdd44cb35aefa81eb2c114367977f4b.sol:1207

etWallet(add

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000400800002040000102014001080020400000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000002, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: URACCrowdSale
Function name: constructor
PC address: 782
Estimated Gas Usage: 128209 - 520231
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0bdd44cb35aefa81eb2c114367977f4b.sol:1206


    function setWallet(address payable newAddress)  external onlyO

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001004400820400202000100400101021001000010000000000000000000000000000100000000000000004000000000000000010000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: URACCrowdSale
Function name: constructor
PC address: 782
Estimated Gas Usage: 128209 - 520231
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0bdd44cb35aefa81eb2c114367977f4b.sol:1206


    function setWallet(address payable newAddress)  external onlyO

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000400800002040000102014001080020400000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: URACToken
Function name: mintex(uint256)
PC address: 3657
Estimated Gas Usage: 7952 - 28757
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0bdd44cb35aefa81eb2c114367977f4b.sol:844




    function setClai

--------------------
Initial State:

Account: [CREATOR], balance: 0x10200220a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002004000004800020400400004002010400020400000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad4, value: 0x0
Caller: [SOMEGUY], function: mintex(uint256), txdata: 0xa976204f9c84050216a00400286404c1080106108107160a11402203064100208402bb66, value: 0x0


