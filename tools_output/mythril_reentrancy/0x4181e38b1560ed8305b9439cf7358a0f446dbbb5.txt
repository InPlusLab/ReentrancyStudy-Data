==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: setOwner(address) or setOwner(address)
PC address: 532
Estimated Gas Usage: 1061 - 1486
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:112

ress(0), "Unauthorized");
        emit OwnerUpdate(owner, _newOwner);
        owner = _newOwner;
        newOwner = address(0);
    }

    function transferOwnership(address _newOwner) public ownerOnly {
        require(_newOwner != owner, "Invalid

--------------------
Initial State:

Account: [CREATOR], balance: 0x39b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 1847
Estimated Gas Usage: 1149 - 1574
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:120

    newOwner = _newOwner;
    }

    function acceptOwnership() public {
        require(msg.sender == newOwner, "Unauthorized");
        emit OwnerUpd

--------------------
Initial State:

Account: [CREATOR], balance: 0x63b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArbBot
Function name: setOwner(address) or setOwner(address)
PC address: 2225
Estimated Gas Usage: 1061 - 1486
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:112

ress(0), "Unauthorized");
        emit OwnerUpdate(owner, _newOwner);
        owner = _newOwner;
        newOwner = address(0);
    }

    function transferOwnership(address _newOwner) public ownerOnly {
        require(_newOwner != owner, "Invalid

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArbBot
Function name: updateRelays(address,address,address)
PC address: 2884
Estimated Gas Usage: 1149 - 1574
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:284

20Token(IERC20Token _token, address _to, uint256 _amount) public ownerOnly {
        _token.transfer(_to, _amount);
    }

    function() public payable {}
    
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateRelays(address,address,address), txdata: 0x1df53891, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArbBot
Function name: updateTokens(address,address,address,address)
PC address: 9707
Estimated Gas Usage: 1380 - 1805
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:270

USDB;
        tokenPEGUSD = _tokenPEGUSD;
    }

    function updateRelays(
        ISmartToken _relayUSDB,
        ISmartToken _relaySAI,
        ISmartToken _relayPEGUSD
    ) public ownerOnly {
        relayUSDB = _relayUSDB;
        relaySAI = _relaySAI;
        relayPEGUSD = _relayPEGUSD;
    }

    function tra

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateTokens(address,address,address,address), txdata: 0x890e01db, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArbBot
Function name: transferERC20Token(address,address,uint256)
PC address: 10098
Estimated Gas Usage: 1385 - 1810
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:290
Initial State:

Account: [CREATOR], balance: 0x40000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferERC20Token(address,address,uint256), txdata: 0x92940bf9, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ArbBot
Function name: transferERC20Token(address,address,uint256)
PC address: 10265
Estimated Gas Usage: 3089 - 38171
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:290
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferERC20Token(address,address,uint256), txdata: 0x92940bf9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArbBot
Function name: updateTradeValue(uint256)
PC address: 10414
Estimated Gas Usage: 1341 - 1766
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:263

20Token _tokenBNT,
        IERC20Token _tokenSAI,
        IERC20Token _tokenUSDB,
        IERC20Token _toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateTradeValue(uint256), txdata: 0xa63dfd84, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArbBot
Function name: updateThreshold(uint256)
PC address: 10757
Estimated Gas Usage: 1473 - 1898
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:267

    ) public ownerOnly {
        tokenBNT = _tokenBNT;
        tokenSAI = _tokenSAI;
        tokenUSDB 

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateThreshold(uint256), txdata: 0xd7d7442f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArbBot
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 10931
Estimated Gas Usage: 1545 - 1970
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/772897cdb68d85070f3082c76e857beb.sol:120

    newOwner = _newOwner;
    }

    function acceptOwnership() public {
        require(msg.sender == newOwner, "Unauthorized");
        emit OwnerUpd

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000040002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0