==== Unprotected Selfdestruct ====
SWC ID: 106
Severity: High
Contract: Sacrifice
Function name: constructor
PC address: 31
Estimated Gas Usage: 87 - 3097
Any sender can cause the contract to self-destruct.
Any sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account and withdraw its balance to an arbitrary address. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:72

cts/upgradeable_contract

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 1788
Estimated Gas Usage: 58164 - 276164
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:40

 function deployedAtBloc

--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: requestFailedMessageFix(bytes32)
PC address: 2885
Estimated Gas Usage: 19294 - 214365
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:306

.maxGasPerTx());
        uintStor

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestFailedMessageFix(bytes32), txdata: 0x9a4a4395, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 2885
Estimated Gas Usage: 58164 - 276164
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:306

.maxGasPerTx());
        uintStor

--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ForeignMediator
Function name: messageHashFixed(bytes32)
PC address: 3138
Estimated Gas Usage: 1779 - 4319
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: messageHashFixed(bytes32), txdata: 0x99650862, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: requestFailedMessageFix(bytes32)
PC address: 3391
Estimated Gas Usage: 19294 - 214365
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:44


// File: openzeppelin-solidit

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestFailedMessageFix(bytes32), txdata: 0x9a4a4395, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ForeignMediator
Function name: requestFailedMessageFix(bytes32)
PC address: 3638
Estimated Gas Usage: 19294 - 214365
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:484

imit());
    }

    function claimTokens(addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: requestFailedMessageFix(bytes32), txdata: 0x9a4a4395, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: requestFailedMessageFix(bytes32)
PC address: 3638
Estimated Gas Usage: 19294 - 214365
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:484

imit());
    }

    function claimTokens(addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestFailedMessageFix(bytes32), txdata: 0x9a4a4395, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: requestFailedMessageFix(bytes32)
PC address: 3806
Estimated Gas Usage: 19294 - 214365
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:487

pgradeabilityOwner validAddress(_to) {
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestFailedMessageFix(bytes32), txdata: 0x9a4a4395, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: requestFailedMessageFix(bytes32)
PC address: 3957
Estimated Gas Usage: 19294 - 214365
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:491

(bytes32 _dataHash) external;

    function bri

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestFailedMessageFix(bytes32), txdata: 0x9a4a4395, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: requestFailedMessageFix(bytes32)
PC address: 4319
Estimated Gas Usage: 19294 - 214365
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:500

erface IHomeMediator {
    function handleBridgedTokens(address _recipient, uint256 _tokenId,

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestFailedMessageFix(bytes32), txdata: 0x9a4a4395, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 5605
Estimated Gas Usage: 58164 - 276164
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:290

tMediatorContractOnOtherSide(_mediatorContract);


--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 5647
Estimated Gas Usage: 58164 - 276164
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:290

tMediatorContractOnOtherSide(_mediatorContract);


--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 5989
Estimated Gas Usage: 58164 - 276164
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:318

ontracts conforming to ERC-721

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 6216
Estimated Gas Usage: 58164 - 276164
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:318

le Tokens
/// @author Dieter Shirley <dete@axiomz

--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 6799
Estimated Gas Usage: 58164 - 276164
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:33


    }

    function isInitiali

--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 6813
Estimated Gas Usage: 58164 - 276164
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2dfebee8c83f46929bcc8efab528e2cd.sol:33


    }

    function isInitiali

--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 8928
Estimated Gas Usage: 58164 - 276164
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 8998
Estimated Gas Usage: 58164 - 276164
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ForeignMediator
Function name: initialize(address,address,address,uint256,address)
PC address: 9020
Estimated Gas Usage: 58164 - 276164
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,address), txdata: 0x530b97a4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0


