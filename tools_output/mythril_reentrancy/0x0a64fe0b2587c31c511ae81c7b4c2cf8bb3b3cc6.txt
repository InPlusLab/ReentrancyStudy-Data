==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WeBuildWorld
Function name: getBrickIds(uint256,uint256,bytes32[],uint256,uint256,uint256)
PC address: 485
Estimated Gas Usage: 4508 - 12083
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:697

      

            for (uint j = 0; j < temp.length; j++) { 

                if (taken >= _take) {

                    break;

                }

                

                bool exist = provider.filterBrick(temp[j], _tags, _status, _started, _expired);

                if(exist){

                    if (counter >= _skip) { 

                        brickIds[taken] = temp[j];                     

                        taken++;

                    }

                    counter++;

                }

            }

        }



        return brickIds;

    }



    function addBrick(string _title, string _url, uint _expired, string _description, bytes32[] _tags) 

        public payable

        returns (uint id)

    {

        id = getId();

        require(getProvider(id).addBrick(id, _title, _url, _expired, _description, _tags, msg.value));

        emit BrickAdded(id);

    }



    function changeBrick(uint _brickId, string _title, string _url, string _description, bytes32[] _tags) 

        public onlyBrickOwner(_brickId) payable

        returns (bool success) 

    {

        success = getProvider(_brickId).changeBrick(_brickId, _title, _url, _description, _tags, msg.value);

        emit BrickUpdated(_brickId);



        return success;

    }



    // msg.value i

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getBrickIds(uint256,uint256,bytes32[],uint256,uint256,uint256), txdata: 0x10cad69c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Extendable
Function name: fallback
PC address: 945
Estimated Gas Usage: 34169 - 138840
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:307

tion getProvi

--------------------
Initial State:

Account: [CREATOR], balance: 0xcd400002002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: upgradeProvider(address), txdata: 0x100356ff00000000000000000000000002, value: 0x0
Caller: [CREATOR], function: upgradeProvider(address), txdata: 0x100356ff02020202020202020202020201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: WeBuildWorld
Function name: cancel(uint256)
PC address: 3977
Estimated Gas Usage: 12898 - 123397
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:341

dress) {

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [SOMEGUY], function: cancel(uint256), txdata: 0x40e58ee5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: WeBuildWorld
Function name: cancel(uint256)
PC address: 4021
Estimated Gas Usage: 12898 - 123397
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:343

ion].providerAddress;

    }   



    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [SOMEGUY], function: cancel(uint256), txdata: 0x40e58ee5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: WeBuildWorld
Function name: cancel(uint256)
PC address: 4029
Estimated Gas Usage: 12898 - 123397
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:343

ion].providerAddress;

    }   



    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [SOMEGUY], function: cancel(uint256), txdata: 0x40e58ee5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: WeBuildWorld
Function name: cancel(uint256)
PC address: 4042
Estimated Gas Usage: 12898 - 123397
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:343

ion].providerAddress;

    }   



    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [SOMEGUY], function: cancel(uint256), txdata: 0x40e58ee5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: WeBuildWorld
Function name: cancel(uint256)
PC address: 5726
Estimated Gas Usage: 12898 - 123397
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:871

etBrickDetail(uint _brickId) public vi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2008105, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [SOMEGUY], function: cancel(uint256), txdata: 0x40e58ee5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: WeBuildWorld
Function name: cancel(uint256)
PC address: 5726
Estimated Gas Usage: 12898 - 123397
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:871

etBrickDetail(uint _brickId) public vi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [SOMEGUY], function: cancel(uint256), txdata: 0x40e58ee5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: WeBuildWorld
Function name: cancel(uint256)
PC address: 5805
Estimated Gas Usage: 12898 - 123397
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:875

tring description,

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [SOMEGUY], function: cancel(uint256), txdata: 0x40e58ee5, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: WeBuildWorld
Function name: cancel(uint256)
PC address: 5805
Estimated Gas Usage: 12898 - 123397
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: /tmp/60253e507360305dc7f39c084cf0bd8e.sol:875

tring description,

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x1200000278bae, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x29c54c2d42400800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [ATTACKER], function: cancel(uint256), txdata: 0x40e58ee5, value: 0x0