==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HypeStake
Function name: CLAIMREWARD()
PC address: 1878
Estimated Gas Usage: 1141 - 1426
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:408

transfer(msg.sender,owing), "ERROR: error in sending reward from contract");
        
            emit CL

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: CLAIMREWARD(), txdata: 0x4baf782e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3664
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:338

nder to be 

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3698
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:340

        sta

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3744
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:346

        
            (bool _isStakehol

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3748
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:346

        
            (bool _isStakehol

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3749
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:348

ck.timestamp;
            
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3790
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:347

er);
             if(!_isStakeholder) farmLock[msg.sender] =  block.timestamp;
            
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3797
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:351

    totalStakes = totalStakes.add(tokens.

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3800
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:353

lder(msg.sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3805
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:351

));
            
            addStakeholder(msg.sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3808
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:355

.send

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3817
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:354

 
            emit STAKED(msg.send

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3851
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:360

r) public view returns (uint256){
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3868
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:361

zero addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3877
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:361

ending to the zero address");
        
       // uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4047
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:325

    function STAKE(uint256 toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4053
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:325

    function STAKE(uint256 toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4095
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:325

    function STAKE(uint256 toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4118
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:325

    function STAKE(uint256 toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4130
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:316

takeholder);
   }
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4673
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:432

aker != address(0), "

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4676
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:435

mount =

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4678
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:433

.round;
         
        ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4694
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:433

t stakersRound = stakers[

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4697
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:432

ess");
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4721
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:436

vidends

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4749
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:435

ing);
        amount += ((to

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4765
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:435

[staker].stakedTokens)).d

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4768
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:435

 - 1])).mul(st

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4825
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:435

idends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)).div(scaling);
        amount += ((totalDividends

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4833
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/78eb096c781581efb9953c1dada5ca8b.sol:435

idends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)).div(scaling);
        amount += ((totalDividends

--------------------
Initial State:

Account: [CREATOR], balance: 0x23e0e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d591c42131fa3fbf28a678000053dc800978e13c0080d26c25ea0805d0020cc00188, value: 0x0