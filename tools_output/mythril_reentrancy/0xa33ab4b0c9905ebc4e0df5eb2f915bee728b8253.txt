==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityToken
Function name: getPerson(uint256)
PC address: 1959
Estimated Gas Usage: 1149 - 1244
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:345

ementsERC721() pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPerson(uint256), txdata: 0x246982c4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: readyTobreed(uint256,bool,uint256,bool)
PC address: 3589
Estimated Gas Usage: 1272 - 1697
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1987

ewPersonId = PersonsGen0.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: readyTobreed(uint256,bool,uint256,bool), txdata: 0x0e14f9550202020202020202020202020202020202020202020202020202020202020202000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: readyTobreed(uint256,bool,uint256,bool)
PC address: 3624
Estimated Gas Usage: 1273 - 1698
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1993

 newPersonId = PersonsGen1

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: readyTobreed(uint256,bool,uint256,bool), txdata: 0x0e14f95502020202020202020202020202020202020202020202020202020202020202020000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: getPersonParents(uint256,bool)
PC address: 3930
Estimated Gas Usage: 1262 - 1687
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1269

 returns (address own

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPersonParents(uint256,bool), txdata: 0x3befedea, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: getPersonParents(uint256,bool)
PC address: 3965
Estimated Gas Usage: 1263 - 1688
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1273

n1[_tokenId];

    re

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPersonParents(uint256,bool), txdata: 0x3befedea000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CelebrityBreederToken
Function name: allowexternalContract(address,uint256,bool)
PC address: 4265
Estimated Gas Usage: 9139 - 66296
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1171

ss _owner) public view returns (uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allowexternalContract(address,uint256,bool), txdata: 0x5158491600000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CelebrityBreederToken
Function name: allowexternalContract(address,uint256,bool)
PC address: 4288
Estimated Gas Usage: 9139 - 66296
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1171

ss _owner) public view returns (uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allowexternalContract(address,uint256,bool), txdata: 0x5158491600000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CelebrityBreederToken
Function name: allowexternalContract(address,uint256,bool)
PC address: 4310
Estimated Gas Usage: 9139 - 66296
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1173

[_owner];

  }

  

    function getPerson(

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allowexternalContract(address,uint256,bool), txdata: 0x5158491600000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CelebrityBreederToken
Function name: allowexternalContract(address,uint256,bool)
PC address: 4322
Estimated Gas Usage: 9139 - 66296
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1173

[_owner];

  }

  

    function getPerson(

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allowexternalContract(address,uint256,bool), txdata: 0x5158491600000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: SetGene(uint256,bool,uint64)
PC address: 5164
Estimated Gas Usage: 4198 - 39845
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1629

y()+1);

    

    /

--------------------
Initial State:

Account: [CREATOR], balance: 0x401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetGene(uint256,bool,uint64), txdata: 0x871388c90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: SetGene(uint256,bool,uint64)
PC address: 5199
Estimated Gas Usage: 4362 - 6157
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1635

rence

    if(_myper

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetGene(uint256,bool,uint64), txdata: 0x871388c90102000000108000000080800000000000000000000000000000000200000000100201040220040202080280012040100220010402028001020201080280010100000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: checkBeatingPrice(uint256,bool)
PC address: 5493
Estimated Gas Usage: 1520 - 1945
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:2379
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkBeatingPrice(uint256,bool), txdata: 0x944c8929, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: fallback
PC address: 5493
Estimated Gas Usage: 4479 - 39986
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:2379
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: beat(uint256,bool,uint8), txdata: 0x013a83f1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: checkBeatingPrice(uint256,bool)
PC address: 5528
Estimated Gas Usage: 1521 - 1946
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:2379
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkBeatingPrice(uint256,bool), txdata: 0x944c8929000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: fallback
PC address: 5528
Estimated Gas Usage: 4480 - 39987
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:2379
Initial State:

Account: [CREATOR], balance: 0x1000000030020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: beat(uint256,bool,uint8), txdata: 0x013a83f1000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: getPerson(uint256,bool)
PC address: 7520
Estimated Gas Usage: 1827 - 2252
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1219

) {

    Person perso

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPerson(uint256,bool), txdata: 0xe282969e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: getPerson(uint256,bool)
PC address: 7555
Estimated Gas Usage: 1828 - 2253
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1225

erson = PersonsGen0[_

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPerson(uint256,bool), txdata: 0xe282969e000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: checkTrainingPrice(uint256,bool)
PC address: 10045
Estimated Gas Usage: 1960 - 2385
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:2379
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkTrainingPrice(uint256,bool), txdata: 0xfa28a6b6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: train(uint256,bool,uint8)
PC address: 10045
Estimated Gas Usage: 5293 - 40800
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:2379
Initial State:

Account: [CREATOR], balance: 0x20000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: train(uint256,bool,uint8), txdata: 0xec0d69e3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: checkTrainingPrice(uint256,bool)
PC address: 10080
Estimated Gas Usage: 1961 - 2386
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:2379
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkTrainingPrice(uint256,bool), txdata: 0xfa28a6b6000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: train(uint256,bool,uint8)
PC address: 10080
Estimated Gas Usage: 5294 - 40801
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:2379
Initial State:

Account: [CREATOR], balance: 0x80000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: train(uint256,bool,uint8), txdata: 0xec0d69e3000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CelebrityBreederToken
Function name: prepareToBreed(uint256,bool,uint256,bool,uint256)
PC address: 10202
Estimated Gas Usage: 4612 - 40259
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:1901

rsonid==0 && _withperson

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepareToBreed(uint256,bool,uint256,bool,uint256), txdata: 0xfa6fc037, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CelebrityBreederToken
Function name: allowexternalContract(address,uint256,bool)
PC address: 10912
Estimated Gas Usage: 9139 - 66296
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40eb7fbd37de90a4f1c8c1bcfdc9830e.sol:2191

     delete ExternalAllowdContractGe

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allowexternalContract(address,uint256,bool), txdata: 0x5158491600000000000000000000000001, value: 0x0