with mythril_dir
==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MooncatHelper
Function name: buyAndWrap(bytes5)
PC address: 370
Estimated Gas Usage: 14778 - 187319
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/29a52f65eb74fca6aab43f083664e241.sol:51

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000205bfec, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyAndWrap(bytes5), txdata: 0x342f76340000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MooncatHelper
Function name: buyAndWrap(bytes5)
PC address: 373
Estimated Gas Usage: 14778 - 187319
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/29a52f65eb74fca6aab43f083664e241.sol:51

tId

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000205bfec, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyAndWrap(bytes5), txdata: 0x342f76340000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10001

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MooncatHelper
Function name: buyAndWrap(bytes5)
PC address: 474
Estimated Gas Usage: 14778 - 187319
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/29a52f65eb74fca6aab43f083664e241.sol:50

tId, 0, wmc);
        WrappedMooncatContract(wmc).wrap(catId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2028bbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyAndWrap(bytes5), txdata: 0x342f76340000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MooncatHelper
Function name: buyAndWrap(bytes5)
PC address: 474
Estimated Gas Usage: 14778 - 187319
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/29a52f65eb74fca6aab43f083664e241.sol:50

tId, 0, wmc);
        WrappedMooncatContract(wmc).wrap(catId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000205bfec, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyAndWrap(bytes5), txdata: 0x342f76340000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MooncatHelper
Function name: buyAndWrap(bytes5)
PC address: 496
Estimated Gas Usage: 14778 - 187319
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/29a52f65eb74fca6aab43f083664e241.sol:52

onc

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000205bfec, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyAndWrap(bytes5), txdata: 0x342f76340000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MooncatHelper
Function name: buyAndWrap(bytes5)
PC address: 584
Estimated Gas Usage: 14778 - 187319
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/29a52f65eb74fca6aab43f083664e241.sol:52

int tokenId = WrappedMooncatContract(wm

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000205bfec, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyAndWrap(bytes5), txdata: 0x342f76340000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MooncatHelper
Function name: buyAndWrap(bytes5)
PC address: 606
Estimated Gas Usage: 14778 - 187319
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/29a52f65eb74fca6aab43f083664e241.sol:53

Con

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000004000207bffc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyAndWrap(bytes5), txdata: 0x342f76340000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MooncatHelper
Function name: buyAndWrap(bytes5)
PC address: 739
Estimated Gas Usage: 14778 - 187319
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/29a52f65eb74fca6aab43f083664e241.sol:53

);


--------------------
Initial State:

Account: [CREATOR], balance: 0x4000004000207bffc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyAndWrap(bytes5), txdata: 0x342f76340000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MooncatHelper
Function name: buyAndWrap(bytes5)
PC address: 831
Estimated Gas Usage: 14778 - 187319
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/29a52f65eb74fca6aab43f083664e241.sol:53

s), msg.sender, tokenId);
    }

    function withdraw() public {
        ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000004000207bffc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyAndWrap(bytes5), txdata: 0x342f76340000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10001


