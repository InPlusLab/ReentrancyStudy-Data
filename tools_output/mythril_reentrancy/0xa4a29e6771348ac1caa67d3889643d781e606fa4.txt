==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Doggiswap
Function name: name()
PC address: 1464
Estimated Gas Usage: 2368 - 4109
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/69791a72640286a164a125d4b00d6b7a.sol:231

unction deposit() public payable {
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Doggiswap
Function name: softFlashFuck(uint256)
PC address: 1606
Estimated Gas Usage: 29899 - 146204
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/69791a72640286a164a125d4b00d6b7a.sol:132

];
    }


 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10522, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: softFlashFuck(uint256), txdata: 0xf493e03282d7422ef7af49cf8b67e7843e44c3e650000eeb31a58204260c0b0d0892d001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Doggiswap
Function name: symbol()
PC address: 1876
Estimated Gas Usage: 2389 - 4130
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/69791a72640286a164a125d4b00d6b7a.sol:232

int(msg.sender, msg.value);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Doggiswap
Function name: softFlashFuck(uint256)
PC address: 2509
Estimated Gas Usage: 29899 - 146204
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/69791a72640286a164a125d4b00d6b7a.sol:275

   require(success, "external call failed");
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000c12, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: softFlashFuck(uint256), txdata: 0xf493e032322028802a500000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Doggiswap
Function name: softFlashFuck(uint256)
PC address: 3447
Estimated Gas Usage: 29899 - 146204
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/69791a72640286a164a125d4b00d6b7a.sol:201

er, uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10522, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: softFlashFuck(uint256), txdata: 0xf493e03282d7422ef7af49cf8b67e7843e44c3e650000eeb31a58204260c0b0d0892d001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Doggiswap
Function name: softFlashFuck(uint256)
PC address: 3466
Estimated Gas Usage: 29899 - 146204
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/69791a72640286a164a125d4b00d6b7a.sol:201

, address spender, uint256 value) inte

--------------------
Initial State:

Account: [CREATOR], balance: 0x10522, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: softFlashFuck(uint256), txdata: 0xf493e03282d7422ef7af49cf8b67e7843e44c3e650000eeb31a58204260c0b0d0892d001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Doggiswap
Function name: softFlashFuck(uint256)
PC address: 3491
Estimated Gas Usage: 29899 - 146204
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/69791a72640286a164a125d4b00d6b7a.sol:202

address(0), "ERC20

--------------------
Initial State:

Account: [CREATOR], balance: 0x10522, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: softFlashFuck(uint256), txdata: 0xf493e03282d7422ef7af49cf8b67e7843e44c3e650000eeb31a58204260c0b0d0892d001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Doggiswap
Function name: softFlashFuck(uint256)
PC address: 3536
Estimated Gas Usage: 29899 - 146204
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/69791a72640286a164a125d4b00d6b7a.sol:202

    require(owner != address(0), "ERC20: approve f

--------------------
Initial State:

Account: [CREATOR], balance: 0x10522, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: softFlashFuck(uint256), txdata: 0xf493e03282d7422ef7af49cf8b67e7843e44c3e650000eeb31a58204260c0b0d0892d001, value: 0x0