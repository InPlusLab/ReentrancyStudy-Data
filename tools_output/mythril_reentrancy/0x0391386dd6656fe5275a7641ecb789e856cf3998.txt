==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 566
Estimated Gas Usage: 55423 - 256641
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:58

;
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 566
Estimated Gas Usage: 63456 - 288558
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:58

;
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 655
Estimated Gas Usage: 55423 - 256641
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:57

boy))));
        _balances[luckyboy] = LUCKY_AMOUNT;
        _t

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 655
Estimated Gas Usage: 63456 - 288558
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:57

boy))));
        _balances[luckyboy] = LUCKY_AMOUNT;
        _t

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 683
Estimated Gas Usage: 55423 - 256641
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:59

+= LUCKY_AMOUNT;
        emit Tran

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 683
Estimated Gas Usage: 63456 - 288558
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:59

+= LUCKY_AMOUNT;
        emit Tran

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 687
Estimated Gas Usage: 55423 - 256641
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:60

s(0), luckyboy, LUCKY_AMOUNT

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 687
Estimated Gas Usage: 63456 - 288558
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:60

s(0), luckyboy, LUCKY_AMOUNT

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 691
Estimated Gas Usage: 55423 - 256641
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:60

s(0), luckyboy, LUCKY_AMOUNT

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 691
Estimated Gas Usage: 63456 - 288558
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:60

s(0), luckyboy, LUCKY_AMOUNT

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 693
Estimated Gas Usage: 55423 - 256641
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:63

nt256 dr

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 693
Estimated Gas Usage: 63456 - 288558
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:63

nt256 dr

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 898
Estimated Gas Usage: 63456 - 288558
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:86

ce"));
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1427
Estimated Gas Usage: 63456 - 288558
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:144

ng private _name;
    string private

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 1820
Estimated Gas Usage: 55423 - 256641
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:105

 _balances[recipi

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1820
Estimated Gas Usage: 63456 - 288558
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:105

 _balances[recipi

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 1863
Estimated Gas Usage: 55423 - 256641
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:105

alances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipi

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1863
Estimated Gas Usage: 63456 - 288558
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:105

alances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipi

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 1870
Estimated Gas Usage: 55423 - 256641
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:108

oh my god!
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1870
Estimated Gas Usage: 63456 - 288558
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:108

oh my god!
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 1919
Estimated Gas Usage: 55423 - 256641
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:106

);
        
        // oh my god!
        randomLucky()

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000009a3d51d7921d96f0e2bca2c4bd23722b2bfa963f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1919
Estimated Gas Usage: 63456 - 288558
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ad3cd309d8e44856bddd1b7c0e3b4dc.sol:106

);
        
        // oh my god!
        randomLucky()

--------------------
Initial State:

Account: [CREATOR], balance: 0x36dec0004208e0b7f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000001080a040800000042040008080000000040040000000000000000000000000009e2dd1d7929d86d0e2be22c4ad63f2232b7a9e1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0


