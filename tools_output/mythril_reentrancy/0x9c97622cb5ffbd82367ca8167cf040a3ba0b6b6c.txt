==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: games(uint256)
PC address: 3103
Estimated Gas Usage: 1036 - 1131
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:197

t256) {

        return w

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: games(uint256), txdata: 0x117a5b9080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: gameBars(uint256)
PC address: 3160
Estimated Gas Usage: 1080 - 1175
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:197

tWinnersLen() public view re

--------------------
Initial State:

Account: [CREATOR], balance: 0x2101000002002c22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: gameBars(uint256), txdata: 0x31cf433480, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Win1Million
Function name: player_withdrawPendingTransactions()
PC address: 4133
Estimated Gas Usage: 12227 - 87359
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:689

es[_gameId].PlayerAddressList[c]);

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_withdrawPendingTransactions(), txdata: 0x7955dd45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Win1Million
Function name: player_withdrawPendingTransactions()
PC address: 4218
Estimated Gas Usage: 12227 - 87359
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:709

ol _gamePaused) public onlyOwner {

        gamePause

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_withdrawPendingTransactions(), txdata: 0x7955dd45, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: getGamesPlayers(uint256)
PC address: 4273
Estimated Gas Usage: 1237 - 1332
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:215

 function getGamesPlayerBids(uint256 gameId, address playerAddress) public view returns(uint256){

        return games[gameId].Play

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000006d97, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getGamesPlayers(uint256), txdata: 0x93c0771c80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: winners(uint256)
PC address: 4969
Estimated Gas Usage: 1300 - 1395
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:199

ngth;

    }

    

    // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: winners(uint256), txdata: 0xa2fb1175, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: private_DelGameBar(uint256)
PC address: 5312
Estimated Gas Usage: 2223 - 2648
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:777

onlyOwner {

        bankAddress = _bankAddress;

    }

    function private_withdrawBankFunds(address _whereTo) public onlyBanker {

        if(_whereTo.send(bankBalance)) {

            bankBalance = 0;

        }

    }

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: private_DelGameBar(uint256), txdata: 0xb7e0527780, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: completeGame(uint256,uint256,string,address)
PC address: 5664
Estimated Gas Usage: 2533 - 5545
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:527

d].CurrentTotal,

                now,

                games[gameId].BarId,

                gameId

            ));

        

        emit completeGameResult(

                gameId,

                games[gameId].BarId,

                _winningNumber,

                _proof,

                winner,

                games[gameId].CurrentTotal,

                now

            );

        

        // reset the bar state...

        gameBars[games[gameId].BarId].CurrentGameId = 0;

        // delete the game 

        //delete games[gameId];

        



        

    }

    

    event cancelGame(

            uint256 indexed gameId,

            uint256 indexed barId,

            uint256 amountReturned,

            address playerAddress

            

        );

    // players can cancel their participation in a game as long as it hasn't completed

    // they lose their houseEdge fee (And pay any gas of course)

    function player_cancelGame(uint256 barId) public {

        address _playerAddr = msg.sender;

        uint256 _gameId = gameBars[barId].CurrentGameId;

        uint256 _gamePlayerBalance = games[_gameId].PlayerB

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: completeGame(uint256,uint256,string,address), txdata: 0xd1976a6f29, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: private_UpdateGameBarLimit(uint256,uint256)
PC address: 6668
Estimated Gas Usage: 2316 - 2741
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:793

 onlyBanker {

        if(_whereTo.send(_amount)){

            bankBalance-=_amount;

        }

    }

    function private_kill() publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: private_UpdateGameBarLimit(uint256,uint256), txdata: 0xe059c86880, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: getGamesPlayerBids(uint256,address)
PC address: 6710
Estimated Gas Usage: 1468 - 1563
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:225

msg.sender;

        bankAddress = owner;

        

        // ensure we are above gameBars[0] 

        gameBars.push(Bar(0,0,"","",""));

        

        // and 

--------------------
Initial State:

Account: [CREATOR], balance: 0x100083991, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getGamesPlayerBids(uint256,address), txdata: 0xe1e7c32080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: player_cancelGame(uint256)
PC address: 6820
Estimated Gas Usage: 1470 - 1565
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/98581d7593526fbaa0524a4ed218c96c.sol:617

t...

                playerPendingWithdrawals[_playerAddr] = playerPendingWithdrawals[_playerAddr].add(_gamePlayerBalance);

            } 

        } 

        

        emit cancelGame(

            _gameId,

            barId,

            _gamePlayerBalance,

            _playerAddr

            );

    }

    

    

    function player_withdrawPendingTransactions() public

        returns (bool)

     {

        uint withdrawAmount = playerPendingWithdrawals[msg.sender];

        playerPendingWithdrawals[msg.sender] = 0;



        if (msg.sender.call.value(withdrawAmount)()) {

            return true;

        } else {

            /* if send failed revert playerPendingWithdrawals[msg.sender] = 0; */

            /* player can try to withdraw again later */

            playerPendingWithdrawals[msg.sender] = withdrawAmount;

            return false;

        }

    }

    // wei: 1000000000000000000

    // to 100 = / 1000000

--------------------
Initial State:

Account: [CREATOR], balance: 0x8004000cd91, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: player_cancelGame(uint256), txdata: 0xea7858f580, value: 0x0