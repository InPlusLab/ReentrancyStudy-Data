==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MathLib
Function name: safeCastSigned(uint256)
PC address: 240
Estimated Gas Usage: 183 - 278
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:1605

        AfterCallWindow,    //3

        ReservedForClaimer, //4

        InsufficientGas,    //5

        TooLowGasPrice    //6

    }



    eve

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: safeCastSigned(uint256), txdata: 0x8810258380, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RequestScheduleLib
Function name: validateWindowStart(RequestScheduleLib.TemporalUnit,uint256,uint256)
PC address: 325
Estimated Gas Usage: 237 - 332
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:3395

.



        uint feeO

--------------------
Initial State:

Account: [CREATOR], balance: 0x42422000092b38, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateWindowStart(RequestScheduleLib.TemporalUnit,uint256,uint256), txdata: 0x3c57ec9c0000000000000000000000000000000000000000000000000000000000000007, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RequestScheduleLib
Function name: validateWindowStart(RequestScheduleLib.TemporalUnit,uint256,uint256)
PC address: 371
Estimated Gas Usage: 505 - 881
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:875

w req

--------------------
Initial State:

Account: [CREATOR], balance: 0x100009040080201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateWindowStart(RequestScheduleLib.TemporalUnit,uint256,uint256), txdata: 0x3c57ec9c000000000000000000000000000000000000000000000000000000000000000182, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RequestScheduleLib
Function name: validateWindowStart(RequestScheduleLib.TemporalUnit,uint256,uint256)
PC address: 379
Estimated Gas Usage: 338 - 433
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:875

ade with this s

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: validateWindowStart(RequestScheduleLib.TemporalUnit,uint256,uint256), txdata: 0x3c57ec9c0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Migrations
Function name: fallback
PC address: 427
Estimated Gas Usage: 3360 - 37831
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:1298


    }





    /**

     * Returns the maximum

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: upgrade(address), txdata: 0x0900f010, value: 0x0
Caller: [CREATOR], function: upgrade(address), txdata: 0x0900f010000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SimpleToken
Function name: transfer(address,uint256)
PC address: 498
Estimated Gas Usage: 12943 - 53794
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:797

uint256 a, uint256 b) in

--------------------
Initial State:

Account: [CREATOR], balance: 0x610382c2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0
Caller: [SOMEGUY], function: buyTokens(), txdata: 0xd0febe4c, value: 0x88888888888888889
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SimpleToken
Function name: buyTokens()
PC address: 543
Estimated Gas Usage: 6177 - 26743
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:805

rn c;

  }



  function sub(uint256 a, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0
Caller: [CREATOR], function: buyTokens(), txdata: 0xd0febe4c, value: 0x888888888888889

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TransactionRecorder
Function name: lastCallData()
PC address: 705
Estimated Gas Usage: 1387 - 2327
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:605

public {

        require(msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lastCallData(), txdata: 0x72a853b1, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: TransactionRecorder
Function name: fallback
PC address: 978
Estimated Gas Usage: 38159 - 178349
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x010101010000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x010101010000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: TransactionRecorder
Function name: __reset__()
PC address: 1104
Estimated Gas Usage: 38141 - 178707
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x010101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: __reset__(), txdata: 0x7cbcc254, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TransactionRequestCore
Function name: callData()
PC address: 1277
Estimated Gas Usage: 1398 - 2668
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:443

ould become the owner of the token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: callData(), txdata: 0x4e417a98, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BaseScheduler
Function name: computeEndowment(uint256,uint256,uint256,uint256,uint256)
PC address: 1590
Estimated Gas Usage: 3626 - 74496
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:1151

@dev Top-level contract that exposes the API to the Ethereum Alarm Clock service and passes in timestamp as temporal unit.

 */

contract TimestampScheduler is BaseScheduler {



    /**

     * @dev Constructor

     

--------------------
Initial State:

Account: [CREATOR], balance: 0xdbfba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: computeEndowment(uint256,uint256,uint256,uint256,uint256), txdata: 0x63b6240d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BaseScheduler
Function name: computeEndowment(uint256,uint256,uint256,uint256,uint256)
PC address: 1590
Estimated Gas Usage: 3626 - 74496
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:1151

@dev Top-level contract that exposes the API to the Ethereum Alarm Clock service and passes in timestamp as temporal unit.

 */

contract TimestampScheduler is BaseScheduler {



    /**

     * @dev Constructor

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: computeEndowment(uint256,uint256,uint256,uint256,uint256), txdata: 0x63b6240d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: RequestLib
Function name: validate(address[4],uint256[12],uint256)
PC address: 2754
Estimated Gas Usage: 7510 - 155871
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc0041, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validate(address[4],uint256[12],uint256), txdata: 0xcac0425f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RequestFactory
Function name: getBucket(uint256,uint8)
PC address: 2955
Estimated Gas Usage: 421 - 516
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:4499
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getBucket(uint256,uint8), txdata: 0xecd8f29402020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020206, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RequestFactory
Function name: getBucket(uint256,uint8)
PC address: 3020
Estimated Gas Usage: 593 - 969
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3783f0135daf634a27c73c126301bdd9.sol:4499
Initial State:

Account: [CREATOR], balance: 0x1000000000d1185, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getBucket(uint256,uint8), txdata: 0xecd8f294000f9d80000000000000000000000000000000000000000000000000000000100202020202020202020202020202020202020202020202020202020202020201, value: 0x0


