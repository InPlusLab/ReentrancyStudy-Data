==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1615
Estimated Gas Usage: 49498 - 249876
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:557

ue);

    }



    /// @dev Re

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f81400000000000000000000000000002008020000000101100400000208000000000101a4b4d0212084080800106001412914014908109824624a810cb31030250d01809000000000000000000000000000000000000000000000000001000000000302800800000000000000000000000000000000000000000000000002040011208280010800000000000000000000000000000000000000000000000204000409, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1659
Estimated Gas Usage: 49498 - 249876
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:557

wGrant(msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1788
Estimated Gas Usage: 49498 - 249876
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:565

 /// @param _holder The address which will have its tokens revoked.

    function revoke(address _holder) public onlyOwner {

        Grant memory grant = grants[_holder];



        // Grant must be revokable.

        require(grant.revokable);



        // Calculate amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1798
Estimated Gas Usage: 49498 - 249876
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:565

 /// @param _holder The address which will have its tokens revoked.

    function revoke(address _holder) public onlyOwner {

        Grant memory grant = grants[_holder];



        // Grant must be revokable.

        require(grant.revokable);



        // Calculate amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1808
Estimated Gas Usage: 49498 - 249876
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:565

 /// @param _holder The address which will have its tokens revoked.

    function revoke(address _holder) public onlyOwner {

        Grant memory grant = grants[_holder];



        // Grant must be revokable.

        require(grant.revokable);



        // Calculate amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1818
Estimated Gas Usage: 49498 - 249876
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:565

 /// @param _holder The address which will have its tokens revoked.

    function revoke(address _holder) public onlyOwner {

        Grant memory grant = grants[_holder];



        // Grant must be revokable.

        require(grant.revokable);



        // Calculate amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1828
Estimated Gas Usage: 49498 - 249876
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:565

 /// @param _holder The address which will have its tokens revoked.

    function revoke(address _holder) public onlyOwner {

        Grant memory grant = grants[_holder];



        // Grant must be revokable.

        require(grant.revokable);



        // Calculate amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1838
Estimated Gas Usage: 49498 - 249876
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:565

 /// @param _holder The address which will have its tokens revoked.

    function revoke(address _holder) public onlyOwner {

        Grant memory grant = grants[_holder];



        // Grant must be revokable.

        require(grant.revokable);



        // Calculate amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1855
Estimated Gas Usage: 49498 - 249876
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:565

 /// @param _holder The address which will have its tokens revoked.

    function revoke(address _holder) public onlyOwner {

        Grant memory grant = grants[_holder];



        // Grant must be revokable.

        require(grant.revokable);



        // Calculate amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1869
Estimated Gas Usage: 49498 - 249876
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:565

 /// @param _holder The address which will have its tokens revoked.

    function revoke(address _holder) public onlyOwner {

        Grant memory grant = grants[_holder];



        // Grant must be revokable.

        require(grant.revokable);



        // Calculate amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1880
Estimated Gas Usage: 49498 - 249876
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:583

grant.transf

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HAVesting
Function name: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 1897
Estimated Gas Usage: 49498 - 249876
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09d9707ac0804fd28b0d6fa34054004c.sol:583

rant.value.sub(grant.transferred);



 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d8d8d8d8d8d8d8d8d8d8d8d8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: grantTo(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x7678f814000000000000000000000000010210201010040410010080028002020000000050c1302201c1480102023042200a90008001cbe0c6cfc6e9dacb61eecfbc61d40eb0c0000000000000000000000002000000000000000000000000000000000021902101010101400000000000000021040000000080f000034231430800111126d8a000000000000800000000000001000000000000f000030201430000010812, value: 0x0


