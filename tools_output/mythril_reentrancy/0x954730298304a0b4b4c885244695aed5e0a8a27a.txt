==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NamiGame
Function name: withdrawNac(uint256)
PC address: 2097
Estimated Gas Usage: 6959 - 77407
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:2155
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000008001100104400820020120010101021002014001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NamiGame
Function name: withdrawNac(uint256)
PC address: 2193
Estimated Gas Usage: 6959 - 77407
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:2155
Initial State:

Account: [CREATOR], balance: 0x100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000101010240010108010101801004010210000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NamiGame
Function name: withdrawNac(uint256)
PC address: 2359
Estimated Gas Usage: 6959 - 77407
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:2155
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000008001100104400820020120010101021002014001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NamiGame
Function name: withdrawNac(uint256)
PC address: 2359
Estimated Gas Usage: 6959 - 77407
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:2155
Initial State:

Account: [CREATOR], balance: 0x100040022000006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000002, value: 0x0
Caller: [SOMEGUY], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NamiGame
Function name: withdrawNac(uint256)
PC address: 2359
Estimated Gas Usage: 6959 - 77407
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:2155
Initial State:

Account: [CREATOR], balance: 0x100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000101010240010108010101801004010210000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawNac(uint256), txdata: 0x12818f0c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NamiCrowdSale
Function name: setPresalePhase(uint8)
PC address: 4287
Estimated Gas Usage: 2172 - 2927
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1625

row

    {

        // You can't change crowdsale contract when migration is in progress.

        require(currentPhase != Phase.Migrating);

        crowdsaleManager = _mgr;

    }



    // internal migrate migration tokens

    function _migrateToken(address _from, address _to)

        internal

    {

        PresaleToken presale = PresaleToken(namiPresale);

        uint256 newToken = presale.balanceOf(_from);

        require(newToken > 0);

        // burn old token

        presale.burnTokens(_from);

        // add new token to _to

        balanceOf[_to] = balanceOf[_to].add(newToken);

        // add new token to totalSupply

        totalSupply = totalSupply.add(newToken);

        emit LogMigrate(_from, _to, newToken);

        emit Transfer(this,_to,newToken);

    }



    // migate token function for Nami Team

    function migrateToken(address _from, address _to) public

        onlyEscrow

    {

        _mig

--------------------
Initial State:

Account: [CREATOR], balance: 0x203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: setPresalePhase(uint8), txdata: 0x1ca2e94a020202020202020202020202000000000000000000000000000000000000000d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NamiCrowdSale
Function name: safeWithdraw(address,uint256)
PC address: 6065
Estimated Gas Usage: 4721 - 74224
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1713

ied amount of tokens to the N

--------------------
Initial State:

Account: [CREATOR], balance: 0x310811, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 606060606060606060606060aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa606060606060606060606060deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: safeWithdraw(address,uint256), txdata: 0x5058c460, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NamiCrowdSale
Function name: safeWithdraw(address,uint256)
PC address: 6174
Estimated Gas Usage: 4721 - 74224
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1713

.

     *      Invokes the 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4590ab00200014408, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: safeWithdraw(address,uint256), txdata: 0x5058c460, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NamiCrowdSale
Function name: safeWithdraw(address,uint256)
PC address: 6174
Estimated Gas Usage: 4721 - 74224
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1713

.

     *      Invokes the 

--------------------
Initial State:

Account: [CREATOR], balance: 0x7e88002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 606060606060606060606060aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa606060606060606060606060deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: safeWithdraw(address,uint256), txdata: 0x5058c460, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8028
Estimated Gas Usage: 559 - 654
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1463

;

        require(msg.value != 0);

        uint newTokens = msg.value * getPrice();

        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSupply.add(newTokens);

        emit LogBuy(_buyer,newTokens);

        emit Transfer(this,_buyer,newTokens);

    }

    



    /// @dev Returns number of tokens owned by given address.

    /// @param _owner Address of token owner.

    function burnTokens(address _owner) public

        onlyCrowdsaleManager

    {

        // Available only during migration phase

        require(currentPhase == Phase.Migrating);



        uint tokens = balanceOf[_owner];

        require(tokens != 0);

        balanceOf[_owner] = 0;

        totalSupply -= tokens;

        emit LogBurn(_owner, tokens);

        emit Transfer(_owner, crowdsaleManager, tokens);



        // Automatically switch phase when migration is done.

        if (totalSupply == 0) {

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8051
Estimated Gas Usage: 587 - 682
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1469

re (totalSupply + newTokens < TOKEN_S

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8066
Estimated Gas Usage: 604 - 699
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1469

equire (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);

        // add new token to buyer

        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSupply.add(newTokens);

        emit LogBuy(_buyer,newTokens);

        emit Transfer(this,_buyer,newTokens);

    }

    



    /// @dev Returns number of tokens owned by given address.

    /// @param _owner Address of token owner.

    function burnTokens(address _owner) public

        onlyCrowdsaleManager

    {

        // Available only during migration phase

        require(currentPhase == Phase.Migrating);



        uint tokens = balanceOf[_owner];

        require(tokens != 0);

        balanceOf[_owner] = 0;

        totalSupply -= tokens;

        emit LogBurn(_owner, tokens);

        emit Transfer(_owner, crowdsaleManager, tokens);



        // Automatically switch phase when migration is done.

        if (totalSupply == 0) {

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8089
Estimated Gas Usage: 632 - 727
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1473

anceOf[_buyer].add(newTokens);

     

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8104
Estimated Gas Usage: 649 - 744
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1473

 balanceOf[_buyer].add(newTokens);

        // add new token to totalSupply

        totalSupply = totalSupply.add(newTokens);

        emit LogBuy(_buyer,newTokens);

        emit Transfer(this,_buyer,newTokens);

    }

    



    /// @dev Returns number of tokens owned by given address.

    /// @param _owner Address of token owner.

    function burnTokens(address _owner) public

        onlyCrowdsaleManager

    {

        // Available only during migration phase

        require(currentPhase == Phase.Migrating);



        uint tokens = balanceOf[_owner];

        require(tokens != 0);

        balanceOf[_owner] = 0;

        totalSupply -= tokens;

        emit LogBurn(_owner, tokens);

        emit Transfer(_owner, crowdsaleManager, tokens);



        // Automatically switch phase when migration is done.

        if (totalSupply == 0) {

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8127
Estimated Gas Usage: 677 - 772
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1477

ns);

        emit LogBuy(_buyer,newT

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8142
Estimated Gas Usage: 694 - 789
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1477

Tokens);

        emit LogBuy(_buyer,newTokens);

        emit Transfer(this,_buyer,newTokens);

    }

    



    /// @dev Returns number of tokens owned by given address.

    /// @param _owner Address of token owner.

    function burnTokens(address _owner) public

        onlyCrowdsaleManager

    {

        // Available only during migration phase

        require(currentPhase == Phase.Migrating);



        uint tokens = balanceOf[_owner];

        require(tokens != 0);

        balanceOf[_owner] = 0;

        totalSupply -= tokens;

        emit LogBurn(_owner, tokens);

        emit Transfer(_owner, crowdsaleManager, tokens);



        // Automatically switch phase when migration is done.

        if (totalSupply == 0) {

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8165
Estimated Gas Usage: 722 - 817
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1489

ev Returns number of tokens owned by 

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8180
Estimated Gas Usage: 739 - 834
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1489

/ @dev Returns number of tokens owned by given address.

    /// @param _owner Address of token owner.

    function burnTokens(address _owner) public

        onlyCrowdsaleManager

    {

        // Available only during migration phase

        require(currentPhase == Phase.Migrating);



        uint tokens = balanceOf[_owner];

        require(tokens != 0);

        balanceOf[_owner] = 0;

        totalSupply -= tokens;

        emit LogBurn(_owner, tokens);

        emit Transfer(_owner, crowdsaleManager, tokens);



        // Automatically switch phase when migration is done.

        if (totalSupply == 0) {

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000010a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8203
Estimated Gas Usage: 767 - 862
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1493

okens(address _owner) public

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x502000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8218
Estimated Gas Usage: 784 - 879
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1493

urnTokens(address _owner) public

        onlyCrowdsaleManager

    {

        // Available only during migration phase

        require(currentPhase == Phase.Migrating);



        uint tokens = balanceOf[_owner];

        require(tokens != 0);

        balanceOf[_owner] = 0;

        totalSupply -= tokens;

        emit LogBurn(_owner, tokens);

        emit Transfer(_owner, crowdsaleManager, tokens);



        // Automatically switch phase when migration is done.

        if (totalSupply == 0) {

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8241
Estimated Gas Usage: 812 - 907
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1501

       require(currentPhase == Phase.

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8256
Estimated Gas Usage: 829 - 924
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1499

e

        require(currentPhase == Phase.Migrating);



        uint tokens = balanceOf[_owner];

        require(tokens != 0);

        balanceOf[_owner] = 0;

        totalSupply -= tokens;

        emit LogBurn(_owner, tokens);

        emit Transfer(_owner, crowdsaleManager, tokens);



        // Automatically switch phase when migration is done.

        if (totalSupply == 0) {

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8279
Estimated Gas Usage: 857 - 952
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1507

= 0);

        balanceOf[_owner] = 0;

--------------------
Initial State:

Account: [CREATOR], balance: 0xb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8294
Estimated Gas Usage: 874 - 969
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1507

ns != 0);

        balanceOf[_owner] = 0;

        totalSupply -= tokens;

        emit LogBurn(_owner, tokens);

        emit Transfer(_owner, crowdsaleManager, tokens);



        // Automatically switch phase when migration is done.

        if (totalSupply == 0) {

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x1a9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8317
Estimated Gas Usage: 902 - 997
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1515

emit Transfer(_owner, crowdsaleManage

--------------------
Initial State:

Account: [CREATOR], balance: 0x81, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NamiCrowdSale
Function name: getPrice()
PC address: 8332
Estimated Gas Usage: 919 - 1014
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1515

    emit Transfer(_owner, crowdsaleManager, tokens);



        // Automatically switch phase when migration is done.

        if (totalSupply == 0) {

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x280000000040020b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getPrice(), txdata: 0x98d5fdca, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NamiCrowdSale
Function name: transferToBuyer(address,uint256,address)
PC address: 11266
Estimated Gas Usage: 2249 - 2534
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1922


        require(msg.sender == na

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000080, value: 0x0
Caller: [CREATOR], function: transferToBuyer(address,uint256,address), txdata: 0x78044ba5000000000000000000000000000000000000000000000000000000000000000801, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NamiCrowdSale
Function name: transferToExchange(address,uint256,uint256)
PC address: 11266
Estimated Gas Usage: 2265 - 2550
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a9e014a77ac504debfa74fbde2cdb9bd.sol:1837

ress _escrow, address _namiMultiS

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: transferToExchange(address,uint256,uint256), txdata: 0x8d70c0ce000000000000000000000000000000000000000000000000000000000000002002, value: 0x0