==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake() or unstake()
PC address: 2287
Estimated Gas Usage: 1058 - 1153
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:820

rtTime needs to be before _closeTime needs to be before _releaseTime!');

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake() or unstake()
PC address: 2548
Estimated Gas Usage: 35068 - 206275
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:639

tracts.
 */
abstract c

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DePayLiquidityStaking
Function name: stake(uint256) or stake(uint256)
PC address: 3623
Estimated Gas Usage: 1139 - 1234
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:818

 require(isContract(_token), '_token address needs to be a contract!

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DePayLiquidityStaking
Function name: stake(uint256) or stake(uint256)
PC address: 3742
Estimated Gas Usage: 1961 - 2056
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:819

idityToken address needs to be a contract!');
    require(_start

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DePayLiquidityStaking
Function name: withdraw(address,uint256) or withdraw(address,uint256)
PC address: 7489
Estimated Gas Usage: 17507 - 95882
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:639

tracts.
 */
abstract c

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256), txdata: 0xf3fef3a3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake() or unstake()
PC address: 8112
Estimated Gas Usage: 35068 - 206275
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:918

703c0e500b653ca82273b7bfad804

--------------------
Initial State:

Account: [CREATOR], balance: 0x200003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake() or unstake()
PC address: 8121
Estimated Gas Usage: 35068 - 206275
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:919

ccounts without code, i

--------------------
Initial State:

Account: [CREATOR], balance: 0x200003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake() or unstake()
PC address: 8140
Estimated Gas Usage: 35068 - 206275
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:918

0 is returned
    // for accounts without code, i.e. `keccak25

--------------------
Initial State:

Account: [CREATOR], balance: 0x200003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake() or unstake()
PC address: 8209
Estimated Gas Usage: 35068 - 206275
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:920

    bytes32 codehash;
    bytes32

--------------------
Initial State:

Account: [CREATOR], balance: 0x200003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake() or unstake()
PC address: 8216
Estimated Gas Usage: 35068 - 206275
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:921

0186f

--------------------
Initial State:

Account: [CREATOR], balance: 0x200003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake() or unstake()
PC address: 8360
Estimated Gas Usage: 35068 - 206275
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:921

0186f7233c927e7db2dcc703c0e500b653c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000080447, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake() or unstake()
PC address: 8360
Estimated Gas Usage: 35068 - 206275
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:921

0186f7233c927e7db2dcc703c0e500b653c

--------------------
Initial State:

Account: [CREATOR], balance: 0x200003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: withdraw(address,uint256) or withdraw(address,uint256)
PC address: 10125
Estimated Gas Usage: 17507 - 95882
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f594bce4fd444c79bf16ce7da30f0341.sol:445

a, "Address: low-level static cal

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256), txdata: 0xf3fef3a3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0