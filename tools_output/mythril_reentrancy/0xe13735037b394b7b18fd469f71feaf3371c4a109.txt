==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TecoBuyBack
Function name: availableBonuses(address)
PC address: 1892
Estimated Gas Usage: 7157 - 77697
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:393

es(msg.sender) >= _amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: availableBonuses(address), txdata: 0x06c6204a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 1892
Estimated Gas Usage: 33850 - 220979
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:393

es(msg.sender) >= _amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x9f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: availableBonuses(address)
PC address: 2031
Estimated Gas Usage: 7157 - 77697
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:397

   orders[numOrders++]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, value: 0x0
Caller: [ATTACKER], function: availableBonuses(address), txdata: 0x06c6204a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 2031
Estimated Gas Usage: 33850 - 220979
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:397

   orders[numOrders++]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: availableBonuses(address)
PC address: 2037
Estimated Gas Usage: 7157 - 77697
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:395

ess(thi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, value: 0x0
Caller: [ATTACKER], function: availableBonuses(address), txdata: 0x06c6204a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 2037
Estimated Gas Usage: 33850 - 220979
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:395

ess(thi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TecoBuyBack
Function name: availableBonuses(address)
PC address: 2223
Estimated Gas Usage: 7157 - 77697
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:395

ess(this)) >= _amount);



--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: availableBonuses(address), txdata: 0x06c6204a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 2223
Estimated Gas Usage: 33850 - 220979
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:395

ess(this)) >= _amount);



--------------------
Initial State:

Account: [CREATOR], balance: 0x9f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TecoBuyBack
Function name: availableBonuses(address)
PC address: 2223
Estimated Gas Usage: 7157 - 77697
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:395

ess(this)) >= _amount);



--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000048001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000008, value: 0x0
Caller: [ATTACKER], function: availableBonuses(address), txdata: 0x06c6204a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: availableBonuses(address)
PC address: 2223
Estimated Gas Usage: 7157 - 77697
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:395

ess(this)) >= _amount);



--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, value: 0x0
Caller: [ATTACKER], function: availableBonuses(address), txdata: 0x06c6204a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5122
Estimated Gas Usage: 33850 - 220979
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:427

uint256)


--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5360
Estimated Gas Usage: 33850 - 220979
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:427

uint256)

    {

        return calculateSum(o

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5360
Estimated Gas Usage: 33850 - 220979
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:427

uint256)

    {

        return calculateSum(o

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010001000100000000000000000102000000000000000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5360
Estimated Gas Usage: 33850 - 220979
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:427

uint256)

    {

        return calculateSum(o

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5501
Estimated Gas Usage: 33850 - 220979
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:435



    funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5512
Estimated Gas Usage: 33850 - 220979
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:435



    funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5543
Estimated Gas Usage: 33850 - 220979
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:433

    }



    function payOrders(uint256 orderId_1, uint256 orderId_2,

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5596
Estimated Gas Usage: 33850 - 220979
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:433

    }



    function payOrders(uint256 orderId_1, uint256 orderId_2,

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5607
Estimated Gas Usage: 33850 - 220979
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:433

    }



    function payOrders(uint256 orderId_1, uint256 orderId_2,

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5624
Estimated Gas Usage: 33850 - 220979
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:433

    }



    function payOrders(uint256 orderId_1, uint256 orderId_2,

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5647
Estimated Gas Usage: 33850 - 220979
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:433

    }



    function payOrders(uint256 orderId_1, uint256 orderId_2,

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TecoBuyBack
Function name: createOrder(uint256)
PC address: 5656
Estimated Gas Usage: 33850 - 220979
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:437

uint256 o

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createOrder(uint256), txdata: 0xf8ad8cd7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TecoBuyBack
Function name: orderSum(uint256)
PC address: 5701
Estimated Gas Usage: 1977 - 2262
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:447

payOrder(orderId

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000101010100810204001010201010201020201010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: orderSum(uint256), txdata: 0x0fd3ea44, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TecoBuyBack
Function name: calculateSum(uint256)
PC address: 5701
Estimated Gas Usage: 1292 - 1387
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:447

payOrder(orderId

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000020201010101010104010101020101010102010200000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: calculateSum(uint256), txdata: 0x5f8932ff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TecoBuyBack
Function name: payOrder(uint256)
PC address: 5701
Estimated Gas Usage: 2937 - 3552
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:447

payOrder(orderId

--------------------
Initial State:

Account: [CREATOR], balance: 0x21020a14001000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000020401044002020202080102010101010102010100000000000000000000000008, value: 0x0
Caller: [CREATOR], function: payOrder(uint256), txdata: 0x2a685d3c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TecoBuyBack
Function name: payOrders(uint256,uint256,uint256,uint256,uint256)
PC address: 5701
Estimated Gas Usage: 4253 - 5198
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ec318e70c05fd1cf53b31d0e128f39c8.sol:447

payOrder(orderId

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010110011001010101011001801001010100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: payOrders(uint256,uint256,uint256,uint256,uint256), txdata: 0xdaa5a7c6, value: 0x0