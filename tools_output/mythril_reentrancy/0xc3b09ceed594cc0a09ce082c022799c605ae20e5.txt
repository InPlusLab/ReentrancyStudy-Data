==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZeroPriceIndex
Function name: constructor
PC address: 523
Estimated Gas Usage: 60924 - 284900
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:437

number. */

            _revision = la

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZeroPriceIndex
Function name: setTokenTradePrices(address[],uint256[],uint256[])
PC address: 550
Estimated Gas Usage: 5204 - 47013
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:1203

ssor;

        

        /* Return success. */

        return true;

    }





    /***************************************************************************

     * 

     * INTERFACES

     * 

     */



    /**

     * Supports Interface (EIP-165)

     * 

     * (see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)

     * 

     * NOTE: Must support the following conditions:

     *       1. (true) when interfaceID is 0x01ffc9a7 (EIP165 interface)

     *       2. (false) when interfaceID is 0xffffffff

     *       3. (true) for any other interfaceID this contract implements

     *       4. (false) for any other interfaceID

     */

    function supportsInterface(

        bytes4 _interfaceID

    ) external pure returns (bool) {

        /* Initialize constants. */

        bytes4 InvalidId = 0xffffffff;

        bytes4 ERC165

--------------------
Initial State:

Account: [CREATOR], balance: 0x4002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setTokenTradePrices(address[],uint256[],uint256[]), txdata: 0x18e55e54ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZeroPriceIndex
Function name: constructor
PC address: 860
Estimated Gas Usage: 60924 - 284900
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:449

ly allow access to an authorized Zer0net a

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZeroPriceIndex
Function name: constructor
PC address: 886
Estimated Gas Usage: 60924 - 284900
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:449

ly allow access to an authorized Zer0net a

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZeroPriceIndex
Function name: constructor
PC address: 899
Estimated Gas Usage: 60924 - 284900
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:459

d(msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZeroPriceIndex
Function name: tradePriceOf(string)
PC address: 935
Estimated Gas Usage: 6966 - 47787
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:547

-date trade price index of the TOP 100 collectibles 

     * listed in the ZeroCache.

     * (the complete listing is available via IPFS, see below)

     */

    function tradePriceOf(

        address _token,

        uint _tokenId

    ) external view returns (uint price) {

        /* Set hash. */

        bytes32 hash = keccak256(abi.encodePacked(

            _namespace, '.', 

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tradePriceOf(string), txdata: 0x91612df2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZeroPriceIndex
Function name: setSuccessor(address)
PC address: 1466
Estimated Gas Usage: 10815 - 71964
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:491

TTERS

     * 

     */



    /**

     * Get Trade Price

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSuccessor(address), txdata: 0x10e5bff8, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZeroPriceIndex
Function name: setSuccessor(address)
PC address: 1592
Estimated Gas Usage: 10815 - 71964
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSuccessor(address), txdata: 0x10e5bff8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZeroPriceIndex
Function name: account_info_rotate_tine(uint256)
PC address: 1765
Estimated Gas Usage: 10815 - 71964
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:1285



        

        /* Ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSuccessor(address), txdata: 0x10e5bff8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZeroPriceIndex
Function name: account_info_rotate_tine(uint256)
PC address: 1803
Estimated Gas Usage: 10815 - 71964
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:1285



        

        /* Ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSuccessor(address), txdata: 0x10e5bff8, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZeroPriceIndex
Function name: setTokenTradePrices(address[],uint256[],uint256[])
PC address: 2061
Estimated Gas Usage: 5204 - 47013
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setTokenTradePrices(address[],uint256[],uint256[]), txdata: 0x18e55e54, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ZeroPriceIndex
Function name: account_info_rotate_tine(uint256)
PC address: 2294
Estimated Gas Usage: 5247 - 47105
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:1241

ce)

     * 

--------------------
Initial State:

Account: [CREATOR], balance: 0x50011a96041441, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setTokenTradePrices(address[],uint256[],uint256[]), txdata: 0x18e55e54800000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZeroPriceIndex
Function name: tradePriceOf(string)
PC address: 6830
Estimated Gas Usage: 6966 - 47787
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: tradePriceOf(string), txdata: 0x91612df280, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZeroPriceIndex
Function name: tradePriceOf(address,uint256)
PC address: 8860
Estimated Gas Usage: 5313 - 45057
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tradePriceOf(address,uint256), txdata: 0xdaeb6dea, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZeroPriceIndex
Function name: transferAnyERC20Token(address,uint256)
PC address: 9012
Estimated Gas Usage: 3895 - 40248
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33bbf42b1b8ed12425dac87118dc173d.sol:1339
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,uint256), txdata: 0xdc39d06d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0


