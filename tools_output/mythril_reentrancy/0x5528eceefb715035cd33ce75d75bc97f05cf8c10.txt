==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DharmaReserveManagerV3Staging
Function name: constructor
PC address: 419
Estimated Gas Usage: 18523 - 165242
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:321

`smartWallet`, providing the initial
   * user sig

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DharmaReserveManagerV3Staging
Function name: constructor
PC address: 673
Estimated Gas Usage: 18523 - 165242
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:324

et Factory V1

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DharmaReserveManagerV3Staging
Function name: getReserves()
PC address: 2012
Estimated Gas Usage: 5144 - 109396
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:737

/  
  function getPrimaryRecip

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getReserves(), txdata: 0x0902f1ac, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DharmaReserveManagerV3Staging
Function name: unpause(uint8)
PC address: 2442
Estimated Gas Usage: 1133 - 1228
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:599

 external onl

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unpause(uint8), txdata: 0x301c7e5d0101010101010101010101010101010101010101010101010101010101010104, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DharmaReserveManagerV3Staging
Function name: withdraw(address,address,uint256)
PC address: 4083
Estimated Gas Usage: 2969 - 38002
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:441

cted USDC received in exchange for
   * dDai - this value is returned from the `getE

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(address,address,uint256), txdata: 0xd9caed12080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef08080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DharmaReserveManagerV3Staging
Function name: call(address,uint256,bytes)
PC address: 4268
Estimated Gas Usage: 2734 - 41153
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:558

ary recipient.
   */
  function

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: call(address,uint256,bytes), txdata: 0x6dbf2fa0010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: DharmaReserveManagerV3Staging
Function name: call(address,uint256,bytes)
PC address: 4268
Estimated Gas Usage: 2734 - 41153
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:558

ary recipient.
   */
  function

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: call(address,uint256,bytes), txdata: 0x6dbf2fa008080808080808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DharmaReserveManagerV3Staging
Function name: pause(uint8)
PC address: 7414
Estimated Gas Usage: 1178 - 1273
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:587

estion is alr

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pause(uint8), txdata: 0xedf07f150101010101010101010101010101010101010101010101010101010101010104, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DharmaReserveManagerV3Staging
Function name: isRole(uint8)
PC address: 7936
Estimated Gas Usage: 308 - 403
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:787

ing key.
   *

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: isRole(uint8), txdata: 0xbb6033200404040404040404040404040404040404040404040404040404040404040404, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DharmaReserveManagerV3Staging
Function name: isPaused(uint8)
PC address: 7988
Estimated Gas Usage: 330 - 425
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:801

wallet addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: isPaused(uint8), txdata: 0xbc61e7330404040404040404040404040404040404040404040404040404040404040404, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DharmaReserveManagerV3Staging
Function name: removeRole(uint8)
PC address: 8566
Estimated Gas Usage: 1152 - 1247
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:774

 manager (0),

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeRole(uint8), txdata: 0xdab41d0d0101010101010101010101010101010101010101010101010101010101010104, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DharmaReserveManagerV3Staging
Function name: setRole(uint8,address)
PC address: 8566
Estimated Gas Usage: 1286 - 1381
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d36997c6d6dd3033d295c24b09035168.sol:774

 manager (0),

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setRole(uint8,address), txdata: 0xf2e12a3908080808080808080808080808080808080808080808080808080808080808040808080808080808080808080101010101010101010101010101010101010101, value: 0x0