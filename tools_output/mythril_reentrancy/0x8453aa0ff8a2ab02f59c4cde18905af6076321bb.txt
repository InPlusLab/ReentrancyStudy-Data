==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MultiSend
Function name: fallback
PC address: 114
Estimated Gas Usage: 8035 - 82898
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8701666c67ce6238416700103de1d064.sol:51

) {

        require(msg.sender == _multiSendOwner);

        uint256 amount = tokens;

        uint256 i = 0;

        while (i < dests.length) {

            _ERC20Contract.transferFrom(_multiSendOwner, dests[i], amount);

            i += 1;

        }

    }

    

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: dropCoins(address[],uint256), txdata: 0x169ea2f8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiSend
Function name: fallback
PC address: 291
Estimated Gas Usage: 8035 - 82898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8701666c67ce6238416700103de1d064.sol:61

t);

         

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: dropCoins(address[],uint256), txdata: 0x169ea2f880, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiSend
Function name: fallback
PC address: 294
Estimated Gas Usage: 8035 - 82898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8701666c67ce6238416700103de1d064.sol:65

      }

    }


--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: dropCoins(address[],uint256), txdata: 0x169ea2f880, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MultiSend
Function name: fallback
PC address: 455
Estimated Gas Usage: 8035 - 82898
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/8701666c67ce6238416700103de1d064.sol:61

t);

            i += 1;

        }

    }

    

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: dropCoins(address[],uint256), txdata: 0x169ea2f880, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiSend
Function name: fallback
PC address: 455
Estimated Gas Usage: 8035 - 82898
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8701666c67ce6238416700103de1d064.sol:61

t);

            i += 1;

        }

    }

    

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: dropCoins(address[],uint256), txdata: 0x169ea2f880, value: 0x0