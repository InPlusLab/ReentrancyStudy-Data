==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YooStop
Function name: stop() or stop()
PC address: 580
Estimated Gas Usage: 999 - 1424
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:158

 YoobaBatchTransfer is  Owned,YooStop,Utils {

    /**
        @d

--------------------
Initial State:

Account: [CREATOR], balance: 0x8802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stop(), txdata: 0x07da68f5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YoobaBatchTransfer
Function name: stop() or stop()
PC address: 943
Estimated Gas Usage: 999 - 1424
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:158

 YoobaBatchTransfer is  Owned,YooStop,Utils {

    /**
        @d

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stop(), txdata: 0x07da68f5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 1005
Estimated Gas Usage: 1127 - 1552
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:126

ewOwner;
    }

    /**
        @dev used by a new owner to accept an ownership transfer
    */
    function acceptOwnership() public {
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YoobaBatchTransfer
Function name: withdrawTo(address,uint256)
PC address: 1059
Estimated Gas Usage: 1110 - 1535
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:181

er(_amount); // send the amount to the target account
    }
    
    function withdrawERC20TokenTo(IERC20Token _token, address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_token)
        validAddress(_to)
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawTo(address,uint256), txdata: 0x205c2878, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YooStop
Function name: start() or start()
PC address: 1228
Estimated Gas Usage: 1087 - 1512
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:161

structor
        
    */
    function YoobaBatchTransfer() public{


--------------------
Initial State:

Account: [CREATOR], balance: 0x88802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YoobaBatchTransfer
Function name: withdrawERC20TokenTo(address,address,uint256)
PC address: 1346
Estimated Gas Usage: 1165 - 1590
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:189

(_to)
    {
        assert(_token.transfer(_to, _amount));

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawERC20TokenTo(address,address,uint256), txdata: 0x488a8cb4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YooStop
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 1383
Estimated Gas Usage: 1193 - 1618
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:126

ewOwner;
    }

    /**
        @dev used by a new owner to accept an ownership transfer
    */
    function acceptOwnership() public {
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x80402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: YoobaBatchTransfer
Function name: withdrawERC20TokenTo(address,address,uint256)
PC address: 1651
Estimated Gas Usage: 3021 - 38103
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:195
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawERC20TokenTo(address,address,uint256), txdata: 0x488a8cb4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YoobaBatchTransfer
Function name: batchTransfer(address,address[],uint256)
PC address: 1812
Estimated Gas Usage: 1367 - 4379
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:169

 _amountOfEach > 0 && _to.length * _amountOfEach <=  _token.balanceOf(this) && _to.length < 10000);
        for(uint16 i = 0; i < _to.length ;i++){
          assert(_token.transfer(_to[i],_amountOfEach));
        }
    }

    
    function withdrawTo(address _to, uint256 _amount)
        public ownerOnly stoppable
        notThis(_to)
    {   
        require(_amount <= this.balance);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: batchTransfer(address,address[],uint256), txdata: 0x5215ad0b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YoobaBatchTransfer
Function name: start() or start()
PC address: 3061
Estimated Gas Usage: 1153 - 1578
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:161

structor
        
    */
    function YoobaBatchTransfer() public{


--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YoobaBatchTransfer
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 3216
Estimated Gas Usage: 1259 - 1684
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e547b846ffeef80d6bc6e8da2a0424f.sol:126

ewOwner;
    }

    /**
        @dev used by a new owner to accept an ownership transfer
    */
    function acceptOwnership() public {
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0