==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PavvyOnline
Function name: transferFrom(address,address,uint256)
PC address: 1929
Estimated Gas Usage: 291 - 716
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3898aa071adac462bbb3143790264543.sol:875

ed[msg.sender][_spender] = _value;

        

emit Approval(msg.sender, _spender, _value);

        

return true;

    }

    

    

function allowance(address _owner, address _spender) constant public returns (uint256) {

       

 return allowed[_owner][_spender];

    

}

    

    

function getTokenBalance(address tokenAddress, address who) constant public returns (uint){

        

AltcoinToken t = AltcoinToken(tokenAddress);

        

uint bal = t.balanceOf(who);

        

return bal;

    

}

    

    



    

    

function withdrawAltcoinTokens(address _tokenContract) on

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PavvyOnline
Function name: transfer(address,uint256)
PC address: 2689
Estimated Gas Usage: 452 - 877
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3898aa071adac462bbb3143790264543.sol:841

llowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);

        

balances[_to] = balances[_to].add(_amount);

        

emit Transfer(_from, _to, _amount);

        

return true;

    

}

    

    

function approve(address _spender, uint256 _value) public returns (bool success) {

        

// mitigates the ERC20 spend/approval race condition

        

if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PavvyOnline
Function name: getTokenBalance(address,address)
PC address: 3045
Estimated Gas Usage: 2283 - 38541
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3898aa071adac462bbb3143790264543.sol:949
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getTokenBalance(address,address), txdata: 0xc489744b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0


