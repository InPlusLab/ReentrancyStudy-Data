==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Richer3D
Function name: joinGameWithInviterID(uint256)
PC address: 1440
Estimated Gas Usage: 1939 - 2554
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7e1b6ac9d417e5b5eaf537af0bd06583.sol:117

Add[msg.sender] < 1) {

            registerWithInviterID(_inviterID);

        }

        buyC

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000010a00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: joinGameWithInviterID(uint256), txdata: 0x17e22621, value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Richer3D
Function name: calculateTarget()
PC address: 1706
Estimated Gas Usage: 1975 - 2590
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7e1b6ac9d417e5b5eaf537af0bd06583.sol:163

t 

        uint256 dividends = p3dContract.myDividends(true);

        if(dividends > 0) {

            if(rInfoX

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: calculateTarget(), txdata: 0x1cfce386, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Richer3D
Function name: getP3DInfo()
PC address: 3799
Estimated Gas Usage: 3645 - 39198
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7e1b6ac9d417e5b5eaf537af0bd06583.sol:1027

me;

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getP3DInfo(), txdata: 0x7800a9f6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Richer3D
Function name: getP3DInfo()
PC address: 3811
Estimated Gas Usage: 3645 - 39198
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7e1b6ac9d417e5b5eaf537af0bd06583.sol:1027

256 lastCalculateTime;

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getP3DInfo(), txdata: 0x7800a9f6, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Richer3D
Function name: joinGameWithBalance(uint256)
PC address: 6617
Estimated Gas Usage: 2273 - 2888
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7e1b6ac9d417e5b5eaf537af0bd06583.sol:143

sg.sender);

        require(balance >= _amount.mul(11).div(10),"balance is not enough");

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: joinGameWithBalance(uint256), txdata: 0xeafe5eec80, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Richer3D
Function name: joinGameWithInviterID(uint256)
PC address: 7153
Estimated Gas Usage: 1891 - 2506
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7e1b6ac9d417e5b5eaf537af0bd06583.sol:1222


            return (1);

        else

--------------------
Initial State:

Account: [CREATOR], balance: 0x410c0100084168, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: joinGameWithInviterID(uint256), txdata: 0x17e22621, value: 0x2386f26fc10000