==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: openBooks(uint256)
PC address: 1686
Estimated Gas Usage: 1090 - 1185
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:169

tokenamounts

    mapping(

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: openBooks(uint256), txdata: 0x4c3b676080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: buyPerUnit(address,uint256)
PC address: 2212
Estimated Gas Usage: 16534 - 143313
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:459



    function unlist(uint256 _order

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: buyPerUnit(address,uint256), txdata: 0x69902ffb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: buyPerUnit(address,uint256)
PC address: 2261
Estimated Gas Usage: 16534 - 143313
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:463

 0);


--------------------
Initial State:

Account: [CREATOR], balance: 0xe0d18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyPerUnit(address,uint256), txdata: 0x69902ffb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: buyPerUnit(address,uint256)
PC address: 2378
Estimated Gas Usage: 16534 - 143313
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:463

leIndex[_orderId] > 0);

        Order memory

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: buyPerUnit(address,uint256), txdata: 0x69902ffb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Exchange
Function name: buyPerUnit(address,uint256)
PC address: 2378
Estimated Gas Usage: 16534 - 143313
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:463

leIndex[_orderId] > 0);

        Order memory

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0f98, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyPerUnit(address,uint256), txdata: 0x69902ffb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: buyPerUnit(address,uint256)
PC address: 2378
Estimated Gas Usage: 16534 - 143313
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:463

leIndex[_orderId] > 0);

        Order memory

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0d18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyPerUnit(address,uint256), txdata: 0x69902ffb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: buyPerUnit(address,uint256)
PC address: 2430
Estimated Gas Usage: 16534 - 143313
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:465

order

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0d18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyPerUnit(address,uint256), txdata: 0x69902ffb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: buyPerUnit(address,uint256)
PC address: 2463
Estimated Gas Usage: 16534 - 143313
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:465

orderId];

        require

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0d18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyPerUnit(address,uint256), txdata: 0x69902ffb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: buyPerUnit(address,uint256)
PC address: 2491
Estimated Gas Usage: 16534 - 143313
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:467

.sender == own

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0d18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyPerUnit(address,uint256), txdata: 0x69902ffb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: buyPerUnit(address,uint256)
PC address: 2512
Estimated Gas Usage: 16534 - 143313
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:467

der.maker || msg.sender == owner);

       

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0d18, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyPerUnit(address,uint256), txdata: 0x69902ffb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: userOrders(address,uint256)
PC address: 2625
Estimated Gas Usage: 1297 - 1912
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:201

    mapping(address => bool) internal blackl

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: userOrders(address,uint256), txdata: 0x856652e9, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4358
Estimated Gas Usage: 105308 - 488587
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:293

nce] = Order({

            maker: msg.se

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0080002010036, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef44fbfdbe4ee6f692c1452a590047ffb95f8429a57fb1ffefef8c190123a0dc2701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4435
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:291

add].push(order_nonce);

        o

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4473
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:297

  asset: _tokenadd,

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4507
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4513
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4521
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:300


            amount:_amoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4552
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:305

ender,_tokenadd,_amount,_

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4554
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:305

der_nonce,m

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4566
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:305

rderPlaced(order_nonce,msg.sender,_tokenadd,_amount,_

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4568
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:307

kenadd] == 

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4575
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4585
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:307

    if(openBookIndex[_tokenadd] == 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4620
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:309

 openBookIn

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4633
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:309

        openBookIndex[_tokenadd] = openBooks.length;

            openBooks.push(_tokenadd);

        }

        userOrderIndex[order_nonce] = userOrders[msg.sender].leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4651
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:309

        openBookIndex[_tokenadd] = openBooks.length;

            openBooks.push(_tokenadd);

        }

        userOrderIndex[order_nonce] = userOrders[msg.sender].leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4660
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:309

        openBookIndex[_tokenadd] = openBooks.length;

            openBooks.push(_tokenadd);

        }

        userOrderIndex[order_nonce] = userOrders[msg.sender].leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4667
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:309

        openBookIndex[_tokenadd] = openBooks.length;

            openBooks.push(_tokenadd);

        }

        userOrderIndex[order_nonce] = userOrders[msg.sender].leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4676
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:309

        openBookIndex[_tokenadd] = openBooks.length;

            openBooks.push(_tokenadd);

        }

        userOrderIndex[order_nonce] = userOrders[msg.sender].leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4689
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:309

        openBookIndex[_tokenadd] = openBooks.length;

            openBooks.push(_tokenadd);

        }

        userOrderIndex[order_nonce] = userOrders[msg.sender].leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4691
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:317

nder].push(

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4790
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:319

add] += _amount;

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4800
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:329

llows DDA to lis

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4827
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:325



    /**

    *@dev list allows DDA to lis

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4833
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4873
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:331

*@param _asset address 



--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4888
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:331

*@param _asset address 



--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4911
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:335

 price per unit in wei

    *

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4913
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:335

 _price uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4925
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:333

et

    *@param _price uint256 price per unit in wei

    *

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4927
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:339



    //The

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4934
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4944
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:337

g true if it is long

    */

    //Then

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4976
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:341

ve a mapping from an asset to its price/ quan

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4982
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:341

ve a mapping from an asset to its price/ quan

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4984
Estimated Gas Usage: 105308 - 488587
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:341

 list it.

    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 4987
Estimated Gas Usage: 105308 - 488587
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:341

 list it.

    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c1080100012a3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef56e3e73fe31df672caa3001ce116f4404fcb2b7e7f10bffa0797c17dc880dc7701, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: openDdaListAssets(uint256)
PC address: 5002
Estimated Gas Usage: 1464 - 1559
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:167

 => uint) public openDdaListIndex;

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: openDdaListAssets(uint256), txdata: 0xde0f674e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: forSale(address,uint256)
PC address: 5029
Estimated Gas Usage: 1583 - 2198
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:185



    //mapping of address to position in ope

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: forSale(address,uint256), txdata: 0xeb3056e0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: unlistDda(address)
PC address: 5347
Estimated Gas Usage: 20001 - 81561
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2c4e349de7c81df97ac83b939fa41144.sol:417

 the address of the assset list

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unlistDda(address), txdata: 0xd49e0cdd, value: 0x0


