==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AionClient
Function name: fallback
PC address: 249
Estimated Gas Usage: 1933 - 38799
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:51

   }

    



    function () payable pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: execfunct(address,uint256,uint256,bytes), txdata: 0x0ed080eb, value: 0x0
Caller: [SOMEGUY], function: execfunct(address,uint256,uint256,bytes), txdata: 0x0ed080eb040404040404040404040404deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: AionClient
Function name: fallback
PC address: 249
Estimated Gas Usage: 1933 - 38799
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:51

   }

    



    function () payable pu

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: execfunct(address,uint256,uint256,bytes), txdata: 0x0ed080eb, value: 0x0
Caller: [CREATOR], function: execfunct(address,uint256,uint256,bytes), txdata: 0x0ed080eb, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AionClient
Function name: fallback
PC address: 249
Estimated Gas Usage: 1933 - 38799
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:51

   }

    



    function () payable pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x16000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1c00000000000003, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x08800040, value: 0x1
Caller: [ATTACKER], function: execfunct(address,uint256,uint256,bytes), txdata: 0x0ed080eb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Aion
Function name: fallback
PC address: 777
Estimated Gas Usage: 333 - 1088
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:363

ender==from);

        AionClient instance = AionClient(clientAccount[msg.sender]);

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cancellScheduledTx(uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint256,bool), txdata: 0x25a811cvalue: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Aion
Function name: fallback
PC address: 793
Estimated Gas Usage: 353 - 1108
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:363

re(msg.sender==from);

        AionClient instance = AionClient(clientAccount[msg.sender]);

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cancellScheduledTx(uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint256,bool), txdata: 0x25a811cvalue: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Aion
Function name: fallback
PC address: 816
Estimated Gas Usage: 353 - 1108
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:369

execfunct(from, value+gasprice*gaslimit+fee, 3000, hex"00");

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cancellScheduledTx(uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint256,bool), txdata: 0x25a811c8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Aion
Function name: fallback
PC address: 831
Estimated Gas Usage: 373 - 1128
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:369

nstance.execfunct(from, value+gasprice*gaslimit+fee, 3000, hex"00");

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cancellScheduledTx(uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint256,bool), txdata: 0x25a811c801, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Aion
Function name: updatefee(uint256)
PC address: 1708
Estimated Gas Usage: 1955 - 2710
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:445

ck- receive Ether

    function () public 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updatefee(uint256), txdata: 0xa0135b2b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Aion
Function name: updatefee(uint256)
PC address: 1813
Estimated Gas Usage: 14462 - 55849
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:459
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updatefee(uint256), txdata: 0xa0135b2b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Aion
Function name: executeCall(uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint256,bool)
PC address: 2818
Estimated Gas Usage: 1425 - 2510
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:313

Account[from]);

        

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: executeCall(uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint256,bool), txdata: 0xf608avalue: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Aion
Function name: executeCall(uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint256,bool)
PC address: 2838
Estimated Gas Usage: 1448 - 2533
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d614e50a2778d1414b23dc59a33a2dba.sol:317

ss(this), gasprice*gaslimit+fee, 210

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: executeCall(uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint256,bool), txdata: 0xf608a532, value: 0x0