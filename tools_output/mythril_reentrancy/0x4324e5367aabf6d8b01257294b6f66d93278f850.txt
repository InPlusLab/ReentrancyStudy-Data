==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: syncContractLevelData(uint256)
PC address: 2551
Estimated Gas Usage: 14403 - 91275
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17599a02f0816ed6f9a4b2ecf68c1a4a.sol:392

bleBalance;
      uint profitSourceBa

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: syncContractLevelData(uint256), txdata: 0x097ac372, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: syncContractLevelData(uint256)
PC address: 2554
Estimated Gas Usage: 14403 - 91275
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17599a02f0816ed6f9a4b2ecf68c1a4a.sol:394

      uint profitBalance

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: syncContractLevelData(uint256), txdata: 0x097ac372, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: setUserProfit(address,uint256,uint256,uint256,uint256)
PC address: 9106
Estimated Gas Usage: 25197 - 142024
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17599a02f0816ed6f9a4b2ecf68c1a4a.sol:463

rCount = citizen.getInvestorCount();
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffff7, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setUserProfit(address,uint256,uint256,uint256,uint256), txdata: 0xacfb60a2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: setUserProfit(address,uint256,uint256,uint256,uint256)
PC address: 9114
Estimated Gas Usage: 25197 - 142024
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17599a02f0816ed6f9a4b2ecf68c1a4a.sol:464


     for (uint i = 0; i < _userAddresses.leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffff7, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setUserProfit(address,uint256,uint256,uint256,uint256), txdata: 0xacfb60a2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: setUserProfit(address,uint256,uint256,uint256,uint256)
PC address: 9119
Estimated Gas Usage: 25197 - 142024
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17599a02f0816ed6f9a4b2ecf68c1a4a.sol:465

{
     id = citizen.getId(_userAddresses[

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffff7, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setUserProfit(address,uint256,uint256,uint256,uint256), txdata: 0xacfb60a2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: setUserProfit(address,uint256,uint256,uint256,uint256)
PC address: 9123
Estimated Gas Usage: 25197 - 142024
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17599a02f0816ed6f9a4b2ecf68c1a4a.sol:467

  require(investorCount > id, "Invalid us

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffff7, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setUserProfit(address,uint256,uint256,uint256,uint256), txdata: 0xacfb60a2, value: 0x0


