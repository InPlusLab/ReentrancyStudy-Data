==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFBlack
Function name: unstake(uint256)
PC address: 1265
Estimated Gas Usage: 3702 - 38270
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:398

.contains(msg.sender) && depositedTokens[msg.sender] == 0) {
            holders.remove(msg.sender);
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x110000435400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(uint256), txdata: 0x2e17de780000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10000

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: YFBlack
Function name: unstake(uint256)
PC address: 1422
Estimated Gas Usage: 18626 - 128801
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:404

g.sender);
    }
    
    uint private constant stakingTok

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000c1fba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unstake(uint256), txdata: 0x2e17de780000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: unstake(uint256)
PC address: 1560
Estimated Gas Usage: 18626 - 128801
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:410

        if (totalClaimedRew

--------------------
Initial State:

Account: [CREATOR], balance: 0x23880000000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unstake(uint256), txdata: 0x2e17de780000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: unstake(uint256)
PC address: 1589
Estimated Gas Usage: 18626 - 128801
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:409

 public view returns (uint) {
        if (totalClaimedRewards >= stakingTokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x23880000000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unstake(uint256), txdata: 0x2e17de780000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10000

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: transferAnyERC20Tokens(address,address,uint256)
PC address: 1867
Estimated Gas Usage: 2864 - 37523
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:424
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Tokens(address,address,uint256), txdata: 0x6a395ccb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 2470
Estimated Gas Usage: 39698 - 230253
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:381

r] = now;
        }
    }
    
    function unstake(uint amountToWithdraw)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40025c1747bc50000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: stake(uint256), txdata: 0xa694fc3a8020010001000000000001000102020101020400018040010102005248c1ffeb, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 2617
Estimated Gas Usage: 39698 - 230253
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:388

uire(depositedTokens[msg.se

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 2646
Estimated Gas Usage: 39698 - 230253
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:387

ansfer(msg.value);
        require(depositedTokens[msg.sender] >= amountToWi

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 2692
Estimated Gas Usage: 39698 - 230253
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:390

 "You recently staked, please

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFBlack
Function name: unstake(uint256)
PC address: 2967
Estimated Gas Usage: 3654 - 38222
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:35


  }

  functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x4802a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unstake(uint256), txdata: 0x2e17de780000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 3395
Estimated Gas Usage: 39698 - 230253
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:354

        uint pendingDivs = sta

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: unstake(uint256)
PC address: 3565
Estimated Gas Usage: 18626 - 128801
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:133

th(Set storage set)

--------------------
Initial State:

Account: [CREATOR], balance: 0x23880000000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unstake(uint256), txdata: 0x2e17de780000000000000000000000000000000000000000000000000000000000000000, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 3565
Estimated Gas Usage: 39698 - 230253
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:133

th(Set storage set)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 3791
Estimated Gas Usage: 39698 - 230253
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:74

 but we add 1 to all in

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 3798
Estimated Gas Usage: 39698 - 230253
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:74

 but we add 1 to all in

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 3814
Estimated Gas Usage: 39698 - 230253
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:74

 but we add 1 to all in

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 3816
Estimated Gas Usage: 39698 - 230253
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:79

eturn false;
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: YFBlack
Function name: stake(uint256)
PC address: 3833
Estimated Gas Usage: 39698 - 230253
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b247b62faf69f90f674f9890f675e696.sol:78

} else {
            return false;
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410400000298b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48020466c0f205, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a009443300a15018100313a00abc043150100081014c42c9411444f04600056a3, value: 0x2386f26fc10000