==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenBase
Function name: transferFrom(address,address,uint256)
PC address: 511
Estimated Gas Usage: 1136 - 2081
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1045e689dd135ed24d68dd14b51a81a4.sol:195

   

        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);

        _balances[src] = sub(_balances[src], wad);

        _balances[dst] = add(_balances[dst], wad);

        

        emit Transfer(src, dst, wad);

        

        return true;

    }

    

    function approve(address guy, uint256 wad) public returns (bool)

    {

        _approvals[msg.sender][guy] = wad;

        

        emit Approval(msg.sender, guy, wad);

        

        return 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenBase
Function name: transferFrom(address,address,uint256)
PC address: 556
Estimated Gas Usage: 2127 - 3782
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1045e689dd135ed24d68dd14b51a81a4.sol:195

   

        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);

        _balances[src] = sub(_balances[src], wad);

        _balances[dst] = add(_balances[dst], wad);

        

        emit Transfer(src, dst, wad);

        

        return true;

    }

    

    function approve(address guy, uint256 wad) public returns (bool)

    {

        _approvals[msg.sender][guy] = wad;

        

        emit Approval(msg.sender, guy, wad);

        

        return 

--------------------
Initial State:

Account: [CREATOR], balance: 0x100080000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80, value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenBase
Function name: transfer(address,uint256)
PC address: 857
Estimated Gas Usage: 1139 - 1754
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1045e689dd135ed24d68dd14b51a81a4.sol:171

ub(_balances[msg.sender], wad);

        _balances[dst] = add(_balances[dst], wad);

        

        emit Transfer(msg.sender, dst, wad);

        

        return true;

    }

    

    function transferFrom(address src, address dst, uint wad) public returns (bool)

    {

        assert(_balances[src] >= wad);

        assert(_approvals[src][msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WBCHToken
Function name: symbol()
PC address: 1378
Estimated Gas Usage: 2506 - 4247
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1045e689dd135ed24d68dd14b51a81a4.sol:279

ay = gateway;

        emit Gat

--------------------
Initial State:

Account: [CREATOR], balance: 0x94420, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WBCHToken
Function name: burn(uint64,string)
PC address: 1533
Estimated Gas Usage: 1307 - 1592
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1045e689dd135ed24d68dd14b51a81a4.sol:380


    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0xb1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burn(uint64,string), txdata: 0xf232d7a800000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WBCHToken
Function name: burn(uint64,string)
PC address: 1883
Estimated Gas Usage: 16726 - 97812
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1045e689dd135ed24d68dd14b51a81a4.sol:383
Initial State:

Account: [CREATOR], balance: 0x8000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: burn(uint64,string), txdata: 0xf232d7a8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WBCHToken
Function name: transferFrom(address,address,uint256)
PC address: 2044
Estimated Gas Usage: 1207 - 2152
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1045e689dd135ed24d68dd14b51a81a4.sol:323

   

        _balances[receiver] 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000002000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WBCHToken
Function name: transfer(address,uint256)
PC address: 2376
Estimated Gas Usage: 1273 - 1888
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1045e689dd135ed24d68dd14b51a81a4.sol:311

er.approve(guy, wad);

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10201d801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000000000002, value: 0x0


