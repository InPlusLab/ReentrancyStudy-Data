==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 1070
Estimated Gas Usage: 1894 - 1989
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:202

ed.add(weiAmount);

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: fallback
PC address: 1390
Estimated Gas Usage: 3686 - 3781
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:202

ed.add(weiAmount);

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101004080800000000402040810000000000000000000000000000000000000000110204080000000000204081000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 1495
Estimated Gas Usage: 930 - 1025
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:249

contract CappedCrowdsale is Crowdsale {
  using SafeMath for uint256;

  uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000010101010000000000040080000000041000000000000000000000018000000000000000000000000000000000000004000000000000000000000000012001018001010101010101010108011004010101010101010101010201084000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 1815
Estimated Gas Usage: 930 - 1025
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:249

contract CappedCrowdsale is Crowdsale {
  using SafeMath for uint256;

  uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101008080800000040002080000000000000000000010010200000000000020000110204080000000000208000000000000000000000000000000000000000000000101010101010101010101010101010101010201010180010120080102080180000000000000000000000000010101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Crowdsale
Function name: transferTokenOwnership(address) or transferTokenOwnership(address) or transferTokenOwnership(address)
PC address: 1874
Estimated Gas Usage: 3480 - 38611
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:259

rowdsale#validPurchase to add ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c008014002120a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8100000000000001040140011001028001010000010101030001800104024101c000400000000001040140010801028001010000000000010101800104021040010101400101010101010101010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AlloyPresale
Function name: transferTokenOwnership(address) or transferTokenOwnership(address) or transferTokenOwnership(address)
PC address: 2194
Estimated Gas Usage: 3480 - 38611
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:259

rowdsale#validPurchase to add ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x201b013, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000101081020200000010101010120041004080002000000000000000110000000010108102020000000000000012004100408000200000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 2675
Estimated Gas Usage: 1785 - 1880
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:225

) public constant returns (bool) {
    ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000010101010000000000000240000100000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000401001010101014001010110010101012001010101018001010101010801010200000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 2699
Estimated Gas Usage: 1829 - 1924
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:229

mergency updates on the time li

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000000800000000000000000000000000000000000018000000000000000000000000080000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 2708
Estimated Gas Usage: 1849 - 1944
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:229

mergency updates on the time line
  function u

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000040050001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101010101010101010101010101010101018000000001010100000001010101010101010101000002004000000102000401c000000000000000000000000000000000000000000000000000000002000000000808408001040201024001011000008004020220022008404008040804088000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 2746
Estimated Gas Usage: 3622 - 3717
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:14

 a == b);
    return

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020010101010101010101010101010101010180080120800000010101000101010100000001000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010120202020202020202020202001, value: 0x0
Caller: [SOMEGUY], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 2757
Estimated Gas Usage: 3655 - 3750
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:15

    r

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040010101010101010101010101010101010101010140000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010140404040404040404040404001, value: 0x0
Caller: [ATTACKER], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 2768
Estimated Gas Usage: 3642 - 3737
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:14

0 || c / a == b);
    return 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40041000000080359, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101010101010101010101010101010101019192b0a6930001aa2800014008924a43d82500018d71129296800593c3b68089a000200100000002000000000010000000000000000000000000000000000080010101010101010101010101010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 2931
Estimated Gas Usage: 3513 - 3608
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:27

rn a - b;
  }



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000010100000101010000000000000000010102000000000000000000018000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010100000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Crowdsale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 2961
Estimated Gas Usage: 3744 - 3839
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:249

ale is Crowdsale {
  using SafeMath for uint256;

  uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x401814000020b80eb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000020880024001102020800401020804014001200400033db2d122888299c27a322dcfabb56ab4a80000000000000004200018508000033db2d122888299c27a322dcfabb56ab4a800000000000000042000185080010008018001010102080101040180400401010401010108800101010201000800000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: fallback
PC address: 3726
Estimated Gas Usage: 3646 - 3741
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:270

 || capReached;
  }

}

contract P

--------------------
Initial State:

Account: [CREATOR], balance: 0x1800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101004040800100000402040810000000000000000000000000000101010108000104204080000000000204081000000000000000000000000000000000010800000101010101020101010101010101010401010101010101010101010101010101000000000000000000000000010101010101010101020101010101010101010101, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 3753
Estimated Gas Usage: 3622 - 3717
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:14

 a == b);
    return

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 40404040404040404040404001010101010101010101010101010101010101014000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101404040404040404040404040010101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 3764
Estimated Gas Usage: 3655 - 3750
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:15

    r

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101010101010101010101010101010101010000000000000000000000000040000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 3775
Estimated Gas Usage: 3642 - 3737
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:14

0 || c / a == b);
    return 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000400091ad3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101000101010101010101010101010101000000000000000000002002000000000000000000040020200140000100000910000000000000000000200000000000000000000004002020014000010000080101010101010101010101010101010101010101010101010101010101010101000000000000000000000000010102010101010101020101010101010140010101, value: 0x0
Caller: [SOMEGUY], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 3938
Estimated Gas Usage: 3513 - 3608
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:27

rn a - b;
  }



--------------------
Initial State:

Account: [CREATOR], balance: 0x8003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000108100401201001100401040104014004400140000000000102010000000401080404200120200220200020200020200020000180000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AlloyPresale
Function name: crowdsaleProgress() or crowdsaleProgress() or crowdsaleProgress()
PC address: 3968
Estimated Gas Usage: 3744 - 3839
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:249

ale is Crowdsale {
  using SafeMath for uint256;

  uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80040000088013, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101800101080101018001010101014001a2db015000000000102020000100000000008000000000018018080094014302a2db0150000000001020200001000000000080000000000180180800940143020140010101010101010801010101010101010101010101080101010101010101000000000000000000000000080101040101010101011001200101010201080101, value: 0x0
Caller: [SOMEGUY], function: crowdsaleProgress(), txdata: 0x013dbf17, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: hasEnded() or hasEnded() or hasEnded()
PC address: 4009
Estimated Gas Usage: 3816 - 4241
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:286

);
    _;
  }

  /**
   * @dev

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0202020202020202020202020101010101010101010101010101010101010101020080800000000002080810000000000000000000000000000000000000000102104080000000000208081000000000000000000000000000000000000000002001010104010101040140010101010101010101010102010102400102010101020202020202020202020202010101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: hasEnded(), txdata: 0xecb70fb7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: fallback
PC address: 4057
Estimated Gas Usage: 3537 - 3632
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:225

) public constant returns (bool) {
    ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101008080800100000802040810000000000000000000000000000000000000000110204080000000000204081000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: fallback
PC address: 4081
Estimated Gas Usage: 3581 - 3676
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:229

mergency updates on the time li

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101008080800100040280040810000000000000000000000000000000000000000108204080000000021004081000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AlloyPresale
Function name: fallback
PC address: 4090
Estimated Gas Usage: 3601 - 3696
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/abe8f4be520cd5ac4fcc3c410f30fa2c.sol:229

mergency updates on the time line
  function u

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101008081010100000402040810000000000000000000000000000000000108000110204080000000000204081000000000000000000000000000000000010800000101010101010101010101010101010101040101010101010101010101010101000000000000000000000000010101010101010101020101010101100101010101, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0