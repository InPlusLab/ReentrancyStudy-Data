==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: sendTokensSingleValue(address,address[],uint256)
PC address: 331
Estimated Gas Usage: 1441 - 1866
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/72b4f3ae830dfe631a36f03fb1b0526e.sol:48

r, address[] dests, uint256 value) onlyOwner external {
    uint256 i = 0;
    uint256 toSend = value * 10**18;
    
    while (i < dests.length) {
        sendInternally(tokenAddr, dests[i] , toSend, value);
        i++;
    }
  }  

  function sendInternally(address tokenAddr, addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensSingleValue(address,address[],uint256), txdata: 0xdd93cd670000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: sendTokens(address,address[],uint256[])
PC address: 417
Estimated Gas Usage: 1603 - 2028
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/72b4f3ae830dfe631a36f03fb1b0526e.sol:38

, address[] dests, uint256[] values) onlyOwner external {
    uint256 i = 0;

    while (i < dests.length) {
        uint256 toSend = values[i] * 10**18;
        sendInternally(tokenAddr, dests[i] , toSend, values[i]);
        i++;
    }
  }

  function sendTokensSingleValue(address to

--------------------
Initial State:

Account: [CREATOR], balance: 0x8004000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokens(address,address[],uint256[]), txdata: 0xe83f967b0000000000000100000000000000000000000000000000000000000001010101ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: sendTokens(address,address[],uint256[])
PC address: 431
Estimated Gas Usage: 1603 - 2028
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/72b4f3ae830dfe631a36f03fb1b0526e.sol:38

, address[] dests, uint256[] values) onlyOwner external {
    uint256 i = 0;

    while (i < dests.length) {
        uint256 toSend = values[i] * 10**18;
        sendInternally(tokenAddr, dests[i] , toSend, values[i]);
        i++;
    }
  }

  function sendTokensSingleValue(address to

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokens(address,address[],uint256[]), txdata: 0xe83f967b01000101010101010101010101010101010101010101010101010101010101008010000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: tokensAvailable(address)
PC address: 716
Estimated Gas Usage: 1846 - 36972
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/72b4f3ae830dfe631a36f03fb1b0526e.sol:72
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokensAvailable(address), txdata: 0xc902ee36000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: sendTokensSingleValue(address,address[],uint256)
PC address: 716
Estimated Gas Usage: 1658 - 2083
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/72b4f3ae830dfe631a36f03fb1b0526e.sol:72
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensSingleValue(address,address[],uint256), txdata: 0xdd93cd67000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa7, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: sendTokensSingleValue(address,address[],uint256)
PC address: 854
Estimated Gas Usage: 4302 - 40014
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/72b4f3ae830dfe631a36f03fb1b0526e.sol:52

 {
        sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensSingleValue(address,address[],uint256), txdata: 0xdd93cd67000000000000000000000000000000000000000000000000000000000000000080a443c018100a8200800888680400080b584d8622de00004000000000000008100075, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: sendTokensSingleValue(address,address[],uint256)
PC address: 892
Estimated Gas Usage: 1658 - 2083
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/72b4f3ae830dfe631a36f03fb1b0526e.sol:57


  funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensSingleValue(address,address[],uint256), txdata: 0xdd93cd670000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AirDrop
Function name: sendTokens(address,address[],uint256[])
PC address: 1077
Estimated Gas Usage: 1276 - 1701
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/72b4f3ae830dfe631a36f03fb1b0526e.sol:38

, address[] dests, uint256[] values) onlyOwner external {
    uint256 i = 0;

    while (i < dests.length) {
        uint256 toSend = values[i] * 10**18;
        sendInternally(tokenAddr, dests[i] , toSend, values[i]);
        i++;
    }
  }

  function sendTokensSingleValue(address to

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokens(address,address[],uint256[]), txdata: 0xe83f967b000000000000000000000000000000000000000000000000000000000000000080, value: 0x0