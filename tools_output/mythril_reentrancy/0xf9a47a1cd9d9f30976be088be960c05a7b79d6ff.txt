==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TECHICO
Function name: fallback
PC address: 1276
Estimated Gas Usage: 1811 - 1906
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:453

user] == true); //User m

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TECHICO
Function name: version()
PC address: 3379
Estimated Gas Usage: 2484 - 4225
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:247

*18; //+10%

    uint256 bo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: version(), txdata: 0x54fd4d50, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3554
Estimated Gas Usage: 2808 - 2903
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:737

l); //When successful

        uint256 temp = pending[creator]; //Remanent tokens handle

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x102000800072018, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3583
Estimated Gas Usage: 2828 - 2923
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:737

l); //When successful

        uint256 temp = pending[creator]; //Remanent tokens handle

        pending[creator] = 0; //Clear user bal

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3610
Estimated Gas Usage: 2845 - 2940
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:737

essful); //When successful

        uint256 temp = pending[creator]; //Remanent tokens handle

        pending[creator] = 0; //Clear user balance

        require(tokenReward.transfer(creator,temp)); //Try to transfer



        emit LogContributorsPayout(creator,temp); //Log transaction



        creator.transfer(address(this).balance); //After successful, eth is send to creator



        emit LogBeneficiaryPaid(creator); //Log transaction



    }



    /**

    * @notice Function to claim any token stuck on contract

    * @param _address Address of target token

    *

--------------------
Initial State:

Account: [CREATOR], balance: 0x82408, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3720
Estimated Gas Usage: 42697 - 230500
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:747

ut(creator,temp); //Log transaction


--------------------
Initial State:

Account: [CREATOR], balance: 0x20c0001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3776
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:747

ibutors

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3800
Estimated Gas Usage: 42697 - 230500
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:747

LogContributorsPayout(creator,temp); //Log transaction



        creator.tra

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3804
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:751

alance); //After success

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3818
Estimated Gas Usage: 42697 - 230500
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:751

alance); //After success

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3823
Estimated Gas Usage: 42697 - 230500
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:755

t LogBeneficiaryP

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3826
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:765

e Function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3893
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:773

n sal

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3922
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:775

 must b

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3952
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:775

et token must be

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3956
Estimated Gas Usage: 42697 - 230500
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:779

   uint256 remainder

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3959
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:779

nder tokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3961
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:781

_addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 4037
Estimated Gas Usage: 42697 - 230500
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:779

nder tokens

        _address.tran

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c0001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 4037
Estimated Gas Usage: 42697 - 230500
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:779

nder tokens

        _address.tran

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 4037
Estimated Gas Usage: 42697 - 230500
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:779

nder tokens

        _address.tran

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 4092
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:785





   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 4163
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:793

    */


--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 4196
Estimated Gas Usage: 42697 - 230500
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:793

    */

    function () public payable 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TECHICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 4222
Estimated Gas Usage: 42697 - 230500
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:805
Initial State:

Account: [CREATOR], balance: 0x2080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TECHICO
Function name: pauseSale(bool)
PC address: 5127
Estimated Gas Usage: 10345 - 30630
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:79

* @title ERC20

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pauseSale(bool), txdata: 0x0cfed2a210, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TECHICO
Function name: pauseSale(bool)
PC address: 5128
Estimated Gas Usage: 10355 - 30640
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c965fdd1df3e62e5990c74f163811813.sol:79

* @title ERC20

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pauseSale(bool), txdata: 0x0cfed2a201, value: 0x0