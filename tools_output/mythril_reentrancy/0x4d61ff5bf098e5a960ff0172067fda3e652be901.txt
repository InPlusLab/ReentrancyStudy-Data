==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FeedCrowdsale
Function name: constructor
PC address: 127
Estimated Gas Usage: 36829 - 180025
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3346a8663f60db6313a6121469f2911d.sol:153

Time >= startTime);
    o

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FeedCrowdsale
Function name: fallback
PC address: 995
Estimated Gas Usage: 1863 - 2288
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3346a8663f60db6313a6121469f2911d.sol:258

mineBonus(tokens,weiAmou

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff88080100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FeedCrowdsale
Function name: setPreSaleEndDate(uint256)
PC address: 2003
Estimated Gas Usage: 3523 - 38654
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3346a8663f60db6313a6121469f2911d.sol:393
Initial State:

Account: [CREATOR], balance: 0x42040000000000202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefbfffff0000000fb047ffe00001181ffffffffffffffffffffffffff800000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setPreSaleEndDate(uint256), txdata: 0x42f0ca0d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FeedCrowdsale
Function name: setICOEndDate(uint256)
PC address: 2003
Estimated Gas Usage: 3545 - 38676
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3346a8663f60db6313a6121469f2911d.sol:393
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c8f9d91a08000094000000000000000000000000000000000000000000010400000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setICOEndDate(uint256), txdata: 0x43e91384, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FeedCrowdsale
Function name: setPrivateSaleEndDate(uint256)
PC address: 2003
Estimated Gas Usage: 3699 - 38830
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3346a8663f60db6313a6121469f2911d.sol:393
Initial State:

Account: [CREATOR], balance: 0x4000201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fa0ffc0004c2f200a62ccf0508dad45b1bfffe08fb9802a400807fffff882802000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setPrivateSaleEndDate(uint256), txdata: 0x9d5c6e20, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FeedCrowdsale
Function name: fallback
PC address: 3136
Estimated Gas Usage: 1784 - 2209
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3346a8663f60db6313a6121469f2911d.sol:289

* function to change the rate of t

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff6c580000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FeedCrowdsale
Function name: fallback
PC address: 3157
Estimated Gas Usage: 1822 - 2247
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3346a8663f60db6313a6121469f2911d.sol:292

 function setPriceRate(uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000001000001010103fdfefffeef8000000000200100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FeedCrowdsale
Function name: fallback
PC address: 3260
Estimated Gas Usage: 7874 - 8299
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3346a8663f60db6313a6121469f2911d.sol:183

onus.div(100);
            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPrivateSale);  
            token.addPrivateSaleBuyer(sender,tokens.add(bonus));
        }
        //break
        else if (timeElapsedInDays >=30 && timeElapsedInDays <51)
        {
            revert();
        }
        //pre-ico/presale
        else if (timeElapsedInDays>=51 && timeElapsedInDays<72)
        {
            require(amountSent>=minimumContributionInPreICO && amountSent<=maximumContributionInPreICO);
            if (amountSent>=1.68 ether && amountSent < 17 ether)
            {
                bonus = tokens.mul(5);
                bonus = bonus.div(100);
                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreICO); 
            }
            else if (amountSent>=17 ether && amountSent < 169 ether)
            {
                bonus = tokens.mul(10);
                bonus = bonus.div(100);
                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreICO); 
            }
            else if (amountSent>=169 ether && amountSent < 841 ether)
            {
                bonus = tokens.mul(15);
                bonus = bonus.div(100);
                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreICO); 
            }
            else if (amountSent>=841 ether && amountSent < 1680 ether)
            {
                bonus = tokens.mul(20);
                bonus = bonus.div(100);
                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreICO); 
            }
            //adding to pre ico sale for soft cap refunding
            if (EthersSentByBuyers[sender] == 0)
            {
                EthersSentByBuyers[sender] = amountSent;
                tokenBuyers.push(sender);
            }
            else 
            {
                EthersSentByBuyers[sender] = EthersSentByBuyers[sender].add(amountSent);
            }
            weiRaisedInPreICO = weiRaisedInPreICO.add(amountSent);
            token.addPreSaleBuyer(sender,tokens.add(bonus));
        }
        //break
        else if (timeElapsedInDays>=72 && timeElapsedInDays<83)
        {
            revert();
        }
        //main ico
        else if(timeElapsedInDays>=83)
        {
            require(amountSent<=maximumContributionInMainICO);
            bonus = 0;
        }
    }

  // low level token purchase function
  
  function buyTokens(address beneficiary) public payable {
    require(beneficiary != 0x0);
    require(isCrowdsalePaused == false);
    require(validPurchase());
    require(TOKENS_SOLD<maxTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x202500001020020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff6c580000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x1


