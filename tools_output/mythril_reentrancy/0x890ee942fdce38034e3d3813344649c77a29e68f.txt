==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LemonSelfDrop1
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 1163
Estimated Gas Usage: 23598 - 107504
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:221

ard[index] = values;

        donatorRewardLevels = levels;

    }

    

    function withdrawAll() public onlyOwner {

        owner.transfer(this.balance);

    }

    

    


--------------------
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d129380000000000000000000000000000000000000000000000000000000000000201ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LemonSelfDrop1
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 1167
Estimated Gas Usage: 23598 - 107504
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:221

ard[index] = values;

        donatorRewardLevels = levels;

    }

    

    function withdrawAll() public onlyOwner {

        owner.transfer(this.balance);

    }

    

    


--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d129388000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LemonSelfDrop1
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 1170
Estimated Gas Usage: 13458 - 57178
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:221

ard[index] = values;

        donatorRewardLevels = levels;

    }

    

    function withdrawAll() public onlyOwner {

        owner.transfer(this.balance);

    }

    

    


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d1293807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LemonSelfDrop1
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 1198
Estimated Gas Usage: 23598 - 107504
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:221

ard[index] = values;

        donatorRewardLevels = levels;

    }

    

    function withdrawAll() public onlyOwner {

        owner.transfer(this.balance);

    }

    

    


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d129380000000000000000000000000000000000000000000000000000000000000010ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LemonSelfDrop1
Function name: donatorBonus(uint256)
PC address: 1624
Estimated Gas Usage: 2148 - 2763
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:291
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: donatorBonus(uint256), txdata: 0x6aba2a0d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LemonSelfDrop1
Function name: withdrawKittenCoins()
PC address: 1922
Estimated Gas Usage: 10991 - 102192
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:251

  // Sends all other tokens that would have been sent to own

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawKittenCoins(), txdata: 0x316cb1b4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop1
Function name: withdrawKittenCoins()
PC address: 1968
Estimated Gas Usage: 10991 - 102192
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:251

le do that? We don't meow

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawKittenCoins(), txdata: 0x316cb1b4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop1
Function name: updateKittenCoinsRemainingToDrop()
PC address: 2151
Estimated Gas Usage: 7740 - 63387
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:275

atorBonus(uint256 amount) public returns (uint256) {


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateKittenCoinsRemainingToDrop(), txdata: 0x5adf292f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop1
Function name: setDropNumber(uint8)
PC address: 2497
Estimated Gas Usage: 13774 - 89751
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:199

erAmount(uint256 amount) public onlyOwner {

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop1
Function name: withdrawToken(address)
PC address: 2705
Estimated Gas Usage: 5488 - 77019
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:265

iningToDrop = LemonContract.

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LemonSelfDrop1
Function name: withdrawToken(address)
PC address: 2826
Estimated Gas Usage: 5488 - 77019
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:263

 public {

        LemonsRemainingToDrop = LemonContract.b

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LemonSelfDrop1
Function name: withdrawToken(address)
PC address: 2826
Estimated Gas Usage: 5488 - 77019
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/77ae6012b3bc65237cb88fd92b181287.sol:263

 public {

        LemonsRemainingToDrop = LemonContract.b

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: LemonSelfDrop1
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 3102
Estimated Gas Usage: 23598 - 107504
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc0004c0080191002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d129382000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: LemonSelfDrop1
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 3104
Estimated Gas Usage: 13458 - 57178
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d1293807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0