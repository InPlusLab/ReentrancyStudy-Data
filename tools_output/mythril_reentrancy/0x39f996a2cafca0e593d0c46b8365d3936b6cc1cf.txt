==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherauction
Function name: auction()
PC address: 1918
Estimated Gas Usage: 121288 - 520880
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:529

e < auctionValue) {

      revert("w

--------------------
Initial State:

Account: [CREATOR], balance: 0x84008800d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 1924
Estimated Gas Usage: 2001 - 2759
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:526




    if (msg.value < auctionValue) {

      revert("wrong eth value!

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: auction(), txdata: 0x7d9f6db5, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherauction
Function name: auction()
PC address: 2390
Estimated Gas Usage: 121288 - 520880
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:579

ction(gameId, msg.sender, msg.value, auctionValue, gameSecon

--------------------
Initial State:

Account: [CREATOR], balance: 0x40800002000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800002000000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2404
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:577



    emit GameAuction(gameId, msg.sender, msg.value, auctionValue, gameSecondLeft, block.timestamp);

  }




--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2408
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:587

mRewar

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2427
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2432
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2448
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:585

{

    _claimReward(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2488
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:585

{

    _claimReward(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2496
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:585

{

    _claimReward(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2505
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:585

{

    _claimReward(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2517
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:585

{

    _claimReward(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2557
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:585

{

    _claimReward(msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2559
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:593

functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2564
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:593

 _claimReward(address _add

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherauction
Function name: auction()
PC address: 2572
Estimated Gas Usage: 121288 - 520880
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:593

 _claimReward(address _addr, u

--------------------
Initial State:

Account: [CREATOR], balance: 0x200400180b5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2602
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:587

;

  }



  function _claimReward(address _addr, uint256 _id) interna

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2644
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:587

;

  }



  function _claimReward(address _addr, uint256 _id) interna

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2647
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:595

ameId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2660
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:595



      bool ended = (bloc

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherauction
Function name: auction()
PC address: 2668
Estimated Gas Usage: 121288 - 520880
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:595



      bool ended = (block.ti

--------------------
Initial State:

Account: [CREATOR], balance: 0x200400180b5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2701
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:595

if (_id == gameId) {

      bool ended = (block.timestamp > gameLastA

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2702
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:597

ndLeft

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2715
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:597

? true: false;

      if (

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherauction
Function name: auction()
PC address: 2723
Estimated Gas Usage: 121288 - 520880
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:597

? true: false;

      if (ende

--------------------
Initial State:

Account: [CREATOR], balance: 0x200400180b5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2758
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:597

e + gameSecondLeft) ? true: false;

      if (ended == false)

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2761
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:601

l on, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2774
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:601

nnot claim reward');

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherauction
Function name: auction()
PC address: 2779
Estimated Gas Usage: 121288 - 520880
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:601

nnot claim reward');

    }




--------------------
Initial State:

Account: [CREATOR], balance: 0x200400180b5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2812
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:601

game is still on, cannot claim reward');

    }



    uint _reward 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2826
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:601

game is still on, cannot claim reward');

    }



    uint _reward 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2829
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:609

ends =

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2842
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:609

;

    uint _myMoney = 0;


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherauction
Function name: auction()
PC address: 2847
Estimated Gas Usage: 121288 - 520880
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:609

;

    uint _myMoney = 0;

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x200400180b5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2878
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:609

 uint _dividends = 0;

    uint _myMoney = 0;

    uint _myDividends =

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2899
Estimated Gas Usage: 121288 - 520880
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:609

 uint _dividends = 0;

    uint _myMoney = 0;

    uint _myDividends =

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2902
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:617

    ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Etherauction
Function name: auction()
PC address: 2905
Estimated Gas Usage: 121288 - 520880
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:619

false;

    (_

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auction(), txdata: 0x7d9f6db5, value: 0xe35fa931a0000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherauction
Function name: getCurrGameInfo()
PC address: 3160
Estimated Gas Usage: 8109 - 9625
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:855

 _myMoney = _myMoney + gameAuct

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getCurrGameInfo(), txdata: 0xbb45d09d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Etherauction
Function name: getCurrGameInfo()
PC address: 3166
Estimated Gas Usage: 6079 - 6174
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:851

     }



          _myMoney = _myMoney + gameAuction[gameId][i].

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCurrGameInfo(), txdata: 0xbb45d09d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Etherauction
Function name: gameRoundEnd()
PC address: 4263
Estimated Gas Usage: 2096 - 2664
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:751

Auction[gameId].length > 1) {

      if (msg.sender == gameAuction[gam

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: gameRoundEnd(), txdata: 0xdd66111d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Etherauction
Function name: gameRoundEnd()
PC address: 4396
Estimated Gas Usage: 3853 - 4611
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: gameRoundEnd(), txdata: 0xdd66111d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Etherauction
Function name: getGameDataByIndex(uint256)
PC address: 4882
Estimated Gas Usage: 2177 - 2745
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4640000050004aa00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getGameDataByIndex(uint256), txdata: 0xf276f36bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherauction
Function name: claimReward(uint256)
PC address: 6944
Estimated Gas Usage: 8337 - 44858
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:635

 if (gameAuction[_id][k].addr == _ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimReward(uint256), txdata: 0xae169a500000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Etherauction
Function name: claimReward(uint256)
PC address: 6950
Estimated Gas Usage: 2770 - 2865
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0a08f57d709d4b36ce341164a772700c.sol:633

ngth; k++) {

      if (gameAuction[_id][k].addr == _addr) {

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1040000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claimReward(uint256), txdata: 0xae169a500000000000000000000000000000000000000000000000000000000000000001, value: 0x0


