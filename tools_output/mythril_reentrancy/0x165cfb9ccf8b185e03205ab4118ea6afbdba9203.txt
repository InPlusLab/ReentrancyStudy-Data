==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStampRegister
Function name: fallback
PC address: 1143
Estimated Gas Usage: 1946 - 5194
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x10800000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getAuditReportIPFS(address,bytes32), txdata: 0x1606a1c9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStampRegister
Function name: fallback
PC address: 1175
Estimated Gas Usage: 1946 - 5194
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x10840000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getAuditReportIPFS(address,bytes32), txdata: 0x1606a1c9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStampRegister
Function name: fallback
PC address: 1237
Estimated Gas Usage: 1946 - 5194
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:495

codeHash cannot be 0x0");

        requir

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getAuditReportIPFS(address,bytes32), txdata: 0x1606a1c9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStampRegister
Function name: getAuditOutcome(address,bytes32)
PC address: 1468
Estimated Gas Usage: 1611 - 4388
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x45, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getAuditOutcome(address,bytes32), txdata: 0x1f74de51, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 2539
Estimated Gas Usage: 29003 - 151691
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:751

 request from msg.sender to audit contract _codeHash by _auditor

            Audi

--------------------
Initial State:

Account: [CREATOR], balance: 0x140037a0430cca4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000200840000050, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000001000000000400004020400102010240100880000201408080108001808040404001000400800200000000000000000000000000000000000000000000000000000000000010, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 2768
Estimated Gas Usage: 29003 - 151691
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20040100000030234, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000040080108048008804001102020800000082080080400004000804000000400000100400010000000020010408000404002108000000000000000000000000000000000000000000000000000000000000010, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 2835
Estimated Gas Usage: 29003 - 151691
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:761

nder, _codeHash, msg.val

--------------------
Initial State:

Account: [CREATOR], balance: 0xe10b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000001100040047, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000008400800200201800080001000000000000000000000000010004040012040200080020820010120808001204004000804000000000000000000000000000000000000000000000000000000000021, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 2890
Estimated Gas Usage: 29003 - 151691
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:765

ady exists. Increasing value

            request.amoun

--------------------
Initial State:

Account: [CREATOR], balance: 0xe10b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000001100040047, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000008400800200201800080001000000000000000000000000010004040012040200080020820010120808001204004000804000000000000000000000000000000000000000000000000000000000021, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 2893
Estimated Gas Usage: 29003 - 151691
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:768


            // if 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe10b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000001100040047, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000008400800200201800080001000000000000000000000000010004040012040200080020820010120808001204004000804000000000000000000000000000000000000000000000000000000000021, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 2912
Estimated Gas Usage: 29003 - 151691
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:767

mount.add(msg.value);

            // if new expireDate 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe10b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000001100040047, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000008400800200201800080001000000000000000000000000010004040012040200080020820010120808001204004000804000000000000000000000000000000000000000000000000000000000021, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStampRegister
Function name: Audits(bytes32)
PC address: 3009
Estimated Gas Usage: 2513 - 3738
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:451

_codeHash contract code-hash

    functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: Audits(bytes32), txdata: 0xef100a79, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3020
Estimated Gas Usage: 29003 - 151691
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000040808000000004084001001080000000010020800100800880800000000040004040010000800180020004010240000110010004000000000000000000000000000000000000000000000000000000000004, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3088
Estimated Gas Usage: 29003 - 151691
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:775

d its expireDa

--------------------
Initial State:

Account: [CREATOR], balance: 0xe10b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000001100040047, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000008400800200201800080001000000000000000000000000010004040012040200080020820010120808001204004000804000000000000000000000000000000000000000000000000000000000021, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3141
Estimated Gas Usage: 29003 - 151691
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:779

  }

    }



    /// @notice withdraws an audit request

    /// @param _auditor the address of the auditor the request is directed to

    /// @param _cod

--------------------
Initial State:

Account: [CREATOR], balance: 0xe10b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000001100040047, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000008400800200201800080001000000000000000000000000010004040012040200080020820010120808001204004000804000000000000000000000000000000000000000000000000000000000021, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3151
Estimated Gas Usage: 29003 - 151691
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:779

  }

    }



    /// @notice withdraws an audit request

    /// @param _auditor the address of the auditor the request is directed to

    /// @param _cod

--------------------
Initial State:

Account: [CREATOR], balance: 0xe10b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000001100040047, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000008400800200201800080001000000000000000000000000010004040012040200080020820010120808001204004000804000000000000000000000000000000000000000000000000000000000021, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 5622
Estimated Gas Usage: 5343 - 43486
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:345

ewContract);




--------------------
Initial State:

Account: [CREATOR], balance: 0x202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000100014000000001000100000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003, value: 0x1

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 5623
Estimated Gas Usage: 5353 - 43496
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04a5fa79558b4ed659e88fffa73d8120.sol:345

ewContract);




--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000200000000000000000000008000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x1


