==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ListingsERC20
Function name: approveToken(address,uint256)
PC address: 1538
Estimated Gas Usage: 3563 - 39163
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:117

tokenContractAddress, uint256 price

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approveToken(address,uint256), txdata: 0x022fc88b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ListingsERC20
Function name: withdrawBalance()
PC address: 1915
Estimated Gas Usage: 3444 - 38385
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:111

n approveToken(address token, uint256 amount) onlyOwner external {
        assert(ERC20(token).ap

--------------------
Initial State:

Account: [CREATOR], balance: 0x12, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ListingsERC20
Function name: createListing(address,uint256,uint256,uint256,uint256)
PC address: 2212
Estimated Gas Usage: 36493 - 195747
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:141

 }

    function cancelListin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000001007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createListing(address,uint256,uint256,uint256,uint256), txdata: 0x9057f289000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaacaaacacacaaad01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ListingsERC20
Function name: createListing(address,uint256,uint256,uint256,uint256)
PC address: 2265
Estimated Gas Usage: 36493 - 195747
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:141

 }

    function cancelListin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000001007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createListing(address,uint256,uint256,uint256,uint256), txdata: 0x9057f289000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaacaaacacacaaad01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ListingsERC20
Function name: createListing(address,uint256,uint256,uint256,uint256)
PC address: 2283
Estimated Gas Usage: 36493 - 195747
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:141

 }

    function cancelListin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000001007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createListing(address,uint256,uint256,uint256,uint256), txdata: 0x9057f289000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaacaaacacacaaad01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ListingsERC20
Function name: createListing(address,uint256,uint256,uint256,uint256)
PC address: 2336
Estimated Gas Usage: 36493 - 195747
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:141

 }

    function cancelListin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000001007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createListing(address,uint256,uint256,uint256,uint256), txdata: 0x9057f289000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaacaaacacacaaad01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ListingsERC20
Function name: createListing(address,uint256,uint256,uint256,uint256)
PC address: 2347
Estimated Gas Usage: 36493 - 195747
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:141

 }

    function cancelListin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000001007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createListing(address,uint256,uint256,uint256,uint256), txdata: 0x9057f289000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaacaaacacacaaad01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ListingsERC20
Function name: createListing(address,uint256,uint256,uint256,uint256)
PC address: 2357
Estimated Gas Usage: 36493 - 195747
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:141

 }

    function cancelListin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000001007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createListing(address,uint256,uint256,uint256,uint256), txdata: 0x9057f289000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaacaaacacacaaad01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ListingsERC20
Function name: createListing(address,uint256,uint256,uint256,uint256)
PC address: 2367
Estimated Gas Usage: 36493 - 195747
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:141

 }

    function cancelListin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000001007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createListing(address,uint256,uint256,uint256,uint256), txdata: 0x9057f289000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaacaaacacacaaad01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ListingsERC20
Function name: createListing(address,uint256,uint256,uint256,uint256)
PC address: 2377
Estimated Gas Usage: 36493 - 195747
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:141

 }

    function cancelListin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000001007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createListing(address,uint256,uint256,uint256,uint256), txdata: 0x9057f289000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaacaaacacacaaad01, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ListingsERC20
Function name: buyListing(bytes32,uint256)
PC address: 3044
Estimated Gas Usage: 4779 - 5724
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:158

t);
        //make sure that the

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: buyListing(bytes32,uint256), txdata: 0xb9247673, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ListingsERC20
Function name: buyListing(bytes32,uint256)
PC address: 3458
Estimated Gas Usage: 19179 - 179766
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:169

  }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000063fb9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyListing(bytes32,uint256), txdata: 0xb9247673, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ListingsERC20
Function name: buyListing(bytes32,uint256)
PC address: 3510
Estimated Gas Usage: 19179 - 179766
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:168

ice, amount, now, msg.sender);
    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000063fb9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyListing(bytes32,uint256), txdata: 0xb9247673, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ListingsERC20
Function name: buyListing(bytes32,uint256)
PC address: 3575
Estimated Gas Usage: 19179 - 179766
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:171
Initial State:

Account: [CREATOR], balance: 0x80000063fb9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyListing(bytes32,uint256), txdata: 0xb9247673, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ListingsERC20
Function name: createListing(address,uint256,uint256,uint256,uint256)
PC address: 4647
Estimated Gas Usage: 36493 - 195747
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:127

, address listingContract) internal constant returns 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000001007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createListing(address,uint256,uint256,uint256,uint256), txdata: 0x9057f289000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000aaaaaaaaaaaaaaaaaaacaaacacacaaad01, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ListingsERC20
Function name: buyListing(bytes32,uint256)
PC address: 4953
Estimated Gas Usage: 19179 - 179766
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/f5eb73bed823f061afd82e6e387b59a6.sol:131

Address, uint256 price, uint256 allowance, uint256 dateEnds, uint256 s

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000042e29, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyListing(bytes32,uint256), txdata: 0xb9247673, value: 0x0