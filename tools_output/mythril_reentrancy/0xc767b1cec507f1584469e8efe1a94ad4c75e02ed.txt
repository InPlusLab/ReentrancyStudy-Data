==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PremiumFactories
Function name: addPremiumUnit(address)
PC address: 764
Estimated Gas Usage: 8618 - 65350
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:253

re(premiumUni

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addPremiumUnit(address), txdata: 0x4c78c6eb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PremiumFactories
Function name: addPremiumUnit(address)
PC address: 823
Estimated Gas Usage: 8618 - 65350
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:253

        require(premiumUnits[unitI

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addPremiumUnit(address), txdata: 0x4c78c6eb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PremiumFactories
Function name: addPremiumUnit(address)
PC address: 864
Estimated Gas Usage: 8618 - 65350
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:253

        require(premiumUnits[unitI

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addPremiumUnit(address), txdata: 0x4c78c6eb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: PremiumFactories
Function name: purchaseFactory(uint256)
PC address: 1403
Estimated Gas Usage: 372 - 1790
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:84


        require(now >= LAUNCH_T

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: purchaseFactory(uint256), txdata: 0xd0836521, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PremiumFactories
Function name: purchaseFactory(uint256)
PC address: 1435
Estimated Gas Usage: 1222 - 2640
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:89

iumFactories[factoryId];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: purchaseFactory(uint256), txdata: 0xd0836521, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: PremiumFactories
Function name: purchaseFactory(uint256)
PC address: 1535
Estimated Gas Usage: 5514 - 8115
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:95

ryPrice = getFactoryPrice(factory);

        req

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: purchaseFactory(uint256), txdata: 0xd0836521, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: PremiumFactories
Function name: addFactory(uint256,uint256,address,uint256)
PC address: 2863
Estimated Gas Usage: 1297 - 3375
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:261

.unitId = unitId;

        n

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addFactory(uint256,uint256,address,uint256), txdata: 0xf2844755, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PremiumFactories
Function name: addFactory(uint256,uint256,address,uint256)
PC address: 3133
Estimated Gas Usage: 30850 - 169895
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:285

 produced by a factory (since las

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addFactory(uint256,uint256,address,uint256), txdata: 0xf28447550000000000000000000000000000000000000000000000000000000000000000dca56553, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PremiumFactories
Function name: addFactory(uint256,uint256,address,uint256)
PC address: 3164
Estimated Gas Usage: 30850 - 169895
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:285

 produced by a factory (since las

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addFactory(uint256,uint256,address,uint256), txdata: 0xf28447550000000000000000000000000000000000000000000000000000000000000000dca56553, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PremiumFactories
Function name: addFactory(uint256,uint256,address,uint256)
PC address: 3171
Estimated Gas Usage: 30850 - 169895
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:285

 produced by a factory (since las

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addFactory(uint256,uint256,address,uint256), txdata: 0xf28447550000000000000000000000000000000000000000000000000000000000000000dca56553, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PremiumFactories
Function name: addFactory(uint256,uint256,address,uint256)
PC address: 3180
Estimated Gas Usage: 30850 - 169895
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:285

 produced by a factory (since las

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addFactory(uint256,uint256,address,uint256), txdata: 0xf28447550000000000000000000000000000000000000000000000000000000000000000dca56553, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PremiumFactories
Function name: addFactory(uint256,uint256,address,uint256)
PC address: 3186
Estimated Gas Usage: 30850 - 169895
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:285

 produced by a factory (since las

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addFactory(uint256,uint256,address,uint256), txdata: 0xf28447550000000000000000000000000000000000000000000000000000000000000000dca56553, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PremiumFactories
Function name: addFactory(uint256,uint256,address,uint256)
PC address: 3194
Estimated Gas Usage: 30850 - 169895
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:285

 produced by a factory (since las

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addFactory(uint256,uint256,address,uint256), txdata: 0xf28447550000000000000000000000000000000000000000000000000000000000000000dca56553, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PremiumFactories
Function name: getFactories(uint256)
PC address: 3216
Estimated Gas Usage: 5542 - 22251
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:165

     uint256 priceReduction = (secondsSinceLastFlip * dailyDegradation * factory.price) / 86400000;

        

        factoryPrice = factory.pri

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getFactories(uint256), txdata: 0x5a2587f401, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PremiumFactories
Function name: getFactories(uint256)
PC address: 3246
Estimated Gas Usage: 17094 - 41415
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:171

factoryPrice - priceReduction < minPric

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getFactories(uint256), txdata: 0x5a2587f40000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PremiumFactories
Function name: getFactories(uint256)
PC address: 3257
Estimated Gas Usage: 6442 - 23337
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:177

uction;

        }

    }

    

    function getFactories(uint256 endId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getFactories(uint256), txdata: 0x5a2587f401, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PremiumFactories
Function name: getFactories(uint256)
PC address: 3271
Estimated Gas Usage: 7276 - 24171
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a5e8a77354c7122b9940c42996917e07.sol:177

eReduction;

        }

    }

    

    function getFactories(uint256 endId) external view returns (uint256[] factoryIds, address[] owners, uint256[] unitIds, uint256[] prices, uint256[] lastClaimTim

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getFactories(uint256), txdata: 0x5a2587f401, value: 0x0