==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getBattleCardList(address)
PC address: 1088
Estimated Gas Usage: 5938 - 78449
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:231

owner,

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getBattleCardList(address), txdata: 0x584ed064, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CardsRead
Function name: getBattleCardList(address)
PC address: 1216
Estimated Gas Usage: 5938 - 78449
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:231

owner,startId)>=1) {

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getBattleCardList(address), txdata: 0x584ed064, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CardsRead
Function name: getBattleCardList(address)
PC address: 1216
Estimated Gas Usage: 5938 - 78449
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:231

owner,startId)>=1) {

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9, value: 0x0
Caller: [ATTACKER], function: getBattleCardList(address), txdata: 0x584ed064, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getBattleCardList(address)
PC address: 1216
Estimated Gas Usage: 5938 - 78449
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:231

owner,startId)>=1) {

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getBattleCardList(address), txdata: 0x584ed064, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 2201
Estimated Gas Usage: 10283 - 150797
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:263

 preValue = schema.unitCoinProduct

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 2797
Estimated Gas Usage: 10283 - 150797
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:285

  = p

--------------------
Initial State:

Account: [CREATOR], balance: 0x80019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 2989
Estimated Gas Usage: 10283 - 150797
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:285

  = preValue + productionGain;

     } else if (upgr

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 2989
Estimated Gas Usage: 10283 - 150797
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:285

  = preValue + productionGain;

     } else if (upgr

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75, value: 0x0
Caller: [ATTACKER], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 2989
Estimated Gas Usage: 10283 - 150797
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:285

  = preValue + productionGain;

     } else if (upgr

--------------------
Initial State:

Account: [CREATOR], balance: 0x80019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3019
Estimated Gas Usage: 10283 - 150797
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:283

getUi

--------------------
Initial State:

Account: [CREATOR], balance: 0x80019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3211
Estimated Gas Usage: 10283 - 150797
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:283

getUintCoinProduction(player,unitI

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3211
Estimated Gas Usage: 10283 - 150797
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:283

getUintCoinProduction(player,unitI

--------------------
Initial State:

Account: [CREATOR], balance: 0x80019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3233
Estimated Gas Usage: 10283 - 150797
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:283

getUintCoinProduction(player,unitId);

        af

--------------------
Initial State:

Account: [CREATOR], balance: 0x520004a1045008946, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75, value: 0x0
Caller: [SOMEGUY], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef3f3f3f3f3f3f3f3f3f3f3f3f000080008040000008010202100140043f3f3f3f00000000000000000000000000000000000000000000000000000000000000003f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f40, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3241
Estimated Gas Usage: 10283 - 150797
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:289

 prod

--------------------
Initial State:

Account: [CREATOR], balance: 0x80019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3433
Estimated Gas Usage: 10283 - 150797
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:289

 productionGain = (cards.getOwnedCount(pla

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3433
Estimated Gas Usage: 10283 - 150797
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:289

 productionGain = (cards.getOwnedCount(pla

--------------------
Initial State:

Account: [CREATOR], balance: 0x80019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3480
Estimated Gas Usage: 10283 - 150797
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:293

reVal

--------------------
Initial State:

Account: [CREATOR], balance: 0x80019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3672
Estimated Gas Usage: 10283 - 150797
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:293

reValue + productionGain;

     }

    }

  }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3672
Estimated Gas Usage: 10283 - 150797
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:293

reValue + productionGain;

     }

    }

  }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x80019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getUpgradeValue(address,uint256,uint256,uint256)
PC address: 3699
Estimated Gas Usage: 10283 - 150797
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:291

r,unit

--------------------
Initial State:

Account: [CREATOR], balance: 0x80019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCardsAddress(address), txdata: 0x6cdb1b75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getUpgradeValue(address,uint256,uint256,uint256), txdata: 0x832e02ef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getNormalCardList(address)
PC address: 4604
Estimated Gas Usage: 6048 - 78559
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:187

 (card

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getNormalCardList(address), txdata: 0x9e58ad97, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CardsRead
Function name: getNormalCardList(address)
PC address: 4732
Estimated Gas Usage: 6048 - 78559
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:187

 (cards.getOwnedCount(_owner,s

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getNormalCardList(address), txdata: 0x9e58ad97, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CardsRead
Function name: getNormalCardList(address)
PC address: 4732
Estimated Gas Usage: 6048 - 78559
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:187

 (cards.getOwnedCount(_owner,s

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9, value: 0x0
Caller: [ATTACKER], function: getNormalCardList(address), txdata: 0x9e58ad97, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CardsRead
Function name: getNormalCardList(address)
PC address: 4732
Estimated Gas Usage: 6048 - 78559
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:187

 (cards.getOwnedCount(_owner,s

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getNormalCardList(address), txdata: 0x9e58ad97, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CardsRead
Function name: getBattleCardList(address)
PC address: 5496
Estimated Gas Usage: 5938 - 78449
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:151

endId) {

      if (cards.

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getBattleCardList(address), txdata: 0x584ed064, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CardsRead
Function name: getNormalCardList(address)
PC address: 5941
Estimated Gas Usage: 6048 - 78559
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4651e0696698cd170723954e90be6555.sol:123

while (startId <= endId) {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setConfigAddress(address), txdata: 0x83a12de9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getNormalCardList(address), txdata: 0x9e58ad97, value: 0x0