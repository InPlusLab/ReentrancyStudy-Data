==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TestBancorTradeBNBETH
Function name: trade(address[],uint256,uint256)
PC address: 125
Estimated Gas Usage: 6385 - 80569
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ec32d6f0544157b186b2888e1f20b0d.sol:73

256 _amount, uint256 _minReturn) {

        ERC20 src = ERC20(0xB8c77482e45F1F44dE1745F52C74426C631bDD52);

        src.approve(bancorTradingContract, _amount);

        

        uint256 destAmount = bancorTradingContract.quickConvert(_path, _amount, _minReturn);

        

        Trade(_amount, destAmount);

    }

    

    function getBack() {

        m

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: trade(address[],uint256,uint256), txdata: 0x7b56808180, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TestBancorTradeBNBETH
Function name: fallback
PC address: 528
Estimated Gas Usage: 3380 - 73168
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ec32d6f0544157b186b2888e1f20b0d.sol:105

 }

    

    // Receive ETH in case of trade

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getBack2(), txdata: 0x5368cc55, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TestBancorTradeBNBETH
Function name: trade(address[],uint256,uint256)
PC address: 724
Estimated Gas Usage: 6385 - 80569
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ec32d6f0544157b186b2888e1f20b0d.sol:81

, _amount, _minReturn

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: trade(address[],uint256,uint256), txdata: 0x7b56808180, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TestBancorTradeBNBETH
Function name: trade(address[],uint256,uint256)
PC address: 847
Estimated Gas Usage: 6385 - 80569
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ec32d6f0544157b186b2888e1f20b0d.sol:81

, _amount, _minReturn);

        

        Trade(_amount, dest

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: trade(address[],uint256,uint256), txdata: 0x7b56808180, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TestBancorTradeBNBETH
Function name: trade(address[],uint256,uint256)
PC address: 919
Estimated Gas Usage: 6385 - 80569
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ec32d6f0544157b186b2888e1f20b0d.sol:81

, _amount, _minReturn);

        

        Trade(_amount, dest

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: trade(address[],uint256,uint256), txdata: 0x7b56808180, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TestBancorTradeBNBETH
Function name: trade(address[],uint256,uint256)
PC address: 919
Estimated Gas Usage: 6385 - 80569
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ec32d6f0544157b186b2888e1f20b0d.sol:81

, _amount, _minReturn);

        

        Trade(_amount, dest

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: trade(address[],uint256,uint256), txdata: 0x7b56808180, value: 0x0


