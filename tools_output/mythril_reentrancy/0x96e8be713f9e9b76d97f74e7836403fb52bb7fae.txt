mythril.mythril.mythril_analyzer [CRITICAL]: Exception occurred, aborting analysis. Please report this issue to the Mythril GitHub page.
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/mythril/mythril_analyzer.py", line 149, in fire_lasers
    sym = SymExecWrapper(
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/analysis/symbolic.py", line 163, in __init__
    self.laser.sym_exec(
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/svm.py", line 175, in sym_exec
    self._execute_transactions(created_account.address)
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/svm.py", line 216, in _execute_transactions
    execute_message_call(self, address)
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/transaction/symbolic.py", line 108, in execute_message_call
    laser_evm.exec()
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/svm.py", line 253, in exec
    new_states, op_code = self.execute_state(global_state)
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/svm.py", line 341, in execute_state
    new_global_states = Instruction(
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/instructions.py", line 263, in evaluate
    result = instruction_mutator(global_state)
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/instructions.py", line 195, in wrapper
    new_global_states = self.call_on_state_copy(func, func_obj, global_state)
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/instructions.py", line 130, in call_on_state_copy
    return func(func_obj, global_state_copy)
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/instructions.py", line 903, in balance_
    balance = global_state.world_state.accounts_exist_or_load(
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/laser/ethereum/state/world_state.py", line 115, in accounts_exist_or_load
    code=dynamic_loader.dynld(addr),
  File "/usr/local/lib/python3.8/dist-packages/mythril-0.22.26-py3.8.egg/mythril/support/loader.py", line 67, in dynld
    raise ValueError("Cannot load from the chain when eth is None")
ValueError: Cannot load from the chain when eth is None

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BasicToken
Function name: transferToContract(address,uint256,uint256)
PC address: 549
Estimated Gas Usage: 17337 - 95416
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/99eef69d9eb1428a25cc7db1bce3aaf4.sol:395

allet=0x0741D740A50efbeae1A4d9e6c3e7887e23dc160

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferToContract(address,uint256,uint256), txdata: 0x95f847fd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 1058
Estimated Gas Usage: 17403 - 95812
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/99eef69d9eb1428a25cc7db1bce3aaf4.sol:305

the amount owned by the passed address.

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: VTK
Function name: unhalt_30day()
PC address: 5461
Estimated Gas Usage: 7257 - 27682
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/99eef69d9eb1428a25cc7db1bce3aaf4.sol:217

6;



  mappin

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unhalt_30day(), txdata: 0x8c00ce76, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VTK
Function name: Apply(address,uint256)
PC address: 5462
Estimated Gas Usage: 2255 - 3530
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/99eef69d9eb1428a25cc7db1bce3aaf4.sol:217

6;



  mappin

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Apply(address,uint256), txdata: 0x59470163000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffefffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VTK
Function name: unhalt_30day()
PC address: 5462
Estimated Gas Usage: 7267 - 27692
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/99eef69d9eb1428a25cc7db1bce3aaf4.sol:217

6;



  mappin

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unhalt_30day(), txdata: 0x8c00ce76, value: 0x0