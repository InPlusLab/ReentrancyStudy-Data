==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: constructor
PC address: 390
Estimated Gas Usage: 23007 - 107049
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:141

ich is being veste

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000201020100404801001044010400404048002080188bd7e29a57805b0ff2c34522c3d4555d1b6d86a5756150ca541e39662179a0e818481e8a512c492404004af682143341118884a52421844890254c332308684c0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: release(address) or release(address)
PC address: 1230
Estimated Gas Usage: 16049 - 107366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:151

er to revoke th

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040100020001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: release(address) or release(address)
PC address: 1310
Estimated Gas Usage: 16049 - 107366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:151

ice Allows the owner to revoke the vesting. Token

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040100020001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: release(address) or release(address)
PC address: 1320
Estimated Gas Usage: 16049 - 107366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:152

in in the c

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040100020001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ShortVesting
Function name: vestedAmount(address) or vestedAmount(address)
PC address: 1621
Estimated Gas Usage: 5557 - 40873
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:181

ed[token]) {
      re

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000e8091, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ShortVesting
Function name: releasableAmount(address) or releasableAmount(address)
PC address: 1621
Estimated Gas Usage: 6547 - 42053
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:181

ed[token]) {
      re

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000941, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ShortVesting
Function name: release(address) or release(address)
PC address: 1621
Estimated Gas Usage: 16049 - 107366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:181

ed[token]) {
      re

--------------------
Initial State:

Account: [CREATOR], balance: 0x100040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: vestedAmount(address) or vestedAmount(address)
PC address: 1711
Estimated Gas Usage: 5557 - 40873
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:184

lBalance.mul(no

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000001a293, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000040, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: releasableAmount(address) or releasableAmount(address)
PC address: 1711
Estimated Gas Usage: 6547 - 42053
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:184

lBalance.mul(no

--------------------
Initial State:

Account: [CREATOR], balance: 0xc505, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc8080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: release(address) or release(address)
PC address: 1711
Estimated Gas Usage: 16049 - 107366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:184

lBalance.mul(no

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040100020001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: vestedAmount(address) or vestedAmount(address)
PC address: 1731
Estimated Gas Usage: 5557 - 40873
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:184

durat

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000001a293, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000040, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: releasableAmount(address) or releasableAmount(address)
PC address: 1731
Estimated Gas Usage: 6547 - 42053
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:184

durat

--------------------
Initial State:

Account: [CREATOR], balance: 0xc505, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc8080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: release(address) or release(address)
PC address: 1731
Estimated Gas Usage: 16049 - 107366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:184

durat

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040100020001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ShortVesting
Function name: vestedAmount(address) or vestedAmount(address)
PC address: 1738
Estimated Gas Usage: 3698 - 38733
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:184

art)).div(duration);
    }
  }
}
contract ShortVesting is TokenVesting {
    function ShortVesting(address _beneficiary) TokenVesting(
            _beneficiary,
            1522540800,
            0,
          

--------------------
Initial State:

Account: [CREATOR], balance: 0x12223, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: vestedAmount(address) or vestedAmount(address)
PC address: 1753
Estimated Gas Usage: 5557 - 40873
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:188

g {
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000001a293, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000040, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: releasableAmount(address) or releasableAmount(address)
PC address: 1753
Estimated Gas Usage: 6547 - 42053
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:188

g {
    

--------------------
Initial State:

Account: [CREATOR], balance: 0xc505, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc8080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: vestedAmount(address) or vestedAmount(address)
PC address: 1756
Estimated Gas Usage: 5557 - 40873
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:188

okenV

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000001a293, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000040, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: releasableAmount(address) or releasableAmount(address)
PC address: 1756
Estimated Gas Usage: 6547 - 42053
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:188

okenV

--------------------
Initial State:

Account: [CREATOR], balance: 0xc505, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc8080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ShortVesting
Function name: vestedAmount(address) or vestedAmount(address)
PC address: 1778
Estimated Gas Usage: 5440 - 40475
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:188

ng is TokenVesting {
    function ShortVesti

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ShortVesting
Function name: vestedAmount(address) or vestedAmount(address)
PC address: 1862
Estimated Gas Usage: 5457 - 40492
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:188

esting is TokenVesting {
    function ShortVesting(address _beneficiary) TokenVesting(
            _beneficiary,
            1522540800,
            0,
          

--------------------
Initial State:

Account: [CREATOR], balance: 0x8043, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ShortVesting
Function name: release(address) or release(address)
PC address: 3318
Estimated Gas Usage: 16049 - 107366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:65

C20 token, address from, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x100040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ShortVesting
Function name: release(address) or release(address)
PC address: 3318
Estimated Gas Usage: 16049 - 107366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:65

C20 token, address from, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x810800000028d7, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x19165587, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ShortVesting
Function name: release(address) or release(address)
PC address: 3318
Estimated Gas Usage: 16049 - 107366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cf07f6fb5d4cc6703fa0d161408c9ba3.sol:65

C20 token, address from, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040100020001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0