==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Vitalik2XToken
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 3076
Estimated Gas Usage: 1269 - 1554
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:359

allowed[_from][msg.sender].sub(_value);

        emit Transfer(_from,

--------------------
Initial State:

Account: [CREATOR], balance: 0x181080000000601, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vitalik2XToken
Function name: withdrawToken(address)
PC address: 5456
Estimated Gas Usage: 5545 - 75519
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:259

THBalance.mul(amountO

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vitalik2XToken
Function name: withdrawToken(address)
PC address: 5648
Estimated Gas Usage: 5545 - 75519
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:259

mountBuying = mainPotETHBalance.mul(amountOf

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Vitalik2XToken
Function name: withdrawToken(address)
PC address: 5648
Estimated Gas Usage: 5545 - 75519
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:259

mountBuying = mainPotETHBalance.mul(amountOf

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Vitalik2XToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 6563
Estimated Gas Usage: 1521 - 1806
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:307

.sender` and trigger
    /// tokenFallback if sender is a contract.
    //

--------------------
Initial State:

Account: [CREATOR], balance: 0x148002002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 7992
Estimated Gas Usage: 2376 - 2851
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:370

fers sender's tokens to a

--------------------
Initial State:

Account: [CREATOR], balance: 0x422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffefffffffffffffffffffffffffffffffffffffffffffffffff4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: donateTokensToMainPot(uint256)
PC address: 8017
Estimated Gas Usage: 1498 - 1783
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:383

nt have enough tokens.");
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: donateTokensToMainPot(uint256), txdata: 0x956283d501, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 8017
Estimated Gas Usage: 2555 - 3030
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:383

nt have enough tokens.");
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000000000005, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 8017
Estimated Gas Usage: 8470 - 29325
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:370

ss.
    /// @param _to Addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000020000000000000000000000000000000000000000000000000000000800c00044020800280000008080001000008202041, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: transfer(address,uint256,bytes) or transfer(address,uint256,bytes) or transfer(address,uint256,bytes)
PC address: 8017
Estimated Gas Usage: 2913 - 5975
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:383

nt have enough tokens.");
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000f6473, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256,bytes), txdata: 0xbe45fd62000000000000000000000000000000000000000000000000200000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: tokenSliceAmount(uint256)
PC address: 8106
Estimated Gas Usage: 2093 - 2188
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:283

tokenSliceCap() public view returns (uint256) {
        ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000003c31, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: tokenSliceAmount(uint256), txdata: 0x2d578a66, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: buyTokensFromPot()
PC address: 8106
Estimated Gas Usage: 2130 - 2225
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:283

tokenSliceCap() public view returns (uint256) {
        ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x400080000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyTokensFromPot(), txdata: 0x49169f09, value: 0x1

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: tokenSlicePercentage(uint256)
PC address: 8106
Estimated Gas Usage: 2161 - 2256
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:283

tokenSliceCap() public view returns (uint256) {
        ret

--------------------
Initial State:

Account: [CREATOR], balance: 0xc01400f06c1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: tokenSlicePercentage(uint256), txdata: 0x48ca92fc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: sellTokensToPot(uint256)
PC address: 8106
Estimated Gas Usage: 2249 - 2344
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:264

 allotted.
    function ethSliceCap() public view returns (uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sellTokensToPot(uint256), txdata: 0x8960c1c7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: ethSliceAmount(uint256)
PC address: 8106
Estimated Gas Usage: 2467 - 2562
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:264

 allotted.
    function ethSliceCap() public view returns (uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x40101080000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ethSliceAmount(uint256), txdata: 0xca5fc2e8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vitalik2XToken
Function name: ethSlicePercentage(uint256)
PC address: 8106
Estimated Gas Usage: 2601 - 2696
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:264

 allotted.
    function ethSliceCap() public view returns (uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ethSlicePercentage(uint256), txdata: 0xf7897017, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Vitalik2XToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 8756
Estimated Gas Usage: 3372 - 3847
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:395

        totalSupply = totalSupply.add(_amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x2002900, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Vitalik2XToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 8768
Estimated Gas Usage: 16637 - 61087
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:394

eturns (bool) {
        totalSupply = totalSupply.add(_amoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1a810000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256,bytes), txdata: 0xbe45fd62, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Vitalik2XToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 8840
Estimated Gas Usage: 28348 - 110591
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:396

ances[_address].add(

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Vitalik2XToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 8911
Estimated Gas Usage: 9416 - 30271
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:396

  balances[_address] = balances[_address].add(_amount);
        return true;
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Vitalik2XToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 8916
Estimated Gas Usage: 28348 - 110591
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/518967cde477ebbe1d0a63affb749115.sol:399

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0