==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Trader
Function name: fallback
PC address: 416
Estimated Gas Usage: 1870 - 37468
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:218
Initial State:

Account: [CREATOR], balance: 0x20001000400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d9, value: 0x0
Caller: [SOMEGUY], function: getTokenBalance(address), txdata: 0x3aecd0e3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Trader
Function name: u2kArb(address,address,uint256)
PC address: 416
Estimated Gas Usage: 7321 - 79186
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:218
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: u2kArb(address,address,uint256), txdata: 0x9452c32f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Trader
Function name: kyberToUniSwapArb(address,address,uint256)
PC address: 416
Estimated Gas Usage: 9800 - 116371
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:218
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Trader
Function name: u2kArb(address,address,uint256)
PC address: 416
Estimated Gas Usage: 7321 - 79186
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:218
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: u2kArb(address,address,uint256), txdata: 0x9452c32f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Trader
Function name: kyberToUniSwapArb(address,address,uint256)
PC address: 416
Estimated Gas Usage: 9800 - 116371
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:218
Initial State:

Account: [CREATOR], balance: 0x40028808001000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Trader
Function name: fallback
PC address: 416
Estimated Gas Usage: 1870 - 37468
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:218
Initial State:

Account: [CREATOR], balance: 0x1a041a10900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x1
Caller: [ATTACKER], function: getTokenBalance(address), txdata: 0x3aecd0e3, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Trader
Function name: withdrawETHAndTokens()
PC address: 651
Estimated Gas Usage: 10712 - 184802
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:207

  saiToken.transfer(msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawETHAndTokens(), txdata: 0x80576f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Trader
Function name: withdrawETHAndTokens()
PC address: 847
Estimated Gas Usage: 10712 - 184802
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:212

iew return

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawETHAndTokens(), txdata: 0x80576f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Trader
Function name: withdrawETHAndTokens()
PC address: 952
Estimated Gas Usage: 10712 - 184802
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:213

tokenAddress);
        u

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawETHAndTokens(), txdata: 0x80576f75, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Trader
Function name: withdrawETHAndTokens()
PC address: 1104
Estimated Gas Usage: 10712 - 184802
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:214

ntBalance = token.balanceOf(this);
        retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawETHAndTokens(), txdata: 0x80576f75, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Trader
Function name: u2kArb(address,address,uint256)
PC address: 1305
Estimated Gas Usage: 7321 - 79186
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:185

       swapEtherToToken1 (address1, ethBack);
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: u2kArb(address,address,uint256), txdata: 0x9452c32f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Trader
Function name: kyberToUniSwapArb(address,address,uint256)
PC address: 1541
Estimated Gas Usage: 9800 - 116371
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:178

t) public payable onlyOwner returns (bool){ 

        addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x10110080211200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Trader
Function name: kyberToUniSwapArb(address,address,uint256)
PC address: 1541
Estimated Gas Usage: 9800 - 116371
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:178

t) public payable onlyOwner returns (bool){ 

        addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Trader
Function name: u2kArb(address,address,uint256)
PC address: 1616
Estimated Gas Usage: 7321 - 79186
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:129

0, 0x

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: u2kArb(address,address,uint256), txdata: 0x9452c32f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Trader
Function name: u2kArb(address,address,uint256)
PC address: 1775
Estimated Gas Usage: 7321 - 79186
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:129

0, 0x0000000000000000000000000000000000000000, PERM_HINT);

     //send received tokens to destination address
     //require(token.transfer(destAddress, destAmount));
     return destA

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: u2kArb(address,address,uint256), txdata: 0x9452c32f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Trader
Function name: u2kArb(address,address,uint256)
PC address: 1789
Estimated Gas Usage: 7321 - 79186
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:129

0, 0x0000000000000000000000000000000000000000, PERM_HINT);

     //send received tokens to destination address
     //require(token.transfer(destAddress, destAmount));
     return destA

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: u2kArb(address,address,uint256), txdata: 0x9452c32f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Trader
Function name: u2kArb(address,address,uint256)
PC address: 1855
Estimated Gas Usage: 7321 - 79186
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:129

0, 0x0000000000000000000000000000000000000000, PERM_HINT);

     //send received tokens to destination address
     //require(token.transfer(destAddress, destAmount));
     return destA

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: u2kArb(address,address,uint256), txdata: 0x9452c32f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Trader
Function name: kyberToUniSwapArb(address,address,uint256)
PC address: 2065
Estimated Gas Usage: 9800 - 116371
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:153

000000000000000000000000000000000000000

--------------------
Initial State:

Account: [CREATOR], balance: 0x10800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Trader
Function name: kyberToUniSwapArb(address,address,uint256)
PC address: 2110
Estimated Gas Usage: 9800 - 116371
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:153

00000

--------------------
Initial State:

Account: [CREATOR], balance: 0x40028808001000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Trader
Function name: kyberToUniSwapArb(address,address,uint256)
PC address: 2271
Estimated Gas Usage: 9800 - 116371
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:153

000000000000000000004, PERM_HINT);

       return destAmount;
      //uint destAmount = proxy.swapTokenToEther(token, tokenQty, minRate);

     // Send received ethers to destination ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x40028808001000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Trader
Function name: kyberToUniSwapArb(address,address,uint256)
PC address: 2285
Estimated Gas Usage: 9800 - 116371
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:153

000000000000000000004, PERM_HINT);

       return destAmount;
      //uint destAmount = proxy.swapTokenToEther(token, tokenQty, minRate);

     // Send received ethers to destination ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Trader
Function name: kyberToUniSwapArb(address,address,uint256)
PC address: 2353
Estimated Gas Usage: 9800 - 116371
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e3fa0d0a98858101091b81a262d39952.sol:153

000000000000000000004, PERM_HINT);

       return destAmount;
      //uint destAmount = proxy.swapTokenToEther(token, tokenQty, minRate);

     // Send received ethers to destination ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x40028808001000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kyberToUniSwapArb(address,address,uint256), txdata: 0xb74557d9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0