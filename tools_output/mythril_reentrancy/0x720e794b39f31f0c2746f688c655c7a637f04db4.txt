==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CNCICO
Function name: contribute()
PC address: 1384
Estimated Gas Usage: 15384 - 55859
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:183

dated
            require(Pr

--------------------
Initial State:

Account: [CREATOR], balance: 0x28800000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CNCICO
Function name: claimTokensByAdmin(address)
PC address: 2178
Estimated Gas Usage: 16457 - 97166
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:319

k their eth
        //If funding fail

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: claimTokensByAdmin(address), txdata: 0x2e6b921c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CNCICO
Function name: claimTokensByAdmin(address)
PC address: 2255
Estimated Gas Usage: 16457 - 97166
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:322

tokens already sent

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: claimTokensByAdmin(address), txdata: 0x2e6b921c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CNCICO
Function name: claimTokensByAdmin(address)
PC address: 2303
Estimated Gas Usage: 16457 - 97166
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:322

We take the amount of tokens already sent to user
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: claimTokensByAdmin(address), txdata: 0x2e6b921c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CNCICO
Function name: externalTokensRecovery(address)
PC address: 2521
Estimated Gas Usage: 5344 - 76735
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:368
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: externalTokensRecovery(address), txdata: 0x4c801cee000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CNCICO
Function name: externalTokensRecovery(address)
PC address: 2651
Estimated Gas Usage: 5344 - 76735
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:368
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: externalTokensRecovery(address), txdata: 0x4c801cee000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CNCICO
Function name: externalTokensRecovery(address)
PC address: 2651
Estimated Gas Usage: 5344 - 76735
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:368
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: externalTokensRecovery(address), txdata: 0x4c801cee00000000000000000000000004, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CNCICO
Function name: version()
PC address: 2722
Estimated Gas Usage: 2453 - 4524
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:140

drisingInitialized(address 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: version(), txdata: 0x54fd4d50, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CNCICO
Function name: checkIfFundingCompleteOrExpired()
PC address: 3397
Estimated Gas Usage: 2877 - 3302
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:239

is reached, softCap has to be compared
            if(totalDistributed >= softCap){
                //If softCap is reached
                state = State.Successful; //ICO becomes Successful
                completedAt = now; //ICO is finished

                emit LogFundingSuccessful(totalRaised); //we log the finish
                successful(); //and execute closure

            } else{
                //If softCap is not reached
                state = State.Failed; //ICO becomes Failed
                completedAt = now; //ICO is finished

                emit LogFundingFailed(totalRaised); //we log the finish

            }

        }
    }

    /**
    * @notice successful closure handler
    */
    function successful() public {
        //When successful
        require(state == State.Successful);
        //Check if tokens have been already claimed - can only be claimed one time
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkIfFundingCompleteOrExpired(), txdata: 0x86f32586, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CNCICO
Function name: claimTokensByUser()
PC address: 4343
Estimated Gas Usage: 15860 - 95389
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:302

/
    function claimTokensByAdmin(addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080040000040292, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claimTokensByUser(), txdata: 0xcd13592a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CNCICO
Function name: claimTokensByUser()
PC address: 4411
Estimated Gas Usage: 15860 - 95389
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:305

uint256 tokens = balan

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080100000120, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claimTokensByUser(), txdata: 0xcd13592a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CNCICO
Function name: claimTokensByUser()
PC address: 4450
Estimated Gas Usage: 15860 - 95389
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35a7b5495a311f278489a49ec38b933c.sol:304

ending are taken
        uint256 tokens = balance[_target];

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080100000120, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claimTokensByUser(), txdata: 0xcd13592a, value: 0x0


