==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ActionSpellKovan
Function name: constructor
PC address: 127
Estimated Gas Usage: 62292 - 170332
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b823cc20cd0243143affdbd562d249e5.sol:467

ig, eta);
    }

    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ActionSpellKovan
Function name: sig()
PC address: 433
Estimated Gas Usage: 2345 - 4086
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b823cc20cd0243143affdbd562d249e5.sol:465

heduled");
        e

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sig(), txdata: 0x00a7029b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ActionSpell
Function name: cast()
PC address: 773
Estimated Gas Usage: 11858 - 66709
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b823cc20cd0243143affdbd562d249e5.sol:491
Initial State:

Account: [CREATOR], balance: 0x8c25e2d220040c8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cast(), txdata: 0x96d373e5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ActionSpell
Function name: schedule()
PC address: 928
Estimated Gas Usage: 14346 - 103994
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/b823cc20cd0243143affdbd562d249e5.sol:491
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: schedule(), txdata: 0xb0604a26, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ActionSpell
Function name: schedule()
PC address: 928
Estimated Gas Usage: 14346 - 103994
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b823cc20cd0243143affdbd562d249e5.sol:491
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: schedule(), txdata: 0xb0604a26, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ActionSpell
Function name: schedule()
PC address: 970
Estimated Gas Usage: 1015 - 1110
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b823cc20cd0243143affdbd562d249e5.sol:480

        pause = 0x146921eF7A94C50b96cb53Eb9C2CA4EB25D4Bfa8;
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000fb0c8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: schedule(), txdata: 0xb0604a26, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ActionSpell
Function name: schedule()
PC address: 1330
Estimated Gas Usage: 14346 - 103994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b823cc20cd0243143affdbd562d249e5.sol:487

public {
        pause = 0x95D6fBdD8bE0FfBEB

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: schedule(), txdata: 0xb0604a26, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ActionSpell
Function name: schedule()
PC address: 1344
Estimated Gas Usage: 14346 - 103994
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b823cc20cd0243143affdbd562d249e5.sol:487

public {
        pause = 0x95D6fBdD8bE0FfBEB

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: schedule(), txdata: 0xb0604a26, value: 0x0