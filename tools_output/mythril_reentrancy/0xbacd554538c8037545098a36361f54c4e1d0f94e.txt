==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMathLib
Function name: plus(uint256,uint256)
PC address: 314
Estimated Gas Usage: 210 - 305
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:45

 {
    uint c = a + b;
    assert(c>=a);
    return c;
  }

}

/**
 * This smart contract code is Copyrigh

--------------------
Initial State:

Account: [CREATOR], balance: 0x4606260c026041, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2002805a02, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: plus(uint256,uint256), txdata: 0x66098d4f013bff66760cb44034cc6354a4a06002f84614b0112204c5a5765bfb9770309bff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMathLib
Function name: minus(uint256,uint256)
PC address: 339
Estimated Gas Usage: 215 - 310
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:40

(uint) {
    assert(b <= a);
    return a - b;
  }

  function plus(uint a, uint b) returns 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80062, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: minus(uint256,uint256), txdata: 0xf4f3bdc1000080000000000000000000000000000000000000000040000000800000004001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 379
Estimated Gas Usage: 93194 - 456361
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:418

 /**
   * Don&#39;t expect to ju

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 432
Estimated Gas Usage: 93194 - 456361
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:418

 /**
   * Don&#39;t expect to ju

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 441
Estimated Gas Usage: 93194 - 456361
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:419

 money and get

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 525
Estimated Gas Usage: 93194 - 456361
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:427

 *
   * Crowdsale

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 547
Estimated Gas Usage: 93194 - 456361
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:429

ot pressed th

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 551
Estimated Gas Usage: 93194 - 456361
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:431

 addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 554
Estimated Gas Usage: 93194 - 456361
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:431

The Ethe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 573
Estimated Gas Usage: 93194 - 456361
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:432

ck the successful payments on the server

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 592
Estimated Gas Usage: 93194 - 456361
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:856

o this crowdsale to distri

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 645
Estimated Gas Usage: 93194 - 456361
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:856

o this crowdsale to distri

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 966
Estimated Gas Usage: 93194 - 456361
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:696

n transfer the funds back on the sm

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatedCrowdsale
Function name: isPricingSane() or isPricingSane()
PC address: 3821
Estimated Gas Usage: 2711 - 38167
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:751


    else if (!isMinimumGoalReached()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101018001010101010101010101000000000000000000000000000000000000000000000004000000000000000041, value: 0x0
Caller: [SOMEGUY], function: isPricingSane(), txdata: 0x062b01ce, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatedCrowdsale
Function name: setFinalizeAgent(address) or setFinalizeAgent(address)
PC address: 4844
Estimated Gas Usage: 9494 - 65234
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:627


    signerAddress = _signerAdd

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0000020233, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101020101010101010101010110800001000001010208200000010202010001020100010000800002400020, value: 0x0
Caller: [CREATOR], function: setFinalizeAgent(address), txdata: 0x19b667da818181818181818181818181deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatedCrowdsale
Function name: setPricingStrategy(address) or setPricingStrategy(address)
PC address: 7466
Estimated Gas Usage: 9692 - 65432
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:696

n transfer the funds back on the sm

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0002000040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101000101010101020101010101010101808020400102020002020001000000000008000008001001000080800002204088, value: 0x0
Caller: [CREATOR], function: setPricingStrategy(address), txdata: 0x50c67734000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AllocatedCrowdsale
Function name: setEndsAt(uint256) or setEndsAt(uint256)
PC address: 8313
Estimated Gas Usage: 1546 - 1971
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/72d539a1132eeef608841304df3dee5a.sol:679

le has not yet begun
   * (we have done only few test transact

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000440010102100110100101010104010101800401000000080000000000004000002000000000000040000200004000000000000001, value: 0x0
Caller: [CREATOR], function: setEndsAt(uint256), txdata: 0x6e50eb3f, value: 0x0