==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtcnnRoll
Function name: constructor
PC address: 632
Estimated Gas Usage: 57435 - 280016
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:237

dom(uint blockn, address entropy) public vie

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtcnnRoll
Function name: dumpdivs()
PC address: 2475
Estimated Gas Usage: 5979 - 76283
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:801

rt(b > 0); // Solidity automatically thr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: dumpdivs(), txdata: 0x0dda350f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtcnnRoll
Function name: dumpdivs()
PC address: 2667
Estimated Gas Usage: 5979 - 76283
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:799

pure returns(uint) {

    // assert(b > 0); // Solidity automatically thro

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: dumpdivs(), txdata: 0x0dda350f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BtcnnRoll
Function name: dumpdivs()
PC address: 2667
Estimated Gas Usage: 5979 - 76283
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:799

pure returns(uint) {

    // assert(b > 0); // Solidity automatically thro

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: dumpdivs(), txdata: 0x0dda350f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtcnnRoll
Function name: ownerTransferBTCNN(address,uint256)
PC address: 3053
Estimated Gas Usage: 19402 - 95793
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:721

ruct - emergency

  function owne

--------------------
Initial State:

Account: [CREATOR], balance: 0x4001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c6c6c6c6c6c6c6c6c6c6c6c6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerTransferBTCNN(address,uint256), txdata: 0x192bc676, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtcnnRoll
Function name: ownerSetBankroll(address)
PC address: 4494
Estimated Gas Usage: 13164 - 104223
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:749

/ Is this the BTCNN token contract

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtcnnRoll
Function name: ownerSetBankroll(address)
PC address: 4562
Estimated Gas Usage: 13164 - 104223
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:753





/**

 * @title SafeMath

--------------------
Initial State:

Account: [CREATOR], balance: 0x1020000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtcnnRoll
Function name: ownerSetBankroll(address)
PC address: 4615
Estimated Gas Usage: 13164 - 104223
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:753





/**

 * @title SafeMath

--------------------
Initial State:

Account: [CREATOR], balance: 0x1020000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtcnnRoll
Function name: ownerSetBankroll(address)
PC address: 4622
Estimated Gas Usage: 13164 - 104223
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:761

 Math op

--------------------
Initial State:

Account: [CREATOR], balance: 0x1020000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtcnnRoll
Function name: ownerSetBankroll(address)
PC address: 4848
Estimated Gas Usage: 13164 - 104223
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:761

 Math operations with safety checks th

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BtcnnRoll
Function name: ownerSetBankroll(address)
PC address: 4848
Estimated Gas Usage: 13164 - 104223
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:761

 Math operations with safety checks th

--------------------
Initial State:

Account: [CREATOR], balance: 0x40002004019, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtcnnRoll
Function name: ownerSetBankroll(address)
PC address: 4848
Estimated Gas Usage: 13164 - 104223
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:761

 Math operations with safety checks th

--------------------
Initial State:

Account: [CREATOR], balance: 0x1020000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: BtcnnRoll
Function name: tokenFallback(address,uint256,bytes)
PC address: 5405
Estimated Gas Usage: 2888 - 6891
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a00000000000000000000000008011020080420402080020180200202400240040000000000000000000000004000020000800101000004080200000100100402ff, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtcnnRoll
Function name: ownerkill()
PC address: 6002
Estimated Gas Usage: 6577 - 42649
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:789





  /**

   * @dev Integer division of 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000001a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerkill(), txdata: 0xd263b7eb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtcnnRoll
Function name: ownerkill()
PC address: 6065
Estimated Gas Usage: 6577 - 42649
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:795

g the

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000001a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerkill(), txdata: 0xd263b7eb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtcnnRoll
Function name: ownerTransferBTCNN(address,uint256)
PC address: 6143
Estimated Gas Usage: 1981 - 2406
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:711

newOwner) public

  onlyOwn

--------------------
Initial State:

Account: [CREATOR], balance: 0x42, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ownerTransferBTCNN(address,uint256), txdata: 0x192bc676000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtcnnRoll
Function name: tokenFallback(address,uint256,bytes)
PC address: 6143
Estimated Gas Usage: 5680 - 10672
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:287

 under 8 bit

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e5863, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1eaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a01010101040101010101010104, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BtcnnRoll
Function name: tokenFallback(address,uint256,bytes)
PC address: 6223
Estimated Gas Usage: 19533 - 64703
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:637

sPercent;

    setMaxProfit();

  }



  //

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtcnnRoll
Function name: tokenFallback(address,uint256,bytes)
PC address: 9159
Estimated Gas Usage: 5854 - 10846
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb629dc9a197e58cd54627d9f41b9a7d.sol:845
Initial State:

Account: [CREATOR], balance: 0x180000022000014, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a010101010101010101010101000040000000000000000000000000000000000001, value: 0x0