==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MarginlyVesting
Function name: constructor
PC address: 317
Estimated Gas Usage: 22002 - 106281
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:239

 uint256 publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000d026b520a28760b5c9a1d6c7445aaebb5b0e2564e7ee752b73cbadbd504b2fbdb022a160820320945a82525a200a618949042444202215592044c04651c24085c0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 875
Estimated Gas Usage: 6154 - 41422
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:325

mestamp.sub(start)).d

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarginlyVesting
Function name: releasableAmount()
PC address: 875
Estimated Gas Usage: 5406 - 40674
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:325

mestamp.sub(start)).d

--------------------
Initial State:

Account: [CREATOR], balance: 0x88810, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb1, value: 0x0
Caller: [ATTACKER], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 919
Estimated Gas Usage: 6154 - 41422
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:327

/no-bloc

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: releasableAmount()
PC address: 919
Estimated Gas Usage: 5406 - 40674
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:327

/no-bloc

--------------------
Initial State:

Account: [CREATOR], balance: 0x58470, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef55, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 944
Estimated Gas Usage: 6154 - 41422
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:330

{
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: releasableAmount()
PC address: 944
Estimated Gas Usage: 5406 - 40674
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:330

{
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x58470, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef55, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 951
Estimated Gas Usage: 4363 - 39350
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:330

t256 _amount) private {
    token.safeTransfer(_beneficiary, _amount);
    emit Released(_beneficiary, _amount);
  }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2908, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 963
Estimated Gas Usage: 6154 - 41422
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:332

eficiary

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: releasableAmount()
PC address: 963
Estimated Gas Usage: 5406 - 40674
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:332

eficiary

--------------------
Initial State:

Account: [CREATOR], balance: 0x58470, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef55, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 966
Estimated Gas Usage: 6154 - 41422
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:332

eased

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: releasableAmount()
PC address: 966
Estimated Gas Usage: 5406 - 40674
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:332

eased

--------------------
Initial State:

Account: [CREATOR], balance: 0x58470, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef55, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 987
Estimated Gas Usage: 6066 - 41053
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:331

 _amount);
    emit Released(_beneficiary, _amount);
  }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 1001
Estimated Gas Usage: 6154 - 41422
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:334
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: releasableAmount()
PC address: 1001
Estimated Gas Usage: 5406 - 40674
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:334
Initial State:

Account: [CREATOR], balance: 0x58470, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef55, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 1010
Estimated Gas Usage: 6154 - 41422
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:334
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MarginlyVesting
Function name: releasableAmount()
PC address: 1010
Estimated Gas Usage: 5406 - 40674
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:334
Initial State:

Account: [CREATOR], balance: 0x58470, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef55, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MarginlyVesting
Function name: beneficiaries(uint256)
PC address: 2183
Estimated Gas Usage: 1222 - 1317
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:258

  uint256 _duration
  )
  publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040000040002444, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: beneficiaries(uint256), txdata: 0xefeb5e58, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 2276
Estimated Gas Usage: 6038 - 41025
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:239

 uint256 publi

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0c0830010000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000081fcf92a9e05f5940cba60ab9a4805aff0261f21d107bde6fdfffcefdffbef62000002d80000026c78408040002ce03a80000500000204448a2400020040000180, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MarginlyVesting
Function name: releasableAmount()
PC address: 2276
Estimated Gas Usage: 6906 - 41893
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:239

 uint256 publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x16a2da00107900000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000006d8d12a94283512088d84d02b60487779eeeeffaeefe686d8300081082ac6aa2809a010010400000020000fe041b8a4088240402080000000000643082942a23a5, value: 0x0
Caller: [ATTACKER], function: releasableAmount(), txdata: 0x5b940081, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MarginlyVesting
Function name: releaseAllTokens()
PC address: 2276
Estimated Gas Usage: 7796 - 43113
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:239

 uint256 publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x55a40000004080000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000a18020e22ca1efcae0d4e3119af01c1389c8512ea51ea92622a0568a295a24124e748222298d0451915280ef0e4029f101405324a36529640600018a004a0e3660, value: 0x0
Caller: [CREATOR], function: releaseAllTokens(), txdata: 0x44fdbf5b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 2287
Estimated Gas Usage: 7739 - 42726
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:227

c;
  }
}


con

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000634d068a06a9b3e60e2fd86741ed9f7beddf7b1eb9202387bed9ffedadf8ecbb000002000000000040000000000000000000000000000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MarginlyVesting
Function name: vestedAmount()
PC address: 2334
Estimated Gas Usage: 7876 - 42863
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:207

ert(b > 0); // Sol

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000002102e2883c862c0186210090e6c2720648fc41aeef22a060f11420e00000004103460802005000c7200a000002032101180280544402330800487720982d041061, value: 0x0
Caller: [ATTACKER], function: vestedAmount(), txdata: 0x44b1231f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MarginlyVesting
Function name: calculateShares(uint256,address)
PC address: 2348
Estimated Gas Usage: 2264 - 3209
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f68008782f0085172c4ea8e50fca24e2.sol:217

;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x53, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateShares(uint256,address), txdata: 0x95f2da5d, value: 0x0