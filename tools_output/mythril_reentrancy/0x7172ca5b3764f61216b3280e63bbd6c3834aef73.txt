==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Affiliate
Function name: addAffiliates(address[],uint256[])
PC address: 251
Estimated Gas Usage: 12071 - 60012
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2bd30bcf5501fca05633f217a27a5daa.sol:159

ic {

    require(_affiliates.length > 0);

    require(_affiliates.length == _amount.length);

    for (uint256 i = 0; i < _affiliates.length; i++) {

      affiliates[_affiliates[i]] = _amount[i];

    }

  }



  /**

   * @dev Claim reward collected through your affiliates

   */

  functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x9c4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAffiliates(address[],uint256[]), txdata: 0x693103a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Affiliate
Function name: terminateContract()
PC address: 607
Estimated Gas Usage: 7574 - 78208
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2bd30bcf5501fca05633f217a27a5daa.sol:211
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: terminateContract(), txdata: 0x2fd949ca, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Affiliate
Function name: terminateContract()
PC address: 611
Estimated Gas Usage: 7574 - 78208
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2bd30bcf5501fca05633f217a27a5daa.sol:211
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: terminateContract(), txdata: 0x2fd949ca, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Affiliate
Function name: terminateContract()
PC address: 724
Estimated Gas Usage: 7574 - 78208
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2bd30bcf5501fca05633f217a27a5daa.sol:211
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: terminateContract(), txdata: 0x2fd949ca, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Affiliate
Function name: terminateContract()
PC address: 779
Estimated Gas Usage: 7574 - 78208
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2bd30bcf5501fca05633f217a27a5daa.sol:211
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: terminateContract(), txdata: 0x2fd949ca, value: 0x0


