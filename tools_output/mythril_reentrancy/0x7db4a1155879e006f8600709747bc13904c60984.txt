==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RewardsController
Function name: initiate()
PC address: 190
Estimated Gas Usage: 193 - 666
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:117

ce();
        uniPool.notifyRewardAmount(uniRewardBalance);

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10808000048c8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiate(), txdata: 0x66aa56c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardsController
Function name: initiate()
PC address: 337
Estimated Gas Usage: 14845 - 222458
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:121

.notify

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiate(), txdata: 0x66aa56c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardsController
Function name: initiate()
PC address: 414
Estimated Gas Usage: 14845 - 222458
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:121

.notifyRewardAmount(bptRewardBalance);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiate(), txdata: 0x66aa56c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardsController
Function name: initiate()
PC address: 448
Estimated Gas Usage: 14845 - 222458
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:125

IERC20 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiate(), txdata: 0x66aa56c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardsController
Function name: initiate()
PC address: 528
Estimated Gas Usage: 14845 - 222458
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:125

IERC20 uniRewardToken = uniPool.rewardToken(

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiate(), txdata: 0x66aa56c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardsController
Function name: initiate()
PC address: 562
Estimated Gas Usage: 14845 - 222458
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:133
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiate(), txdata: 0x66aa56c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardsController
Function name: initiate()
PC address: 639
Estimated Gas Usage: 14845 - 222458
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:133
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiate(), txdata: 0x66aa56c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardsController
Function name: bptRewardBalance()
PC address: 683
Estimated Gas Usage: 5086 - 74821
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:133
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bptRewardBalance(), txdata: 0x8145c070, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RewardsController
Function name: bptRewardBalance()
PC address: 763
Estimated Gas Usage: 5086 - 74821
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:133
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bptRewardBalance(), txdata: 0x8145c070, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RewardsController
Function name: uniRewardBalance()
PC address: 763
Estimated Gas Usage: 5087 - 74492
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:133
Initial State:

Account: [CREATOR], balance: 0x3be, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: uniRewardBalance(), txdata: 0x8f027064, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RewardsController
Function name: initiate()
PC address: 763
Estimated Gas Usage: 14845 - 222458
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:133
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiate(), txdata: 0x66aa56c5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardsController
Function name: uniRewardBalance()
PC address: 927
Estimated Gas Usage: 5087 - 74492
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:130

ken();


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: uniRewardBalance(), txdata: 0x8f027064, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardsController
Function name: initiate()
PC address: 927
Estimated Gas Usage: 14845 - 222458
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c80b695ad5a0715a7e1444815d92fbca.sol:130

ken();


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiate(), txdata: 0x66aa56c5, value: 0x0