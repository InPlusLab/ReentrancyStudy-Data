==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: test
Function name: forceReseed()
PC address: 808
Estimated Gas Usage: 1097 - 1522
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7edd86fab901a2e2d1f0a26e72e9b683.sol:30


        _;
    }
  
    mod

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: forceReseed(), txdata: 0x80ca7aec, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: test
Function name: forceReseed()
PC address: 848
Estimated Gas Usage: 34856 - 156787
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7edd86fab901a2e2d1f0a26e72e9b683.sol:77

component4 = tx.

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: forceReseed(), txdata: 0x80ca7aec, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: test
Function name: forceReseed()
PC address: 866
Estimated Gas Usage: 34856 - 156787
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7edd86fab901a2e2d1f0a26e72e9b683.sol:78

(s);
    }
    
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: forceReseed(), txdata: 0x80ca7aec, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: test
Function name: forceReseed()
PC address: 878
Estimated Gas Usage: 34856 - 156787
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7edd86fab901a2e2d1f0a26e72e9b683.sol:82

  
    // DEBUG

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: forceReseed(), txdata: 0x80ca7aec, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: test
Function name: participate()
PC address: 1003
Estimated Gas Usage: 260 - 355
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7edd86fab901a2e2d1f0a26e72e9b683.sol:36

        _;
    }
    
    functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: participate(), txdata: 0xd11711a2, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: test
Function name: participate()
PC address: 1225
Estimated Gas Usage: 6886 - 9356
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7edd86fab901a2e2d1f0a26e72e9b683.sol:45

nerLuckyNumber)
        {
            participated[msg.sender] = true;
            require(msg.sender.call.value(this.balance)());
        }
    }
    
    function luckyNumberOfAddress(ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: participate(), txdata: 0xd11711a2, value: 0x16345785d8a0000

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: test
Function name: participate()
PC address: 1380
Estimated Gas Usage: 14348 - 71524
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7edd86fab901a2e2d1f0a26e72e9b683.sol:49

 }
    }
    
    function luckyNumbe

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000001000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x16345785d8a0000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: participate(), txdata: 0xd11711a2, value: 0x16345785d8a0000