==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SilverX
Function name: approve(address,uint256) or approve(address,uint256)
PC address: 2140
Estimated Gas Usage: 1155 - 1580
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fd4eb22ab1158a2b22f44c59c167d048.sol:375

 address The address which you want to send tokens from

   * @param to address The address which you want to transfer to

   * @param tokens uint256 the amount of tokens to be transferred

   */

    function transferFrom(address from, address to, uint256 tokens) public whenN

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SilverX
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 2505
Estimated Gas Usage: 1232 - 1657
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fd4eb22ab1158a2b22f44c59c167d048.sol:397

llowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);

        balances[to] = balances[to].add(tokens);

        emit Transfer(from, to, tokens);

        return true;

    }

 



 /**

   * @dev Burns a specific amount of tokens.

   * @param _value The amount of token to be burned.

   */

    function burn(uint256 _value) public returns (bool success) {

        require(balances[msg.sender] >= _value);

        balances[msg.sender] = balances[msg.sender].sub(_value);

        _totalSupply =_totalSupply.sub(_value);

        emit Burn(msg.sender, _value);

        retu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SilverX
Function name: transfer(address,uint256) or transfer(address,uint256)
PC address: 6281
Estimated Gas Usage: 1463 - 1888
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fd4eb22ab1158a2b22f44c59c167d048.sol:339

  emit Transfer(msg.sender, to, tokens);

    return true;

  }

 /**

   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.

   * @param spender The address which will spend the funds.

   * @param tokens The amount of tokens to be spent.

   */

  function approve(address spender, uint256 tokens) public whenNotPaused onlyPayloadSize(2) returns (bool suc

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000140000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SilverX
Function name: transferAnyERC20Token(address,uint256)
PC address: 7255
Estimated Gas Usage: 4902 - 40595
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fd4eb22ab1158a2b22f44c59c167d048.sol:525
Initial State:

Account: [CREATOR], balance: 0x8000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,uint256), txdata: 0xdc39d06d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0