==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Distribute
Function name: fallback
PC address: 273
Estimated Gas Usage: 546 - 6001
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f1d4c80b328b0ae0c22369a8cb739314.sol:45

    assert(_to.length <= 150);

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x4040000100c4443, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multisend(address,address[],uint256[]), txdata: 0xad8733ca0208088002208020010101010101010101801002080101010101041001010c2080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Distribute
Function name: fallback
PC address: 285
Estimated Gas Usage: 575 - 6123
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f1d4c80b328b0ae0c22369a8cb739314.sol:47

// loop through to addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multisend(address,address[],uint256[]), txdata: 0xad8733ca01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Distribute
Function name: fallback
PC address: 507
Estimated Gas Usage: 4443 - 80799
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f1d4c80b328b0ae0c22369a8cb739314.sol:51

, _to[i], _value[i])) == true);

        }

        return true;

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multisend(address,address[],uint256[]), txdata: 0xad8733ca000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa00000000000000000000000000000000000000000000000000000000000006080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Distribute
Function name: account_info_rotate_tine(uint256)
PC address: 507
Estimated Gas Usage: 4443 - 80799
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f1d4c80b328b0ae0c22369a8cb739314.sol:51

, _to[i], _value[i])) == true);

        }

        return true;

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multisend(address,address[],uint256[]), txdata: 0xad8733ca000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa00000000000000000000000000000000000000000000000000000000000006080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Distribute
Function name: account_info_rotate_tine(uint256)
PC address: 507
Estimated Gas Usage: 4443 - 80799
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/f1d4c80b328b0ae0c22369a8cb739314.sol:51

, _to[i], _value[i])) == true);

        }

        return true;

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multisend(address,address[],uint256[]), txdata: 0xad8733ca0000000000000000000000000000000000000000000000000000000000000002, value: 0x0