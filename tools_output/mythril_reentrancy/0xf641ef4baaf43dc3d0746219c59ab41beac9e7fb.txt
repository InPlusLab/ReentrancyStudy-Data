==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakesList(uint256)
PC address: 2029
Estimated Gas Usage: 1050 - 1145
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:154

g from stakeID to stake str

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stakesList(uint256), txdata: 0x601c911f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3054
Estimated Gas Usage: 58353 - 296007
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:204

nt + 1;
        uint256 stakeID = st

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000001bfba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101100201010201020204010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3133
Estimated Gas Usage: 58353 - 296007
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:210

s
        s

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3142
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:210

t of all stakes
        stake

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3159
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:214

sg.sender].push(stakeID);


--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3166
Estimated Gas Usage: 58353 - 296007
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:214

sg.sender].push(stakeID);


--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3193
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:214

sg.sender].push(stakeID);


--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3200
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:214

sg.sender].push(stakeID);


--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3207
Estimated Gas Usage: 58353 - 296007
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:214

sg.sender].push(stakeID);


--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3237
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:214

sg.sender].push(stakeID);


--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3250
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:214

sg.sender].push(stakeID);


--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3254
Estimated Gas Usage: 58353 - 296007
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3262
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3299
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:217

}

    /**
    @notice f

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3317
Estimated Gas Usage: 58353 - 296007
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3322
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: stakeTokens(uint256)
PC address: 3334
Estimated Gas Usage: 58353 - 296007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:222

, uint256 to);

    /**
    @dev only ow

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000005bfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeTokens(uint256), txdata: 0x7547c7a30101010101010101010101010101010101020101010101020201010101010201, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: setReward(uint256,uint256)
PC address: 3736
Estimated Gas Usage: 2036 - 2131
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:236

1 days) <= no

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setReward(uint256,uint256), txdata: 0xa47bd49600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KryptoinETFTokenStakeRewards
Function name: userToStakeIDs(address,uint256)
PC address: 4814
Estimated Gas Usage: 1212 - 1497
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1b4efb4a73dee6407c7d05c5d12ed087.sol:156

  // mapping from user and its reward

    uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x43e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: userToStakeIDs(address,uint256), txdata: 0xcf0e200600000000000000000000000000200000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0


