==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake()
PC address: 3251
Estimated Gas Usage: 972 - 1067
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:774

me < _closeTime && _closeTime < _releaseTime, '_startTime needs to be be

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake()
PC address: 3516
Estimated Gas Usage: 35048 - 206536
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:588

is only required for i

--------------------
Initial State:

Account: [CREATOR], balance: 0x80003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DePayLiquidityStaking
Function name: stake(uint256)
PC address: 4609
Estimated Gas Usage: 1164 - 1259
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:771

xternal onlyOwner onlyUnstarted returns(bool) {
    require(isContra

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DePayLiquidityStaking
Function name: stake(uint256)
PC address: 4728
Estimated Gas Usage: 1986 - 2081
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:772

');
    require(isContract(_liquidityToken), '_liquidityToken ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x11, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DePayLiquidityStaking
Function name: withdraw(address,uint256)
PC address: 7789
Estimated Gas Usage: 17579 - 96235
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:588

is only required for i

--------------------
Initial State:

Account: [CREATOR], balance: 0x400001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256), txdata: 0xf3fef3a3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake()
PC address: 8414
Estimated Gas Usage: 35048 - 206536
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:874

ng to EIP-1052, 0x0 is the va

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000018c03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake()
PC address: 8423
Estimated Gas Usage: 35048 - 206536
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:874

accounts
    // and 0xc

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000018c03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake()
PC address: 8442
Estimated Gas Usage: 35048 - 206536
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:874

urned for not-yet created accounts
    // and 0xc5d2460186f723

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000018c03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake()
PC address: 8511
Estimated Gas Usage: 35048 - 206536
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:875

db2dcc703c0e500b653ca82273b7bfad8

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000018c03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake()
PC address: 8518
Estimated Gas Usage: 35048 - 206536
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:876

    /

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000018c03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake()
PC address: 8662
Estimated Gas Usage: 35048 - 206536
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:876

    // for accounts without code, i

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000c825, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: unstake()
PC address: 8662
Estimated Gas Usage: 35048 - 206536
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:876

    // for accounts without code, i

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000018c03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DePayLiquidityStaking
Function name: withdraw(address,uint256)
PC address: 10427
Estimated Gas Usage: 17579 - 96235
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7130cdbf71d1baaa1e6a4c99107b061a.sol:393

ry) {
        return functionStat

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256), txdata: 0xf3fef3a3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0