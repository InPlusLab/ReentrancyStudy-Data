==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: openBooks(uint256)
PC address: 1271
Estimated Gas Usage: 1024 - 1119
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:77

ks
    mapping (address =>

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: openBooks(uint256), txdata: 0x4c3b676080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: userOrders(address,uint256)
PC address: 1722
Estimated Gas Usage: 1231 - 1846
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:81

rOrder position
    mapping(uint => uint) in

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: userOrders(address,uint256), txdata: 0x856652e9, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3055
Estimated Gas Usage: 97439 - 458638
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:124

okenadd].push(0);
            }
        f

--------------------
Initial State:

Account: [CREATOR], balance: 0x20410c0000082782, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef1000e000200101800480400008040001cae3ababaaaab3a3b0aaaaeae6aab0ab01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3132
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:126

 forSale[_tokenadd].lengt

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3166
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3172
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3180
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:127

okenadd].push(order_nonce)

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3211
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:129

ker: msg.sender,
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3215
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:128


          

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3227
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:128

ce] = Order({
            maker: msg.sender,
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3229
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:131

rice: _pric

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3236
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3249
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:130

_tokenadd,
            price: _price

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3284
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:132

nt:_amount


--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3299
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:132

   amount:_amount
        });
        emit OrderPlaced(msg.sender,_tokenadd,_amount,_price);
        if(openBookIndex[_tokenadd] == 0 ){    
            openBoo

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3330
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:132

   amount:_amount
        });
        emit OrderPlaced(msg.sender,_tokenadd,_amount,_price);
        if(openBookIndex[_tokenadd] == 0 ){    
            openBoo

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3339
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:132

   amount:_amount
        });
        emit OrderPlaced(msg.sender,_tokenadd,_amount,_price);
        if(openBookIndex[_tokenadd] == 0 ){    
            openBoo

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3347
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:132

   amount:_amount
        });
        emit OrderPlaced(msg.sender,_tokenadd,_amount,_price);
        if(openBookIndex[_tokenadd] == 0 ){    
            openBoo

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3355
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:132

   amount:_amount
        });
        emit OrderPlaced(msg.sender,_tokenadd,_amount,_price);
        if(openBookIndex[_tokenadd] == 0 ){    
            openBoo

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3368
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:132

   amount:_amount
        });
        emit OrderPlaced(msg.sender,_tokenadd,_amount,_price);
        if(openBookIndex[_tokenadd] == 0 ){    
            openBoo

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3462
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:138

       }
        userOrd

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3472
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:139


        userOrd

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3499
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:139

rOrders[msg.sender].length;
        userOrd

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3505
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3545
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:140

.push(order_nonce);
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3573
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:140

.push(order_nonce);
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3596
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:145

llows a party to list an orde

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3600
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:145

   *@dev li

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3612
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:142

   }

    /**
    *@dev list allows a party to list an orde

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3617
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:146

ddress of t

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3624
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3635
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:145

derbook
    *@param _asset address of th

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3637
Estimated Gas Usage: 97439 - 458638
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:146

ns
    *@param _

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: list(address,uint256,uint256)
PC address: 3642
Estimated Gas Usage: 97439 - 458638
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:146

ns
    *@param _

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000e1cac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: list(address,uint256,uint256), txdata: 0xdda342bb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10100280010000024008004000408001a0d5dfa7ffa5e9ffeab7bfefff35bf7801, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: forSale(address,uint256)
PC address: 3672
Estimated Gas Usage: 1451 - 2066
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34d9fbfa36de3e84596eba8199eed7cf.sol:73

e a specific tokenId is in the forSale array


--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: forSale(address,uint256), txdata: 0xeb3056e0, value: 0x0


