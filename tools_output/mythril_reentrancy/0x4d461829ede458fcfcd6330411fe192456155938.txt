==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PegToken
Function name: getETH2TokenRate()
PC address: 1621
Estimated Gas Usage: 5823 - 77693
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33d71922e77e50da054094eff0c2863f.sol:111

t rate

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getETH2TokenRate(), txdata: 0x16a972f7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PegToken
Function name: getETH2TokenRate()
PC address: 1892
Estimated Gas Usage: 5823 - 77693
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33d71922e77e50da054094eff0c2863f.sol:111

t rate = base.div(100).mul(base);
            return rate;


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getETH2TokenRate(), txdata: 0x16a972f7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PegToken
Function name: getETH2TokenRate()
PC address: 1892
Estimated Gas Usage: 5823 - 77693
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33d71922e77e50da054094eff0c2863f.sol:111

t rate = base.div(100).mul(base);
            return rate;


--------------------
Initial State:

Account: [CREATOR], balance: 0x400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getETH2TokenRate(), txdata: 0x16a972f7, value: 0x0


