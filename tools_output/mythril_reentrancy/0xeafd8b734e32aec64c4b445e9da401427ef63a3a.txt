==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CryptoBossWannaCry
Function name: atkBoss(uint256)
PC address: 1390
Estimated Gas Usage: 406 - 501
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:319

ryptoEngineerInterface(0x69fd0e5

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: atkBoss(uint256), txdata: 0x614781f9, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CryptoBossWannaCry
Function name: withdrawReward()
PC address: 2623
Estimated Gas Usage: 467 - 562
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:319

ryptoEngineerInterface(0x69fd0e5

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: CryptoBossWannaCry
Function name: withdrawReward()
PC address: 2700
Estimated Gas Usage: 14950 - 90038
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:705

ion getEngineerPrizePoo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CryptoBossWannaCry
Function name: startGame()
PC address: 2755
Estimated Gas Usage: 1342 - 1767
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:321

rInterface(0xf84c61bb982041c030b8580

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CryptoBossWannaCry
Function name: calculateShareETH(address,uint256)
PC address: 3395
Estimated Gas Usage: 12361 - 19586
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:53

There

--------------------
Initial State:

Account: [CREATOR], balance: 0xc3f32, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calculateShareETH(address,uint256), txdata: 0x79eb16d4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 3924
Estimated Gas Usage: 66007 - 338434
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:449

Number];

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4035
Estimated Gas Usage: 66064 - 338491
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:449

Number];

        b.ended = true;

         // update eth

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4035
Estimated Gas Usage: 66007 - 338434
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:449

Number];

        b.ended = true;

         // update eth

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4068
Estimated Gas Usage: 66007 - 338434
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:455

SafeMath.div( S

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4083
Estimated Gas Usage: 66007 - 338434
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:455

l(b.prizePool, 5)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4134
Estimated Gas Usage: 66007 - 338434
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:453

last hit

        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );



        if (b.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4141
Estimated Gas Usage: 66007 - 338434
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:453

last hit

        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );



        if (b.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4148
Estimated Gas Usage: 66007 - 338434
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:453

last hit

        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );



        if (b.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4157
Estimated Gas Usage: 66007 - 338434
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:453

last hit

        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );



        if (b.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4165
Estimated Gas Usage: 66007 - 338434
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:453

last hit

        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );



        if (b.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4205
Estimated Gas Usage: 66007 - 338434
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:453

last hit

        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );



        if (b.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4212
Estimated Gas Usage: 66007 - 338434
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:453

last hit

        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );



        if (b.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4219
Estimated Gas Usage: 66007 - 338434
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:453

last hit

        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );



        if (b.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CryptoBossWannaCry
Function name: account_info_rotate_tine(uint256)
PC address: 4233
Estimated Gas Usage: 66007 - 338434
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82d6602993f8f09a514a3d3220d87a90.sol:453

last hit

        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );



        if (b.p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startGame(), txdata: 0xd65ab5f2, value: 0x0