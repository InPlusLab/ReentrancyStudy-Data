==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KotowarsChallenge
Function name: account_info_rotate_tine(uint256)
PC address: 2697
Estimated Gas Usage: 5300 - 76031
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:173

ddress(0x09fE5f0236F0Ea5D930197DCE254d77B04128075);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 4814
Estimated Gas Usage: 45977 - 260683
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:55

fee) * (10**WCK.decimals())));
        
        Challenge memory challenge = Chall

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 4928
Estimated Gas Usage: 45977 - 260683
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 4936
Estimated Gas Usage: 45977 - 260683
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 4984
Estimated Gas Usage: 45977 - 260683
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 5023
Estimated Gas Usage: 45977 - 260683
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 5062
Estimated Gas Usage: 45977 - 260683
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 5073
Estimated Gas Usage: 45977 - 260683
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 5112
Estimated Gas Usage: 45977 - 260683
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 5121
Estimated Gas Usage: 45977 - 260683
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 5159
Estimated Gas Usage: 45977 - 260683
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 5199
Estimated Gas Usage: 45977 - 260683
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 5233
Estimated Gas Usage: 45977 - 260683
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KotowarsChallenge
Function name: create_challenge(uint256)
PC address: 5247
Estimated Gas Usage: 45977 - 260683
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4d3d6bc12a60ffafa1e0b21886cdf0d7.sol:67

allenge_id, challenge.crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create_challenge(uint256), txdata: 0xdc21fb370000000000000000000000000000000000000000000000000000000000000000, value: 0x0