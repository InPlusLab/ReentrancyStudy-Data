==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DelayedClaimable
Function name: fallback
PC address: 415
Estimated Gas Usage: 1788 - 2213
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:242

 using SafeMath for uint256;

    address[] drop

--------------------
Initial State:

Account: [CREATOR], balance: 0x20800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: claimOwnership(), txdata: 0x4e71e0c8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DelayedClaimable
Function name: fallback
PC address: 429
Estimated Gas Usage: 1808 - 2233
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:241

le {
    using SafeMath for uint256;

    address[] dropT

--------------------
Initial State:

Account: [CREATOR], balance: 0x10008000da0022b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: claimOwnership(), txdata: 0x4e71e0c8, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FlyDropToken
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 450
Estimated Gas Usage: 21275 - 123204
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:154

20tk.transferFrom(_from, this, _value)); // transfer tokens to this contract
        approveRecords.push(_extraData);
        emit ReceiveApproval(_from, _value, _token, _extraData);
    }

    /**
     * @dev Send tokens to other multi addresses in one function
     *
     * @param _destAddrs address The addresses which you want to send toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x182, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FlyDropToken
Function name: multiSend(address[],uint256[])
PC address: 707
Estimated Gas Usage: 4400 - 47331
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:168

256 i = 0;
        for (; i < _destAddrs.length; i = i.add(1)) {
            if (!erc20tk.transfer(_destAddrs[i], _values[i])) {
                break;
            }
        }

        return (i);
    }

    /**
     * @dev Send tokens to other multi addresses in one function
     *
     * @param _from address The address which you want to send tokens from
     * @param _des

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: multiSend(address[],uint256[]), txdata: 0xbb4c9f0bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlyDropToken
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 1471
Estimated Gas Usage: 21275 - 123204
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:156

om, _value, _token, _extraData);
    }

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1501
Estimated Gas Usage: 58192 - 231623
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:273

    currentDropTokenContract = dropT

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000801000001010008040000000200040002010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropToken
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 1527
Estimated Gas Usage: 21275 - 123204
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4ffffffffffffffd1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4ffffffffffffffc1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropToken
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 1534
Estimated Gas Usage: 21275 - 123204
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4ffffffffffffffd1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4ffffffffffffffc1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1560
Estimated Gas Usage: 58192 - 231623
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:275

ropToken(dropTokenAdd

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1585
Estimated Gas Usage: 58192 - 231623
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:278

).transferFrom(_fr

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1608
Estimated Gas Usage: 58192 - 231623
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1614
Estimated Gas Usage: 58192 - 231623
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1656
Estimated Gas Usage: 58192 - 231623
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:278

e);
        // budgets[_token][_from] = budgets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1696
Estimated Gas Usage: 58192 - 231623
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:278

e);
        // budgets[_token][_from] = budgets

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1700
Estimated Gas Usage: 58192 - 231623
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:279

.sub(_value);
        return itoken(_token).

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1708
Estimated Gas Usage: 58192 - 231623
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:279

.sub(_value);
        return itoken(_token).

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlyDropToken
Function name: multiSendFrom(address,address[],uint256[])
PC address: 1868
Estimated Gas Usage: 4431 - 47457
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: multiSendFrom(address,address[],uint256[]), txdata: 0xa7ff23730000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1918
Estimated Gas Usage: 58192 - 231623
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:284

 _token, address _from, uint256 _value) onlyOwn

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000801000001010008040000000200040002010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1918
Estimated Gas Usage: 58192 - 231623
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:284

 _token, address _from, uint256 _value) onlyOwn

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f000000000000000000000000000000000000000000000000000000000101010100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1918
Estimated Gas Usage: 58192 - 231623
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:284

 _token, address _from, uint256 _value) onlyOwn

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 1962
Estimated Gas Usage: 58192 - 231623
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:288

][_from] = _value;
    /

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlyDropToken
Function name: multiSend(address[],uint256[])
PC address: 2160
Estimated Gas Usage: 4400 - 47331
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: multiSend(address[],uint256[]), txdata: 0xbb4c9f0b800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 2181
Estimated Gas Usage: 58192 - 231623
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:286

));

    //     budgets[_token][_from] = _value;
    // }

    /**
     * @

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000801000001010008040000000200040002010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlyDropTokenMgr
Function name: prepare(uint256,address,address,uint256,bytes)
PC address: 2181
Estimated Gas Usage: 58192 - 231623
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/970a4c0328001b26e97b805566f9a96f.sol:286

));

    //     budgets[_token][_from] = _value;
    // }

    /**
     * @

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: prepare(uint256,address,address,uint256,bytes), txdata: 0xab519b0c000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000001010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlyDropToken
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2501
Estimated Gas Usage: 21275 - 123204
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4ffffffffffffffd1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4ffffffffffffffc1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlyDropToken
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2558
Estimated Gas Usage: 21275 - 123204
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4ffffffffffffffd1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4ffffffffffffffc1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlyDropToken
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2571
Estimated Gas Usage: 21275 - 123204
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4ffffffffffffffd1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4ffffffffffffffc1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FlyDropToken
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2593
Estimated Gas Usage: 21275 - 123204
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4ffffffffffffffd1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4ffffffffffffffc1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0