==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StakeDiceGame
Function name: maximumBet()
PC address: 744
Estimated Gas Usage: 8520 - 113712
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:73

dge =

--------------------
Initial State:

Account: [CREATOR], balance: 0x840000000000400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: maximumBet(), txdata: 0x227cade5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StakeDiceGame
Function name: maximumBet()
PC address: 845
Estimated Gas Usage: 8520 - 113712
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x840000000000400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: maximumBet(), txdata: 0x227cade5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StakeDiceGame
Function name: multiplierOnWin()
PC address: 889
Estimated Gas Usage: 3514 - 39017
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:75

e;

    }

    

    function maximumB

--------------------
Initial State:

Account: [CREATOR], balance: 0x404000010c0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: multiplierOnWin(), txdata: 0x0d81057e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: StakeDiceGame
Function name: multiplierOnWin()
PC address: 892
Estimated Gas Usage: 3514 - 39017
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:75

e;

    }

    

    function maximumB

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: multiplierOnWin(), txdata: 0x0d81057e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: StakeDiceGame
Function name: multiplierOnWin()
PC address: 899
Estimated Gas Usage: 3514 - 39017
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:75

ngChance;

    }

    

    function maximumB

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: multiplierOnWin(), txdata: 0x0d81057e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StakeDiceGame
Function name: maximumBet()
PC address: 1059
Estimated Gas Usage: 8520 - 113712
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [CREATOR], function: maximumBet(), txdata: 0x227cade5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeDice
Function name: fallback
PC address: 1117
Estimated Gas Usage: 971 - 1396
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:203

ng(address => uint256[]) pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: allPlayers(uint256), txdata: 0x0544ce5e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeDice
Function name: bets(uint256)
PC address: 1157
Estimated Gas Usage: 993 - 1418
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:289

n betPlaced(addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: bets(uint256), txdata: 0x22af00fa20, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakeDiceGame
Function name: maximumBet()
PC address: 1166
Estimated Gas Usage: 8520 - 113712
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000147, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000020, value: 0x0
Caller: [CREATOR], function: maximumBet(), txdata: 0x227cade5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StakeDiceGame
Function name: maximumBet()
PC address: 1166
Estimated Gas Usage: 8520 - 113712
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [CREATOR], function: maximumBet(), txdata: 0x227cade5, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: StakeDiceGame
Function name: maximumBet()
PC address: 1224
Estimated Gas Usage: 8520 - 113712
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:87

 / 5;

    }

    



    

    ///////////////

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [SOMEGUY], function: maximumBet(), txdata: 0x227cade5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeDice
Function name: playersToBetIndices(address,uint256)
PC address: 1251
Estimated Gas Usage: 1112 - 2057
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:205

layer) external view returns (uint256)

    {

        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000021282, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: playersToBetIndices(address,uint256), txdata: 0x3010f39d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakeDice
Function name: withdrawStakeTokens(uint256)
PC address: 1878
Estimated Gas Usage: 4545 - 40194
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:741
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawStakeTokens(uint256), txdata: 0x726ee493, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeDice
Function name: allGames(uint256)
PC address: 2208
Estimated Gas Usage: 1367 - 1792
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:189

et;

    

    ////////////////

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: allGames(uint256), txdata: 0xa0b55095, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeDice
Function name: cancelBet(uint256)
PC address: 4349
Estimated Gas Usage: 1927 - 2682
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0134d726aef1d1129da7807a6d184f48.sol:627

ame = new StakeDiceGa

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: cancelBet(uint256), txdata: 0x357401f580, value: 0x0


