==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemBaseCrowdsale
Function name: fallback
PC address: 1427
Estimated Gas Usage: 1869 - 1964
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:160

Amount);

        requir

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: fallback
PC address: 1964
Estimated Gas Usage: 2859 - 2954
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:160

Amount);

        requir

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemBaseCrowdsale
Function name: fallback
PC address: 2106
Estimated Gas Usage: 951 - 1046
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:206

ALE_BONUS_LIMIT);
    }
    
    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemBaseCrowdsale
Function name: fallback
PC address: 2130
Estimated Gas Usage: 1808 - 1903
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:210

    return now <= limitDatePres

--------------------
Initial State:

Account: [CREATOR], balance: 0x2280002000000422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemBaseCrowdsale
Function name: fallback
PC address: 2139
Estimated Gas Usage: 1828 - 1923
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:210

    return now <= limitDatePresale;
    }

    function isWithinCrowdWave1TimeLimit() internal view returns (bool) {


--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemBaseCrowdsale
Function name: fallback
PC address: 2154
Estimated Gas Usage: 2700 - 2795
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:213

 isWithinCrowdWave1TimeLimit() internal view returns (bool) {

--------------------
Initial State:

Account: [CREATOR], balance: 0x400450a0040002223, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemBaseCrowdsale
Function name: fallback
PC address: 2196
Estimated Gas Usage: 3657 - 3752
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:255

s = CROWD_WAVE2_BONUS;
        } else if (isWithinCrowdWave3TimeLimit()) {
            appliedBonus = CROWD_WAVE3_BONUS;
        }

		// 1 ETH = 4200 APO 
        return weiAmount.mul(42).mul(100 + appliedBonus);
    }
}




/**
 * @title ApolloSeptemCappedCrowdsale
 * @dev Extension of ApolloSeptemBaseCrowdsale with a max amount of funds raised
 */
contract ApolloSeptemCappedCrowdsal

--------------------
Initial State:

Account: [CREATOR], balance: 0x48035e2440004aaf, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: finalize()
PC address: 2694
Estimated Gas Usage: 3781 - 4536
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:360

ning tokens back to

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: finalize()
PC address: 3446
Estimated Gas Usage: 3742 - 4497
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:306

SeptemStarted();
	event Apollo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: fallback
PC address: 3857
Estimated Gas Usage: 2820 - 2915
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:292

|| capReached;
    }
}


/**
 * @t

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000402044126, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: fallback
PC address: 3886
Estimated Gas Usage: 4652 - 4747
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:255

s = CROWD_WAVE2_BONUS;
        } else if (isWithinCrowdWave3TimeLimit()) {
            appliedBonus = CROWD_WAVE3_BONUS;
        }

		// 1 ETH = 4200 APO 
        return weiAmount.mul(42).mul(100 + appliedBonus);
    }
}




/**
 * @title ApolloSeptemCappedCrowdsale
 * @dev Extension of ApolloSeptemBaseCrowdsale with a max amount of funds raised
 */
contract ApolloSeptemCappedCrowdsal

--------------------
Initial State:

Account: [CREATOR], balance: 0x80442010546, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: fallback
PC address: 4025
Estimated Gas Usage: 5938 - 6033
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:244

		tokenReward.transfer(beneficiary, tokenReward.balanceOf(t

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: apolloSpecialTransfer(address,uint256)
PC address: 4506
Estimated Gas Usage: 5264 - 41401
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:191

asEnded() public constant returns

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000104800410400280044004100210400804400010000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: apolloSpecialTransfer(address,uint256), txdata: 0x17fe5b79000000000000000000000000100480204004040402800880024004040810040202, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: sendRemaningBalanceToOwner(address)
PC address: 4906
Estimated Gas Usage: 7197 - 78207
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:251

US;
        } else if (isWi

--------------------
Initial State:

Account: [CREATOR], balance: 0x200002501485a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000108010101010102020120800401010402010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sendRemaningBalanceToOwner(address), txdata: 0x5a29ee7b01010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: sendRemaningBalanceToOwner(address)
PC address: 5074
Estimated Gas Usage: 7197 - 78207
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:251

        appliedBonus = PRESALE_BONUS;
        } else if (isWit

--------------------
Initial State:

Account: [CREATOR], balance: 0x200002501485a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000108010101010102020120800401010402010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sendRemaningBalanceToOwner(address), txdata: 0x5a29ee7b01010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: sendRemaningBalanceToOwner(address)
PC address: 5074
Estimated Gas Usage: 7197 - 78207
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:251

        appliedBonus = PRESALE_BONUS;
        } else if (isWit

--------------------
Initial State:

Account: [CREATOR], balance: 0x200a0401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000004, value: 0x0
Caller: [CREATOR], function: sendRemaningBalanceToOwner(address), txdata: 0x5a29ee7b10101010101010101010101001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ApolloSeptemCrowdsale
Function name: start()
PC address: 5120
Estimated Gas Usage: 43191 - 184718
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:339

er crowdsale ends, to do s

--------------------
Initial State:

Account: [CREATOR], balance: 0x4001000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ApolloSeptemCrowdsale
Function name: start()
PC address: 5134
Estimated Gas Usage: 43191 - 184718
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:340

alls the contract&#39;s finalization 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000004, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ApolloSeptemCrowdsale
Function name: start()
PC address: 5148
Estimated Gas Usage: 43191 - 184718
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:342

 onlyOwner public {
		require(!isFinaliz

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ApolloSeptemCrowdsale
Function name: start()
PC address: 5162
Estimated Gas Usage: 43191 - 184718
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:346

lloSeptemFinalized();

		isFinalized = t

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: fallback
PC address: 5208
Estimated Gas Usage: 1902 - 1997
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:206

ALE_BONUS_LIMIT);
    }
    
    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: fallback
PC address: 5232
Estimated Gas Usage: 2759 - 2854
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:210

    return now <= limitDatePres

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000040009d01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: fallback
PC address: 5241
Estimated Gas Usage: 2779 - 2874
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:210

    return now <= limitDatePresale;
    }

    function isWithinCrowdWave1TimeLimit() internal view returns (bool) {


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ApolloSeptemCrowdsale
Function name: fallback
PC address: 5256
Estimated Gas Usage: 3651 - 3746
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/44f21c725a9e19e80391258b21404663.sol:213

 isWithinCrowdWave1TimeLimit() internal view returns (bool) {

--------------------
Initial State:

Account: [CREATOR], balance: 0x410000000d1882, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x1