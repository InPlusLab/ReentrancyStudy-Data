==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 742
Estimated Gas Usage: 17532 - 109823
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:669

int256 currentBa

--------------------
Initial State:

Account: [CREATOR], balance: 0xb3c030000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 790
Estimated Gas Usage: 17532 - 109823
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:667

nt256) {

        uint256 currentBalance = tokenRew

--------------------
Initial State:

Account: [CREATOR], balance: 0xb3c030000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 793
Estimated Gas Usage: 17532 - 109823
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:669

ress(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0xb3c030000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 796
Estimated Gas Usage: 17532 - 109823
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:671

 uint256 tot

--------------------
Initial State:

Account: [CREATOR], balance: 0xb3c030000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 892
Estimated Gas Usage: 17532 - 109823
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:669

ress(this));

        uint256 totalBalance = c

--------------------
Initial State:

Account: [CREATOR], balance: 0x28000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 892
Estimated Gas Usage: 17532 - 109823
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:669

ress(this));

        uint256 totalBalance = c

--------------------
Initial State:

Account: [CREATOR], balance: 0xb3c030000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vesting
Function name: createVestingPeriod(address,uint256,uint256,uint256,address)
PC address: 1209
Estimated Gas Usage: 1435 - 2190
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:557

time of the token vesting.

     */

    funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createVestingPeriod(address,uint256,uint256,uint256,address), txdata: 0xe465cd670000000000000000000000000000000000000000000000000000000000000000652cbfe89edf3f6fffbfe92f74d5fff2f8dc13a7fd409151ad2ddf8003ffe000133144115d8420c40a024004243a1004010401020801010940100404082020011b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 1771
Estimated Gas Usage: 17532 - 109823
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:691
Initial State:

Account: [CREATOR], balance: 0xb3c030000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 1796
Estimated Gas Usage: 17532 - 109823
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:691
Initial State:

Account: [CREATOR], balance: 0xb3c030000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 1803
Estimated Gas Usage: 6291 - 42978
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:691
Initial State:

Account: [CREATOR], balance: 0x40000020000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 1815
Estimated Gas Usage: 17532 - 109823
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:691
Initial State:

Account: [CREATOR], balance: 0xb3c030000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 1818
Estimated Gas Usage: 17532 - 109823
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:691
Initial State:

Account: [CREATOR], balance: 0xb3c030000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vesting
Function name: release(address)
PC address: 1839
Estimated Gas Usage: 8008 - 44695
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/35d92c8f13f41e38cdbc460154441e16.sol:691
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0


