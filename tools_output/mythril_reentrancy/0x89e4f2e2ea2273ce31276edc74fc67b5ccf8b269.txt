==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: claim(uint256)
PC address: 1905
Estimated Gas Usage: 10839 - 67078
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:193

 = uint256(now);
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(uint256), txdata: 0x379607f50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: claim(uint256)
PC address: 1955
Estimated Gas Usage: 10839 - 67078
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:193

    uint256 currentTimestamp = uint256(now);
        uint256 diff

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(uint256), txdata: 0x379607f50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZSECStaker
Function name: calcRewards()
PC address: 2338
Estimated Gas Usage: 2133 - 2796
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:199

_rewardMaxDays)
                return false;

            uint256 rewardsAmount = _stakerMap[_msgSender()].stackedAmount.div(_rewardPortion).mul(rewardDays);
            _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].add(rewardsAmount);
            
            _stakerMap[_msgSender()].lastTimestamp = currentTimestamp.sub(offsetTimestamp);
            
            return true;
        }
        return false;
    }
    
    function withdrawAllFromStore(address recipient) external onlyOwner returns (bool) {
        require(
            recipient != address(0) && recipient != address(this),


--------------------
Initial State:

Account: [CREATOR], balance: 0x9030800230f3908, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calcRewards(), txdata: 0x818a8ed7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: stake(uint256)
PC address: 3050
Estimated Gas Usage: 33754 - 170183
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:146

ender()].lastTimestamp = uint256(now);

--------------------
Initial State:

Account: [CREATOR], balance: 0x269080012050582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a10800e0022c002048200206011cc008d5c1049c294016140350a899192406ecd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: stake(uint256)
PC address: 3105
Estimated Gas Usage: 33754 - 170183
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:147

unt = _stakerCount.add(uint256(1));
        }

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x269080012050582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a10800e0022c002048200206011cc008d5c1049c294016140350a899192406ecd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: stake(uint256)
PC address: 3153
Estimated Gas Usage: 33754 - 170183
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:150

gSender()].stackedAmount = _stakerMap[_msgSender()].s

--------------------
Initial State:

Account: [CREATOR], balance: 0x269080012050582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a10800e0022c002048200206011cc008d5c1049c294016140350a899192406ecd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: stake(uint256)
PC address: 3156
Estimated Gas Usage: 33754 - 170183
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:151

    _totalSt

--------------------
Initial State:

Account: [CREATOR], balance: 0x269080012050582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a10800e0022c002048200206011cc008d5c1049c294016140350a899192406ecd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: stake(uint256)
PC address: 3174
Estimated Gas Usage: 33754 - 170183
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:150

d(amount);
        _totalStackedAmount = _t

--------------------
Initial State:

Account: [CREATOR], balance: 0x269080012050582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a10800e0022c002048200206011cc008d5c1049c294016140350a899192406ecd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: stake(uint256)
PC address: 3220
Estimated Gas Usage: 33754 - 170183
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:153

ender(), amount);
    }
    
    funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x269080012050582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a10800e0022c002048200206011cc008d5c1049c294016140350a899192406ecd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: stake(uint256)
PC address: 3273
Estimated Gas Usage: 33754 - 170183
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:151

ount);
        
        emit Staked(_msgSender(), amount);
    }
    
    function unstack(

--------------------
Initial State:

Account: [CREATOR], balance: 0x269080012050582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a10800e0022c002048200206011cc008d5c1049c294016140350a899192406ecd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: stake(uint256)
PC address: 3276
Estimated Gas Usage: 33754 - 170183
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:157

  require(
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x269080012050582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a10800e0022c002048200206011cc008d5c1049c294016140350a899192406ecd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZSECStaker
Function name: stake(uint256)
PC address: 3295
Estimated Gas Usage: 33754 - 170183
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:156

unt) external {
        require(
            _stakerM

--------------------
Initial State:

Account: [CREATOR], balance: 0x269080012050582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a10800e0022c002048200206011cc008d5c1049c294016140350a899192406ecd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZSECStaker
Function name: calcRewards()
PC address: 3917
Estimated Gas Usage: 4083 - 5124
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:31

 multiplication overflow");
        return c;
    }
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x40180080000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calcRewards(), txdata: 0x818a8ed7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZSECStaker
Function name: calcRewards()
PC address: 4073
Estimated Gas Usage: 1256 - 1919
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c7f131066061cec30d08fba44e3624e7.sol:19

rorMessage);
        uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calcRewards(), txdata: 0x818a8ed7, value: 0x0