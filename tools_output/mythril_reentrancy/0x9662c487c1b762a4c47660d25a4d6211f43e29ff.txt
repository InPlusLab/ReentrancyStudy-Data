==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address)
PC address: 428
Estimated Gas Usage: 1064 - 1819
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:27

);

        _;

    }



  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: fallback
PC address: 574
Estimated Gas Usage: 3469 - 39962
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:145

nt returns(u

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: XaurumMelted(), txdata: 0x0ebf8dbc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: XaurumBurned()
PC address: 737
Estimated Gas Usage: 4281 - 39879
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:137

 returns(uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: XaurumBurned(), txdata: 0x74061e5d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 767
Estimated Gas Usage: 1051 - 1806
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:27

);

        _;

    }



  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 784
Estimated Gas Usage: 30083 - 232121
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:171

ddress).total

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 864
Estimated Gas Usage: 30083 - 232121
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:171

nterface(XaurumAddress).totalGoldSupply() >=

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 864
Estimated Gas Usage: 30083 - 232121
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:171

nterface(XaurumAddress).totalGoldSupply() >=

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 936
Estimated Gas Usage: 30083 - 232121
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:177

 goldMelted +

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 1031
Estimated Gas Usage: 30083 - 232121
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:175

Amount;

        goldMelted += _goldAmount;

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 1086
Estimated Gas Usage: 30083 - 232121
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:181

 emit MeltDon

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 1196
Estimated Gas Usage: 30083 - 232121
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:179

Amount;

        emit MeltDone(_xaurAmount, _goldAmount);

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 1241
Estimated Gas Usage: 30083 - 232121
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:187

function doBurn(uint256 _xa

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 1245
Estimated Gas Usage: 30083 - 232121
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:187

function doBurn(uint256 _xa

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 1249
Estimated Gas Usage: 30083 - 232121
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:187

lic onlyOwner returns (bo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 1253
Estimated Gas Usage: 30083 - 232121
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:187

lic onlyOwner returns (bo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 1257
Estimated Gas Usage: 30083 - 232121
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:189

  uint actualBalance = FreeXau

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doMelt(uint256,uint256)
PC address: 1261
Estimated Gas Usage: 30083 - 232121
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:189

  uint actualBalance = FreeXau

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doMelt(uint256,uint256), txdata: 0x7997b997, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1503
Estimated Gas Usage: 1089 - 1844
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:27

);

        _;

    }



  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1520
Estimated Gas Usage: 21854 - 169000
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:199

       xaurum

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1600
Estimated Gas Usage: 21854 - 169000
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:197

urAmount, 0);

        xaurumBurned += _xaur

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1600
Estimated Gas Usage: 21854 - 169000
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:197

urAmount, 0);

        xaurumBurned += _xaur

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1672
Estimated Gas Usage: 21854 - 169000
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:207
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1785
Estimated Gas Usage: 21854 - 169000
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:207
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1830
Estimated Gas Usage: 21854 - 169000
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:207
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1834
Estimated Gas Usage: 21854 - 169000
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:207
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1838
Estimated Gas Usage: 21854 - 169000
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:207
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DestructionContract
Function name: doBurn(uint256)
PC address: 1842
Estimated Gas Usage: 21854 - 169000
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:207
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doBurn(uint256), txdata: 0x8d7570fc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DestructionContract
Function name: transferOwnership(address)
PC address: 2242
Estimated Gas Usage: 1209 - 2294
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/37225037f37c3667b02d7657ff291dc4.sol:27

);

        _;

    }



  

--------------------
Initial State:

Account: [CREATOR], balance: 0x20010405000aa801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0


