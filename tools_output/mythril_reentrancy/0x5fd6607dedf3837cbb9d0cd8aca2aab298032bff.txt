==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: constructor
PC address: 303
Estimated Gas Usage: 62448 - 305266
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:126

blic payable {} // receive zethr dividen

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: constructor
PC address: 350
Estimated Gas Usage: 62448 - 305266
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:128

sing a specified block num

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: constructor
PC address: 378
Estimated Gas Usage: 62448 - 305266
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:128

sing a specified block num

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Zethroll
Function name: maxRandom(uint256,address)
PC address: 1580
Estimated Gas Usage: 922 - 3509
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: maxRandom(uint256,address), txdata: 0x61990759, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Zethroll
Function name: maxRandom(uint256,address)
PC address: 1610
Estimated Gas Usage: 922 - 3509
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: maxRandom(uint256,address), txdata: 0x61990759, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 1871
Estimated Gas Usage: 12873 - 103416
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:421

uct(owner);
  }
  
  functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 1916
Estimated Gas Usage: 12873 - 103416
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:424

divs() public{
      Z

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 1956
Estimated Gas Usage: 12873 - 103416
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:424

divs() public{
      Z

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 1959
Estimated Gas Usage: 12873 - 103416
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:425

kroll.

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 2061
Estimated Gas Usage: 12873 - 103416
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:425

kroll.transfer(address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 2061
Estimated Gas Usage: 12873 - 103416
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:425

kroll.transfer(address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 2061
Estimated Gas Usage: 12873 - 103416
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:425

kroll.transfer(address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Zethroll
Function name: tokenFallback(address,uint256,bytes)
PC address: 2347
Estimated Gas Usage: 1836 - 6169
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:354

y used f

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000402000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000008080020120088004800180808008800101082080000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: ownerTransferZTH(address,uint256)
PC address: 2573
Estimated Gas Usage: 19664 - 96622
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:404


    bankroll = newBankroll;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerTransferZTH(address,uint256), txdata: 0xca9defb7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: ownerkill()
PC address: 2896
Estimated Gas Usage: 6430 - 42079
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:438

y SafeMath {

  /**
  * @dev Multiplies

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerkill(), txdata: 0xd263b7eb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerkill()
PC address: 2940
Estimated Gas Usage: 6430 - 42079
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:441

 on o

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerkill(), txdata: 0xd263b7eb, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Zethroll
Function name: tokenFallback(address,uint256,bytes)
PC address: 3048
Estimated Gas Usage: 18413 - 63583
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:362

on ownerSetMaxProfitAsPercentOfHouse(uint n

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a000000000000000000000000000000000000000000000000000000000000000011, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Zethroll
Function name: ownerTransferZTH(address,uint256)
PC address: 4393
Estimated Gas Usage: 2336 - 3091
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:478
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ownerTransferZTH(address,uint256), txdata: 0xca9defb7000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Zethroll
Function name: tokenFallback(address,uint256,bytes)
PC address: 4393
Estimated Gas Usage: 4564 - 9886
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:478
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a01000000000000010000010008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Zethroll
Function name: tokenFallback(address,uint256,bytes)
PC address: 4491
Estimated Gas Usage: 4697 - 10019
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8d9fbe36acfcded09a5d8689dc911ebc.sol:156

er submit bet
   * only if game is active & bet is v

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a010101010101010101010101010101010101010101010101010101010101010101, value: 0x0