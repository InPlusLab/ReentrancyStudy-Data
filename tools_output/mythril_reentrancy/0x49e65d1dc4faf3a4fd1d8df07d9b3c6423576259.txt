==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Locker
Function name: addLockAccount(address,uint256)
PC address: 811
Estimated Gas Usage: 18177 - 94787
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b4620e568c8c9c802fba6ea309ac8d14.sol:127

 totalLockedBala

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000000000000000080000000000000000000010, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea0688080808080808080808080800000000000000000000800000000000000000000f2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Locker
Function name: addLockAccount(address,uint256)
PC address: 846
Estimated Gas Usage: 18177 - 94787
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b4620e568c8c9c802fba6ea309ac8d14.sol:131

;



        lockedBalances[

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f8f8f8f8f8f8f8f8f8f8f8f8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000800000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Locker
Function name: addLockAccount(address,uint256)
PC address: 847
Estimated Gas Usage: 18177 - 94787
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b4620e568c8c9c802fba6ea309ac8d14.sol:131

;



        lockedBalances[

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000010000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000000000000000000000000020000000000062, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea0682020202020202020202020200000000020000000000000000000000000000000c2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Locker
Function name: addLockAccount(address,uint256)
PC address: 853
Estimated Gas Usage: 18177 - 94787
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b4620e568c8c9c802fba6ea309ac8d14.sol:131

;



        lockedBalances[

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f8f8f8f8f8f8f8f8f8f8f8f8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000800000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Locker
Function name: addLockAccount(address,uint256)
PC address: 859
Estimated Gas Usage: 18177 - 94787
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b4620e568c8c9c802fba6ea309ac8d14.sol:137

     emit Add(_add

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f8f8f8f8f8f8f8f8f8f8f8f8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000800000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Locker
Function name: addLockAccount(address,uint256)
PC address: 875
Estimated Gas Usage: 18177 - 94787
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b4620e568c8c9c802fba6ea309ac8d14.sol:141

urn true;

    }



--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f8f8f8f8f8f8f8f8f8f8f8f8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000800000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Locker
Function name: addLockAccount(address,uint256)
PC address: 955
Estimated Gas Usage: 18177 - 94787
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b4620e568c8c9c802fba6ea309ac8d14.sol:151

*/

    function unlock() publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f8f8f8f8f8f8f8f8f8f8f8f8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000800000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Locker
Function name: getContractRhemBalance()
PC address: 1844
Estimated Gas Usage: 2757 - 38025
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b4620e568c8c9c802fba6ea309ac8d14.sol:107

     */

    function addLock

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [CREATOR], function: getContractRhemBalance(), txdata: 0x87f404cd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Locker
Function name: addLockAccount(address,uint256)
PC address: 1844
Estimated Gas Usage: 18177 - 94787
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b4620e568c8c9c802fba6ea309ac8d14.sol:107

     */

    function addLock

--------------------
Initial State:

Account: [CREATOR], balance: 0x8002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068000000000000000000000000000000000000002000000000000000000000008001, value: 0x0
Caller: [CREATOR], function: addLockAccount(address,uint256), txdata: 0x3f5ea068808080808080808080808080000000000000000000000000000000000000000120, value: 0x0