==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TestBancorTrade
Function name: trade(address,address,address[],uint256,uint256)
PC address: 567
Estimated Gas Usage: 4885 - 78079
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/aea8f833a74828e29aba36f5a66a554e.sol:77

ount);

        

        uint256 destAmoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000b9b91, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: trade(address,address,address[],uint256,uint256), txdata: 0x0fca7617000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000a0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TestBancorTrade
Function name: trade(address,address,address[],uint256,uint256)
PC address: 708
Estimated Gas Usage: 4885 - 78079
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/aea8f833a74828e29aba36f5a66a554e.sol:81

, _amount, _minReturn);

        

        Trade(_amount, dest

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: trade(address,address,address[],uint256,uint256), txdata: 0x0fca76170800000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TestBancorTrade
Function name: trade(address,address,address[],uint256,uint256)
PC address: 783
Estimated Gas Usage: 4885 - 78079
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/aea8f833a74828e29aba36f5a66a554e.sol:81

, _amount, _minReturn);

        

        Trade(_amount, dest

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: trade(address,address,address[],uint256,uint256), txdata: 0x0fca76170000000000000000000000000000000000000000000000000000000000000002000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TestBancorTrade
Function name: trade(address,address,address[],uint256,uint256)
PC address: 783
Estimated Gas Usage: 4885 - 78079
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/aea8f833a74828e29aba36f5a66a554e.sol:81

, _amount, _minReturn);

        

        Trade(_amount, dest

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: trade(address,address,address[],uint256,uint256), txdata: 0x0fca76170000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TestBancorTrade
Function name: getBackToken(address)
PC address: 1099
Estimated Gas Usage: 3475 - 72603
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/aea8f833a74828e29aba36f5a66a554e.sol:117

H in case of trade To

--------------------
Initial State:

Account: [CREATOR], balance: 0x8414c0800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBackToken(address), txdata: 0x1ea4a8d7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TestBancorTrade
Function name: getBackToken(address)
PC address: 1291
Estimated Gas Usage: 3475 - 72603
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/aea8f833a74828e29aba36f5a66a554e.sol:113

 }

    

    // Receive ETH in case of trade Tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x8414c0800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBackToken(address), txdata: 0x1ea4a8d7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TestBancorTrade
Function name: getBackToken(address)
PC address: 1291
Estimated Gas Usage: 3475 - 72603
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/aea8f833a74828e29aba36f5a66a554e.sol:113

 }

    

    // Receive ETH in case of trade Tok

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfb8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getBackToken(address), txdata: 0x1ea4a8d7, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: TestBancorTrade
Function name: getBack()
PC address: 1814
Estimated Gas Usage: 1707 - 35988
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: /tmp/aea8f833a74828e29aba36f5a66a554e.sol:97

 

    function getBackBNB() {

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x190849d0200aa07, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x28000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x1
Caller: [ATTACKER], function: getBack(), txdata: 0x7eae1626, value: 0x0