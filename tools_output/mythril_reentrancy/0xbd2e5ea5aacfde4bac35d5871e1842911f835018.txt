==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinyProxy
Function name: release()
PC address: 406
Estimated Gas Usage: 5780 - 41353
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4ef2d3395d7dba13f7d808b9e2f654e7.sol:22

Budget).value(balance)());
    } else {
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: TinyProxy
Function name: release()
PC address: 406
Estimated Gas Usage: 5780 - 41353
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: /tmp/4ef2d3395d7dba13f7d808b9e2f654e7.sol:22

Budget).value(balance)());
    } else {
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x140008000021804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef02, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x02010202, value: 0x1
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: TinyProxy
Function name: release()
PC address: 508
Estimated Gas Usage: 4987 - 40560
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: /tmp/4ef2d3395d7dba13f7d808b9e2f654e7.sol:24

;
    }
    emit Funds

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1d1d1d1d1d1d1d1d1d1d1d1ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x10400802, value: 0x1
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinyProxy
Function name: release()
PC address: 563
Estimated Gas Usage: 5780 - 41353
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4ef2d3395d7dba13f7d808b9e2f654e7.sol:28



contra

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TinyProxyFactory
Function name: untrack(uint256)
PC address: 687
Estimated Gas Usage: 1990 - 2465
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4ef2d3395d7dba13f7d808b9e2f654e7.sol:49

lastProxy = userProxies[msg.sender].length - 1;
    userProxies[msg.sender][index] = userProxies[msg.sender][lastProxy];
    delete userProxies[msg.sender][lastProxy];
  }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x3ff03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: untrack(uint256), txdata: 0x0ab174a3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TinyProxyFactory
Function name: untrack(uint256)
PC address: 807
Estimated Gas Usage: 3807 - 4897
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4ef2d3395d7dba13f7d808b9e2f654e7.sol:49

lastProxy = userProxies[msg.sender].length - 1;
    userProxies[msg.sender][index] = userProxies[msg.sender][lastProxy];
    delete userProxies[msg.sender][lastProxy];
  }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000061002060a5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: make(address,uint256,bool), txdata: 0x86d9b0c50000000000000000000000000000000000000000000000000000000000000002000000020000040101000000000002020000000000000000000000000000000040, value: 0x0
Caller: [CREATOR], function: untrack(uint256), txdata: 0x0ab174a380, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TinyProxyFactory
Function name: userProxies(address,uint256)
PC address: 1033
Estimated Gas Usage: 1102 - 1387
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4ef2d3395d7dba13f7d808b9e2f654e7.sol:32

ublic userProxies;

  event ProxyDeployed(addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: userProxies(address,uint256), txdata: 0x7f01e794, value: 0x0