==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LooisCornerstoneHolder
Function name: constructor
PC address: 136
Estimated Gas Usage: 30050 - 136068
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:439

nitTokenAndReleaseTime(ERC20 _token, uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c00000000000000000000000000000000000000000000000000000000000006460, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LooisCornerstoneHolder
Function name: constructor
PC address: 138
Estimated Gas Usage: 30050 - 136068
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:439

nitTokenAndReleaseTime(ERC20 _token, uint256 _releaseTime) on

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 78800000000000000000000000000000000000100040201280a003c10204088038002000040020000100200020000001000401f0003fdfed7f5ffc3efdfbf7e460, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LooisCornerstoneHolder
Function name: constructor
PC address: 140
Estimated Gas Usage: 30050 - 136068
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:439

nitTokenAndReleaseTime(ERC20 _token, uint256 _releaseTime) onlyOwner public {

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0c6af1010e000004002000084442100405001500000000000010000000000b6d000000002000000800000012000000100900094102000000080800000010ef6880000020040108040020010000000030030002c01dfffffff8100200004f158f80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Ownable
Function name: managers(uint256)
PC address: 477
Estimated Gas Usage: 980 - 1075
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:201

contract

    ///      to

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: managers(uint256), txdata: 0x3d39c26080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Destructible
Function name: managers(uint256)
PC address: 553
Estimated Gas Usage: 980 - 1075
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:201

contract

    ///      to

--------------------
Initial State:

Account: [CREATOR], balance: 0x100040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: managers(uint256), txdata: 0x3d39c26080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Ownable
Function name: removeManager(address)
PC address: 659
Estimated Gas Usage: 26811 - 91011
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:295

o.

    function tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeManager(address), txdata: 0xac18de43000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Ownable
Function name: transferOwnership(address)
PC address: 659
Estimated Gas Usage: 50387 - 177952
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:295

o.

    function tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b00000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Destructible
Function name: removeManager(address)
PC address: 772
Estimated Gas Usage: 26833 - 91033
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:295

o.

    function tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1060000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeManager(address), txdata: 0xac18de43000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Destructible
Function name: transferOwnership(address)
PC address: 772
Estimated Gas Usage: 50409 - 177974
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:295

o.

    function tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b00000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Ownable
Function name: removeManager(address)
PC address: 773
Estimated Gas Usage: 26811 - 91011
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:297

ss) {

        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeManager(address), txdata: 0xac18de43000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Ownable
Function name: transferOwnership(address)
PC address: 773
Estimated Gas Usage: 50387 - 177952
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:297

ss) {

        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b00000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Destructible
Function name: removeManager(address)
PC address: 886
Estimated Gas Usage: 26833 - 91033
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:297

ss) {

        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c10440000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeManager(address), txdata: 0xac18de43000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Destructible
Function name: transferOwnership(address)
PC address: 886
Estimated Gas Usage: 50409 - 177974
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:297

ss) {

        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b00000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LooisCornerstoneHolder
Function name: fallback
PC address: 1197
Estimated Gas Usage: 1866 - 2951
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:469

         }

        }

        return f

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [CREATOR], function: initTokenAndReleaseTime(address,uint256), txdata: 0x17f1f499, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LooisCornerstoneHolder
Function name: fallback
PC address: 1348
Estimated Gas Usage: 30234 - 166541
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:479

Initialized public {


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [CREATOR], function: initTokenAndReleaseTime(address,uint256), txdata: 0x17f1f499000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LooisCornerstoneHolder
Function name: fallback
PC address: 1394
Estimated Gas Usage: 30234 - 166541
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:479

ager onlyTokenInitialized public {


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [CREATOR], function: initTokenAndReleaseTime(address,uint256), txdata: 0x17f1f499000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LooisCornerstoneHolder
Function name: fallback
PC address: 1397
Estimated Gas Usage: 30234 - 166541
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:481

ire(_investor != 0x0);



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [CREATOR], function: initTokenAndReleaseTime(address,uint256), txdata: 0x17f1f499000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LooisCornerstoneHolder
Function name: fallback
PC address: 1403
Estimated Gas Usage: 30234 - 166541
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:483

re(_value > 0);

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [CREATOR], function: initTokenAndReleaseTime(address,uint256), txdata: 0x17f1f499000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LooisCornerstoneHolder
Function name: fallback
PC address: 1435
Estimated Gas Usage: 30234 - 166541
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:483

re(_value > 0);

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [CREATOR], function: initTokenAndReleaseTime(address,uint256), txdata: 0x17f1f499000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LooisCornerstoneHolder
Function name: managers(uint256)
PC address: 1649
Estimated Gas Usage: 1068 - 1163
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:201

contract

    ///      to

--------------------
Initial State:

Account: [CREATOR], balance: 0x55ffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x55ffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [ATTACKER], function: managers(uint256), txdata: 0x3d39c26080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LooisCornerstoneHolder
Function name: investors(uint256)
PC address: 1689
Estimated Gas Usage: 1090 - 1185
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:415

dRoundPercent, uint8 _four

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [CREATOR], function: investors(uint256), txdata: 0x3feb5f2b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LooisCornerstoneHolder
Function name: removeManager(address)
PC address: 3672
Estimated Gas Usage: 27119 - 91319
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:295

o.

    function tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [CREATOR], function: removeManager(address), txdata: 0xac18de43000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LooisCornerstoneHolder
Function name: removeManager(address)
PC address: 3786
Estimated Gas Usage: 27119 - 91319
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2803ab133d99ce5e01059f1b5fba3d97.sol:297

ss) {

        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000064, value: 0x0
Caller: [CREATOR], function: removeManager(address), txdata: 0xac18de43000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0


