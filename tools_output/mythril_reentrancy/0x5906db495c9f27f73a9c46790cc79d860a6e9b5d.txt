==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CentralizedArbitrator
Function name: fallback
PC address: 899
Estimated Gas Usage: 964 - 1059
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f2e0976b5b626753eb931dc5a47d6ab.sol:381

 view returns(uint ruling) {

        return disputes[_disputeID].ruling;

    }

}





/**

 *  @title AppealableArbitrator

 *  @author 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disputeStatus(uint256), txdata: 0x10f169e8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CentralizedArbitrator
Function name: currentRuling(uint256)
PC address: 945
Estimated Gas Usage: 986 - 1081
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f2e0976b5b626753eb931dc5a47d6ab.sol:409

   struct AppealDispute {

        uint rulingTime;

        Arbitrator arbitrator;

        uint appealDisputeID;

    }



    /

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: currentRuling(uint256), txdata: 0x1c3db16d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CentralizedArbitrator
Function name: disputes(uint256)
PC address: 1172
Estimated Gas Usage: 1024 - 1119
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f2e0976b5b626753eb931dc5a47d6ab.sol:217

ionPrice) public {

        arb

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disputes(uint256), txdata: 0x564a565d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CentralizedArbitrator
Function name: giveRuling(uint256,uint256)
PC address: 1964
Estimated Gas Usage: 1992 - 2417
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f2e0976b5b626753eb931dc5a47d6ab.sol:373

 /** @dev Return the ruling of a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: giveRuling(uint256,uint256), txdata: 0xc97c4d5c, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: CentralizedArbitrator
Function name: giveRuling(uint256,uint256)
PC address: 2269
Estimated Gas Usage: 18633 - 128047
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f2e0976b5b626753eb931dc5a47d6ab.sol:349

 function giveRuling(uint _d

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createDispute(uint256,bytes), txdata: 0xc13517e1, value: 0x0
Caller: [CREATOR], function: giveRuling(uint256,uint256), txdata: 0xc97c4d5c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CentralizedArbitrator
Function name: giveRuling(uint256,uint256)
PC address: 2383
Estimated Gas Usage: 18633 - 128047
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f2e0976b5b626753eb931dc5a47d6ab.sol:349

nlyOwner {

        return _giveRuling(_dis

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000400000800000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createDispute(uint256,bytes), txdata: 0xc13517e1, value: 0x0
Caller: [CREATOR], function: giveRuling(uint256,uint256), txdata: 0xc97c4d5c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CentralizedArbitrator
Function name: giveRuling(uint256,uint256)
PC address: 2383
Estimated Gas Usage: 18633 - 128047
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f2e0976b5b626753eb931dc5a47d6ab.sol:349

nlyOwner {

        return _giveRuling(_dis

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createDispute(uint256,bytes), txdata: 0xc13517e1, value: 0x0
Caller: [CREATOR], function: giveRuling(uint256,uint256), txdata: 0xc97c4d5c, value: 0x0


