==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MultiChanger
Function name: change(bytes,uint256[])
PC address: 1213
Estimated Gas Usage: 804 - 6166
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:631

ddress(this).balance.mul(mul).div(div);

        // solium-disable-next-line security/no-call-value

        require(target.call.value(value)());

    }



    // Ether token



    function depositEtherTokenAmount(IEtherToken etherToken, uint256 amount) external {

        etherToken.deposit.va

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: change(bytes,uint256[]), txdata: 0xdc0ba228fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: sendEthProportion(address,uint256,uint256)
PC address: 2283
Estimated Gas Usage: 1987 - 36268
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:671

t256 mul, uint256 div) ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x92201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: sendEthProportion(address,uint256,uint256), txdata: 0x196d42f1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: depositEtherTokenAmount(address,uint256)
PC address: 3443
Estimated Gas Usage: 1882 - 36258
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:685

    function transferTokenAmount(a

--------------------
Initial State:

Account: [CREATOR], balance: 0x12000802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositEtherTokenAmount(address,uint256), txdata: 0x630b76eb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: sendEthValue(address,uint256)
PC address: 3568
Estimated Gas Usage: 1156 - 35437
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:655

l(mul).div(div);

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x203bdfc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendEthValue(address,uint256), txdata: 0x9feb05d3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: withdrawEtherTokenAmount(address,uint256)
PC address: 4017
Estimated Gas Usage: 1996 - 36467
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:697

mount));

    }



    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x101080000040401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawEtherTokenAmount(address,uint256), txdata: 0xbd3e904f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: change(bytes,uint256[])
PC address: 4079
Estimated Gas Usage: 834 - 6289
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:631

ddress(this).balance.mul(mul).div(div);

        // solium-disable-next-line security/no-call-value

        require(target.call.value(value)());

    }



    // Ether token



    function depositEtherTokenAmount(IEtherToken etherToken, uint256 amount) external {

        etherToken.deposit.va

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: change(bytes,uint256[]), txdata: 0xdc0ba228, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: depositEtherTokenProportion(address,uint256,uint256)
PC address: 4378
Estimated Gas Usage: 2955 - 37331
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:693

256 mul, uint256 div) external {



--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositEtherTokenProportion(address,uint256,uint256), txdata: 0xe17eba5d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: transferFromTokenAmount(address,uint256)
PC address: 5065
Estimated Gas Usage: 2207 - 37244
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:449

    return handleReturnBool();

    }



    //



    function checkedTransfer(ERC20 t

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080402000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFromTokenAmount(address,uint256), txdata: 0x10f2e390000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: withdrawEtherTokenProportion(address,uint256,uint256)
PC address: 5143
Estimated Gas Usage: 2136 - 36793
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:707





    function transferFromTokenP

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawEtherTokenProportion(address,uint256,uint256), txdata: 0x5499716a000000000000000000000000000000000000000000000000000000000000000028, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: multitokenChangeProportion(address,address,address,uint256,uint256,uint256)
PC address: 5143
Estimated Gas Usage: 2163 - 36820
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:747
Initial State:

Account: [CREATOR], balance: 0x38410e425140299, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multitokenChangeProportion(address,address,address,uint256,uint256,uint256), txdata: 0x12cc40ce00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: transferFromTokenProportion(address,uint256,uint256)
PC address: 5143
Estimated Gas Usage: 2224 - 36881
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:743

geAmount(mtkn, fromToken, toToken,

--------------------
Initial State:

Account: [CREATOR], balance: 0x203581800085b62, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFromTokenProportion(address,uint256,uint256), txdata: 0xab58b119000000000000000000000000000000000000000000000000000000000000000005, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: transferTokenProportion(address,address,uint256,uint256)
PC address: 5143
Estimated Gas Usage: 2345 - 37002
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:727

.allowance(this, mtkn) == 0) {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x100010001400b840, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferTokenProportion(address,address,uint256,uint256), txdata: 0xff16366f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: sendEthProportion(address,uint256,uint256)
PC address: 5166
Estimated Gas Usage: 1159 - 1254
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:663

al {

        etherToken.withdraw(amoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800020f3f8b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendEthProportion(address,uint256,uint256), txdata: 0x196d42f1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: depositEtherTokenProportion(address,uint256,uint256)
PC address: 5166
Estimated Gas Usage: 1357 - 1452
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:693

okenProportion(address target, ERC20 fr

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositEtherTokenProportion(address,uint256,uint256), txdata: 0xe17eba5d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: withdrawEtherTokenProportion(address,uint256,uint256)
PC address: 5166
Estimated Gas Usage: 2223 - 36880
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:707





    function transferFromTokenProportion

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawEtherTokenProportion(address,uint256,uint256), txdata: 0x5499716a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: multitokenChangeProportion(address,address,address,uint256,uint256,uint256)
PC address: 5166
Estimated Gas Usage: 2250 - 36907
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:747
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: multitokenChangeProportion(address,address,address,uint256,uint256,uint256), txdata: 0x12cc40ce, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: transferFromTokenProportion(address,uint256,uint256)
PC address: 5166
Estimated Gas Usage: 2311 - 36968
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:743

geAmount(mtkn, fromToken, toToken, minRetur

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFromTokenProportion(address,uint256,uint256), txdata: 0xab58b119, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: transferTokenAmount(address,address,uint256)
PC address: 5716
Estimated Gas Usage: 2312 - 37159
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5d1d0697182902d158a148beb8628e95.sol:433

from, to, value));

        return handleReturnBool();

    }



    

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokenAmount(address,address,uint256), txdata: 0x9be6529f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0