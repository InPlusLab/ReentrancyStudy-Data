==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: transferFrom(address,address[],uint256[])
PC address: 218
Estimated Gas Usage: 6680 - 81703
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:283

[i]);

        }

    }



    function tokenFallback(address, uint, bytes) public pure {

        // receive tokens

    }



    function withdraw(uint _value) public onlyOwner {

        token.transfer(owner, _value);

    }



    function withdrawToken(address _token, uint _value) public onlyOwner {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x80101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address[],uint256[]), txdata: 0x4609149900000000000000000000000000000000000000000000000000000000000000008000000800000000000000000000000000000000000000000000000000000040ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 555
Estimated Gas Usage: 6677 - 79860
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:269

 }

    }



    function transferFrom(address _from, address[] _addresses, uint[] _amounts) external onlyOwner {

        require(_addresses.length == _amounts.length);



        for (uint i = 0; i < _addresses.length; i ++) {

            token.transferFrom(_from, _addresses[

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000040000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: transfer(address[],uint256[]), txdata: 0xffc3a769ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 566
Estimated Gas Usage: 6677 - 79860
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:269

 }

    }



    function transferFrom(address _from, address[] _addresses, uint[] _amounts) external onlyOwner {

        require(_addresses.length == _amounts.length);



        for (uint i = 0; i < _addresses.length; i ++) {

            token.transferFrom(_from, _addresses[

--------------------
Initial State:

Account: [CREATOR], balance: 0x101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: transfer(address[],uint256[]), txdata: 0xffc3a7698000000000000000000000000000000000000000000000000000000000000020ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: fallback
PC address: 718
Estimated Gas Usage: 4284 - 39933
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:313
Initial State:

Account: [CREATOR], balance: 0x1800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirDrop
Function name: transferFrom(address,address[],uint256[])
PC address: 813
Estimated Gas Usage: 6680 - 81703
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:307

  fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address[],uint256[]), txdata: 0x460914990000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: transferFrom(address,address[],uint256[])
PC address: 987
Estimated Gas Usage: 6680 - 81703
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:307

  function withdrawToken(address _token, uint _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address[],uint256[]), txdata: 0x460914990000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AirDrop
Function name: transferFrom(address,address[],uint256[])
PC address: 987
Estimated Gas Usage: 6680 - 81703
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:307

  function withdrawToken(address _token, uint _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address[],uint256[]), txdata: 0x460914990000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirDrop
Function name: transferFrom(address,address[],uint256[])
PC address: 987
Estimated Gas Usage: 6680 - 81703
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:307

  function withdrawToken(address _token, uint _value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address[],uint256[]), txdata: 0x460914990000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: withdrawToken(address,uint256)
PC address: 1305
Estimated Gas Usage: 3593 - 39572
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:313
Initial State:

Account: [CREATOR], balance: 0x2000000100000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawToken(address,uint256), txdata: 0x9e281a98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 1457
Estimated Gas Usage: 6677 - 79860
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:281

ength

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000400b4103, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 1605
Estimated Gas Usage: 6677 - 79860
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:281

ength; i ++) {

            token.transfer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000191, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000000000000000000000000000000000000000000000000082, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 1605
Estimated Gas Usage: 6677 - 79860
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:281

ength; i ++) {

            token.transfer

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000400e5004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 1605
Estimated Gas Usage: 6677 - 79860
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ab36735120a937d54ce75f7367df54e.sol:281

ength; i ++) {

            token.transfer

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000400b4103, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000000000000000000000000000000000000000000000000080, value: 0x0


