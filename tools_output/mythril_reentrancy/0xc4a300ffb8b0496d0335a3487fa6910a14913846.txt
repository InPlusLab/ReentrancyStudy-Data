==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenPool
Function name: getContractBalance()
PC address: 417
Estimated Gas Usage: 4649 - 76174
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:358

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0
Caller: [ATTACKER], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenPool
Function name: getContractBalance()
PC address: 417
Estimated Gas Usage: 4649 - 76174
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:358

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: getContractBalance()
PC address: 624
Estimated Gas Usage: 4706 - 76561
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:358

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0
Caller: [ATTACKER], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 624
Estimated Gas Usage: 15741 - 232677
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:358

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: getContractBalance()
PC address: 624
Estimated Gas Usage: 4706 - 76561
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:358

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 624
Estimated Gas Usage: 15741 - 232677
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:358

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TwoKeyDeepFreezeTokenPool
Function name: updateReceivedTokensForSuccessfulConversions(uint256,address)
PC address: 894
Estimated Gas Usage: 12022 - 192470
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReceivedTokensForSuccessfulConversions(uint256,address), txdata: 0x9da1d2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: updateReceivedTokensForSuccessfulConversions(uint256,address)
PC address: 949
Estimated Gas Usage: 12022 - 192470
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:439

Y_STORAGE_CONTRACT.set

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReceivedTokensForSuccessfulConversions(uint256,address), txdata: 0x9da1d2c1, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: updateReceivedTokensForSuccessfulConversions(uint256,address)
PC address: 1060
Estimated Gas Usage: 12022 - 192470
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:439

Y_STORAGE_CONTRACT.getUint(keyHashTotalRewards)));


--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReceivedTokensForSuccessfulConversions(uint256,address), txdata: 0x9da1d2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: updateReceivedTokensForSuccessfulConversions(uint256,address)
PC address: 1060
Estimated Gas Usage: 12022 - 192470
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:439

Y_STORAGE_CONTRACT.getUint(keyHashTotalRewards)));


--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReceivedTokensForSuccessfulConversions(uint256,address), txdata: 0x9da1d2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: updateReceivedTokensForSuccessfulConversions(uint256,address)
PC address: 1172
Estimated Gas Usage: 12022 - 192470
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:439

Y_STORAGE_CONTRACT.setUint(keyHashTotalRewards, amountOfTokens + (PROXY_STORAGE_CONTRACT.getUint(keyHashTotalRewards)));

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReceivedTokensForSuccessfulConversions(uint256,address), txdata: 0x9da1d2c1, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: updateReceivedTokensForSuccessfulConversions(uint256,address)
PC address: 1356
Estimated Gas Usage: 12022 - 192470
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:442

KeyEventSource(getAddressFromTwoKeySingletonRegistry(_twoKeyEventSource)).emitReceivedTokensToDeepFreezeTokenPool(campaignAddress, amountOfTokens);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReceivedTokensForSuccessfulConversions(uint256,address), txdata: 0x9da1d2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: updateReceivedTokensForSuccessfulConversions(uint256,address)
PC address: 1356
Estimated Gas Usage: 12022 - 192470
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:442

KeyEventSource(getAddressFromTwoKeySingletonRegistry(_twoKeyEventSource)).emitReceivedTokensToDeepFreezeTokenPool(campaignAddress, amountOfTokens);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReceivedTokensForSuccessfulConversions(uint256,address), txdata: 0x9da1d2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 1474
Estimated Gas Usage: 15741 - 232677
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:424

Y_STORAGE_CONTRACT.get

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 1688
Estimated Gas Usage: 15741 - 232677
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:424

Y_STORAGE_CONTRACT.getUint(keccak256(_tokensReleaseDate));

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 1688
Estimated Gas Usage: 15741 - 232677
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:424

Y_STORAGE_CONTRACT.getUint(keccak256(_tokensReleaseDate));

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 1758
Estimated Gas Usage: 10350 - 154815
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:427

ire(block.timestamp > tokensReleaseDate);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 1766
Estimated Gas Usage: 15741 - 232677
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:428

eyParticipationMiningPool,amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: setInitialParams(address,address,address)
PC address: 2153
Estimated Gas Usage: 26476 - 143444
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:408

Y_STORAGE_CONTRACT.setUint(keccak256(_tokensReleaseDate), block.timestamp + 10 * (1 years));

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0
Caller: [SOMEGUY], function: setInitialParams(address,address,address), txdata: 0xe1f82f9a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoKeyDeepFreezeTokenPool
Function name: setInitialParams(address,address,address)
PC address: 2176
Estimated Gas Usage: 26476 - 143444
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:410

ialized = true;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setInitialParams(address,address,address), txdata: 0xe1f82f9a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoKeyDeepFreezeTokenPool
Function name: setInitialParams(address,address,address)
PC address: 2225
Estimated Gas Usage: 26476 - 143444
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:410

ialized = true;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setInitialParams(address,address,address), txdata: 0xe1f82f9a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 2235
Estimated Gas Usage: 15741 - 232677
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:305

KEY_SINGLETON_REGISTRY)
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: getContractBalance()
PC address: 2430
Estimated Gas Usage: 4706 - 76561
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:305

KeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)
            .getNonUpgradableContractAddress(contractName);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setInitialParams(address,address,address), txdata: 0xe1f82f9a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: updateReceivedTokensForSuccessfulConversions(uint256,address)
PC address: 2430
Estimated Gas Usage: 12022 - 192470
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:305

KeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)
            .getNonUpgradableContractAddress(contractName);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReceivedTokensForSuccessfulConversions(uint256,address), txdata: 0x9da1d2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 2430
Estimated Gas Usage: 15741 - 232677
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:305

KeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)
            .getNonUpgradableContractAddress(contractName);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: updateReceivedTokensForSuccessfulConversions(uint256,address)
PC address: 2480
Estimated Gas Usage: 12022 - 192470
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:294

KEY_SINGLETON_REGISTRY)
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateReceivedTokensForSuccessfulConversions(uint256,address), txdata: 0x9da1d2c1, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 2763
Estimated Gas Usage: 15741 - 232677
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:371

20(twoKeyEconomy).transfer(receiver,amount);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoKeyDeepFreezeTokenPool
Function name: transferTokensToCommunityPool(uint256)
PC address: 2763
Estimated Gas Usage: 15741 - 232677
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e27dbc4c656231c5f25f80684da14cf9.sol:371

20(twoKeyEconomy).transfer(receiver,amount);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensToCommunityPool(uint256), txdata: 0xc23eecda, value: 0x0