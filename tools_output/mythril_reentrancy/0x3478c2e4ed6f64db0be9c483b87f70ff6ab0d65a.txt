==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: denyChangesMultitoken(uint256)
PC address: 2104
Estimated Gas Usage: 1934 - 2359
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fe83c43915296f9d1fb9103aed33fab0.sol:489

ex, bytes data) public whenNotPaused {

        address mtkn = deployers[index].deploy(data);

        multitokens.push(mtkn);



--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: denyChangesMultitoken(uint256), txdata: 0x50a13702, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 2654
Estimated Gas Usage: 17242 - 97378
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x54408001020048001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deploy(uint256,bytes), txdata: 0x61ff715f0000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 2658
Estimated Gas Usage: 17242 - 97378
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x54408001020048001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deploy(uint256,bytes), txdata: 0x61ff715f0000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 2692
Estimated Gas Usage: 17242 - 97378
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe83c43915296f9d1fb9103aed33fab0.sol:499
Initial State:

Account: [CREATOR], balance: 0x54408001020048001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deploy(uint256,bytes), txdata: 0x61ff715f0000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 2745
Estimated Gas Usage: 17242 - 97378
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe83c43915296f9d1fb9103aed33fab0.sol:499
Initial State:

Account: [CREATOR], balance: 0x54408001020048001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deploy(uint256,bytes), txdata: 0x61ff715f0000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: multitokens(uint256)
PC address: 3384
Estimated Gas Usage: 1234 - 1329
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fe83c43915296f9d1fb9103aed33fab0.sol:423

mory balances = new uint256[

--------------------
Initial State:

Account: [CREATOR], balance: 0x10004000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multitokens(uint256), txdata: 0xaa974eff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: allowBundlingMultitoken(uint256)
PC address: 3537
Estimated Gas Usage: 2132 - 2557
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fe83c43915296f9d1fb9103aed33fab0.sol:479

wner");

        emit NewDeployer(index, deployers[index], deployer);

        deployers[index] = deployer;

    }



    function deploy

--------------------
Initial State:

Account: [CREATOR], balance: 0x10c0400000132, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allowBundlingMultitoken(uint256), txdata: 0xbee11672, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: denyBundlingMultitoken(uint256)
PC address: 3954
Estimated Gas Usage: 2176 - 2601
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fe83c43915296f9d1fb9103aed33fab0.sol:477

loyer deployer) public onlyOwner whenNotPaused {

        require(deployer.owner() == address(this), "setDeployer: first set MultiToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: denyBundlingMultitoken(uint256), txdata: 0xc9c09ac8, value: 0x0