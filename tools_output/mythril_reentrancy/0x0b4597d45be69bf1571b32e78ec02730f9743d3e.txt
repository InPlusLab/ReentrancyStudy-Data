==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DiceRoll
Function name: private_setRandomAPI_extract(string)
PC address: 1180
Estimated Gas Usage: 12687 - 56310
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/fb7f5c0fd1c6822718370e083a984f62.sol:627

wMinBet < maxBet);
        minBet = newMinBet;
    }
    function private_setmaxBet(uint256 newMaxBet) public onlyOwner {
        require(newMa

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: private_setRandomAPI_extract(string), txdata: 0x51777183ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: DiceRoll
Function name: fallback
PC address: 2296
Estimated Gas Usage: 2649 - 38438
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/fb7f5c0fd1c6822718370e083a984f62.sol:668

lue);
    }
    // e

--------------------
Initial State:

Account: [CREATOR], balance: 0x45c80000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [CREATOR], function: private_withdraw(uint256,address), txdata: 0x02264b630000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DiceRoll
Function name: player_withdrawPendingTransactions()
PC address: 5730
Estimated Gas Usage: 12414 - 87593
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fb7f5c0fd1c6822718370e083a984f62.sol:595

   
    // need to auto calc max bet
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_withdrawPendingTransactions(), txdata: 0x7955dd45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DiceRoll
Function name: player_withdrawPendingTransactions()
PC address: 5766
Estimated Gas Usage: 12414 - 87593
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fb7f5c0fd1c6822718370e083a984f62.sol:603

rollUnder) public onlyOwner {
        delete permitte

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_withdrawPendingTransactions(), txdata: 0x7955dd45, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DiceRoll
Function name: getBetDivisor(uint256)
PC address: 5960
Estimated Gas Usage: 915 - 1340
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fb7f5c0fd1c6822718370e083a984f62.sol:573

withdraw any 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBetDivisor(uint256), txdata: 0x7ddd0ce1, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: DiceRoll
Function name: private_setRandomAPI_extract(string)
PC address: 11832
Estimated Gas Usage: 12719 - 56249
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: private_setRandomAPI_extract(string), txdata: 0x5177718380, value: 0x0