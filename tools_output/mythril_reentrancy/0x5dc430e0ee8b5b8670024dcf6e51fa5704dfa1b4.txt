==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: OutcomeTokenProxy
Function name: fallback
PC address: 103
Estimated Gas Usage: 1686 - 38085
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:707

ublic functions

     */

    /// @dev Constructor sets ev

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: CategoricalEventProxy
Function name: fallback
PC address: 160
Estimated Gas Usage: 1644 - 38043
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:707

ublic functions

     */

    /// @dev Constructor sets ev

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EventData
Function name: outcomeTokens(uint256)
PC address: 347
Estimated Gas Usage: 1002 - 1097
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:933

, collateralTokenCount);

    }





--------------------
Initial State:

Account: [CREATOR], balance: 0xc108040000b2d8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: outcomeTokens(uint256), txdata: 0x8abe59ea, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CategoricalEventProxy
Function name: outcomeTokens(uint256)
PC address: 437
Estimated Gas Usage: 1002 - 1097
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:933

, collateralTokenCount);

    }





--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001010101010101010101020120010101010101010000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: outcomeTokens(uint256), txdata: 0x8abe59ea80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CategoricalEvent
Function name: fallback
PC address: 855
Estimated Gas Usage: 17564 - 130100
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:1047

eToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setOutcome(), txdata: 0x0537665d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CategoricalEvent
Function name: fallback
PC address: 935
Estimated Gas Usage: 17564 - 130100
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:1047

eTokens[i].balanceO

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setOutcome(), txdata: 0x0537665d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CategoricalEvent
Function name: fallback
PC address: 935
Estimated Gas Usage: 17564 - 130100
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:1047

eTokens[i].balanceO

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setOutcome(), txdata: 0x0537665d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CategoricalEvent
Function name: fallback
PC address: 981
Estimated Gas Usage: 17564 - 130100
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:1047

] = outcomeTokens[i].balanceO

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setOutcome(), txdata: 0x0537665d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CategoricalEvent
Function name: fallback
PC address: 985
Estimated Gas Usage: 17564 - 130100
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:1049

  }



    /// @dev

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setOutcome(), txdata: 0x0537665d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CategoricalEvent
Function name: fallback
PC address: 1034
Estimated Gas Usage: 17564 - 130100
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:1049

  }



    /// @dev

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setOutcome(), txdata: 0x0537665d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CategoricalEvent
Function name: buyAllOutcomes(uint256)
PC address: 1268
Estimated Gas Usage: 4712 - 40756
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:973

/ Winning outcome is

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyAllOutcomes(uint256), txdata: 0x28da850b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CategoricalEvent
Function name: outcomeTokens(uint256)
PC address: 2221
Estimated Gas Usage: 1125 - 1550
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:933

, collateralTokenCount);

    }





--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: outcomeTokens(uint256), txdata: 0x8abe59ea, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CategoricalEvent
Function name: redeemWinnings()
PC address: 2323
Estimated Gas Usage: 2812 - 3237
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/27691235c4f3077f08c310f907f1348d.sol:1187
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setOutcome(), txdata: 0x0537665d, value: 0x0
Caller: [SOMEGUY], function: redeemWinnings(), txdata: 0xad0b2bec, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CategoricalEvent
Function name: getEventHash()
PC address: 3027
Estimated Gas Usage: 3477 - 6347
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getEventHash(), txdata: 0xe96e5950, value: 0x0


