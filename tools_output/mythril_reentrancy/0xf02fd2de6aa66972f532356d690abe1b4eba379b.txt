==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PorusCoin
Function name: approve(address,uint256) or approve(address,uint256) or approve(address,uint256)
PC address: 2140
Estimated Gas Usage: 1155 - 1580
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7b6ad5b2ed9dd6406187075a000159e2.sol:475

 want to transfer to

   * @param tokens uint256 the amount of tokens to be transferred

   */





    function transferFrom(address from, address to, uint tokens) public whenNotPaused onlyPayloadSize(3) returns (bool success) {

        require(tokens > 0);

        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PorusCoin
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 2505
Estimated Gas Usage: 1232 - 1657
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7b6ad5b2ed9dd6406187075a000159e2.sol:501

d(tokens);

        emit Transfer(from, to, tokens);

        return true;

    }

 



   /**

   * @dev Burns a specific amount of tokens.

   * @param _value The amount of token to be burned.

   */

    function burn(uint _value) public returns (bool success) {

        require(balances[msg.sender] >= _value);

        balances[msg.sender] = balances[msg.sender].sub(_value);

        _totalSupply =_totalSupply.sub(_value);

        emit Burn(msg.sender, _value);

        return true;

    }

  

  /**

   * @dev Burns a specific amount of tokens from the target address and dec

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PorusCoin
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 6281
Estimated Gas Usage: 1463 - 1888
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7b6ad5b2ed9dd6406187075a000159e2.sol:439

sed address to spend the specified amount of tokens on behalf of msg.sender.

   * Beware that changing an allowance with this method brings the risk that someone may use both the old

   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this

   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:

   * h

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PorusCoin
Function name: transferAnyERC20Token(address,uint256)
PC address: 7255
Estimated Gas Usage: 4902 - 40595
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7b6ad5b2ed9dd6406187075a000159e2.sol:627
Initial State:

Account: [CREATOR], balance: 0x100000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,uint256), txdata: 0xdc39d06d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0