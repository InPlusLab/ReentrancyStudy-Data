==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: betOnTrump
Function name: fallback
PC address: 114
Estimated Gas Usage: 2409 - 37115
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:141
Initial State:

Account: [CREATOR], balance: 0x4a040000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10001000000200200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefvalue: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: election2020
Function name: setElectionResult(uint8)
PC address: 3487
Estimated Gas Usage: 1109 - 1534
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:59

esult = _electionResult;
  }

  /**
   * 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setElectionResult(uint8), txdata: 0x057b78a20000000000000000000000000440400000000080080140004002802020080200, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: election2020
Function name: setElectionResult(uint8)
PC address: 3515
Estimated Gas Usage: 1123 - 1548
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:59

lectionResult = _electionResult;
  }

  /**
   * O

--------------------
Initial State:

Account: [CREATOR], balance: 0x80040002000403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setElectionResult(uint8), txdata: 0x057b78a20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: election2020
Function name: setElectionDay(uint256)
PC address: 3675
Estimated Gas Usage: 1169 - 1594
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:34

onResult);
    electionDay = _electionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x9010ac0400e353b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setElectionDay(uint256), txdata: 0x0d5634ed0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: election2020
Function name: setElectionDay(uint256)
PC address: 3703
Estimated Gas Usage: 1183 - 1608
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:34

= electionResult);
    electionDay = _electionDay;

--------------------
Initial State:

Account: [CREATOR], balance: 0xd80321, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setElectionDay(uint256), txdata: 0x0d5634ed0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: election2020
Function name: betOnTrump()
PC address: 3727
Estimated Gas Usage: 1034 - 1129
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:47

te - election has started!");
    uint256 fee = (msg.value * feePerc) / 10

--------------------
Initial State:

Account: [CREATOR], balance: 0x400002409, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betOnTrump(), txdata: 0x16ac2904, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: election2020
Function name: withdrawFees()
PC address: 4135
Estimated Gas Usage: 1087 - 1512
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:66

!");
    owner.transfer(fees);
    fees =

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFees(), txdata: 0x476343ee, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: election2020
Function name: withdrawFees()
PC address: 4164
Estimated Gas Usage: 1101 - 1526
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:66

complete!");
    owner.transfer(fees);
    fees = 0;
  }

  /**
   * Better 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFees(), txdata: 0x476343ee, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: election2020
Function name: setDAppURL(string)
PC address: 4478
Estimated Gas Usage: 1491 - 4598
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:100

returns (uint256 myBetsTrum

--------------------
Initial State:

Account: [CREATOR], balance: 0x402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setDAppURL(string), txdata: 0x4b4860010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: election2020
Function name: betOnBiden()
PC address: 4936
Estimated Gas Usage: 1033 - 1128
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/e88b5e6f474b7af24dc296897b67ffbd.sol:39

 "Too late - election has started!");
    uint256 fee = (msg.value * feePe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000040014050, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betOnBiden(), txdata: 0xb914f9fe, value: 0x0