==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 269
Estimated Gas Usage: 56036 - 297388
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:172

_addresses.length; i++) {
            uint256 weightedContribution = (bst.balanceOf(_addresses[i]).mul(_amount[i])).div(10**18);

            FirstBuyer storage buyer = firstBuyers[_addresses[i]];
            uint256 before = buyer.tokensReceived;
            buyer.tokensReceived = buyer.tokensReceived.add(_amount[i]);
            buyer.weightedContribution = buyer.weightedContribution.add(weightedContribution);

            property.mintTokens(_addresses[i], _amount[i]);
            firstBuyers[_addresses[i]] = buyer;

            totalWeightedContribution = totalWeightedContribution.add(weightedContribution);
            if(before == 0) {
                firstBuyerIndex[numOfFirstBuyers] = _addresses[i];
                numOfFirstBuyers++;
            }
        }
    }

    /**
    * @dev allows First buyers to collect fee from transactions
    **/
    function withdrawTokens() public onlyFirstBuyer {
        FirstBuyer storage buyer = firstBuyers[msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000080200008000020082080018080008080200010000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 980
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1014
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:180

[i], _amount[i]);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1031
Estimated Gas Usage: 56036 - 297388
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:183

otalWeightedContribution =

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1036
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:183

otalWeightedContribution = totalWeightedContribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1057
Estimated Gas Usage: 56036 - 297388
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:183

ribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1060
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:184

   if(before 

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1211
Estimated Gas Usage: 56036 - 297388
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:183

ribution);
            if(before == 0) {
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x180080000010020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff980, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1211
Estimated Gas Usage: 56036 - 297388
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:183

ribution);
            if(before == 0) {
     

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0582, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000001010101010100000000000000010000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829900000000000000000000000000000000000000000000000000000000000000280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1211
Estimated Gas Usage: 56036 - 297388
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:183

ribution);
            if(before == 0) {
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1287
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:185

tBuyerIndex[numOfFirstBuye

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1289
Estimated Gas Usage: 56036 - 297388
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:185

tBuyerIndex[numOfFirstBuyers] = _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1295
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:185

tBuyerIndex[numOfFirstBuyers] = _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1299
Estimated Gas Usage: 56036 - 297388
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:185

tBuyerIndex[numOfFirstBuyers] = _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1305
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:185

tBuyerIndex[numOfFirstBuyers] = _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1308
Estimated Gas Usage: 56036 - 297388
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:185

tBuyerIndex[numOfFirstBuyers] = _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1311
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:185

tBuyerIndex[numOfFirstBuyers] = _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1330
Estimated Gas Usage: 56036 - 297388
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:186

            numOfFirstBuyers++;
            }
        }
    }

    /**
    * @d

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1367
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:194

  function withd

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1384
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:192

tions
    **/
    function withdrawTokens() publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1424
Estimated Gas Usage: 56036 - 297388
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:192

tions
    **/
    function withdrawTokens() publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1426
Estimated Gas Usage: 56036 - 297388
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:195

        FirstBuyer

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FirstBuyers
Function name: addFirstBuyers(address[],uint256[])
PC address: 1431
Estimated Gas Usage: 56036 - 297388
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:195

        FirstBuyer

--------------------
Initial State:

Account: [CREATOR], balance: 0x20e0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000001001800801010400010001080208010180000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addFirstBuyers(address[],uint256[]), txdata: 0x281fe829800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PropToken
Function name: name()
PC address: 1792
Estimated Gas Usage: 2359 - 4430
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:327

stBuyers public firstBuyers; //FirstBuyers
    add

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PropToken
Function name: symbol()
PC address: 2721
Estimated Gas Usage: 2651 - 4722
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:328

und; // Address of Reserve funds
    address pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PropToken
Function name: getPropertyInfo(uint8)
PC address: 2812
Estimated Gas Usage: 1331 - 1756
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/880dd71e7b12d2e8cb4c7155e4e7671e.sol:555
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPropertyInfo(uint8), txdata: 0x9cae9e03, value: 0x0