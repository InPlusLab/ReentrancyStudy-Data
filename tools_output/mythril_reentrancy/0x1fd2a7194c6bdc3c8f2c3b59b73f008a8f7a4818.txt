==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenTimelock
Function name: getTokens()
PC address: 1212
Estimated Gas Usage: 2036 - 2511
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/57cef78ace402cdad24661ed7de49725.sol:367
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addTokens(address,uint256,uint256), txdata: 0xca056aed000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe20, value: 0x0
Caller: [CREATOR], function: getTokens(), txdata: 0xaa6ca808, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTimelock
Function name: addTokens(address,uint256,uint256)
PC address: 1797
Estimated Gas Usage: 15226 - 91584
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/57cef78ace402cdad24661ed7de49725.sol:363

releaseTime[msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5c5c5c5c5c5c5c5c5c5c5c5cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addTokens(address,uint256,uint256), txdata: 0xca056aed00000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTimelock
Function name: addTokens(address,uint256,uint256)
PC address: 1877
Estimated Gas Usage: 15226 - 91584
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/57cef78ace402cdad24661ed7de49725.sol:361

der] = 0;

        releaseTime[msg.sender] = 0;

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5c5c5c5c5c5c5c5c5c5c5c5cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addTokens(address,uint256,uint256), txdata: 0xca056aed00000000000000000000000040, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenTimelock
Function name: addTokens(address,uint256,uint256)
PC address: 1884
Estimated Gas Usage: 15226 - 91584
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/57cef78ace402cdad24661ed7de49725.sol:367
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addTokens(address,uint256,uint256), txdata: 0xca056aed00000000000000000000000000000000800000000000000000000000000000000280a380416a8090c4f3800401780619d11408000861614a4081c00240200c0002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenTimelock
Function name: addTokens(address,uint256,uint256)
PC address: 1886
Estimated Gas Usage: 15226 - 91584
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/57cef78ace402cdad24661ed7de49725.sol:367
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addTokens(address,uint256,uint256), txdata: 0xca056aed000000000000000000000000000000000000000000000200000000000000000001010101010101010101010101028020421161020e208100020000080880080901, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTimelock
Function name: addTokens(address,uint256,uint256)
PC address: 1952
Estimated Gas Usage: 15226 - 91584
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/57cef78ace402cdad24661ed7de49725.sol:367
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5c5c5c5c5c5c5c5c5c5c5c5cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addTokens(address,uint256,uint256), txdata: 0xca056aed00000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenTimelock
Function name: addTokens(address,uint256,uint256)
PC address: 2557
Estimated Gas Usage: 15226 - 91584
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/57cef78ace402cdad24661ed7de49725.sol:157

ken.approve(spender, value));

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5c5c5c5c5c5c5c5c5c5c5c5cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addTokens(address,uint256,uint256), txdata: 0xca056aed00000000000000000000000001, value: 0x0