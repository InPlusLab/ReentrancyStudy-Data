==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CucuSale
Function name: constructor
PC address: 273
Estimated Gas Usage: 54573 - 261249
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:133

 * Fallback function

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010118, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CucuSale
Function name: constructor
PC address: 275
Estimated Gas Usage: 54573 - 261249
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:131



     * Fallback function

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CucuSale
Function name: setGlobalLocktime(uint256)
PC address: 2850
Estimated Gas Usage: 8602 - 29894
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:313

ew locktype

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 525252525252525252525252aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setGlobalLocktime(uint256), txdata: 0x303b52c866, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CucuSale
Function name: setGlobalLocktime(uint256)
PC address: 2852
Estimated Gas Usage: 8602 - 29894
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:313

ting new locktype

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3b3b3b3b3b3b3b3b3b3b3b3baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setGlobalLocktime(uint256), txdata: 0x303b52c823, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CucuSale
Function name: getLeftOver(uint256)
PC address: 3388
Estimated Gas Usage: 18728 - 95762
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:361
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3b3b3b3b3b3b3b3b3b3b3b3bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef3b3b3b3b3b3b3b3b3b3b3b3bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLeftOver(uint256), txdata: 0x6b1557be, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CucuSale
Function name: getLeftOver(uint256)
PC address: 3487
Estimated Gas Usage: 18728 - 95762
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:361
Initial State:

Account: [CREATOR], balance: 0x40000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 525252525252525252525252deadbeefdeadbeefdeadbeefdeadbeefdeadbeef525252525252525252525252deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLeftOver(uint256), txdata: 0x6b1557be, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CucuSale
Function name: getLeftOver(uint256)
PC address: 3519
Estimated Gas Usage: 18728 - 95762
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:361
Initial State:

Account: [CREATOR], balance: 0x40000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 525252525252525252525252deadbeefdeadbeefdeadbeefdeadbeefdeadbeef525252525252525252525252deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLeftOver(uint256), txdata: 0x6b1557be, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CucuSale
Function name: getLeftOver(uint256)
PC address: 3598
Estimated Gas Usage: 18728 - 95762
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:361
Initial State:

Account: [CREATOR], balance: 0x40000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 525252525252525252525252deadbeefdeadbeefdeadbeefdeadbeefdeadbeef525252525252525252525252deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLeftOver(uint256), txdata: 0x6b1557be, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CucuSale
Function name: doChargeCrowdsale(uint256)
PC address: 4093
Estimated Gas Usage: 23053 - 119897
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:213

s after timelock has expired

    */

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: doChargeCrowdsale(uint256), txdata: 0x8e69911f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CucuSale
Function name: doChargeCrowdsale(uint256)
PC address: 4154
Estimated Gas Usage: 23053 - 119897
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:213

ws to claim tokens after timelock has expired

    */

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: doChargeCrowdsale(uint256), txdata: 0x8e69911f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CucuSale
Function name: doChargeCrowdsale(uint256)
PC address: 4160
Estimated Gas Usage: 23053 - 119897
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:217

 claimTokens(a

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: doChargeCrowdsale(uint256), txdata: 0x8e69911f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CucuSale
Function name: doChargeCrowdsale(uint256)
PC address: 4178
Estimated Gas Usage: 23053 - 119897
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:217

{

      requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: doChargeCrowdsale(uint256), txdata: 0x8e69911f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CucuSale
Function name: doChargeCrowdsale(uint256)
PC address: 4192
Estimated Gas Usage: 23053 - 119897
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:217

{

      requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: doChargeCrowdsale(uint256), txdata: 0x8e69911f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CucuSale
Function name: doChargeCrowdsale(uint256)
PC address: 4232
Estimated Gas Usage: 23053 - 119897
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:219





   

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: doChargeCrowdsale(uint256), txdata: 0x8e69911f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CucuSale
Function name: founders(uint256)
PC address: 4567
Estimated Gas Usage: 1366 - 1461
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:67

 event FundTransfer(addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: founders(uint256), txdata: 0xd8e75f62, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CucuSale
Function name: setDynamicLocktime(uint256)
PC address: 6904
Estimated Gas Usage: 9086 - 30378
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:325

 tokens unlockab

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setDynamicLocktime(uint256), txdata: 0xf6dc202458, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CucuSale
Function name: setDynamicLocktime(uint256)
PC address: 6906
Estimated Gas Usage: 9086 - 30378
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8a3a9a67908802a5f26578b624719a89.sol:325

 makes tokens unlockab

--------------------
Initial State:

Account: [CREATOR], balance: 0x300, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setDynamicLocktime(uint256), txdata: 0xf6dc202403, value: 0x0