==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AIgathaToken
Function name: constructor
PC address: 230
Estimated Gas Usage: 52393 - 239872
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d6e1db9490e85f4d5296248232dad939.sol:261

alSupply.sub(saleCap);
  }

  functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000802001080102202040200200001080400240082008, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AIgathaToken
Function name: constructor
PC address: 246
Estimated Gas Usage: 52393 - 239872
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d6e1db9490e85f4d5296248232dad939.sol:264

view returns (uint256) {
    return bala

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101040100080102004040400400000080000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AIgathaToken
Function name: constructor
PC address: 519
Estimated Gas Usage: 45552 - 210207
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d6e1db9490e85f4d5296248232dad939.sol:273

tion extendSaleTime() on

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0404040404040404040404040404040404040404040404040404040404040404040426, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenERC20
Function name: approveAndCall(address,uint256,bytes) or approveAndCall(address,uint256,bytes)
PC address: 3270
Estimated Gas Usage: 9532 - 69060
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d6e1db9490e85f4d5296248232dad939.sol:178

` tokens from the system irreversibly
   * @param _value The 

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000ff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenERC20
Function name: burn(uint256) or burn(uint256)
PC address: 3454
Estimated Gas Usage: 1203 - 1488
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d6e1db9490e85f4d5296248232dad939.sol:190

ount
   * @dev Remove `_value` t

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burn(uint256), txdata: 0x42966c6801, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenERC20
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 3454
Estimated Gas Usage: 1309 - 1784
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d6e1db9490e85f4d5296248232dad939.sol:145

r address
   * @dev Allows `_spender` 

--------------------
Initial State:

Account: [CREATOR], balance: 0x20760000002a804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000102000002010080800040800000800000000000000000000000000000000000000000000000000000000100000000008001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenERC20
Function name: burnFrom(address,uint256) or burnFrom(address,uint256)
PC address: 3454
Estimated Gas Usage: 1389 - 1864
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d6e1db9490e85f4d5296248232dad939.sol:207

@title AIgathaToken
 * @author Jun-You

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burnFrom(address,uint256), txdata: 0x79cc6790000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AIgathaToken
Function name: fallback
PC address: 4780
Estimated Gas Usage: 909 - 1004
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d6e1db9490e85f4d5296248232dad939.sol:279

 }

  /**
   * @dev Get the rate of exchange ac

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AIgathaToken
Function name: fallback
PC address: 4794
Estimated Gas Usage: 929 - 1024
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d6e1db9490e85f4d5296248232dad939.sol:279

 }

  /**
   * @dev Get the rate of exchange according to the p

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000042000006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000bcef010000008200000000000000000205232800102a081097ed924b7242a60024df20000e2ae06a1dd064c3cd3e45eb45d20000089001008800605822b28a808281000000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0