==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: deracle
Function name: sosPayout()
PC address: 1942
Estimated Gas Usage: 15991 - 143406
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0498ddedf89d4e3e2da695b7cbec1e3c.sol:687
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sosPayout(), txdata: 0x1a107286, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: deracle
Function name: sosPayout()
PC address: 1986
Estimated Gas Usage: 15991 - 143406
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0498ddedf89d4e3e2da695b7cbec1e3c.sol:687
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sosPayout(), txdata: 0x1a107286, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: deracle
Function name: sosPayout()
PC address: 2094
Estimated Gas Usage: 15991 - 143406
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0498ddedf89d4e3e2da695b7cbec1e3c.sol:687
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sosPayout(), txdata: 0x1a107286, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: deracle
Function name: sosPayout()
PC address: 2139
Estimated Gas Usage: 15991 - 143406
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0498ddedf89d4e3e2da695b7cbec1e3c.sol:687
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sosPayout(), txdata: 0x1a107286, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: deracle
Function name: sosPayout()
PC address: 2148
Estimated Gas Usage: 15991 - 143406
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0498ddedf89d4e3e2da695b7cbec1e3c.sol:687
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sosPayout(), txdata: 0x1a107286, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: deracle
Function name: userids(address,uint256)
PC address: 2215
Estimated Gas Usage: 1244 - 2189
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0498ddedf89d4e3e2da695b7cbec1e3c.sol:159

extPosition = 1;
    address public token;

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000083e3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: userids(address,uint256), txdata: 0x2e17ae4e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: deracle
Function name: sosPayout()
PC address: 2261
Estimated Gas Usage: 15991 - 143406
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0498ddedf89d4e3e2da695b7cbec1e3c.sol:664

       returns (boo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sosPayout(), txdata: 0x1a107286, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: deracle
Function name: testSetExpiryTrue()
PC address: 3047
Estimated Gas Usage: 5577 - 26002
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0498ddedf89d4e3e2da695b7cbec1e3c.sol:687
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: testSetExpiryTrue(), txdata: 0x90f671e3, value: 0x0


