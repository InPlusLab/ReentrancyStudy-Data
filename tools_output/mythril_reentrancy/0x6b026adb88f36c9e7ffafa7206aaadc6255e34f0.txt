==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: fallback
PC address: 344
Estimated Gas Usage: 82 - 177
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Poker
Function name: constructor
PC address: 1221
Estimated Gas Usage: 185525 - 948247
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:313

alue >=  minBet

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Poker
Function name: constructor
PC address: 1385
Estimated Gas Usage: 185525 - 948247
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:313

th && msg.valu

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Poker
Function name: constructor
PC address: 1385
Estimated Gas Usage: 185525 - 948247
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:313

th && msg.valu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Poker
Function name: constructor
PC address: 1651
Estimated Gas Usage: 185525 - 948247
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:313

th,"value is incorrect" );



        bool _ret=false;

        uint _betAmount= msg.va

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: freeLottoInfo()
PC address: 2179
Estimated Gas Usage: 222 - 317
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: freeLottoInfo(), txdata: 0x29e1ddb8, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateLottoParams(uint256,uint256,uint256)
PC address: 2712
Estimated Gas Usage: 342 - 437
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x39, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateLottoParams(uint256,uint256,uint256), txdata: 0x2e519dd5, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateLottoParams(uint256,uint256,uint256)
PC address: 2926
Estimated Gas Usage: 1952 - 2377
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:686


        if(_acc==1){wallet1=_addr;}

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateLottoParams(uint256,uint256,uint256), txdata: 0x2e519dd5, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateLottoParams(uint256,uint256,uint256)
PC address: 3015
Estimated Gas Usage: 1972 - 2397
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:685

uman(){

        if(_acc==1){wallet1=_addr;}

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateLottoParams(uint256,uint256,uint256), txdata: 0x2e519dd5, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateStatus(uint256,bool)
PC address: 3256
Estimated Gas Usage: 343 - 438
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateStatus(uint256,bool), txdata: 0x387008c2, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateStatus(uint256,bool)
PC address: 3470
Estimated Gas Usage: 1953 - 2378
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:651

(msg.sender==owner || msg.sender==opAddres

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateStatus(uint256,bool), txdata: 0x387008c2, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateStatus(uint256,bool)
PC address: 3559
Estimated Gas Usage: 1973 - 2398
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:651

 require(msg.sender==owner || msg.sender==opAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateStatus(uint256,bool), txdata: 0x387008c2, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateRndSeed(address)
PC address: 3818
Estimated Gas Usage: 344 - 439
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateRndSeed(address), txdata: 0x40903d8b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateRndSeed(address)
PC address: 4032
Estimated Gas Usage: 1954 - 2379
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:609

tus) public isHuman(){

        require(ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x20446e32a0c500fcd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateRndSeed(address), txdata: 0x40903d8b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateRndSeed(address)
PC address: 4121
Estimated Gas Usage: 1974 - 2399
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:609

ool _status) public isHuman(){

        require(msg.sender==

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateRndSeed(address), txdata: 0x40903d8b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: play(uint256,uint256[])
PC address: 4926
Estimated Gas Usage: 558 - 3240
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x10001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: play(uint256,uint256[]), txdata: 0x4281b34b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Poker
Function name: play(uint256,uint256[])
PC address: 5345
Estimated Gas Usage: 3892 - 7183
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:321

    uint _prize=0;

        

        uint _winNo= uint(keccak256(abi.encodePacked(rndSeed,msg.sender,block.coinbase,block.timestamp, block.difficulty,block.gaslimit))) % 52 + 1;

        rndSeed = keccak256(abi.encodePacked(msg.sender,block.timestamp,rndSeed, block.difficulty));

        

        if(_gType==1){

            if(_betAmount * odds['bs']  / 1 ether >= address(this).balance/2){

                revert("over max bet amount");

            }

            

            if((_winNo >= 29 && _bet.contain(2)) || (_winNo <= 24 && _bet.contain(1))){

                _ret=true;

                _prize=(_betAmount * odds['bs']) / 1 ether;

            }else if(_winNo>=25 && _winNo <=28 && _bet.contain(0)){

                _ret=true;

                _prize=(_betAmount * 12 ether) / 1 ether; 

            }

        }

        

        /*

        ret%4=0 spades;

        ret%4=1 hearts

        ret%4=2 clubs;

        ret%4=3 diamonds;

        */

        if(_gType==2 && _bet.contain(_winNo%4+1)){

            if(_betAmount * odds['suit'] / 1 ether >= address(this).balance/2){

                revert("over max bet amount");

            }

            

            _ret=true;

            _prize=(_betAmount * odds['suit']) / 1 ether; 

        }

        

        if(_gType==3 && _bet.contain((_winNo-1)/4+1)){

            if(_betAmount * odds['num'] / 1 ether >= address(this).balance/2){

                revert("over max bet amount");

            }

            

            _ret=true;

            _prize=(_betAmount * odds['num']) / 1 ether; 

        }

        

        if(_gType==4 && _bet.contain(_winNo)){

            if(_betAmount * odds['nsuit'] / 1 ether >= address(this).balance/2){

                revert("over max bet amount");

            }

            

            _ret=true;

            _prize=(_betAmount * odds['nsuit']) / 1 ether; 

            

        }



        if(_ret){

            msg.sender.transfer(_prize);

        }else{

            jpBalance += (msg.value * jpPercent) / 100 ether;

        }

        

        

        /* JackPot*/

        uint tmpJackpot=0;

        if(_betAmount >= jpMinBetAmount){

            uint _jpNo= uint(keccak256(abi.encodePacked(rndSeed,msg.sender,block.coinbase,block.timestamp, block.difficulty,block.gaslimit))) % jpChance;

            if(_jpNo==77 && jpBalance>jpMinPrize){

                msg.sender.transfer(jpBalance);

                emit JackpotPayment(guid,msg.sender,_betAmount,jpBalance);

                tmpJackpot=jpBalance;

                jpBalance=0;

            }else{

                tmpJackpot=0;

            }

            

            rndSeed = keccak256(abi.encodePacked(block.coinbase,msg.sender,block.timestamp, block.difficulty,rndSeed));

        }

        

        emit Bettings(guid,_gType,msg.sender,_bet,_ret,_winNo,msg.value,_prize,tmpJackpot);

        

        guid+=1;

    }

    

    function freeLottery(uint _gid) public isHuman(){

        require(!gamePaused,'Game Pause');

        require(freeLottoActive && lotto[_gid].active,'Free Lotto is closed');

        require(now - lotto[_gid].lastTime[msg.sender] >= lotto[_gid].freezeTimer,'in the freeze time');

        

        uint chancex=1;

        uint winNo = 0;

        if(playerCount[msg.sender]>=3){

            chancex=2;

        }

        if(playerCount[msg.sender]>=6){

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x410c0000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: play(uint256,uint256[]), txdata: 0x4281b34b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: distribute(uint256)
PC address: 9293
Estimated Gas Usage: 1296 - 1721
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:51





  /**

   * @dev Allows 

--------------------
Initial State:

Account: [CREATOR], balance: 0x5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: distribute(uint256), txdata: 0x91c05b0b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: distribute(uint256)
PC address: 9357
Estimated Gas Usage: 1349 - 1774
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distribute(uint256), txdata: 0x91c05b0b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: updateOdds(string,uint256)
PC address: 9927
Estimated Gas Usage: 727 - 3409
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x13, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateOdds(string,uint256), txdata: 0xbd3a2ef4, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: getAddr(uint256)
PC address: 10466
Estimated Gas Usage: 1400 - 1825
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:51





  /**

   * @dev Allows 

--------------------
Initial State:

Account: [CREATOR], balance: 0x800003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getAddr(uint256), txdata: 0xd81f84b7, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: freeLottery(uint256)
PC address: 10694
Estimated Gas Usage: 605 - 700
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freeLottery(uint256), txdata: 0xeb2a7c4a, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: setAddr(uint256,address)
PC address: 12993
Estimated Gas Usage: 1474 - 1899
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:51





  /**

   * @dev Allows 

--------------------
Initial State:

Account: [CREATOR], balance: 0x23, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAddr(uint256,address), txdata: 0xeba36dbd, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: setAddr(uint256,address)
PC address: 13057
Estimated Gas Usage: 1527 - 1952
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAddr(uint256,address), txdata: 0xeba36dbd, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 13503
Estimated Gas Usage: 1469 - 1894
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:51





  /**

   * @dev Allows 

--------------------
Initial State:

Account: [CREATOR], balance: 0xb8002003c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: withdraw(address,uint256)
PC address: 13723
Estimated Gas Usage: 1521 - 1946
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:51





  /**

   * @dev Allows 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdraw(address,uint256), txdata: 0xf3fef3a3, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Poker
Function name: withdraw(address,uint256)
PC address: 13787
Estimated Gas Usage: 1574 - 1999
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/45e1b1594ba87b3a35bc0237c4d616f3.sol:91

bly {_codeLength := extcodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256), txdata: 0xf3fef3a3, value: 0x0