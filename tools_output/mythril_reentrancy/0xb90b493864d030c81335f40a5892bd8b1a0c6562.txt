==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Offers
Function name: constructor
PC address: 239
Estimated Gas Usage: 52620 - 275271
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:1129

 yet been removed from storage,

    ///  the new offer can be

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 434
Estimated Gas Usage: 52620 - 275271
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:1131

minimumTotalValue.

    /// @notice Wor

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 457
Estimated Gas Usage: 52620 - 275271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:1131

minimumTotalValue.

    /// @notice Wor

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 482
Estimated Gas Usage: 52620 - 275271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:1135

fer for

    function createOffe

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 487
Estimated Gas Usage: 52620 - 275271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:1137

kenId) external payable whenNotFro

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 565
Estimated Gas Usage: 52620 - 275271
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:69

     _;

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Offers
Function name: batchRemoveExpired(uint256[])
PC address: 634
Estimated Gas Usage: 3414 - 4549
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:1577

              toRefund

            );



            emit ExpiredOfferRemoved(

                tokenId,

                bidder,

                toRefund,

                cfoEarnings

            );

        }



        // Add to CFO's balance if any expired offer has been removed

        if (cumulativeCFOEarnings > 0) {

            totalCFOEarnings += cumulativeCFOEarnings;

        }

    }



    /// @notice Updates an existing and active offer by setting a new expiration time and, optionally, raise

    ///  the price of the offer.

    /// @notice As the offers are always using the configuration values currently in storage, the updated

    ///  offer may be adhering to configuration values that are different at the time of its original creation.

    /// @dev We check msg.value to determine if the offer price should be raised. If 0, only a new

    ///  expiration time is set.

    /// @param _tokenId The token specified by the offer that will be updated.

    function updateOffer(uint256 _tokenId) external payable whenNotFrozen {

        // Check that offer exists and is active currently

        Offer storage offer = tokenIdToOffer[_tokenId];

        uint256 expiresAt = uint256(offer.expiresAt);

        require(_offerExists(expiresAt), "offer to update must exist");

        require(_isOfferActive(expiresAt), "offer to update must not be expired");



        require(msg.sender == offer.bidder, "caller must be bidder of offer to be updated");



        uint256 newExpiresAt = now + globalDuration;



        // Check if the caller wants to raise the offer as well

        if (msg.value > 0) {

            // Set the new price

            offer.total += uint128(msg.value);

        }



        offer.expiresAt = uint64(newExpiresAt);



        emit OfferUpdated(_tokenId, msg.sender, newExpiresAt, msg.value);



    }



    /// @notice Sends funds of each existing offer held in escrow back to bidders. The function is callable

    ///  by anyone.

    ///

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000100208800420100202204002000004804000100400000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: batchRemoveExpired(uint256[]), txdata: 0x1c091a5fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 884
Estimated Gas Usage: 52620 - 275271
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:183



    function setCF

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 912
Estimated Gas Usage: 52620 - 275271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:183



    function setCF

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 1069
Estimated Gas Usage: 52620 - 275271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:627

emitted when an offer i

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 1226
Estimated Gas Usage: 52620 - 275271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:641

  ///  if the offer is accepted.

    event Offer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Offers
Function name: constructor
PC address: 1232
Estimated Gas Usage: 52620 - 275271
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:607

@param _newMinimumPr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000081181, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Offers
Function name: constructor
PC address: 1385
Estimated Gas Usage: 52620 - 275271
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:609

on _setMinimumPriceIncrement(uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Offers
Function name: setUnsuccessfulFee(uint256)
PC address: 7788
Estimated Gas Usage: 9021 - 30313
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:549

l to 10000.

    /// @p

--------------------
Initial State:

Account: [CREATOR], balance: 0x42080800000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setUnsuccessfulFee(uint256), txdata: 0xbff2273e80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Offers
Function name: setMinimumTotalValue(uint256)
PC address: 9777
Estimated Gas Usage: 8761 - 30053
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1617485515a310c57353b42d3712a165.sol:607

@param _newMinimumPr

--------------------
Initial State:

Account: [CREATOR], balance: 0xfa2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000240101020301010001010041000000000000000000010000000000000001000000000000000000000000000000000000000000000000000000000000080880, value: 0x0
Caller: [ATTACKER], function: setMinimumTotalValue(uint256), txdata: 0x4ae772a4, value: 0x0


