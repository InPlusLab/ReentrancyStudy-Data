==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: HexLotto
Function name: participantEntries(uint256)
PC address: 2740
Estimated Gas Usage: 1237 - 1332
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/86b15d6e4c3461e5d8e1e3685d938010.sol:376

ddress(0), "Treasury contract isn

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: participantEntries(uint256), txdata: 0x7e9d61500000000000000000000000020000000000000040000810000080004002000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HexLotto
Function name: distributeToHex4()
PC address: 4886
Estimated Gas Usage: 8540 - 63011
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/86b15d6e4c3461e5d8e1e3685d938010.sol:463

+= quantity.mu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: distributeToHex4(), txdata: 0xe6eded5f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: HexLotto
Function name: players(uint256)
PC address: 5860
Estimated Gas Usage: 1257 - 1352
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/86b15d6e4c3461e5d8e1e3685d938010.sol:355

   uint256 threeYears = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: players(uint256), txdata: 0xf71d96cb0000000000000000000000000000000000000000000000000000000000000000, value: 0x0