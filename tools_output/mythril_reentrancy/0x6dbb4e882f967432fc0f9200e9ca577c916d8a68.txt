==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 2162
Estimated Gas Usage: 36750 - 195272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:239

{

      address cu

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 2259
Estimated Gas Usage: 36750 - 195272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:243

ner){

           res

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2465
Estimated Gas Usage: 34937 - 192798
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:205

e {

      require(erc721Address.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2504
Estimated Gas Usage: 34937 - 192798
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:205

e {

      require(erc721Address.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2515
Estimated Gas Usage: 34937 - 192798
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:205

e {

      require(erc721Address.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2523
Estimated Gas Usage: 34937 - 192798
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:205

e {

      require(erc721Address.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2561
Estimated Gas Usage: 34937 - 192798
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:207

der && prices[_tokenId].price != _ethPrice);

      uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2571
Estimated Gas Usage: 34937 - 192798
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:207

der && prices[_tokenId].price != _ethPrice);

      uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2577
Estimated Gas Usage: 34937 - 192798
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:207

der && prices[_tokenId].price != _ethPrice);

      uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2582
Estimated Gas Usage: 34937 - 192798
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:207

der && prices[_tokenId].price != _ethPrice);

      uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3272
Estimated Gas Usage: 38743 - 198635
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:257

int256 _hbWalletFee) publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3321
Estimated Gas Usage: 38743 - 198635
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:259

hbWalletFee > 0);

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3327
Estimated Gas Usage: 38743 - 198635
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:261

THFee = _ethFee;

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3340
Estimated Gas Usage: 38743 - 198635
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:263

   HBWALLETFee = _hbWalle

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3729
Estimated Gas Usage: 38743 - 198635
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3729
Estimated Gas Usage: 36750 - 195272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3768
Estimated Gas Usage: 38743 - 198635
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3768
Estimated Gas Usage: 36750 - 195272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3779
Estimated Gas Usage: 38743 - 198635
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3779
Estimated Gas Usage: 36750 - 195272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3787
Estimated Gas Usage: 38743 - 198635
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3787
Estimated Gas Usage: 36750 - 195272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3825
Estimated Gas Usage: 36750 - 195272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3825
Estimated Gas Usage: 38743 - 198635
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3835
Estimated Gas Usage: 36750 - 195272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3835
Estimated Gas Usage: 38743 - 198635
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3844
Estimated Gas Usage: 36750 - 195272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3844
Estimated Gas Usage: 38743 - 198635
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3849
Estimated Gas Usage: 36750 - 195272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3849
Estimated Gas Usage: 38743 - 198635
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/82e942ec1bbf4856c435bfabb94e48b6.sol:325
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0