==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArtMuseumBase
Function name: setCosts(uint128[])
PC address: 596
Estimated Gas Usage: 87845 - 338354
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:431

for (uint8 i = 0; i < costs.length; i++) {

			if (i < values.length)

				values[i] = costs[i] - costs[i] / 100 * fee;

			else {

				valu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCosts(uint128[]), txdata: 0x353db436ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ArtMuseum
Function name: setCosts(uint128[])
PC address: 716
Estimated Gas Usage: 87867 - 338376
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:431

for (uint8 i = 0; i < costs.length; i++) {

			if (i < values.length)

				values[i] = costs[i] - costs[i] / 100 * fee;

			else {

				valu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setCosts(uint128[]), txdata: 0x353db436ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ArtMuseumBase
Function name: collectFees(uint128)
PC address: 1902
Estimated Gas Usage: 7769 - 78970
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:327

, ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: collectFees(uint128), txdata: 0x28acb002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ArtMuseumBase
Function name: collectFees(uint128)
PC address: 1906
Estimated Gas Usage: 7769 - 78970
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:327

er) {

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: collectFees(uint128), txdata: 0x28acb002, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ArtMuseumBase
Function name: collectFees(uint128)
PC address: 2028
Estimated Gas Usage: 7769 - 78970
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:327

, address player) {

		retu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: collectFees(uint128), txdata: 0x28acb002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ArtMuseumBase
Function name: collectFees(uint128)
PC address: 2028
Estimated Gas Usage: 7769 - 78970
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:327

, address player) {

		retu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: collectFees(uint128), txdata: 0x28acb002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ArtMuseum
Function name: collectFees(uint128)
PC address: 2150
Estimated Gas Usage: 7791 - 78992
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:327

, ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x20008002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: collectFees(uint128), txdata: 0x28acb002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ArtMuseum
Function name: collectFees(uint128)
PC address: 2154
Estimated Gas Usage: 7791 - 78992
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:327

er) {

--------------------
Initial State:

Account: [CREATOR], balance: 0x20008002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: collectFees(uint128), txdata: 0x28acb002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArtMuseumBase
Function name: costs(uint256)
PC address: 2184
Estimated Gas Usage: 1090 - 1185
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:239

me*/

	uint128[] publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: costs(uint256), txdata: 0x49b3b29f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ArtMuseum
Function name: collectFees(uint128)
PC address: 2276
Estimated Gas Usage: 7791 - 78992
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:327

, address player) {

		retu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: collectFees(uint128), txdata: 0x28acb002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ArtMuseum
Function name: collectFees(uint128)
PC address: 2276
Estimated Gas Usage: 7791 - 78992
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:327

, address player) {

		retu

--------------------
Initial State:

Account: [CREATOR], balance: 0x20008002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: collectFees(uint128), txdata: 0x28acb002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArtMuseum
Function name: costs(uint256)
PC address: 2432
Estimated Gas Usage: 1112 - 1207
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:239

me*/

	uint128[] publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: costs(uint256), txdata: 0x49b3b29f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArtMuseumBase
Function name: values(uint256)
PC address: 3218
Estimated Gas Usage: 1178 - 1273
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:249

* total number of artwo

--------------------
Initial State:

Account: [CREATOR], balance: 0x200c000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: values(uint256), txdata: 0x5e383d21, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArtMuseum
Function name: values(uint256)
PC address: 3466
Estimated Gas Usage: 1222 - 1317
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:249

* total number of artwo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: values(uint256), txdata: 0x5e383d21, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArtMuseumBase
Function name: ids(uint256)
PC address: 5053
Estimated Gas Usage: 1486 - 1581
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:222


	/** the id of the

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ids(uint256), txdata: 0xfac333ac, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ArtMuseum
Function name: ids(uint256)
PC address: 5300
Estimated Gas Usage: 1530 - 1625
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1f838308a30efce150f3a53b369a8f93.sol:222


	/** the id of the

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ids(uint256), txdata: 0xfac333ac, value: 0x0


