==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: HasNoEther
Function name: reclaimEther() or reclaimEther()
PC address: 505
Estimated Gas Usage: 3353 - 38294
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:107

usable is Ownable {
  event Pause();
  event Unpause();

  bool public paused = false;



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimEther(), txdata: 0x9f727c27, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CanReclaimToken
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 544
Estimated Gas Usage: 5194 - 75544
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:178

t256;
    using SafeE

--------------------
Initial State:

Account: [CREATOR], balance: 0x300001042022a0084, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320c3c3c3c3c3c3c3c3c3c3c3c3deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CanReclaimToken
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 575
Estimated Gas Usage: 5194 - 75544
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:181

56 pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CanReclaimToken
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 1202
Estimated Gas Usage: 5194 - 75544
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:153

ferFrom(from, to, value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x300001042022a0084, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320c3c3c3c3c3c3c3c3c3c3c3c3deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CanReclaimToken
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 1202
Estimated Gas Usage: 5194 - 75544
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:153

ferFrom(from, to, value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CanReclaimToken
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 1202
Estimated Gas Usage: 5194 - 75544
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:153

ferFrom(from, to, value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EcoVault
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 1373
Estimated Gas Usage: 5212 - 75562
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:178

t256;
    using SafeE

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EcoVault
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 1404
Estimated Gas Usage: 5212 - 75562
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:181

56 pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EcoVault
Function name: withdraw()
PC address: 1586
Estimated Gas Usage: 227 - 322
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:222

 contribute(uint256 _amount) whenAbleToContribute(_amount) whenNot

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EcoVault
Function name: withdraw()
PC address: 1661
Estimated Gas Usage: 247 - 342
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:219

);
    }

    function contribute(uint256 _amount) whenAbleToContribute(_amount) whenNotPaused publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EcoVault
Function name: reclaimEther() or reclaimEther()
PC address: 2713
Estimated Gas Usage: 3617 - 38558
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:107

usable is Ownable {
  event Pause();
  event Unpause();

  bool public paused = false;



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimEther(), txdata: 0x9f727c27, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EcoVault
Function name: contribute(uint256)
PC address: 2730
Estimated Gas Usage: 478 - 573
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:202

.add(_amount) <= MAX_TOTAL_CONTRIBUTIONS &&
            token.a

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: contribute(uint256), txdata: 0xc1cbbca7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EcoVault
Function name: contribute(uint256)
PC address: 2745
Estimated Gas Usage: 498 - 593
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:202

.add(_amount) <= MAX_TOTAL_CONTRIBUTIONS &&
            token.allowance(msg.sender, this) >

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: contribute(uint256), txdata: 0xc1cbbca7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EcoVault
Function name: contribute(uint256)
PC address: 2757
Estimated Gas Usage: 518 - 613
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:202

.add(_amount) <= MAX_TOTAL_CONTRIBUTIONS &&
            token.allowance(msg.sender, this) >= _amount
        );
        _;
    }

    modifier whenAbleToWithdraw()
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: contribute(uint256), txdata: 0xc1cbbca7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EcoVault
Function name: contribute(uint256)
PC address: 2860
Estimated Gas Usage: 538 - 633
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:202

.add(_amount) <= MAX_TOTAL_CONTRIBUTIONS &&
            token.allowance(msg.sender, this) >= _amount
        );
        _;
    }

    modifier whenAbleToWithdraw()
    {
        require(
            now >= TIME_LOCK_END &&
            contri

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: contribute(uint256), txdata: 0xc1cbbca7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EcoVault
Function name: contribute(uint256)
PC address: 2903
Estimated Gas Usage: 558 - 653
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:202

.add(_amount) <= MAX_TOTAL_CONTRIBUTIONS &&
            token.allowance(msg.sender, this) >= _amount
        );
        _;
    }

    modifier whenAbleToWithdraw()
    {
        require(
            now >= TIME_LOCK_END &&
            contributions[msg.sender] > 0
        );
        _;
    }

    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: contribute(uint256), txdata: 0xc1cbbca7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EcoVault
Function name: contribute(uint256)
PC address: 3160
Estimated Gas Usage: 21730 - 133707
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:212

r] > 0
        );
        _;
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3a3a3a3a3a3a3a3a3a3a3a3adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000002, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: EcoVault
Function name: contribute(uint256)
PC address: 3190
Estimated Gas Usage: 578 - 673
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:202

    totalContributions.add(_amount) <= MAX_TOTAL_CONTRIBUTIONS &&
            token.allowance(msg.sender, this) >= _amount
        );
        _;
    }

    modifier whenAbleToWithdraw()
    {
        require(
            now >= TIME_LOCK_END &&
            contributions[msg.sender] > 0
        );
        _;
    }

    function EcoVau

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: contribute(uint256), txdata: 0xc1cbbca7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EcoVault
Function name: contribute(uint256)
PC address: 3201
Estimated Gas Usage: 21730 - 133707
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:125

odifie

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3a3a3a3a3a3a3a3a3a3a3a3adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EcoVault
Function name: contribute(uint256)
PC address: 3291
Estimated Gas Usage: 21730 - 133707
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:230

 contributionsOf(address 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3a3a3a3a3a3a3a3a3a3a3a3adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EcoVault
Function name: contribute(uint256)
PC address: 3371
Estimated Gas Usage: 21730 - 133707
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:227

amount);
    }

    function contributionsOf(address _addr) public

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3a3a3a3a3a3a3a3a3a3a3a3adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EcoVault
Function name: contribute(uint256)
PC address: 3379
Estimated Gas Usage: 21730 - 133707
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:231

{
        return c

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3a3a3a3a3a3a3a3a3a3a3a3adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EcoVault
Function name: contribute(uint256)
PC address: 3398
Estimated Gas Usage: 21730 - 133707
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:230

eturns (uint256)
    {
        return contributions[

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3a3a3a3a3a3a3a3a3a3a3a3adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EcoVault
Function name: contribute(uint256)
PC address: 3411
Estimated Gas Usage: 21730 - 133707
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:233

 }

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3a3a3a3a3a3a3a3a3a3a3a3adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000010, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EcoVault
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 4124
Estimated Gas Usage: 5212 - 75562
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:153

ferFrom(from, to, value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EcoVault
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 4124
Estimated Gas Usage: 5212 - 75562
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:153

ferFrom(from, to, value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000400000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EcoVault
Function name: reclaimToken(address) or reclaimToken(address)
PC address: 4124
Estimated Gas Usage: 5212 - 75562
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:153

ferFrom(from, to, value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EcoVault
Function name: contribute(uint256)
PC address: 4442
Estimated Gas Usage: 21730 - 133707
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:157

er, value));
  }
}

contract CanRec

--------------------
Initial State:

Account: [CREATOR], balance: 0x1883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3a3a3a3a3a3a3a3a3a3a3a3adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000004, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EcoVault
Function name: contribute(uint256)
PC address: 4442
Estimated Gas Usage: 21730 - 133707
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:157

er, value));
  }
}

contract CanRec

--------------------
Initial State:

Account: [CREATOR], balance: 0x1030100001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000005, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EcoVault
Function name: contribute(uint256)
PC address: 4442
Estimated Gas Usage: 21730 - 133707
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3c37af7eb7fda4c6b9eb5a815a459f1.sol:157

er, value));
  }
}

contract CanRec

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3a3a3a3a3a3a3a3a3a3a3a3adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: contribute(uint256), txdata: 0xc1cbbca70000000000000000000000000000000000000000000010, value: 0x0