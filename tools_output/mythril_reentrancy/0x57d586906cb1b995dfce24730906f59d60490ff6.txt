==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FlashLender
Function name: version()
PC address: 692
Estimated Gas Usage: 2352 - 4093
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:461

ram token Address of the toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: version(), txdata: 0x54fd4d50, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1138
Estimated Gas Usage: 23154 - 206116
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:481

6 _fee) public {

        bank =

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1182
Estimated Gas Usage: 23154 - 206116
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:491

/**

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1231
Estimated Gas Usage: 23154 - 206116
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:543

 * @

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1349
Estimated Gas Usage: 23154 - 206116
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:541

.

    * @param _bank Address of the bank.

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1349
Estimated Gas Usage: 23154 - 206116
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:541

.

    * @param _bank Address of the bank.

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1349
Estimated Gas Usage: 23154 - 206116
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:541

.

    * @param _bank Address of the bank.

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1528
Estimated Gas Usage: 23154 - 206116
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:549

k;

    }



    /**

    * @dev Allow the owner to set the fee.



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1528
Estimated Gas Usage: 23154 - 206116
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:549

k;

    }



    /**

    * @dev Allow the owner to set the fee.



--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1590
Estimated Gas Usage: 23154 - 206116
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:493

rage

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1694
Estimated Gas Usage: 23154 - 206116
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:493

 arbitrage contract and execute 

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1694
Estimated Gas Usage: 23154 - 206116
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:493

 arbitrage contract and execute 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1752
Estimated Gas Usage: 23154 - 206116
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:113

itle SafeMath

 * @dev

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FlashLender
Function name: borrow(address,uint256,address,bytes)
PC address: 1758
Estimated Gas Usage: 23154 - 206116
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1a66ee635d11eb2d84590927c9859e6b.sol:113

itle SafeMath

 * @dev

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: borrow(address,uint256,address,bytes), txdata: 0xc046d9b5, value: 0x0


