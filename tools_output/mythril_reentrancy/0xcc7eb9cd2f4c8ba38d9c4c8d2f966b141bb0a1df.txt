==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MacauJunket1
Function name: constructor
PC address: 107
Estimated Gas Usage: 27653 - 130382
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:73

k to benef

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MacauJunket1
Function name: release()
PC address: 692
Estimated Gas Usage: 11980 - 102944
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:82

mount = amount.div

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MacauJunket1
Function name: release()
PC address: 725
Estimated Gas Usage: 11980 - 102944
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:89

er(benefici

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MacauJunket1
Function name: release()
PC address: 732
Estimated Gas Usage: 4274 - 39261
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:89

ken.safeTransfer(beneficia

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MacauJunket1
Function name: release()
PC address: 733
Estimated Gas Usage: 4284 - 39271
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:89

ken.safeTransfer(beneficia

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MacauJunket1
Function name: release()
PC address: 739
Estimated Gas Usage: 11980 - 102944
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:91

}
  
  function balanceOf()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MacauJunket1
Function name: release()
PC address: 742
Estimated Gas Usage: 11980 - 102944
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:93


      retu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MacauJunket1
Function name: release()
PC address: 745
Estimated Gas Usage: 11980 - 102944
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:93

w ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MacauJunket1
Function name: release()
PC address: 962
Estimated Gas Usage: 11980 - 102944
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:42

*
 * @title JunketLockup


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MacauJunket1
Function name: release()
PC address: 962
Estimated Gas Usage: 11980 - 102944
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:42

*
 * @title JunketLockup


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MacauJunket1
Function name: release()
PC address: 1010
Estimated Gas Usage: 11953 - 102917
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7bed8702db0562dcbfa4aa5f9762593c.sol:39

}
}

/**
 * @title JunketLockup
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0