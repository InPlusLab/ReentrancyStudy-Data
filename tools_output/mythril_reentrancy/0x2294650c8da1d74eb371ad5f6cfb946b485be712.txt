==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: ownerOf(uint256) or ownerOf(uint256)
PC address: 1153
Estimated Gas Usage: 2775 - 38043
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:111

sdtPrice) public {

      requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 525252525252525252525252deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: ownerOf(uint256), txdata: 0x6352211e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 2506
Estimated Gas Usage: 25869 - 143495
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:133

function getPrice(uint256 toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000002080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 2628
Estimated Gas Usage: 25869 - 143495
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:135

  address currentOwne

--------------------
Initial State:

Account: [CREATOR], balance: 0x2010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2805
Estimated Gas Usage: 24965 - 142120
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:117

sdtPrices[_tokenId] = Price(msg

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d560000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2974
Estimated Gas Usage: 24965 - 142120
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:119



  function removePrice(uint256 tokenId) publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d560000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3027
Estimated Gas Usage: 24965 - 142120
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:119



  function removePrice(uint256 tokenId) publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d560000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3038
Estimated Gas Usage: 24965 - 142120
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:119



  function removePrice(uint256 tokenId) publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d560000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3120
Estimated Gas Usage: 24965 - 142120
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:121

uint256){

      require(erc721Address.ownerOf(token

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d560000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3173
Estimated Gas Usage: 24965 - 142120
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:121

uint256){

      require(erc721Address.ownerOf(token

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d560000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3184
Estimated Gas Usage: 24965 - 142120
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:121

uint256){

      require(erc721Address.ownerOf(token

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d560000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: buy(uint256)
PC address: 3430
Estimated Gas Usage: 30975 - 218442
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:155

].tokenOwner, msg.sender, tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000063eb3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2500121d200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a00000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: buy(uint256)
PC address: 3544
Estimated Gas Usage: 30975 - 218442
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:157

ransfer(msg.value);



--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000003a92, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a00000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: buy(uint256)
PC address: 3561
Estimated Gas Usage: 30975 - 218442
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:159

;

  }

  fun

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000003a92, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a00000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: buy(uint256)
PC address: 3643
Estimated Gas Usage: 30975 - 218442
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:163

t(uint256 tokenId) public 

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000003a92, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a00000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: buy(uint256)
PC address: 3861
Estimated Gas Usage: 30975 - 218442
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:159

;

  }

  function buyByUsdt(uint256 tokenId) public {

    require(erc721A

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000063eb3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2500121d200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a00000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Bussiness
Function name: buy(uint256)
PC address: 3861
Estimated Gas Usage: 30975 - 218442
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:159

;

  }

  function buyByUsdt(uint256 tokenId) public {

    require(erc721A

--------------------
Initial State:

Account: [CREATOR], balance: 0x200002000e3d08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buy(uint256), txdata: 0xd96a094a00000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: buy(uint256)
PC address: 3861
Estimated Gas Usage: 30975 - 218442
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:159

;

  }

  function buyByUsdt(uint256 tokenId) public {

    require(erc721A

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000003a92, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a00000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: buy(uint256)
PC address: 3908
Estimated Gas Usage: 30975 - 218442
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:165

tApproved(tokenId) == addr

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000003a92, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a00000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: buy(uint256)
PC address: 3984
Estimated Gas Usage: 30975 - 218442
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:165

tApproved(tokenId) == address(this));

    req

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000003a92, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a00000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4174
Estimated Gas Usage: 28818 - 147959
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:143

   return (currentOwner, price

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230000000100840804008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4281
Estimated Gas Usage: 28818 - 147959
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:143

enOwner, prices[tokenId].p

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230010080010880000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4376
Estimated Gas Usage: 28818 - 147959
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:151

equire(erc721Address.getAp

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230010080010880000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4428
Estimated Gas Usage: 28818 - 147959
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:151

oved(tokenId) == addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230010080010880000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4451
Estimated Gas Usage: 28818 - 147959
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:151

s(this));

    require(pr

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230010080010880000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4616
Estimated Gas Usage: 28818 - 147959
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230010080010880000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 4616
Estimated Gas Usage: 25869 - 143495
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x2010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4669
Estimated Gas Usage: 28818 - 147959
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230010080010880000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 4669
Estimated Gas Usage: 25869 - 143495
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x2010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4680
Estimated Gas Usage: 28818 - 147959
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230010080010880000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 4680
Estimated Gas Usage: 25869 - 143495
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x2010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4764
Estimated Gas Usage: 28818 - 147959
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230010080010880000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 4764
Estimated Gas Usage: 25869 - 143495
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x2010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 4817
Estimated Gas Usage: 25869 - 143495
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x2010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 4817
Estimated Gas Usage: 28818 - 147959
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getPrice(uint256), txdata: 0xe7572230010080010880000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 4828
Estimated Gas Usage: 25869 - 143495
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ad3cc49b8f280fcb479ec215875e14a1.sol:189
Initial State:

Account: [CREATOR], balance: 0x2010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a8a8a8a8a8a8a8a8a8a8a8a8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0