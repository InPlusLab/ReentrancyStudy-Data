==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 700
Estimated Gas Usage: 32323 - 155314
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:74

eeds allowance"));
        return

--------------------
Initial State:

Account: [CREATOR], balance: 0x2860, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000104000020000010000040020004020020100000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BRAVE
Function name: name()
PC address: 724
Estimated Gas Usage: 2365 - 4106
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:146

lic view ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transferFrom(address,address,uint256)
PC address: 1046
Estimated Gas Usage: 32345 - 155336
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:74

eeds allowance"));
        return

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080400001102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000040048000020208010100080000000001000401000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1198
Estimated Gas Usage: 32323 - 155314
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:127

ERC20 {
    string private _name;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2860, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000104000020000010000040020004020020100000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BRAVE
Function name: symbol()
PC address: 1221
Estimated Gas Usage: 2408 - 4149
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:152

 add(uint a, u

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 1612
Estimated Gas Usage: 17586 - 96693
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:93

recipient] = _bal

--------------------
Initial State:

Account: [CREATOR], balance: 0x20004000010100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000101000001010010002004000000400001000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1612
Estimated Gas Usage: 32323 - 155314
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:93

recipient] = _bal

--------------------
Initial State:

Account: [CREATOR], balance: 0x2860, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000104000020000010000040020004020020100000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transferFrom(address,address,uint256)
PC address: 1650
Estimated Gas Usage: 32345 - 155336
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:127

ERC20 {
    string private _name;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080400001102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000040048000020208010100080000000001000401000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 1655
Estimated Gas Usage: 17586 - 96693
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:92

;
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(se

--------------------
Initial State:

Account: [CREATOR], balance: 0x20004000010100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000101000001010010002004000000400001000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1655
Estimated Gas Usage: 32323 - 155314
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:92

;
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(se

--------------------
Initial State:

Account: [CREATOR], balance: 0x2860, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000104000020000010000040020004020020100000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 1662
Estimated Gas Usage: 17586 - 96693
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:97

   function _mint(ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x20004000010100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000101000001010010002004000000400001000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1662
Estimated Gas Usage: 32323 - 155314
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:97

   function _mint(ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x2860, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000104000020000010000040020004020020100000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transfer(address,uint256)
PC address: 1711
Estimated Gas Usage: 17586 - 96693
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:94

ient, amount);
    }

    function _mint(address accoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x20004000010100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000101000001010010002004000000400001000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: transferFrom(address,address,uint256)
PC address: 1711
Estimated Gas Usage: 32323 - 155314
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:94

ient, amount);
    }

    function _mint(address accoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x2860, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000104000020000010000040020004020020100000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transfer(address,uint256)
PC address: 2064
Estimated Gas Usage: 17630 - 96737
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:93

recipient] = _bal

--------------------
Initial State:

Account: [CREATOR], balance: 0x4002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001044008000100010000010000000200000004020000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transferFrom(address,address,uint256)
PC address: 2064
Estimated Gas Usage: 32345 - 155336
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:93

recipient] = _bal

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080400001102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000040048000020208010100080000000001000401000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transfer(address,uint256)
PC address: 2107
Estimated Gas Usage: 17630 - 96737
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:92

;
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(se

--------------------
Initial State:

Account: [CREATOR], balance: 0x4002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001044008000100010000010000000200000004020000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transferFrom(address,address,uint256)
PC address: 2107
Estimated Gas Usage: 32345 - 155336
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:92

;
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(se

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080400001102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000040048000020208010100080000000001000401000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transfer(address,uint256)
PC address: 2114
Estimated Gas Usage: 17630 - 96737
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:97

   function _mint(ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x4002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001044008000100010000010000000200000004020000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transferFrom(address,address,uint256)
PC address: 2114
Estimated Gas Usage: 32345 - 155336
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:97

   function _mint(ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080400001102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000040048000020208010100080000000001000401000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transfer(address,uint256)
PC address: 2163
Estimated Gas Usage: 17630 - 96737
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:94

ient, amount);
    }

    function _mint(address accoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x4002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001044008000100010000010000000200000004020000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BRAVE
Function name: transferFrom(address,address,uint256)
PC address: 2163
Estimated Gas Usage: 32345 - 155336
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0dc2ee30c073734f364d4c92b742cf0c.sol:94

ient, amount);
    }

    function _mint(address accoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080400001102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000040048000020208010100080000000001000401000000000000000000000000000000000000000000000000000000000000000000, value: 0x0


