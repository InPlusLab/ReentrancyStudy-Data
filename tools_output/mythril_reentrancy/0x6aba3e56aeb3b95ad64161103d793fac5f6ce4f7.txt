==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 1706
Estimated Gas Usage: 40963 - 202947
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:304

@notice Address of the token being us

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BasicStakingContract
Function name: totalStaked()
PC address: 1861
Estimated Gas Usage: 2800 - 38068
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:312

rue if the optional history 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: totalStaked(), txdata: 0x817b1cd2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC900BasicStakeContract
Function name: totalStaked()
PC address: 1861
Estimated Gas Usage: 2800 - 38068
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:312

rue if the optional history 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3e000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: totalStaked(), txdata: 0x817b1cd2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2097
Estimated Gas Usage: 40963 - 202947
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:197

ract used for staking
   */
  constructor(ERC20 _s

--------------------
Initial State:

Account: [CREATOR], balance: 0x46598003a510e1902, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 383838383838383838383838deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b414010218002458010802841210122084040083841170106400144445018010120, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2369
Estimated Gas Usage: 40963 - 202947
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:387

     _amount,
      totalStaked

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2398
Estimated Gas Usage: 40963 - 202947
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:388

s),
      _data);
  }

  /**
   * @dev

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2407
Estimated Gas Usage: 40963 - 202947
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:388

s),
      _data);
  }

  /**
   * @dev

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2433
Estimated Gas Usage: 40963 - 202947
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:394

  * @param _amount uint256 The amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2480
Estimated Gas Usage: 40963 - 202947
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:393

 to withdraw stakes for the msg.sender
   * @param _amount uint256 The amount to withdraw.

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2546
Estimated Gas Usage: 40963 - 202947
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2553
Estimated Gas Usage: 40963 - 202947
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2573
Estimated Gas Usage: 40963 - 202947
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:394

atch the stake amount for the
   *  stake at personalStakeIndex.
   * @param _data bytes optional data to include in the Unstake event
   */
  function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2584
Estimated Gas Usage: 40963 - 202947
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:394

atch the stake amount for the
   *  stake at personalStakeIndex.
   * @param _data bytes optional data to include in the Unstake event
   */
  function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2596
Estimated Gas Usage: 40963 - 202947
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:394

atch the stake amount for the
   *  stake at personalStakeIndex.
   * @param _data bytes optional data to include in the Unstake event
   */
  function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC900BasicStakeContract
Function name: fallback
PC address: 2626
Estimated Gas Usage: 40963 - 202947
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:394

atch the stake amount for the
   *  stake at personalStakeIndex.
   * @param _data bytes optional data to include in the Unstake event
   */
  function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100020814202442, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b020211848430084010061002088280012002020480012010100480300408880420, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicStakingContract
Function name: unstake(uint256,bytes)
PC address: 2847
Estimated Gas Usage: 2293 - 5165
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:413

;

    // Transfer the staked tokens from this contract back to the sender
    // No

--------------------
Initial State:

Account: [CREATOR], balance: 0x2083938, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unstake(uint256,bytes), txdata: 0xc8fd6ed0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BasicStakingContract
Function name: fallback
PC address: 3675
Estimated Gas Usage: 16738 - 96205
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:100

0.4.24;


/**


--------------------
Initial State:

Account: [CREATOR], balance: 0x8000040100001200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b8a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicStakingContract
Function name: fallback
PC address: 3676
Estimated Gas Usage: 16748 - 96215
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:100

0.4.24;


/**


--------------------
Initial State:

Account: [CREATOR], balance: 0x2258101d040910a8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202000000000000208000000840012000042000044084, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b08, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicStakingContract
Function name: stakeFor(address,uint256,bytes)
PC address: 3676
Estimated Gas Usage: 16799 - 96596
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/28c3974c4dda4a320b8f304e8e544676.sol:100

0.4.24;


/**


--------------------
Initial State:

Account: [CREATOR], balance: 0x1000108000004c181, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1d1d1d1d1d1d1d1d1d1d1d1d000000000000000000000000000000000000000010, value: 0x0
Caller: [ATTACKER], function: stakeFor(address,uint256,bytes), txdata: 0x0ef963560000000000000000000000000000000000000002000200040820100000000080a7, value: 0x0


