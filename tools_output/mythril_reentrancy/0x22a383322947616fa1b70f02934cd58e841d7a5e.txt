==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: withdrawToken(address)
PC address: 3534
Estimated Gas Usage: 6298 - 76386
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:554

ecimals() public pure returns(uint) {
    ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 4256
Estimated Gas Usage: 22780 - 235037
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:601

) >= toUserAmount, "No enough dai after swap");
//    require(toUs

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 4256
Estimated Gas Usage: 22072 - 234280
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:601

) >= toUserAmount, "No enough dai after swap");
//    require(toUs

--------------------
Initial State:

Account: [CREATOR], balance: 0x20089, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef10, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 4474
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:608

Log

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 4474
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:608

Log

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 4677
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:611

oke

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 4677
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:611

oke

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 4757
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:618

ublic

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 4757
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:618

ublic

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 4793
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:618

 ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 4793
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:618

 ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 4866
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:620

 uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 4866
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:620

 uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 4928
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:620

unt(rateU

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 4928
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:620

unt(rateU

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5094
Estimated Gas Usage: 22780 - 235037
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:620

 uint rate = getAmount(rateUnit, src == address(dai)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3f01010101010101010101010101010101010101083f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000010101010101010101010101010101010101010840, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5094
Estimated Gas Usage: 22072 - 234280
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:620

 uint rate = getAmount(rateUnit, src == address(dai)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400c80404020c7e28, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424010101010101010101010101010101010101010024242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000010101010101010101010101010101010101010002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5094
Estimated Gas Usage: 22780 - 235037
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:620

 uint rate = getAmount(rateUnit, src == address(dai)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5094
Estimated Gas Usage: 22072 - 234280
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:620

 uint rate = getAmount(rateUnit, src == address(dai)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5122
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:622

(ra

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000c20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0d01010101010101010101010101010140010100010d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000010101010101010101010101010101400101000108, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5122
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:622

(ra

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424010101010101010101010101010101010101010224242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000010101010101010101010101010101010101010201, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5308
Estimated Gas Usage: 22780 - 235037
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:622

(rate, rate);
  }

  functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3f01010101010101010101010101010140010101013f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000010101010101010101010101010101400101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5308
Estimated Gas Usage: 22072 - 234280
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:622

(rate, rate);
  }

  functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2424242424242424242424240102010101010101010101010101010101010101242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000010201010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5308
Estimated Gas Usage: 22780 - 235037
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:622

(rate, rate);
  }

  functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000c20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0d01010101010101010101010101010140010100010d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000010101010101010101010101010101400101000108, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5308
Estimated Gas Usage: 22072 - 234280
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:622

(rate, rate);
  }

  functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424010101010101010101010101010101010101010224242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000010101010101010101010101010101010101010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5488
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:628

{
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1212121212121212121212120101010101020101010101010101010001080104121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000010101010102010101010101010101000108010404, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5488
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:628

{
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2424242424242424242424240101010101010101010101010101010101020140242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000010101010101010101010101010101010102014040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5682
Estimated Gas Usage: 22780 - 235037
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:628

{
    swapToken(src, srcAmount);
  }



--------------------
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3f01010101010101010101010101010140010101013f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000010101010101010101010101010101400101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5682
Estimated Gas Usage: 22072 - 234280
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:628

{
    swapToken(src, srcAmount);
  }



--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2424242424242424242424240102010101010101010101010101010101010101242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000010201010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5682
Estimated Gas Usage: 22780 - 235037
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:628

{
    swapToken(src, srcAmount);
  }



--------------------
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1212121212121212121212120101010101020101010101010101010001080104121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000010101010102010101010101010101000108010404, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5682
Estimated Gas Usage: 22072 - 234280
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:628

{
    swapToken(src, srcAmount);
  }



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2424242424242424242424240101010101010101010101010101010101020140242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000010101010101010101010101010101010102014040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5898
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:632
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1212121212121212121212120101010101020101010101010101010001080104121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000010101010102010101010101010101000108010404, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5898
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:632
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2424242424242424242424240101010101010101010101010101010101020140242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000010101010101010101010101010101010102014040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 5955
Estimated Gas Usage: 22780 - 235037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:632
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1212121212121212121212120101010101020101010101010101010001080104121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000010101010102010101010101010101000108010404, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 5955
Estimated Gas Usage: 22072 - 234280
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:632
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2424242424242424242424240101010101010101010101010101010101020140242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000010101010101010101010101010101010102014040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: withdrawToken(address)
PC address: 6828
Estimated Gas Usage: 6298 - 76386
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:345

0)          // result == returndata of external

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaiDaiTokenSwap
Function name: withdrawToken(address)
PC address: 6828
Estimated Gas Usage: 6298 - 76386
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:345

0)          // result == returndata of external

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x8947606900000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 7121
Estimated Gas Usage: 22780 - 235037
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:312

atacopy(0, 0, 32)
        result := mload(0)          // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 7121
Estimated Gas Usage: 22072 - 234280
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:312

atacopy(0, 0, 32)
        result := mload(0)          // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 7121
Estimated Gas Usage: 22780 - 235037
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:312

atacopy(0, 0, 32)
        result := mload(0)          // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x50011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 7121
Estimated Gas Usage: 22072 - 234280
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:312

atacopy(0, 0, 32)
        result := mload(0)          // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x46b475e0d6303f5e1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 7121
Estimated Gas Usage: 22780 - 235037
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:312

atacopy(0, 0, 32)
        result := mload(0)          // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 7121
Estimated Gas Usage: 22072 - 234280
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:312

atacopy(0, 0, 32)
        result := mload(0)          // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 7363
Estimated Gas Usage: 22780 - 235037
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:370

rndata of external call
      }
      defau

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 7363
Estimated Gas Usage: 22072 - 234280
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:370

rndata of external call
      }
      defau

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swap(address,uint256,address,uint256,uint256) or swap(address,uint256,address,uint256,uint256)
PC address: 7363
Estimated Gas Usage: 22780 - 235037
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:370

rndata of external call
      }
      defau

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swap(address,uint256,address,uint256,uint256), txdata: 0x5e75228f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaiDaiTokenSwap
Function name: swapToken(address,uint256)
PC address: 7363
Estimated Gas Usage: 22072 - 234280
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61c9fef43bcf8a7cc5efdecd648c7405.sol:370

rndata of external call
      }
      defau

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapToken(address,uint256), txdata: 0xcc87ab2a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0