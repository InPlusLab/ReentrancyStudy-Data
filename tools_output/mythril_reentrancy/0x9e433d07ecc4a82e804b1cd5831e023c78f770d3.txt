==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MassSender
Function name: bulkTransfer(address,uint32[],address[],uint256[])
PC address: 198
Estimated Gas Usage: 11345 - 69497
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:129

56[] transfers

    ) external {

        require(payment_ids.length == receivers.length);

        require(payment_ids.length == transfers.length);



        for (uint i = 0; i < receivers.length; i++) {

            if (!processedTransactions[payment_ids[i]]) {

                require(token.transfer(receivers[i], transfers[i]));



                processedTransactions[payment_ids[i]] = true;

            }

        }

    }



    function r(ERC20 token) external onlyOwner {

        token.transfer(owner, token.balanceOf(address(this)));

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c0000000040101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bulkTransfer(address,uint32[],address[],uint256[]), txdata: 0xc69b8018000000000000000000000000000000000000000000000000ffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80000000000000000000000101ffffffffffffffffffffffffffffff0000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MassSender
Function name: bulkTransfer(address,uint32[],address[],uint256[])
PC address: 210
Estimated Gas Usage: 11345 - 69497
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:129

56[] transfers

    ) external {

        require(payment_ids.length == receivers.length);

        require(payment_ids.length == transfers.length);



        for (uint i = 0; i < receivers.length; i++) {

            if (!processedTransactions[payment_ids[i]]) {

                require(token.transfer(receivers[i], transfers[i]));



                processedTransactions[payment_ids[i]] = true;

            }

        }

    }



    function r(ERC20 token) external onlyOwner {

        token.transfer(owner, token.balanceOf(address(this)));

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x10c0102000c1a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bulkTransfer(address,uint32[],address[],uint256[]), txdata: 0xc69b80180000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000001ffc0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MassSender
Function name: bulkTransfer(address,uint32[],address[],uint256[])
PC address: 222
Estimated Gas Usage: 11345 - 69497
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:129

56[] transfers

    ) external {

        require(payment_ids.length == receivers.length);

        require(payment_ids.length == transfers.length);



        for (uint i = 0; i < receivers.length; i++) {

            if (!processedTransactions[payment_ids[i]]) {

                require(token.transfer(receivers[i], transfers[i]));



                processedTransactions[payment_ids[i]] = true;

            }

        }

    }



    function r(ERC20 token) external onlyOwner {

        token.transfer(owner, token.balanceOf(address(this)));

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x119, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bulkTransfer(address,uint32[],address[],uint256[]), txdata: 0xc69b801800000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MassSender
Function name: fallback
PC address: 405
Estimated Gas Usage: 5159 - 76360
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:163
Initial State:

Account: [CREATOR], balance: 0x8000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: r(address), txdata: 0x566ab6f9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MassSender
Function name: fallback
PC address: 526
Estimated Gas Usage: 5159 - 76360
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:163
Initial State:

Account: [CREATOR], balance: 0x8000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: r(address), txdata: 0x566ab6f9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MassSender
Function name: fallback
PC address: 526
Estimated Gas Usage: 5159 - 76360
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:163
Initial State:

Account: [CREATOR], balance: 0x37eed454282eab780, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: r(address), txdata: 0x566ab6f9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MassSender
Function name: bulkTransfer(address,uint32[],address[],uint256[])
PC address: 671
Estimated Gas Usage: 10326 - 68288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:147

ransactions[payment_ids[i]] = true;



--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bulkTransfer(address,uint32[],address[],uint256[]), txdata: 0xc69b8018000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000004a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MassSender
Function name: bulkTransfer(address,uint32[],address[],uint256[])
PC address: 829
Estimated Gas Usage: 11345 - 69497
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:153





    function r(ERC20 token) external o

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000014, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bulkTransfer(address,uint32[],address[],uint256[]), txdata: 0xc69b8018000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0800000000000000000000000000000000000000000000000000000000000000682, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MassSender
Function name: bulkTransfer(address,uint32[],address[],uint256[])
PC address: 945
Estimated Gas Usage: 10326 - 68288
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:159

transfer(owner, token.balanceOf(address(this

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bulkTransfer(address,uint32[],address[],uint256[]), txdata: 0xc69b8018000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000004a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MassSender
Function name: bulkTransfer(address,uint32[],address[],uint256[])
PC address: 959
Estimated Gas Usage: 10326 - 68288
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/319d5265c75a306ca88934586290ca7d.sol:159

transfer(owner, token.balanceOf(address(this

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bulkTransfer(address,uint32[],address[],uint256[]), txdata: 0xc69b8018000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000004a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde80, value: 0x0


