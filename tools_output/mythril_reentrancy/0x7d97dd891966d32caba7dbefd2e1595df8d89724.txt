==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CCCRSale
Function name: getWei(uint256)
PC address: 2161
Estimated Gas Usage: 2344 - 2769
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eee2ca408723f9d79a964af39053ffc2.sol:210

arrayAddress = _array1;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getWei(uint256), txdata: 0xe942c56401, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CCCRSale
Function name: fallback
PC address: 2190
Estimated Gas Usage: 6248 - 7003
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/eee2ca408723f9d79a964af39053ffc2.sol:187

   else if (block.timestamp <= startline + 60 days) return tokenPrice.mul(115).div(100);
        else if (block.timestamp <= startline + 74 days) return tokenPrice.mul(109).div(100);
        return tokenPrice;
    }

    function updatePrice(uint256 _tokenPrice) external onlyManager {
        tokenPrice = _tokenPrice;
    }

    function transferTokens(uint256 _toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x80080100015101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x312374da4ddd4a

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CCCRSale
Function name: fallback
PC address: 2254
Estimated Gas Usage: 7082 - 7837
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/eee2ca408723f9d79a964af39053ffc2.sol:188

se if (block.timestamp <= startline + 74 days) return tokenPrice.mul(109).div(100);
        return tokenPrice;
    }

    function updatePrice(uint256 _tokenPrice) external onlyManager {
        tokenPrice = _tokenPrice;
    }

    function transferTokens(uint256 _toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000002000280000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x312374da4ddd4a

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CCCRSale
Function name: fallback
PC address: 2318
Estimated Gas Usage: 7916 - 8671
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/eee2ca408723f9d79a964af39053ffc2.sol:189

urn tokenPrice;
    }

    function updatePrice(uint256 _tokenPrice) external onlyManager {
        tokenPrice = _tokenPrice;
    }

    function transferTokens(uint256 _toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000080104010, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x312374da4ddd4a

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CCCRSale
Function name: fallback
PC address: 2382
Estimated Gas Usage: 8750 - 9505
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/eee2ca408723f9d79a964af39053ffc2.sol:193

     tokenPrice = _tokenPrice;
    }

    function transferTokens(uint256 _toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000015163, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x312374da4ddd4a

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CCCRSale
Function name: transferTokens(uint256)
PC address: 5141
Estimated Gas Usage: 3882 - 39108
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/eee2ca408723f9d79a964af39053ffc2.sol:204

uint256 _etherAmount) external onlyManage

--------------------
Initial State:

Account: [CREATOR], balance: 0xff00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transferTokens(uint256), txdata: 0xfd9a4e61, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CCCRSale
Function name: airdrop(address[],uint256[])
PC address: 5360
Estimated Gas Usage: 2628 - 9216
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eee2ca408723f9d79a964af39053ffc2.sol:221
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: airdrop(address[],uint256[]), txdata: 0x67243482, value: 0x0