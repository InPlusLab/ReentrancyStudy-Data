==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CliffTokenVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256)
PC address: 2019
Estimated Gas Usage: 29437 - 166122
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5774a10071e7ffe5d63ab034eb61a7b7.sol:273

t: 0

        });

    }



    /**

    * Calculates

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000c0000080200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ebebebebebebebebebebebebdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addBeneficiary(address,uint256,uint256,uint256,uint256), txdata: 0x55119b1a00000000000000000000000000000000000000000000000000000000000000017fffff8005610010d75bb7efbfffba18deee810000b945ffffffffffff3fffff010101010101000106008fdef9eb6f70808de800003ebe000000000000c00002000000800000000003b5afdfffdf6f70808888000000ba000000000000c000014001010101010101400101010101010104012020014080044001018001010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CliffTokenVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256)
PC address: 2217
Estimated Gas Usage: 29437 - 166122
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5774a10071e7ffe5d63ab034eb61a7b7.sol:283

at is vested.

    * @param account Vested account.

    * @return Amount in decimals.

    */

    function vestedAmount (address account) private view returns (uint256) {

        if (block.timestamp < beneficiary[account

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000000086, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addBeneficiary(address,uint256,uint256,uint256,uint256), txdata: 0x55119b1a00000000000000000000000000000000000000000000000000000000000000017fffffff00fffffffffffcfd80000104fc004008e4012f50000c5466652fbddb010101010581000000000000000140000400401000102140040ab59a9ae042280000000104800000000000000000001004004010001021200003ab999ad042251008100804800102010101010401010140080808018040040810400102401010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CliffTokenVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256)
PC address: 2227
Estimated Gas Usage: 29437 - 166122
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5774a10071e7ffe5d63ab034eb61a7b7.sol:283

at is vested.

    * @param account Vested account.

    * @return Amount in decimals.

    */

    function vestedAmount (address account) private view returns (uint256) {

        if (block.timestamp < beneficiary[account

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000000086, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addBeneficiary(address,uint256,uint256,uint256,uint256), txdata: 0x55119b1a00000000000000000000000000000000000000000000000000000000000000017fffffff00fffffffffffcfd80000104fc004008e4012f50000c5466652fbddb010101010581000000000000000140000400401000102140040ab59a9ae042280000000104800000000000000000001004004010001021200003ab999ad042251008100804800102010101010401010140080808018040040810400102401010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CliffTokenVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256)
PC address: 2237
Estimated Gas Usage: 29437 - 166122
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5774a10071e7ffe5d63ab034eb61a7b7.sol:283

at is vested.

    * @param account Vested account.

    * @return Amount in decimals.

    */

    function vestedAmount (address account) private view returns (uint256) {

        if (block.timestamp < beneficiary[account

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000000086, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addBeneficiary(address,uint256,uint256,uint256,uint256), txdata: 0x55119b1a00000000000000000000000000000000000000000000000000000000000000017fffffff00fffffffffffcfd80000104fc004008e4012f50000c5466652fbddb010101010581000000000000000140000400401000102140040ab59a9ae042280000000104800000000000000000001004004010001021200003ab999ad042251008100804800102010101010401010140080808018040040810400102401010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CliffTokenVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256)
PC address: 2247
Estimated Gas Usage: 29437 - 166122
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5774a10071e7ffe5d63ab034eb61a7b7.sol:283

at is vested.

    * @param account Vested account.

    * @return Amount in decimals.

    */

    function vestedAmount (address account) private view returns (uint256) {

        if (block.timestamp < beneficiary[account

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000000086, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addBeneficiary(address,uint256,uint256,uint256,uint256), txdata: 0x55119b1a00000000000000000000000000000000000000000000000000000000000000017fffffff00fffffffffffcfd80000104fc004008e4012f50000c5466652fbddb010101010581000000000000000140000400401000102140040ab59a9ae042280000000104800000000000000000001004004010001021200003ab999ad042251008100804800102010101010401010140080808018040040810400102401010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CliffTokenVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256)
PC address: 2257
Estimated Gas Usage: 29437 - 166122
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5774a10071e7ffe5d63ab034eb61a7b7.sol:283

at is vested.

    * @param account Vested account.

    * @return Amount in decimals.

    */

    function vestedAmount (address account) private view returns (uint256) {

        if (block.timestamp < beneficiary[account

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000000086, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addBeneficiary(address,uint256,uint256,uint256,uint256), txdata: 0x55119b1a00000000000000000000000000000000000000000000000000000000000000017fffffff00fffffffffffcfd80000104fc004008e4012f50000c5466652fbddb010101010581000000000000000140000400401000102140040ab59a9ae042280000000104800000000000000000001004004010001021200003ab999ad042251008100804800102010101010401010140080808018040040810400102401010, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CliffTokenVesting
Function name: releasableAmount(address)
PC address: 2440
Estimated Gas Usage: 2042 - 2517
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5774a10071e7ffe5d63ab034eb61a7b7.sol:303

totalAmount.mul(

                block.timestamp.sub(beneficiary[account].start)

            ).div(beneficiary[account].duration);

        }

    }



}

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CliffTokenVesting
Function name: releasableAmount(address)
PC address: 2606
Estimated Gas Usage: 3971 - 4826
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5774a10071e7ffe5d63ab034eb61a7b7.sol:307

).div(beneficiary[account].duration);

        }

    }



}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc80000000000000000000000000000100000000000000000000000001001021000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CliffTokenVesting
Function name: releasableAmount(address)
PC address: 2949
Estimated Gas Usage: 5842 - 7077
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5774a10071e7ffe5d63ab034eb61a7b7.sol:71

 add (uint256 a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10040080000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: addBeneficiary(address,uint256,uint256,uint256,uint256), txdata: 0x55119b1a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000168400808012202000010000110000000040004008000804604808001a00000000082421138449000846024321504006c0d101900380cc807d8afffffffffffff0101010101010101010101010101010101010101010101010101010201010101, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc89090909090909090909090900000000000000000000000000000000000000001, value: 0x0