==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 989
Estimated Gas Usage: 1100 - 1525
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:91

 public onlyOwner {

        require(_newOwner != owner);

        newOwner = _newOwner;

    }



    function acceptOwnership() public {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StormToken
Function name: disableTransfers(bool)
PC address: 2844
Estimated Gas Usage: 1078 - 1503
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:415

     can only be called by the contract owner



        @param _to         account to receive the new amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: disableTransfers(bool), txdata: 0x1608f18f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StormToken
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 2910
Estimated Gas Usage: 1162 - 1587
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:567
Initial State:

Account: [CREATOR], balance: 0x80004500099013, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StormToken
Function name: transfers(address[],uint256[])
PC address: 2986
Estimated Gas Usage: 1488 - 7087
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:525

ength; cnt++) {

            assert(super.transfer(_recipients[cnt], _values[cnt]));

        }

        return true;

    }



    /**

        @dev an account/contract attempts to get the coins

        throws on any error rather then return a false flag to minimize user errors

        in addition to the standard checks, the function throws if transfers are disabled



        @param 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080000140004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfers(address[],uint256[]), txdata: 0x52346412, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StormToken
Function name: issue(address,uint256)
PC address: 3987
Estimated Gas Usage: 1278 - 1703
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:439

].add(_amount);



        Issuance(_amount);

        Transfer(this, _to, _amount);

    }



    /**

        @dev removes tokens from an account and decreases the token supply

        can be called by the contract owner to destroy tokens from any account or by any holder to destroy tokens from his/her own acc

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080100000217, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: issue(address,uint256), txdata: 0x867904b4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Token
Function name: salvageTokensFromContract(address,address,uint256) or salvageTokensFromContract(address,address,uint256)
PC address: 4142
Estimated Gas Usage: 1330 - 1755
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:310


  }

}



contract StormToken is Token {



	bool public transfersEnabled = false;    // true if transfer/transferFrom are enabled, false if not



	// trigge

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: salvageTokensFromContract(address,address,uint256), txdata: 0xa0929cda, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: salvageTokensFromContract(address,address,uint256) or salvageTokensFromContract(address,address,uint256)
PC address: 4320
Estimated Gas Usage: 2983 - 38253
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:321

fer/transferFrom are enabled, false if not



	//

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c1a0a00000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: salvageTokensFromContract(address,address,uint256), txdata: 0xa0929cda000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StormToken
Function name: salvageTokensFromContract(address,address,uint256) or salvageTokensFromContract(address,address,uint256)
PC address: 4745
Estimated Gas Usage: 1396 - 1821
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:310


  }

}



contract StormToken is Token {



	bool public transfersEnabled = false;    // true if transfer/transferFrom are enabled, false if not



	// trigge

--------------------
Initial State:

Account: [CREATOR], balance: 0x1040000000645, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: salvageTokensFromContract(address,address,uint256), txdata: 0xa0929cda, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StormToken
Function name: salvageTokensFromContract(address,address,uint256) or salvageTokensFromContract(address,address,uint256)
PC address: 4923
Estimated Gas Usage: 3049 - 38319
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:321

fer/transferFrom are enabled, false if not



	//

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: salvageTokensFromContract(address,address,uint256), txdata: 0xa0929cda000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Token
Function name: approveAndCall(address,uint256,bytes) or approveAndCall(address,uint256,bytes)
PC address: 5197
Estimated Gas Usage: 9466 - 68476
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80000004000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000200000000000000089, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StormToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 5456
Estimated Gas Usage: 1396 - 1821
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:519

ersAllowed onlyOwner returns (bool success) {

        require(_recipients.length == _values.length); // Check if input data is correct



        for (uint cnt = 0; cnt < _

--------------------
Initial State:

Account: [CREATOR], balance: 0x10c0000088801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StormToken
Function name: approveAndCall(address,uint256,bytes) or approveAndCall(address,uint256,bytes)
PC address: 5850
Estimated Gas Usage: 9717 - 69433
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Token
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 5934
Estimated Gas Usage: 1408 - 1833
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:91

 public onlyOwner {

        require(_newOwner != owner);

        newOwner = _newOwner;

    }



    function acceptOwnership() public {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Token
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 6108
Estimated Gas Usage: 1325 - 1610
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:273

                           

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000200880008d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010201010101010101010101010101010101010102, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Token
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 6108
Estimated Gas Usage: 1492 - 1777
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:225

           // Add recivers blaan

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000010000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StormToken
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 6587
Estimated Gas Usage: 1518 - 1943
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:91

 public onlyOwner {

        require(_newOwner != owner);

        newOwner = _newOwner;

    }



    function acceptOwnership() public {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040000000000901, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StormToken
Function name: destroy(address,uint256)
PC address: 8071
Estimated Gas Usage: 1530 - 1815
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/918ca87ba58caf0c6cf2045b5e779991.sol:491

       @dev send coins

    

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: destroy(address,uint256), txdata: 0xa24835d1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02, value: 0x0