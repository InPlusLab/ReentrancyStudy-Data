==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MinereumLuckyDraw
Function name: winnersETH(uint256)
PC address: 1967
Estimated Gas Usage: 1096 - 1191
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:41

c winnersTimestamp;
	
	u

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: winnersETH(uint256), txdata: 0x13c3dc340000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MinereumLuckyDraw
Function name: winnersTickets(uint256)
PC address: 1997
Estimated Gas Usage: 1118 - 1213
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:40

public winnersETH;
	uint[] p

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: winnersTickets(uint256), txdata: 0x1e2d0f380000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MinereumLuckyDraw
Function name: winnersTimestamp(uint256)
PC address: 2037
Estimated Gas Usage: 1073 - 1168
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:43

bazarSwapCount = 0;
	bool baza

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: winnersTimestamp(uint256), txdata: 0x23fd5b250000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: updateFees(uint256,uint256,uint256,uint256,bool,uint256,uint256)
PC address: 2063
Estimated Gas Usage: 1217 - 1312
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:212

ock;
			midBlock = _midBlock;
		}
		else
		{
			revert();
		}
	}
	
	function updateSystemNumber(uint _systemNumber) public
	{
		if (msg.sender == owner)
		{
			systemNumber = _systemNumber;
		}
		else
		{
			revert();
		}
	}
	
	function updateMaxNumber(uint _maxNumber) public
	

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateFees(uint256,uint256,uint256,uint256,bool,uint256,uint256), txdata: 0x30dff3c80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: transferFundsOut()
PC address: 2128
Estimated Gas Usage: 1101 - 1196
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:195

ayment.');			
		}
		else
		{
			revert();
		}
	}
	
	function updateFees(uint _stakeHoldersfee, uint _mnefee, uint _ethfee, uint _blockInterval, bool _bazarSwapActive, uint _maxBlock, uint _midBlock) public
	{
		if (msg.sender == owner)
		{
			s

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFundsOut(), txdata: 0x3838aed1, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: BuyTickets(uint256)
PC address: 2265
Estimated Gas Usage: 253 - 348
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:136

sSold += _max;			
			uint totalE

--------------------
Initial State:

Account: [CREATOR], balance: 0x20cbefe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: BuyTickets(uint256), txdata: 0x59ab03060000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MinereumLuckyDraw
Function name: BuyTickets(uint256)
PC address: 2397
Estimated Gas Usage: 26206 - 141387
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:142

) revert('Not

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: BuyTickets(uint256), txdata: 0x59ab03060810000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MinereumLuckyDraw
Function name: BuyTickets(uint256)
PC address: 2572
Estimated Gas Usage: 26206 - 141387
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:152

ets(address tokenAddress) public
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x10900333, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: BuyTickets(uint256), txdata: 0x59ab03060100000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MinereumLuckyDraw
Function name: BuyTickets(uint256)
PC address: 2576
Estimated Gas Usage: 26206 - 141387
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:152

ets(address tokenAddress) public
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x10900333, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: BuyTickets(uint256), txdata: 0x59ab03060100000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: ClaimBazarSwapTickets(address)
PC address: 2673
Estimated Gas Usage: 317 - 412
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:160

ctive)
				{
					if (bazar.getW

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ClaimBazarSwapTickets(address), txdata: 0x64e27ee50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MinereumLuckyDraw
Function name: winners(uint256)
PC address: 3331
Estimated Gas Usage: 1138 - 1233
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:39

lic winnersTickets;
	uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: winners(uint256), txdata: 0xa2fb11750000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: updateMNEContract(address)
PC address: 3377
Estimated Gas Usage: 1073 - 1168
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:281

function WinnersLength() public view returns (uint256) { return winners.length; }	
	function GetPla

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateMNEContract(address), txdata: 0xa4921fcd0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: updatePercentWin(uint256)
PC address: 3501
Estimated Gas Usage: 1076 - 1171
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:266

		}
	}
	
	function updateBazarContract(address _address) public
	{
		if (msg.sender == owner)
		

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updatePercentWin(uint256), txdata: 0xb8f330bf0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: LuckyDraw()
PC address: 3551
Estimated Gas Usage: 278 - 373
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:71

ck[msg.sender] + maxBlock) //256

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LuckyDraw(), txdata: 0xbea09ec7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: MinereumLuckyDraw
Function name: LuckyDraw()
PC address: 3582
Estimated Gas Usage: 1974 - 2259
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:73

int[] memory empty = new uint[](0);	
			emit Numbers(address(this), empty, "Your tickets expired or are invalid. Try Again.");
			playerBlock[msg.sender] = 0;
			playerTickets[msg.sender] = 0;			
		}		
		else if (block.number > playerBlock[msg.sender] + blockInterval)
		{
			bool win = false;

			uint[] memory numbers = new uint[](playerTickets[msg.sender]);		
			
			uint i = 0;
			while (i < playerTickets[msg.sender])
			{
				numbers[i] = uint256(uint256(keccak256(abi.encodePacked(blockhash(playerBlock[msg.sender] + midBlock), i)))%maxNumber);
				if (numbers[i] == systemNumber)
					win = true;
				i++;				
			}
			
			ticketsPlayed += playerTickets[msg.sender];
			
			
			if (win)
			{
				address payable add = payable(msg.sender);
				uint contractBalance = address(this).balance;
				uint winAmount = contractBalance * percentWin / 100;
				uint totalToPay = winAmount;
				if (!add.send(totalToPay)) revert('Error While Executing Payment.');
				totalPaidOut += totalToPay;
				
				winnersCount++;
				winnersEthCount += totalToPay;
				emit Numbers(address(this), numbers, "YOU WON!");
				
				winners.push(msg.sender);
				winnersTickets.push(playerTickets[msg.sender]);
				winnersETH.push(totalToPay);
				winnersTimestamp.push(block.timestamp);
			}
			else
			{
				emit Numbers(address(this), numbers, "Your numbers don't match the System Number! Try Again.");
			}
			
			playerBlock[msg.sender] = 0;
			playerTickets[msg.sender] = 0;			
		}
		else
		{
			revert('Players must wait 3 blocks');
		}
    }
	
	function BuyTickets(uint256 _max) public payable
    {
		require(msg.sender == tx.origin);
		
		if (_max == 0) rev

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000007b8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LuckyDraw(), txdata: 0xbea09ec7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: MinereumLuckyDraw
Function name: LuckyDraw()
PC address: 3804
Estimated Gas Usage: 3673 - 4148
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:80

 false;

			uint[] memory numbers = new uint[](playerTickets[msg.sender]);		
			
			uint i = 0;
			while (i < playerTickets[msg.sender])
			{
				numbers[i] = uint256(uint256(keccak256(abi.encodePacked(blockhash(playerBlock[msg.sender] + midBlock), i)))%maxNumber);
				if (numbers[i] == systemNumber)
					win = true;
				i++;				
			}
			
			ticketsPlayed += playerTickets[msg.sender];
			
			
			if (win)
			{
				address payable add = payable(msg.sender);
				uint contractBalance = address(this).balance;
				uint winAmount = contractBalance * percentWin / 100;
				uint totalToPay = winAmount;
				if (!add.send(totalToPay)) revert('Error While Executing Payment.');
				totalPaidOut += totalToPay;
				
				winnersCount++;
				winnersEthCount += totalToPay;
				emit Numbers(address(this), numbers, "YOU WON!");
				
				winners.push(msg.sender);
				winnersTickets.push(playerTickets[msg.sender]);
				winnersETH.push(totalToPay);
				winnersTimestamp.push(block.timestamp);
			}
			else
			{
				emit Numbers(address(this), numbers, "Your numbers don't match the System Number! Try Again.");
			}
			
			playerBlock[msg.sender] = 0;
			playerTickets[msg.sender] = 0;			
		}
		else
		{
			revert('Players must wait 3 blocks');
		}
    }
	
	function BuyTickets(uint256 _max) public payable
    {
		require(msg.sender == tx.origin);
		
		if (_max == 0) rev

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LuckyDraw(), txdata: 0xbea09ec7, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: updateSystemNumber(uint256)
PC address: 4930
Estimated Gas Usage: 1120 - 1215
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:240

	{
			revert();
		}
	}
	
	function updatePercentWin(uint _percentWin) public
	{
		if (msg.sender == 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateSystemNumber(uint256), txdata: 0xd0c3454a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: updateMaxNumber(uint256)
PC address: 4959
Estimated Gas Usage: 1142 - 1237
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:253

;
		}
	}	
	
	function updateMNEContract(address _mneAddress) public
	{
		if (msg.sender == own

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateMaxNumber(uint256), txdata: 0xd22782610000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MinereumLuckyDraw
Function name: updateBazarContract(address)
PC address: 4988
Estimated Gas Usage: 1071 - 1166
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/f4acbe0dbc389de64824472a81ecc40e.sol:282

rBlock[_address]; }
	function GetPlayerTickets(address _address) public view returns (uint256) { re

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateBazarContract(address), txdata: 0xe305a3760000000000000000000000000000000000000000000000000000000000000000, value: 0x0