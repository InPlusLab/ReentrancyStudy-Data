==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 1631
Estimated Gas Usage: 63888 - 330106
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:214

nt.div(ticketPrice);
        require((totalEntry + 

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097742701, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 1745
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:216

msg.sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 1748
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:215

icket

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 1943
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:217

der].isEnte

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 1963
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:219

apping[tota

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 1966
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:219

      ent

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 1978
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:218

ntryArray.

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2066
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:220

ount;

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2101
Estimated Gas Usage: 63888 - 330106
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:220

= ticketCount;
        userAddresses.push(msg.sender);

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2103
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:222

omple

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2121
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:222

it EntryComplete(msg.sender,amount,ticketCou

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2129
Estimated Gas Usage: 63888 - 330106
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:222

it EntryComplete(msg.sender,amount,ticketCou

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2133
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:225

n pickWinn

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2135
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:224

    
    function pickWinne

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2140
Estimated Gas Usage: 63888 - 330106
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:224

    
    function pickWinne

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2177
Estimated Gas Usage: 63888 - 330106
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:224

    
    function pickWinne

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2188
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:225

l onlyOwner{
        require(userAddr

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2205
Estimated Gas Usage: 63888 - 330106
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:225

l onlyOwner{
        require(userAddr

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2207
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:226

 >=4,"Atleast 4 participa

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2212
Estimated Gas Usage: 63888 - 330106
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:226

 >=4,"Atleast 4 participa

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2216
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:227

    require(oldRandomResult !=

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2221
Estimated Gas Usage: 63888 - 330106
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:227

    require(oldRandomResult !=

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2262
Estimated Gas Usage: 63888 - 330106
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:227

    require(oldRandomResult !=

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: enterLottery(uint256)
PC address: 2270
Estimated Gas Usage: 63888 - 330106
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:227

    require(oldRandomResult !=

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020f8f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enterLottery(uint256), txdata: 0x3fd430980000000000000000000000000000000000000000000000000000000097655301, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CandorFi
Function name: userAddresses(uint256)
PC address: 2458
Estimated Gas Usage: 1050 - 1145
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:142

 uint public ticketPrice = 10 

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000fb848, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: userAddresses(uint256), txdata: 0x502c9bd50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: transferAnyERC20(address,address,uint256)
PC address: 2737
Estimated Gas Usage: 3673 - 38332
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:298
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20(address,address,uint256), txdata: 0x5b6f547e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CandorFi
Function name: winningAmount()
PC address: 4580
Estimated Gas Usage: 5256 - 40293
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:294

 != address(token),"Not USDT");
        IERC20(_tokenAddress)

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: winningAmount(), txdata: 0x98f22c12, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CandorFi
Function name: getRandomNumber()
PC address: 6141
Estimated Gas Usage: 15661 - 109218
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:96

  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandomNumber(), txdata: 0xdbdff2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: getRandomNumber()
PC address: 6197
Estimated Gas Usage: 15661 - 109218
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:99

eyHash, vRFSeed)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandomNumber(), txdata: 0xdbdff2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: getRandomNumber()
PC address: 6227
Estimated Gas Usage: 15661 - 109218
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:102

mmutable interna

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandomNumber(), txdata: 0xdbdff2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CandorFi
Function name: getRandomNumber()
PC address: 6256
Estimated Gas Usage: 15661 - 109218
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6f1d94aea1b9e4c1fa17583ba82750d0.sol:102

inkTokenInterface immutable internal LINK;

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandomNumber(), txdata: 0xdbdff2c1, value: 0x0