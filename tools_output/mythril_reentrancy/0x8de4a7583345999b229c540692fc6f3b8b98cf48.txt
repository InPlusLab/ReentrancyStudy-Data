==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CallsScript
Function name: execScript(bytes,bytes,address[]) or execScript(bytes,bytes,address[]) or execScript(bytes,bytes,address[])
PC address: 219
Estimated Gas Usage: 5654 - 49834
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b69c1d6154294b25ba3cb412b2d38b86.sol:685

         }



            // logged before execution to ensure event ordering in receipt

            // if failed entire execution is reverted regardless

            emit LogScriptCall(msg.sender, address(this), contractAddress);



            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));

            uint256 startOffset = location + 0x14 + 0x04;

            uint256 calldataStart = _script.locationOf(startOffset);



            // compute end of script / next location

            location = startOffset + calldataLength;

            require(location <= _script.length, ERROR_INVALID_LENGTH);



            bool success;

            assembly {

                success := call(

                    sub(gas, 5000),       // forward gas left - 5000

                    contractAddress,      // address

                    0,                    // no value

                    calldataStart,        // calldata start

                    calldataLength,       // calldata length

                    0,                    // don't write output

                    0                     // don't write output

                )



                switch success

                case 0 {

                    let ptr := mload(0x40)



                    switch returndatasize

                    case 0 {

                        // No error data was returned, revert with "EVMCALLS_CALL_REVERTED"

                        // See remix: doing a `revert("EVMCALLS_CALL_REVERTED")` always results in

                        // this memory layout

                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier

                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset

                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length

                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason



                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)

                    }

                    default {

                        // Forward the full error data

                        returndatacopy(ptr, 0, returndatasize)

                        revert(ptr, returndatasize)

                    }

                }

                default { }

            }

        }

        // No need to allocate empty bytes for the return as this can only be called via an delegatecall

        // (due to the isInitialized modifier)

    }



    function executorType() external pure returns (bytes32) {

        return EXECUTOR_TYPE;

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x45a820460b0738000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: execScript(bytes,bytes,address[]), txdata: 0x279cea35bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaafffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: CallsScript
Function name: execScript(bytes,bytes,address[]) or execScript(bytes,bytes,address[]) or execScript(bytes,bytes,address[])
PC address: 655
Estimated Gas Usage: 1494 - 1967
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b69c1d6154294b25ba3cb412b2d38b86.sol:405

f the current block

    */

    function hasIni

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: execScript(bytes,bytes,address[]), txdata: 0x279cea35, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CallsScript
Function name: execScript(bytes,bytes,address[]) or execScript(bytes,bytes,address[]) or execScript(bytes,bytes,address[])
PC address: 2001
Estimated Gas Usage: 5654 - 49834
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b69c1d6154294b25ba3cb412b2d38b86.sol:749

LL_REVERTED"

                        // See remix: doing a `revert("EVMCALLS_CALL_REVERTED")` always results in

                        // this memory layout

                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier

                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset

                        mstore(add(ptr, 0x2

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: execScript(bytes,bytes,address[]), txdata: 0x279cea358000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030, value: 0x0