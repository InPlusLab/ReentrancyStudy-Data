==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: InstaLend
Function name: lend(address[],uint256[],address,bytes) or lend(address[],uint256[],address,bytes)
PC address: 1442
Estimated Gas Usage: 15017 - 99600
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:499

transfer(_feesRec

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lend(address[],uint256[],address,bytes), txdata: 0x3f22fa9700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: InstaLend
Function name: lend(address[],uint256[],address,bytes) or lend(address[],uint256[],address,bytes)
PC address: 2334
Estimated Gas Usage: 15017 - 99600
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:559

;

        address spo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lend(address[],uint256[],address,bytes), txdata: 0x3f22fa9700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000027, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: InstaLend
Function name: lend(address[],uint256[],address,bytes) or lend(address[],uint256[],address,bytes)
PC address: 2348
Estimated Gas Usage: 15017 - 99600
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:559

;

        address spo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lend(address[],uint256[],address,bytes), txdata: 0x3f22fa9700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000027, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: QRToken
Function name: redeemed(uint160,uint256)
PC address: 3362
Estimated Gas Usage: 538 - 823
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:667

bution storage distribution = distributions[root];

        require(distribution.bitMask[index / 32] & (1 << (index % 32)) == 0);



        distribution.bitMask[index / 32] = distribution.bitMask[index / 32] | (1 << (index % 3

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: redeemed(uint160,uint256), txdata: 0x746aa14f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: QRToken
Function name: create(address,uint256,uint256,uint160,uint256)
PC address: 3576
Estimated Gas Usage: 1308 - 1733
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:641

2)) != 0;

    }



   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create(address,uint256,uint256,uint160,uint256), txdata: 0x83217a7600000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: QRToken
Function name: create(address,uint256,uint256,uint160,uint256)
PC address: 3771
Estimated Gas Usage: 29983 - 166010
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:649

  bytes calldata signature,

        bytes calldata merklePro

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: create(address,uint256,uint256,uint160,uint256), txdata: 0x83217a76000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000800020000002080000000040000000000000000002804008800480000000008080800001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: QRToken
Function name: create(address,uint256,uint256,uint160,uint256)
PC address: 3918
Estimated Gas Usage: 29983 - 166010
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:661

ageHash = ECDSA.toEthSigne

--------------------
Initial State:

Account: [CREATOR], balance: 0x4003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create(address,uint256,uint256,uint160,uint256), txdata: 0x83217a76000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000080200080000000000008100000004000000101800080000000108040800004048001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: QRToken
Function name: create(address,uint256,uint256,uint160,uint256)
PC address: 3971
Estimated Gas Usage: 29983 - 166010
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:661

ageHash = ECDSA.toEthSigne

--------------------
Initial State:

Account: [CREATOR], balance: 0x4003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create(address,uint256,uint256,uint160,uint256), txdata: 0x83217a76000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000080200080000000000008100000004000000101800080000000108040800004048001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: QRToken
Function name: create(address,uint256,uint256,uint160,uint256)
PC address: 3980
Estimated Gas Usage: 29983 - 166010
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:661

keccak256(abi.encodePacked(msg.sender))

--------------------
Initial State:

Account: [CREATOR], balance: 0x4003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create(address,uint256,uint256,uint160,uint256), txdata: 0x83217a76000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000080200080000000000008100000004000000101800080000000108040800004048001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: QRToken
Function name: create(address,uint256,uint256,uint160,uint256)
PC address: 3989
Estimated Gas Usage: 29983 - 166010
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:663

ddress signer = ECDSA.recover(messag

--------------------
Initial State:

Account: [CREATOR], balance: 0x4003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create(address,uint256,uint256,uint160,uint256), txdata: 0x83217a76000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000080200080000000000008100000004000000101800080000000108040800004048001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: QRToken
Function name: create(address,uint256,uint256,uint160,uint256)
PC address: 3998
Estimated Gas Usage: 29983 - 166010
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:663

ure);

        (uint160 root, ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x4003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create(address,uint256,uint256,uint160,uint256), txdata: 0x83217a76000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000080200080000000000008100000004000000101800080000000108040800004048001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: QRToken
Function name: create(address,uint256,uint256,uint160,uint256)
PC address: 4012
Estimated Gas Usage: 29983 - 166010
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:665

= merkleProof.compute(uint160(sig

--------------------
Initial State:

Account: [CREATOR], balance: 0x4003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create(address,uint256,uint256,uint160,uint256), txdata: 0x83217a76000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000080200080000000000008100000004000000101800080000000108040800004048001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: QRToken
Function name: create(address,uint256,uint256,uint160,uint256)
PC address: 4065
Estimated Gas Usage: 29983 - 166010
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:665

= merkleProof.compute(uint160(sig

--------------------
Initial State:

Account: [CREATOR], balance: 0x4003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create(address,uint256,uint256,uint160,uint256), txdata: 0x83217a76000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000080200080000000000008100000004000000101800080000000108040800004048001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: QRToken
Function name: abort(uint160)
PC address: 4182
Estimated Gas Usage: 2031 - 2646
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/558f1a769a549adf2fa9f27a2f67f167.sol:761
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: abort(uint160), txdata: 0x9dc217ac0000000000000000000000000000000000000000000000000000000000000000, value: 0x0