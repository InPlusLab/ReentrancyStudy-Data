==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string) or __callback(bytes32,string)
PC address: 120
Estimated Gas Usage: 499 - 3464
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:127

lback(bytes32 myid, string result, bytes proof) {
    }

    function oraclize_useCoupon(string code) orac

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: __callback(bytes32,string), txdata: 0x27dc297e0000000000000000000000000000000000000000000000000000016000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string) or __callback(bytes32,string)
PC address: 132
Estimated Gas Usage: 506 - 3471
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:127

lback(bytes32 myid, string result, bytes proof) {
    }

    function oraclize_useCoupon(string code) orac

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: __callback(bytes32,string), txdata: 0x27dc297effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string) or __callback(bytes32,string)
PC address: 141
Estimated Gas Usage: 506 - 3471
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:127

lback(bytes32 myid, string result, bytes proof) {
    }

    function oraclize_useCoupon(string code) orac

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: __callback(bytes32,string), txdata: 0x27dc297effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc2, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string) or __callback(bytes32,string)
PC address: 147
Estimated Gas Usage: 506 - 3471
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:127

lback(bytes32 myid, string result, bytes proof) {
    }

    function oraclize_useCoupon(string code) orac

--------------------
Initial State:

Account: [CREATOR], balance: 0x801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: __callback(bytes32,string), txdata: 0x27dc297effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: StakeDiceGame
Function name: multiplierOnWin()
PC address: 1421
Estimated Gas Usage: 3489 - 38850
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:1085

ntract
        stakeDice.stakeTokenCont

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: multiplierOnWin(), txdata: 0x0d81057e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StakeDiceGame
Function name: multiplierOnWin()
PC address: 1426
Estimated Gas Usage: 3489 - 38850
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:1086

mount);
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x2591f0001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000020, value: 0x0
Caller: [CREATOR], function: multiplierOnWin(), txdata: 0x0d81057e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: StakeDiceGame
Function name: multiplierOnWin()
PC address: 1431
Estimated Gas Usage: 3489 - 38850
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:1086

m(_gambler, stakeDice,

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: multiplierOnWin(), txdata: 0x0d81057e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeDice
Function name: allPlayers(uint256)
PC address: 2028
Estimated Gas Usage: 987 - 1082
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:1185

       require(addressIsSta

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: allPlayers(uint256), txdata: 0x0544ce5e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeDice
Function name: bets(uint256)
PC address: 2092
Estimated Gas Usage: 1009 - 1104
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:1199

nningChance, betA

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: bets(uint256), txdata: 0x22af00fa80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeDice
Function name: allGames(uint256)
PC address: 6319
Estimated Gas Usage: 1405 - 1500
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:1180

s;
    
    function betPlaced(

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: allGames(uint256), txdata: 0xa0b55095, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakeDice
Function name: cancelBet(uint256)
PC address: 6665
Estimated Gas Usage: 1998 - 2423
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/483e2610d7cf2f855665574acc5d9117.sol:1377

yable external
    {


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: cancelBet(uint256), txdata: 0x357401f580, value: 0x0