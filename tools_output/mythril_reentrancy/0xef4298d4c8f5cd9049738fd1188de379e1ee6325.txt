==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RewardSharing
Function name: AdjustEtherBook(address[],uint256[])
PC address: 445
Estimated Gas Usage: 12083 - 59085
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/fcfac9083addb5a295b6d655949f169e.sol:387

profitArray) public onlyOwner

    {

        if(TokenBook[ERC20Address][0x0]== 0)

        {

            supportToken.push(ERC20Address);

            TokenBook[ERC20Address][0x0] = 1;

        }

        

        for( uint256 i = 0; i < addressArra

--------------------
Initial State:

Account: [CREATOR], balance: 0x9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AdjustEtherBook(address[],uint256[]), txdata: 0x50883b2d800000000301ffffffffffffffffffffffffffffffffffffffbfffffffffffe9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RewardSharing
Function name: ProfitDividend(address[],uint256[])
PC address: 865
Estimated Gas Usage: 7951 - 34674
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/fcfac9083addb5a295b6d655949f169e.sol:369

ustEtherBook(address[] addressArray, uint256[] profitArray) public onlyOwner

    {

        for( uint256 i = 0; i < addressArray.length;i++)

        {

            EtherBook[addressArray[i]] = profitArray[i];

        }

    }

    

    //Add token for accounts

    function Profi

--------------------
Initial State:

Account: [CREATOR], balance: 0x8020000008000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ProfitDividend(address[],uint256[]), txdata: 0x7fcff5118000000000000000000000000000001ffffffffffffffffffffffffffffffff8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RewardSharing
Function name: AdjustEtherBook(address[],uint256[])
PC address: 2169
Estimated Gas Usage: 1534 - 7319
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fcfac9083addb5a295b6d655949f169e.sol:387

profitArray) public onlyOwner

    {

        if(TokenBook[ERC20Address][0x0]== 0)

        {

            supportToken.push(ERC20Address);

            TokenBook[ERC20Address][0x0] = 1;

        }

        

        for( uint256 i = 0; i < addressArra

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AdjustEtherBook(address[],uint256[]), txdata: 0x50883b2dffffffffffffffffffffffffffffffffffffffffffffffffffffffef1fff01c6ff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RewardSharing
Function name: GetSupportToken(uint256)
PC address: 2650
Estimated Gas Usage: 1127 - 1222
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fcfac9083addb5a295b6d655949f169e.sol:359

ook[addressArray[i]] = EtherBook[addressArray[i]].add(profitArray[i]);

        }

    }

    

    // Adjust Ether balanc

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: GetSupportToken(uint256), txdata: 0x7ab73d4f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RewardSharing
Function name: ProfitDividend(address[],uint256[])
PC address: 2929
Estimated Gas Usage: 1625 - 7410
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fcfac9083addb5a295b6d655949f169e.sol:369

ustEtherBook(address[] addressArray, uint256[] profitArray) public onlyOwner

    {

        for( uint256 i = 0; i < addressArray.length;i++)

        {

            EtherBook[addressArray[i]] = profitArray[i];

        }

    }

    

    //Add token for accounts

    function Profi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ProfitDividend(address[],uint256[]), txdata: 0x7fcff5118000000000000000000000000000000000000000000000000000000000000000ff, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RewardSharing
Function name: withdrawToken(address)
PC address: 3574
Estimated Gas Usage: 8223 - 63735
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fcfac9083addb5a295b6d655949f169e.sol:513
Initial State:

Account: [CREATOR], balance: 0x50800000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RewardSharing
Function name: ProfitTokenDividend(address,address[],uint256[])
PC address: 4241
Estimated Gas Usage: 19721 - 86691
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fcfac9083addb5a295b6d655949f169e.sol:407

ERC20Address][addressArray[i]] = TokenBook[ERC20Address][addressArray[i]].add(profitArray[i]);

        }

    }

    

    // Adjust token balance of accounts in the vault

    function AdjustTokenBook(address ERC20Address,address[] addressArray, uint256[] profitArray) public onlyOwner

    {

        if(TokenBook[ERC20Address][0x0]== 0)

        {

            supportToken.push(ERC20Address);

            TokenBook[ERC20Address][0x0] = 1;

        }

        

        for( uint256 i = 0; i < addressArray.length;i++

--------------------
Initial State:

Account: [CREATOR], balance: 0xa15b9c4022080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ProfitTokenDividend(address,address[],uint256[]), txdata: 0xbef2a366000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RewardSharing
Function name: AdjustTokenBook(address,address[],uint256[])
PC address: 5462
Estimated Gas Usage: 19784 - 86754
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/fcfac9083addb5a295b6d655949f169e.sol:437

fitArray[i];

        }

    }

    

    //check ether balance in the vault

    function CheckBalance(address theAddress) public view returns(uint256 EtherProfit)

    {

        return (EtherBook[theAddress]);

    }

    

    //Check token balance in the vault

    function CheckTokenBalance(address ERC20Address, address theAddress) public view returns(uint256 TokenProfit)

    {

        return TokenBook[ERC20Address][theAddress];

    }

    

    //User with

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AdjustTokenBook(address,address[],uint256[]), txdata: 0xf75d5572000000000000000000000000000000000000000000000000000000000000000080, value: 0x0