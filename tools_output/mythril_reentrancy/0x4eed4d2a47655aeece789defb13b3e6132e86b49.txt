==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GetBonus
Function name: InvestorBonusGet(address[])
PC address: 224
Estimated Gas Usage: 24869 - 123904
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:487



	}

	function Dd(address _address) onlyOwner public{

		_address.transfer(address(this).balance);

	}

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x808, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: InvestorBonusGet(address[]), txdata: 0x8abcb485ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: StandardToken
Function name: multiTransfer(address[],uint256[])
PC address: 442
Estimated Gas Usage: 30499 - 124002
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:149

l) {

        require(_to.length == _value.length);

        for(uint i = 0; i < _to.length; i++) {

            transfer(_to[i], _value[i]);

        }

        return true;

}

    function transferFrom(address _from, address _to, uint256 _value) public r

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000001001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatavalue: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d545ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GetBonus
Function name: InvestorBonusGet(address[])
PC address: 542
Estimated Gas Usage: 24869 - 123904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:497
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: InvestorBonusGet(address[]), txdata: 0x8abcb48580, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GetBonus
Function name: InvestorBonusGet(address[])
PC address: 553
Estimated Gas Usage: 24869 - 123904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:497
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: InvestorBonusGet(address[]), txdata: 0x8abcb48580, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GetBonus
Function name: InvestorBonusGet(address[])
PC address: 575
Estimated Gas Usage: 24869 - 123904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:497
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: InvestorBonusGet(address[]), txdata: 0x8abcb48580, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GetBonus
Function name: InvestorBonusGet(address[])
PC address: 579
Estimated Gas Usage: 24869 - 123904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:497
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: InvestorBonusGet(address[]), txdata: 0x8abcb48580, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Token
Function name: multiTransfer(address[],uint256[])
PC address: 592
Estimated Gas Usage: 23047 - 75165
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:429

turn super.multiTransfer(_to, _value);

    }

    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {

        _reward(_from);

        _reward(_to);

        return super.transferFrom(_from, _to, _value);

    }

}



con

--------------------
Initial State:

Account: [CREATOR], balance: 0x20010c0002000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d545ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GetBonus
Function name: InvestorBonusGet(address[])
PC address: 618
Estimated Gas Usage: 24869 - 123904
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:497
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: InvestorBonusGet(address[]), txdata: 0x8abcb48580, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GetBonus
Function name: InvestorBonusGet(address[])
PC address: 621
Estimated Gas Usage: 24869 - 123904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:497
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: InvestorBonusGet(address[]), txdata: 0x8abcb48580, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Token
Function name: name()
PC address: 1337
Estimated Gas Usage: 4181 - 6300
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:107

 uint8 public deci

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000030000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Token
Function name: repayments(uint256)
PC address: 2652
Estimated Gas Usage: 1327 - 1422
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:355

er payable public {

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x4004c0a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: repayments(uint256), txdata: 0xa85f3761, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Token
Function name: rewards(address,uint256)
PC address: 2741
Estimated Gas Usage: 1468 - 2083
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3bd0526e460abf4042c78ef09f7f75d7.sol:357

e(msg.value >= 0.0001 * 1 ether);



       

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rewards(address,uint256), txdata: 0xb933ceac, value: 0x0


