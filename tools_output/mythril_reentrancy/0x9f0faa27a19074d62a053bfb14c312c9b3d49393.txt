==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VoiceAirdrop
Function name: sendTokensSingleValue(address[],uint256)
PC address: 201
Estimated Gas Usage: 3633 - 38950
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:133

nt256 toSend = value * 10**18;

    while (i < dests.length) {

        sendInternally(dests[i] , toSend, value);

        i++;

    }

  }  



  function sendInternally(address recipient, uint256 tokensToSend, uint256 valueToPresent) internal {

    if(recipient == address(0)) r

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensSingleValue(address[],uint256), txdata: 0x54919a6cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VoiceAirdrop
Function name: sendTokens(address[],uint256[])
PC address: 348
Estimated Gas Usage: 3734 - 39051
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:111

= 0;

    while (i < dests.length) {

        uint256 toSend = values[i] * 10**18;

        sendInternally(dests[i] , toSend, values[i]);

        i++;

    }

  }



  // this function can be used when you want to send same number of tokens to all the recipients

  function sendToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokens(address[],uint256[]), txdata: 0xd8b66ae1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VoiceAirdrop
Function name: sendTokens(address[],uint256[])
PC address: 359
Estimated Gas Usage: 4081 - 40058
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:111

= 0;

    while (i < dests.length) {

        uint256 toSend = values[i] * 10**18;

        sendInternally(dests[i] , toSend, values[i]);

        i++;

    }

  }



  // this function can be used when you want to send same number of tokens to all the recipients

  function sendToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokens(address[],uint256[]), txdata: 0xd8b66ae18000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VoiceAirdrop
Function name: sendTokens(address[],uint256[])
PC address: 361
Estimated Gas Usage: 4081 - 40058
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:111

= 0;

    while (i < dests.length) {

        uint256 toSend = values[i] * 10**18;

        sendInternally(dests[i] , toSend, values[i]);

        i++;

    }

  }



  // this function can be used when you want to send same number of tokens to all the recipients

  function sendToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokens(address[],uint256[]), txdata: 0xd8b66ae18000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VoiceAirdrop
Function name: sendTokensSingleValue(address[],uint256)
PC address: 435
Estimated Gas Usage: 2718 - 37705
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:89

s _tokenAddr = 0x9

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: sendTokensSingleValue(address[],uint256), txdata: 0x54919a6c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VoiceAirdrop
Function name: sendTokensSingleValue(address[],uint256)
PC address: 439
Estimated Gas Usage: 4079 - 40716
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:39

tion 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensSingleValue(address[],uint256), txdata: 0x54919a6c80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VoiceAirdrop
Function name: sendTokensSingleValue(address[],uint256)
PC address: 475
Estimated Gas Usage: 7534 - 79270
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:147

function sendI

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensSingleValue(address[],uint256), txdata: 0x54919a6c8000000000000000000000000000000000008000000000014000000000000000804024, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VoiceAirdrop
Function name: sendTokensSingleValue(address[],uint256)
PC address: 543
Estimated Gas Usage: 4079 - 40716
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:185

ce);


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensSingleValue(address[],uint256), txdata: 0x54919a6c80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VoiceAirdrop
Function name: sendTokensSingleValue(address[],uint256)
PC address: 644
Estimated Gas Usage: 4079 - 40716
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:185

ce);

    selfdestruc

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensSingleValue(address[],uint256), txdata: 0x54919a6c80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VoiceAirdrop
Function name: destroy()
PC address: 740
Estimated Gas Usage: 7640 - 78181
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:191
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VoiceAirdrop
Function name: destroy()
PC address: 744
Estimated Gas Usage: 7640 - 78181
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:191
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VoiceAirdrop
Function name: destroy()
PC address: 858
Estimated Gas Usage: 7640 - 78181
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:191
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VoiceAirdrop
Function name: destroy()
PC address: 902
Estimated Gas Usage: 7640 - 78181
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:191
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VoiceAirdrop
Function name: sendTokens(address[],uint256[])
PC address: 946
Estimated Gas Usage: 2830 - 37817
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:89

s _tokenAddr = 0x9

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendTokens(address[],uint256[]), txdata: 0xd8b66ae1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VoiceAirdrop
Function name: sendTokens(address[],uint256[])
PC address: 950
Estimated Gas Usage: 4081 - 40058
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:39

tion 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokens(address[],uint256[]), txdata: 0xd8b66ae180, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VoiceAirdrop
Function name: sendTokens(address[],uint256[])
PC address: 994
Estimated Gas Usage: 3743 - 39060
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8e2546fa3127e017e19a873fcd3f3468.sol:127

function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokens(address[],uint256[]), txdata: 0xd8b66ae1800000000000000000000000000000000000000000000000000000000000000020, value: 0x0