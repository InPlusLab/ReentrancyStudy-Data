==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorKillerContract
Function name: get_amount_buy(uint256)
PC address: 1123
Estimated Gas Usage: 1971 - 2066
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ded8a224bc0019561f0bb1fb03f35f5.sol:469

nce_ + _amount;

    

    return (_amount*traded_token_balance_*(eth_balance_plus_amount_ + eth_balance_))/(2*eth_balance_plus_amount_*eth_balance_);

   

  }

  

  function get_amount_minus_commission(uint256 _amount) private view returns(uint256) {

      

    return (_amount*(1 ether - commission_ratio))/(1 ether);  

    

  }



  function complete_sell_exchange(uint256 _amount_give) pr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: get_amount_buy(uint256), txdata: 0x7b5825d5, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BancorKillerContract
Function name: get_amount_sell(uint256)
PC address: 1269
Estimated Gas Usage: 2144 - 2520
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ded8a224bc0019561f0bb1fb03f35f5.sol:457

 {

 

    uint256 eth_balance_

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b988, value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0
Caller: [ATTACKER], function: get_amount_sell(uint256), txdata: 0xa45230ec80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BancorKillerContract
Function name: get_amount_sell(uint256)
PC address: 1272
Estimated Gas Usage: 2144 - 2520
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ded8a224bc0019561f0bb1fb03f35f5.sol:465

ance_ = traded_token_balance;



    uint256 eth_balance_

--------------------
Initial State:

Account: [CREATOR], balance: 0x200040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111d0, value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0
Caller: [CREATOR], function: get_amount_sell(uint256), txdata: 0xa45230ec, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BancorKillerContract
Function name: get_amount_sell(uint256)
PC address: 1275
Estimated Gas Usage: 2144 - 2520
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ded8a224bc0019561f0bb1fb03f35f5.sol:465

 uint256 traded_token_

--------------------
Initial State:

Account: [CREATOR], balance: 0x18000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: seed_eth(), txdata: 0x3f5ab2fe, value: 0x10000000000000000
Caller: [SOMEGUY], function: get_amount_sell(uint256), txdata: 0xa45230ec20, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorKillerContract
Function name: get_amount_sell(uint256)
PC address: 1286
Estimated Gas Usage: 2065 - 2160
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ded8a224bc0019561f0bb1fb03f35f5.sol:445

lus_amount_ = traded_token_balance_ + _amount;

    

    return (2*eth_balance_*_amount)/(traded_token_balance_ + traded_token_balance_plus_amount_);

    

  }



  function get_amount_buy(uint256 _amount) public view returns(uint256) {

 

    uint256 eth_balance_ = eth_balance; 



    uint256 traded_token_balance_ = traded_token_balance;



    uint256 eth_balance_plus_amount_ = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: get_amount_sell(uint256), txdata: 0xa45230ec, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorKillerContract
Function name: withdraw_token(uint256)
PC address: 1680
Estimated Gas Usage: 10262 - 66004
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ded8a224bc0019561f0bb1fb03f35f5.sol:213

{



    eth_balance = eth_balance.add(ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorKillerContract
Function name: withdraw_token(uint256)
PC address: 2000
Estimated Gas Usage: 2725 - 3480
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ded8a224bc0019561f0bb1fb03f35f5.sol:207



  }



  function transferETHTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorKillerContract
Function name: withdraw_eth(uint256)
PC address: 2000
Estimated Gas Usage: 2747 - 3502
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ded8a224bc0019561f0bb1fb03f35f5.sol:241

amount) private { 



  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_eth(uint256), txdata: 0x30a95e6701, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorKillerContract
Function name: seed_traded_token()
PC address: 2151
Estimated Gas Usage: 17324 - 92831
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0ded8a224bc0019561f0bb1fb03f35f5.sol:197

nsFromContract(address _to, uint256 _amount) privat

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0


