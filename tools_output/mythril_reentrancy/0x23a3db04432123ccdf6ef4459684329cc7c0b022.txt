==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: casinoBank
Function name: bankroll() or bankroll()
PC address: 1121
Estimated Gas Usage: 3549 - 39005
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/42e785855065ec863767ec71dbc04dd1.sol:143

r if nobody has been using i

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000008808, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7e7e7e7e7e7e7e7e7e7e7e7edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bankroll(), txdata: 0x0c657eb0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: casinoBank
Function name: bankroll() or bankroll()
PC address: 1148
Estimated Gas Usage: 3549 - 39005
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e785855065ec863767ec71dbc04dd1.sol:143

for at least 

--------------------
Initial State:

Account: [CREATOR], balance: 0x18002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7e7e7e7e7e7e7e7e7e7e7e7edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bankroll(), txdata: 0x0c657eb0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: casinoBank
Function name: requestWithdrawal() or requestWithdrawal()
PC address: 3555
Estimated Gas Usage: 5475 - 25760
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/42e785855065ec863767ec71dbc04dd1.sol:106

ssary to be abl

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000100000103, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestWithdrawal(), txdata: 0xdbaf2145, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: casinoBank
Function name: deposit(address,uint256,bool) or deposit(address,uint256,bool)
PC address: 3867
Estimated Gas Usage: 1267 - 1362
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/42e785855065ec863767ec71dbc04dd1.sol:88

sPrice);
		assert(edg.tra

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(address,uint256,bool), txdata: 0x3edd1128000000000000000000000000000000000000000000000000000000204010020150, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: casinoProxy
Function name: casinoGames(uint256)
PC address: 7383
Estimated Gas Usage: 1402 - 1497
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/42e785855065ec863767ec71dbc04dd1.sol:181

ng(address => uint) public c

--------------------
Initial State:

Account: [CREATOR], balance: 0x48100000000012001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: casinoGames(uint256), txdata: 0xd9629e0680, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: casinoProxy
Function name: requestWithdrawal() or requestWithdrawal()
PC address: 7437
Estimated Gas Usage: 5673 - 25958
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/42e785855065ec863767ec71dbc04dd1.sol:106

ssary to be abl

--------------------
Initial State:

Account: [CREATOR], balance: 0x258088c000002ea2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestWithdrawal(), txdata: 0xdbaf2145, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: casinoProxy
Function name: deposit(address,uint256,bool) or deposit(address,uint256,bool)
PC address: 8057
Estimated Gas Usage: 1333 - 1428
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/42e785855065ec863767ec71dbc04dd1.sol:88

sPrice);
		assert(edg.tra

--------------------
Initial State:

Account: [CREATOR], balance: 0x20080010804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(address,uint256,bool), txdata: 0x3edd112801010101010101010101010100000000000000000000000000000000000000008c, value: 0x0