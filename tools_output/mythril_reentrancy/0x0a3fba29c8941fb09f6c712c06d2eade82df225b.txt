==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Affiliate
Function name: fallback
PC address: 332
Estimated Gas Usage: 1891 - 2267
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:1187

eClone());

      newAffiliate.init(_co

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000020fbfa0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: init(address,uint256,address,uint256), txdata: 0x602bead50000000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000110404040404040404040404040104040404040404040404040400000000000, value: 0x0
Caller: [SOMEGUY], function: getTotalFeePercentage(), txdata: 0x064367bb, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TotlePrimary
Function name: fallback
PC address: 374
Estimated Gas Usage: 4588 - 40664
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:3005

 for(uint256 tokenIndex = 0; tokenIndex < redirectTokens.length; to

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Withdrawable
Function name: withdrawETH(uint256)
PC address: 501
Estimated Gas Usage: 2844 - 38022
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:273

view returns (uint256);

--------------------
Initial State:

Account: [CREATOR], balance: 0x101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawETH(uint256), txdata: 0xf14210a60000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Withdrawable
Function name: withdrawToken(address,uint256)
PC address: 707
Estimated Gas Usage: 3534 - 41725
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:155

feTransferFrom(address _tokenAddress, address _from, address _to, uint256 _valu

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,uint256), txdata: 0x9e281a9800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: withdrawToken(address,uint256), txdata: 0x9e281a98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AffiliateRegistry
Function name: registerAffiliate(address,uint256)
PC address: 745
Estimated Gas Usage: 43882 - 104357
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:1225





  function isValidAffiliate(address affiliat

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: registerAffiliate(address,uint256), txdata: 0x618254a200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AffiliateRegistry
Function name: registerAffiliate(address,uint256)
PC address: 754
Estimated Gas Usage: 43882 - 104357
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:1225





  function isValidAffiliate(address affiliat

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: registerAffiliate(address,uint256), txdata: 0x618254a200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenTransferProxy
Function name: authorities(uint256)
PC address: 758
Estimated Gas Usage: 1155 - 1250
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:433

    onlyOwner

        targe

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002060109, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: authorities(uint256), txdata: 0x494503d40000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenTransferProxy
Function name: removeAuthorizedAddress(address)
PC address: 956
Estimated Gas Usage: 32617 - 116791
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:495

 /// @return Success o

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddress(address), txdata: 0x707129390000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenTransferProxy
Function name: removeAuthorizedAddress(address)
PC address: 1065
Estimated Gas Usage: 32617 - 116791
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:497

ion transferFrom(

    

--------------------
Initial State:

Account: [CREATOR], balance: 0xa, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e0000000000000000000000000000000000000000000000001001010001010002, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddress(address), txdata: 0x707129390000000000000000000000000000000000000000000000001001010001010002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AffiliateRegistry
Function name: overrideRegisterAffiliate(address,uint256,address,uint256)
PC address: 1195
Estimated Gas Usage: 43437 - 104572
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:1251



/// @dev Defines a modifier which should be us

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: overrideRegisterAffiliate(address,uint256,address,uint256), txdata: 0x8c86f66b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AffiliateRegistry
Function name: overrideRegisterAffiliate(address,uint256,address,uint256)
PC address: 1204
Estimated Gas Usage: 43437 - 104572
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:1251



/// @dev Defines a modifier which should be us

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: overrideRegisterAffiliate(address,uint256,address,uint256), txdata: 0x8c86f66b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TotlePrimary
Function name: handlerWhitelistArray(uint256)
PC address: 1543
Estimated Gas Usage: 1172 - 1597
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:1917

ress(0x0)); */

        tokenTransferP

--------------------
Initial State:

Account: [CREATOR], balance: 0x11, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: handlerWhitelistArray(uint256), txdata: 0x154470700000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenTransferProxy
Function name: fallback
PC address: 1624
Estimated Gas Usage: 2952 - 39780
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:169

on safeApprove(address _tokenAddress, address _spender, uint256 _value) internal returns (bool suc

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,address,uint256), txdata: 0x15dacbea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TotlePrimary
Function name: removeHandlerFromWhitelist(address)
PC address: 2220
Estimated Gas Usage: 11539 - 68890
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:1981

dev onlyOwner modifier only allows the contract ow

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: removeHandlerFromWhitelist(address), txdata: 0x55beb15d0000000000000000000000000000000000000000000000008000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TotlePrimary
Function name: removeHandlerFromWhitelist(address)
PC address: 2268
Estimated Gas Usage: 11539 - 68890
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:2101

mountLeftToSpendOnTrade); */



   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: removeHandlerFromWhitelist(address), txdata: 0x55beb15d0000000000000000000000000000000000000000000000008000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TotlePrimary
Function name: removeHandlerFromWhitelist(address)
PC address: 2274
Estimated Gas Usage: 11539 - 68890
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:2101

mountLeftToSpendOnTrade); */



   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: removeHandlerFromWhitelist(address), txdata: 0x55beb15d0000000000000000000000000000000000000000000000008000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TotlePrimary
Function name: removeHandlerFromWhitelist(address)
PC address: 2280
Estimated Gas Usage: 11539 - 68890
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:2107

      thisTrade,

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: removeHandlerFromWhitelist(address), txdata: 0x55beb15d0000000000000000000000000000000000000000000000008000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TotlePrimary
Function name: withdrawToken(address,uint256)
PC address: 6605
Estimated Gas Usage: 3794 - 41892
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14930b3ddede31091b8ea2519464ac59.sol:155

feTransferFrom(address _tokenAddress, address _from, address _to, uint256 _valu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,uint256), txdata: 0x9e281a98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0


