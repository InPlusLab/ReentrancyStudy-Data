==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 2636
Estimated Gas Usage: 47448 - 297513
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:539

     status: Bri

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080040100070011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 2832
Estimated Gas Usage: 47448 - 297513
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:541

ContractAddress: erc20ContractAddress,
            a

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 2896
Estimated Gas Usage: 47448 - 297513
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:543

tamp: block.timestamp,
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 2938
Estimated Gas Usage: 47448 - 297513
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:542

ssetGUID,
            timestamp: block.timestamp,
            

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 2942
Estimated Gas Usage: 47448 - 297513
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

  function getBridgeTra

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 2965
Estimated Gas Usage: 47448 - 297513
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

  function getBridgeTra

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 3015
Estimated Gas Usage: 47448 - 297513
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

Id) external view ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 3045
Estimated Gas Usage: 47448 - 297513
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

2 bridgeTransferId) external view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 3054
Estimated Gas Usage: 47448 - 297513
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

2 bridgeTransferId) external view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 3064
Estimated Gas Usage: 47448 - 297513
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

2 bridgeTransferId) external view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 3091
Estimated Gas Usage: 47448 - 297513
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

2 bridgeTransferId) external view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 3102
Estimated Gas Usage: 47448 - 297513
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

2 bridgeTransferId) external view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 3141
Estimated Gas Usage: 47448 - 297513
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

2 bridgeTransferId) external view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 3177
Estimated Gas Usage: 47448 - 297513
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:552

2 bridgeTransferId) external view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 3182
Estimated Gas Usage: 47448 - 297513
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:562

imestamp,
           

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SyscoinERC20Manager
Function name: init(uint8,address)
PC address: 4724
Estimated Gas Usage: 10240 - 30335
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3d8c00f29e7336fb49960bddfcc992bf.sol:394

ractAddress).d

--------------------
Initial State:

Account: [CREATOR], balance: 0x945402000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: init(uint8,address), txdata: 0xf7daeb8500000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000, value: 0x0


