==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 342
Estimated Gas Usage: 863 - 958
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:296

ens = msg.value * 11500;
            roundOneAmount 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 362
Estimated Gas Usage: 883 - 978
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:296

     tokens = msg.value * 11500;
            roundOneAmount =

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000c01400b882a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 384
Estimated Gas Usage: 1809 - 1904
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:298

 }

        if (isRoundTwoSalePeriod(now)) {
            tokens = msg.value * 11000;
            roundTwoAmount = zeroSub(roundTwoAmount, to

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000002004c00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 421
Estimated Gas Usage: 2717 - 2812
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:303

   }

        if (isRoundThreeSalePeriod(now)) {
            tokens = msg.value * 10500;
            roundThreeAmount = zeroSub(roundThreeAmount, t

--------------------
Initial State:

Account: [CREATOR], balance: 0x18004004002cd92, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 458
Estimated Gas Usage: 3625 - 3720
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:308

    }

        require(tokens > 0);
        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);
        _totalSupply = safeAdd(_totalSupp

--------------------
Initial State:

Account: [CREATOR], balance: 0x2002400800000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 495
Estimated Gas Usage: 4533 - 4628
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:312


        emit Transfer(address(0), msg.sender, tokens);
        owner.transfer(msg.value);
    }

    // ------------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 1684
Estimated Gas Usage: 1753 - 1848
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:188

    // ------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 1698
Estimated Gas Usage: 1773 - 1868
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:188

    // ---------------------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080002082444, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 1761
Estimated Gas Usage: 2661 - 2756
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:195

// ------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000e8400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 1775
Estimated Gas Usage: 2681 - 2776
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:195

// ----------------------------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x22000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 1803
Estimated Gas Usage: 3569 - 3664
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:202

---------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001000000018312, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 1817
Estimated Gas Usage: 3589 - 3684
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:202

-------------------------------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000806, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 1845
Estimated Gas Usage: 4477 - 4572
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:208

`tokenOwner`
    // -----------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x42004500020000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ZooblinToken
Function name: fallback
PC address: 1859
Estimated Gas Usage: 4497 - 4592
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:208

`tokenOwner`
    // -----------------------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0xde0b6b3a7640000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZooblinToken
Function name: fallback
PC address: 1914
Estimated Gas Usage: 2330 - 4071
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:119

int public preSaleA

--------------------
Initial State:

Account: [CREATOR], balance: 0x78402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZooblinToken
Function name: symbol()
PC address: 2632
Estimated Gas Usage: 2588 - 4329
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:117

nt public startDate;

--------------------
Initial State:

Account: [CREATOR], balance: 0x30000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZooblinToken
Function name: transferAnyERC20Token(address,uint256)
PC address: 3433
Estimated Gas Usage: 3982 - 40005
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d5421d2e783c9cbb4a4aa42990384094.sol:323
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,uint256), txdata: 0xdc39d06d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0