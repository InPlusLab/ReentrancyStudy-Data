==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: Puppet
Function name: fallback
PC address: 285
Estimated Gas Usage: 2674 - 37995
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:96

withdraw() public{
		require(msg.sender == ma

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x02100020, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: 0x72c68108a82e82617b93d1be0d7975d762035015
Function name: fallback
PC address: 285
Estimated Gas Usage: 2674 - 37995
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:30

		require(msg.sender == owner);
		owner.transfer(address(this).balance);
	}

//puppet count

	function get

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Splitter
Function name: puppets(uint256)
PC address: 703
Estimated Gas Usage: 1014 - 1109
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:6

ss[] public puppets;
	ma

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000002002001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: puppets(uint256), txdata: 0x0a46e3e980, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 987
Estimated Gas Usage: 16023 - 175272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:64

ll.value

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 1041
Estimated Gas Usage: 16023 - 175272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:64

(80000

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 1062
Estimated Gas Usage: 16023 - 175272
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:64

ll.value(_share).gas(800000)();
        e

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 1062
Estimated Gas Usage: 16023 - 175272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:64

ll.value(_share).gas(800000)();
        e

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 1092
Estimated Gas Usage: 16023 - 175272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:65

l.value(

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 1146
Estimated Gas Usage: 16023 - 175272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:65

800000

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 1167
Estimated Gas Usage: 16023 - 175272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:65

l.value(_share).gas(800000)();
        }


--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 1197
Estimated Gas Usage: 16023 - 175272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:68

fallback

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 1251
Estimated Gas Usage: 16023 - 175272
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:70

unctio

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Splitter
Function name: fundPuppets()
PC address: 1272
Estimated Gas Usage: 16023 - 175272
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a611194df42ab0ee1f8d362643167ba4.sol:68

fallback function

function() payable pub

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fundPuppets(), txdata: 0x2daeb49a, value: 0x0