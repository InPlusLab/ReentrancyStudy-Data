==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SubscryptoDAI
Function name: outstandingBalanceUntil(address,uint256)
PC address: 1788
Estimated Gas Usage: 265 - 690
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/616fd079cbadf6cfeb6c376a1bae1d8d.sol:739

ess

     * @param start

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: outstandingBalanceUntil(address,uint256), txdata: 0x7329ba4c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SubscryptoDAI
Function name: allowedBalance(address)
PC address: 2504
Estimated Gas Usage: 5280 - 75865
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/616fd079cbadf6cfeb6c376a1bae1d8d.sol:937

the last payment at a specific `time`.

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: allowedBalance(address), txdata: 0x79aa4ebe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SubscryptoDAI
Function name: receiverSubs(address,uint256)
PC address: 4909
Estimated Gas Usage: 1186 - 1801
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/616fd079cbadf6cfeb6c376a1bae1d8d.sol:387

format

     * @param interval seconds between p

--------------------
Initial State:

Account: [CREATOR], balance: 0x80004000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: receiverSubs(address,uint256), txdata: 0xaeee4eb200000000000000000000000001010101000200020404020000010000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SubscryptoDAI
Function name: subscriberSubs(address,uint256)
PC address: 5024
Estimated Gas Usage: 1141 - 1756
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/616fd079cbadf6cfeb6c376a1bae1d8d.sol:393

 receiver, uint daiWad, uint32 interval) external 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: subscriberSubs(address,uint256), txdata: 0xc358b3b000000000000000000000000008404040040404040480100001000280200800088001008002004000010008020080204001018020200840100180044004008001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SubscryptoDAI
Function name: subscribe(address,uint256,uint32)
PC address: 5680
Estimated Gas Usage: 83042 - 372929
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/616fd079cbadf6cfeb6c376a1bae1d8d.sol:435

   receiverSubs[receiver].push(nextIndex);

        su

--------------------
Initial State:

Account: [CREATOR], balance: 0x101040000002002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f1f1f1f1f1f1f1f1f1f1f1f1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: subscribe(address,uint256,uint32), txdata: 0xda749181000000000000000000000000000000000000000000000000000000000000000000001000000000000000000100000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000a787f1, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SubscryptoDAI
Function name: subscribe(address,uint256,uint32)
PC address: 8709
Estimated Gas Usage: 5756 - 42636
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/616fd079cbadf6cfeb6c376a1bae1d8d.sol:159

ulo),

     * r

--------------------
Initial State:

Account: [CREATOR], balance: 0x10008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: subscribe(address,uint256,uint32), txdata: 0xda7491810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000187e1, value: 0x0