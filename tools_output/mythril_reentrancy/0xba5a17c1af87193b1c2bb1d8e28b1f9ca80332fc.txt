==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 733
Estimated Gas Usage: 5481 - 75972
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:257

N = (10**18);
    uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e9e9e9e9e9e9e9e9e9e9e9e9edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef9e9e9e9e9e9e9e9e9e9e9e9e02, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 818
Estimated Gas Usage: 5481 - 75972
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:258

56 constant interna

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 1073
Estimated Gas Usage: 5481 - 75972
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:261

   string public constant 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e9e9e9e9e9e9e9e9e9e9e9e9edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef9e9e9e9e9e9e9e9e9e9e9e9e02, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 1073
Estimated Gas Usage: 5481 - 75972
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:261

   string public constant 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000000000000000000000000000000000800800000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 1073
Estimated Gas Usage: 5481 - 75972
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:261

   string public constant 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getApproved(uint256) or getApproved(uint256)
PC address: 6021
Estimated Gas Usage: 1012 - 1107
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:516

ndex Index of the loan

        @return true if the loan has been approved by the borrower and cosigner

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getApproved(uint256), txdata: 0x081812fc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: approve(address,uint256) or approve(address,uint256) or approve(address,uint256)
PC address: 6096
Estimated Gas Usage: 1067 - 1162
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:731

oved);
        return true;
    }

    /**
        @notice Returns the pending amount to complete de payment of the loan, keep in mind that this number increases 
        every second.

        @dev This method also computes the interest and updates the loan

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getInterestRate(uint256)
PC address: 6402
Estimated Gas Usage: 1056 - 1151
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:504

return loans[index].cancelableAt; }
    function getApprobation(uint index, address _address) public vie

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getInterestRate(uint256), txdata: 0x0c196a74, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getOracle(uint256) or getOracle(uint256)
PC address: 6463
Estimated Gas Usage: 1100 - 1195
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:497

   function getPunitoryInterest(uint index) public view returns (uint256) { return loans[in

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getOracle(uint256), txdata: 0x10a9de60, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 8480
Estimated Gas Usage: 1279 - 1374
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:713

e approve was done successfully
    */
    function approve(address to, uint256 index) public returns (bool) {
        Loan storage loan = loans[index];
        require(msg.send

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: withdrawalList(uint256[],address)
PC address: 8645
Estimated Gas Usage: 1551 - 4512
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:1020
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdrawalList(uint256[],address), txdata: 0x29153250c0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getInterestTimestamp(uint256)
PC address: 9098
Estimated Gas Usage: 1254 - 1349
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:502

 (uint256) { return loans[index].dueTime; }
    function getDuesIn(uint index) public view returns (uint256) { ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getInterestTimestamp(uint256), txdata: 0x2924e254, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getPaid(uint256) or getPaid(uint256)
PC address: 9140
Estimated Gas Usage: 1276 - 1371
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:503

ans[index].duesIn; }
    function getCancelableAt(uint index) public view returns (uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPaid(uint256), txdata: 0x2a92362c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: addInterest(uint256)
PC address: 9917
Estimated Gas Usage: 1345 - 1440
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:864

     transaction*, we recommend performing the "approve" using an amount 5% superior to the wallet estimated
        spending. If the RCN spent results to be less, the extra tokens are never debited from t

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addInterest(uint256), txdata: 0x3290f515, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: pay(uint256,uint256,address,bytes)
PC address: 10024
Estimated Gas Usage: 1634 - 4316
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:901


        require(rcn.transferFrom(msg.sender, this, transferValue));
        loan.lenderBalance = safeAdd(transferValue, loan.lenderBalance);

        return true;
    }

    /**
        @notice Converts an amount to RCN using the loan oracle.
        
        @dev If the loan has no oracle the currency must be RCN so the rate is 1

        @return The result of the convertion
    */
    function convertRate(Oracle oracle, bytes32 currency, bytes data, uint256 amount) public returns (uint256) {
        if (oracle == address(0)) {
            return amount;
        } else {
            uint256 rate;
            uint256 decimals;
            
            (rate, decimals) = oracle.getRate(currency, data);

            require(decimals <= RCN_DECIMALS);
            return (safeMult(safeMult(amount, rate), (10**(RCN_DECIMALS-decimals)))) / PRECISION;
        }
    }

    /**
        @notice Withdraw lender funds

        When a loan is paid, the funds are not transferred automatically to the lender, the funds are stored on the
        engine contract, and the len

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: pay(uint256,uint256,address,bytes), txdata: 0x355f41a9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getDuesIn(uint256)
PC address: 11143
Estimated Gas Usage: 1386 - 1481
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:507

 { return loans[index].lenderBalance; }
    function getApproved(uint index) public view ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getDuesIn(uint256), txdata: 0x4a8e4d78, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getInterestRatePunitory(uint256)
PC address: 12671
Estimated Gas Usage: 1430 - 1525
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:505

rns (bool) { return loans[index].approbations[_address]; }
    function getStatus(uint index) public view returns (Statu

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getInterestRatePunitory(uint256), txdata: 0x4d5e9a2a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getLenderBalance(uint256)
PC address: 12713
Estimated Gas Usage: 1452 - 1547
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:511

turn loans[index].interest; }

    /**
        @notice Used to know if a loan is ready to lend

        @p

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getLenderBalance(uint256), txdata: 0x55121498, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getDueTime(uint256) or getDueTime(uint256)
PC address: 12755
Estimated Gas Usage: 1474 - 1569
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:506

eturn loans[index].status; }
    function getLenderBalance(uint index) public view returns (ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getDueTime(uint256), txdata: 0x59357045, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getStatus(uint256) or getStatus(uint256)
PC address: 12797
Estimated Gas Usage: 1496 - 1591
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:510

dex].expirationRequest; }
    function getInterest(uint index) public view returns (uint256

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getStatus(uint256), txdata: 0x5c622a0e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getInterest(uint256)
PC address: 13513
Estimated Gas Usage: 1562 - 1657
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:526

n to show that they agree with the terms of the loan; the borrower
        must call this method

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getInterest(uint256), txdata: 0x5fe2d689, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: ownerOf(uint256) or ownerOf(uint256) or ownerOf(uint256)
PC address: 13555
Estimated Gas Usage: 1584 - 1679
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:495

nction getCreator(uint index) public view returns (address) { return loans[index].creator; }
    fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ownerOf(uint256), txdata: 0x6352211e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: cosign(uint256,uint256) or cosign(uint256,uint256)
PC address: 13630
Estimated Gas Usage: 1633 - 1728
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:619

is method only works for them if the loan is in "pending" status.

        The lender can call this method at any moment, in case of a loan with status "lent" the lender is pardoning 
        the debt. 

        @param index Index of the loan

        @return true if the destroy was done successfully
    */
    function destroy(uint index) public returns (bool) {
        Loan storage loan = loans[index];
        require(loan.status != Status.destroyed)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cosign(uint256,uint256), txdata: 0x6394536d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: NanoLoanEngine
Function name: tokenMetadata(uint256) or tokenMetadata(uint256)
PC address: 14368
Estimated Gas Usage: 1693 - 2071
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenMetadata(uint256), txdata: 0x6914db60, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: isApproved(uint256) or isApproved(uint256)
PC address: 14636
Estimated Gas Usage: 1675 - 1770
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/732065e3888c55503e4f875851893037.sol:533

true if the approve was done successfully
    */
    function approveLoan(uint index) public returns(bool) {
        Loan storage loan = loans[index];
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: isApproved(uint256), txdata: 0x7910867b, value: 0x0