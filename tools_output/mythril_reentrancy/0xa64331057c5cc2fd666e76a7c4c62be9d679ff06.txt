==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: HolyTrinityPresale
Function name: fallback
PC address: 725
Estimated Gas Usage: 5912 - 26007
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/616e27afae20c2369407d636d3fc7775.sol:129

re(ABS != IERC20(address(0)), "M

--------------------
Initial State:

Account: [CREATOR], balance: 0x43e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: HolyTrinityPresale
Function name: startPresale()
PC address: 1914
Estimated Gas Usage: 998 - 1093
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/616e27afae20c2369407d636d3fc7775.sol:100

{
        owner = msg.sender; 
    }
    
    
    re

--------------------
Initial State:

Account: [CREATOR], balance: 0x845080c23060242, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: startPresale(), txdata: 0x04c98b2b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: HolyTrinityPresale
Function name: pausePresale()
PC address: 2024
Estimated Gas Usage: 1020 - 1115
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/616e27afae20c2369407d636d3fc7775.sol:100

{
        owner = msg.sender; 
    }
    
    
    re

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: pausePresale(), txdata: 0x070f5c09, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: HolyTrinityPresale
Function name: setABS(address)
PC address: 2154
Estimated Gas Usage: 1146 - 1241
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/616e27afae20c2369407d636d3fc7775.sol:100

{
        owner = msg.sender; 
    }
    
    
    re

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setABS(address), txdata: 0x4a36a9c00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: HolyTrinityPresale
Function name: returnUnsoldTokensToOwner(uint256)
PC address: 2378
Estimated Gas Usage: 1062 - 1157
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/616e27afae20c2369407d636d3fc7775.sol:100

{
        owner = msg.sender; 
    }
    
    
    re

--------------------
Initial State:

Account: [CREATOR], balance: 0xac2182022000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: returnUnsoldTokensToOwner(uint256), txdata: 0x7870c61c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: HolyTrinityPresale
Function name: returnUnsoldTokensToOwner(uint256)
PC address: 2534
Estimated Gas Usage: 3544 - 38203
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/616e27afae20c2369407d636d3fc7775.sol:127

r == tx.origin);
        require

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setABS(address), txdata: 0x4a36a9c0000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: returnUnsoldTokensToOwner(uint256), txdata: 0x7870c61c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: HolyTrinityPresale
Function name: claimTeamETH()
PC address: 2602
Estimated Gas Usage: 1042 - 1137
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/616e27afae20c2369407d636d3fc7775.sol:100

{
        owner = msg.sender; 
    }
    
    
    re

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamETH(), txdata: 0x96e1bb21, value: 0x0