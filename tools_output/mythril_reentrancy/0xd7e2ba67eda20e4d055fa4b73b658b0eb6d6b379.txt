==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Win1Million
Function name: private_sendCharityFunds(string,uint256)
PC address: 1605
Estimated Gas Usage: 18103 - 97770
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:817
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: private_sendCharityFunds(string,uint256), txdata: 0xb054b903ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: games(uint256)
PC address: 2675
Estimated Gas Usage: 980 - 1075
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:227

ers.length;

    }

    


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: games(uint256), txdata: 0x117a5b9080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: gameBars(uint256)
PC address: 2725
Estimated Gas Usage: 1024 - 1119
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:225

turns(uint256) {

        re

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: gameBars(uint256), txdata: 0x31cf433480, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Win1Million
Function name: player_withdrawPendingTransactions()
PC address: 3490
Estimated Gas Usage: 12126 - 86975
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:667

                    string _answer1, st

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_withdrawPendingTransactions(), txdata: 0x7955dd45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Win1Million
Function name: player_withdrawPendingTransactions()
PC address: 3526
Estimated Gas Usage: 12126 - 86975
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:677

 barId) public onlyOwner {

        if(gameBars[barId

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_withdrawPendingTransactions(), txdata: 0x7955dd45, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: getGamesPlayers(uint256)
PC address: 3568
Estimated Gas Usage: 1250 - 1345
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:243

(uint256 gameId, address playerAddress) public view returns(uint256){

        return games[gameId].PlayerBidMap[playerAddress];

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getGamesPlayers(uint256), txdata: 0x93c0771c80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: winners(uint256)
PC address: 4119
Estimated Gas Usage: 1332 - 1427
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:233

elper function so we can ex

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: winners(uint256), txdata: 0xa2fb1175, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: private_DelGameBar(uint256)
PC address: 4512
Estimated Gas Usage: 2229 - 2654
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:707

unt;

    }

    function private_setBankAddress(address _bankAddress) public onlyOwner {

        bankAddress = _bankAddress;

    }

    function private_withdrawBankFunds(address _whereTo) public onlyBanker {

        if(_whe

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: private_DelGameBar(uint256), txdata: 0xb7e0527780, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: completeGame(uint256,uint256,string,address)
PC address: 4785
Estimated Gas Usage: 2560 - 6232
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:505

[gameId].BarId,

                gameId

            ));

        

        emit completeGameResult(

                gameId,

                games[gameId].BarId,

                _winningNumber,

                _proof,

                winner,

                games[gameId].CurrentTotal,

                now

            );

        

        // reset the bar state...

        gameBars[games[gameId].BarId].CurrentGameId = 0;

        



        

    }

    

    event cancelGame(

            uint256 indexed gameId,

            uint256 indexed barId,

            uint256 amountReturned,

            address playerAddress

            

        );

    // players can cancel their participation in a game as long as it hasn't completed

    // they lose their housePercent fee (And pay any gas of course)

    function player_cancelGame(uint256 barId) public {

        address _playerAddr = msg.sender;

        uint256 _gameId = gameBars[barId].CurrentGameId;

        uint256 _gamePlaye

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: completeGame(uint256,uint256,string,address), txdata: 0xd1976a6f80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: private_UpdateGameBarLimit(uint256,uint256)
PC address: 5536
Estimated Gas Usage: 2301 - 2726
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:727

  function private_withdrawBankFunds(address _whereTo, uint256 _amount) public onlyBanker {

        if(_whereTo.send(_amount)){

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: private_UpdateGameBarLimit(uint256,uint256), txdata: 0xe059c86880, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: getGamesPlayerBids(uint256,address)
PC address: 5574
Estimated Gas Usage: 1501 - 1926
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:255

ress = owner;

        

        // ensure we are above gameBars[0] 

        gameBars.push(Bar(0,0,"","",""));

        

        // and for games[0]

        addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getGamesPlayerBids(uint256,address), txdata: 0xe1e7c32080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: player_cancelGame(uint256)
PC address: 5646
Estimated Gas Usage: 1505 - 1600
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:587

 // need to add to a retry list...

                playerPendingWithdrawals[_playerAddr] = playerPendingWithdrawals[_playerAddr].add(_gamePlayerBalance);

            } 

        } 

        

        emit cancelGame(

            _gameId,

            barId,

            _gamePlayerBalance,

            _playerAddr

            );

    }

    

    

    function player_withdrawPendingTransactions() public

        returns (bool)

     {

        uint withdrawAmount = playerPendingWithdrawals[msg.sender];

        playerPendingWithdrawals[msg.sender] = 0;



        if (msg.sender.call.value(withdrawAmount)()) {

            return true;

        } else {

            /* if send failed revert playerPendingWithdrawals[msg.sender] = 0; */

            /* player can try to withdraw again later */

            playerPendingWithdrawals[msg.sender] = withdrawAmount;

            return false;

        }

    }





    uint256 internal gam

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_cancelGame(uint256), txdata: 0xea7858f580, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: playGame(uint256,string,string,string)
PC address: 6120
Estimated Gas Usage: 2963 - 10819
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20e77a9c12b0ab1374b0e13d4a14ee0d.sol:357

      uint256 houseAmt = (msg.value.div(100)).mul(housePercent);

        uint256 charityAmt = (msg.value.div(100)).mul(charityPercent);

        uint256 gameAmt = (msg.value.div(100)).mul(100-(housePercent+charityPercent));

        uint256 currentGameId = 0;

        

        

        if(gameBars[barId].CurrentGameId == 0) {

            

            if(gameAmt > gameBars[barId].Limit) {

                require(msg.value == minGamePlayAmount);

            }

            

            address[] memory _addressList;

            games.push(Game(barId, gameAmt, _addressList));

            currentGameId = games.length-1;

            

            gameBars[barId].CurrentGameId = currentGameId;

            

        } else {

            currentGameId = gameBars[barId].CurrentGameId;

            require(games[currentGameId].BarId > 0); // Ensure it hasn't been closed already

            if(games[currentGameId].CurrentTotal.add(gameAmt) > gameBars[barId].Limit) {

                require(msg.value == minGamePlayAmount);

            }

            

            games[currentGameId].CurrentTotal = games[currentGameId].CurrentTotal.add(gameAmt);    

        }

        

        

        

        if(games[currentGameId].PlayerBidMap[msg.sender] == 0) {

            games[currentGameId].PlayerAddressList.push(msg.sender);

        }

        

        games[currentGameId].PlayerBidMap[msg.sender] = games[currentGameId].PlayerBidMap[msg.sender].add(gameAmt);

        

        bankBalance+=houseAmt;

        charityBalance+=charityAmt;

        

        if(games[currentGameId].CurrentTotal >= gameBars[barId].Limit) {



            emit gameComplete(gameBars[barId].CurrentGameId);

            gameBars[barId].CurrentGameId = 0;

        }

        

        

    }

    event completeGameResult(

            uint256 indexed gameId,

            uint256 indexed barId,

            uint256 winningNumber,

            string  proof,

            address winnersAddress,

            uint256 winningAmount,

            uint256 timestamp

        );

    

    // using NotaryProxy to generate random numbers with proofs stored in logs so they can be traced back

    // publish list of players addresses - random

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: playGame(uint256,string,string,string), txdata: 0xf2b265ca80, value: 0x0


