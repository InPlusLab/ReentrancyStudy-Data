==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 299
Estimated Gas Usage: 1089 - 1514
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:13

nsferOwnership(address payable newOwner) external onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}

library Safe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: fallback
PC address: 2410
Estimated Gas Usage: 6729 - 26824
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:243

tokensToPurchase);

        tokenSold = tokenSold.add(toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: fallback
PC address: 2422
Estimated Gas Usage: 7556 - 27651
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:243

hasable(tokensToPurchase);

        tokenSold = tokenSold.add(token

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c10800020f5d2b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: checkWithdraw()
PC address: 2832
Estimated Gas Usage: 1067 - 1162
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:206

= withdrawDelay) {
            return (true, 0);
        } else {
            return (false, withdrawDelay.sub(_elapsed))

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkWithdraw(), txdata: 0x359792b2, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: checkWithdraw()
PC address: 2918
Estimated Gas Usage: 2795 - 2890
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:213

s already withdrawn by bidders
    function getTokenWithdrawn() public view returns (uint256) {
        return tokenWithdrawn;
    }

    /// @notice 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkWithdraw(), txdata: 0x359792b2, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: tokensClaimable(address)
PC address: 2979
Estimated Gas Usage: 1118 - 1213
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:194

d
    function auctionEnded() public view returns (bool

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokensClaimable(address), txdata: 0x4dc80e150000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: finaliseAuction()
PC address: 3192
Estimated Gas Usage: 1957 - 2382
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:311

auctionEnded(), "DutchSwapAuction: Au

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: finaliseAuction(), txdata: 0x5228733f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DutchSwapAuction
Function name: addWithdrawDelay(uint256)
PC address: 3417
Estimated Gas Usage: 1128 - 1553
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:299

Auction finishes successfully above the reserve
    /// @dev Transfer contract funds to initialised wallet. 
    function

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addWithdrawDelay(uint256), txdata: 0x6a2e33090000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: getTokenNotYetWithdrawn()
PC address: 3546
Estimated Gas Usage: 1042 - 1137
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:227

-----------------------------------------------------
    // Commit to buy

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getTokenNotYetWithdrawn(), txdata: 0x8ad72252, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: withdrawTokens()
PC address: 3782
Estimated Gas Usage: 6930 - 27025
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:315


        uint256 tokensToClaim = tokensClaimable(msg.sender);
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdrawTokens(), txdata: 0x8d8f2adb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DutchSwapAuction
Function name: transferLeftOver(uint256,address)
PC address: 4522
Estimated Gas Usage: 1211 - 1636
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:331

ayment(auctionToken, _addr, _amount);
        return true;
    }

    /// @dev Helper function to handle ERC20 payments
    function _tokenPayment(IERC20 _token, address payable _to, uint256 _amount) internal {
        require(_token.transfer(_to, _amount), "Fail to transfer tokens");
    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferLeftOver(uint256,address), txdata: 0xa3aeaa8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: transferLeftOver(uint256,address)
PC address: 4573
Estimated Gas Usage: 3013 - 3438
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:335

payments
    function _tokenPayment(IERC20 _token, address payable _to, uint256 _amount) internal {
        require(_token.transfer(_to, _amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferLeftOver(uint256,address), txdata: 0xa3aeaa8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: fallback
PC address: 4838
Estimated Gas Usage: 8402 - 28497
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:181

256 priceDiff = block.timestamp.sub(startDate).mul(priceGradient());
        u

--------------------
Initial State:

Account: [CREATOR], balance: 0x21410800400d3d6b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: priceFunction()
PC address: 4857
Estimated Gas Usage: 1882 - 1977
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:182

ce = startPrice.sub(priceDiff);
        return price;
    }

    /// @notice H

--------------------
Initial State:

Account: [CREATOR], balance: 0x1410c00400f7fef, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: priceFunction(), txdata: 0xa9d87ee6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DutchSwapAuction
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 5152
Estimated Gas Usage: 1155 - 1580
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:13

nsferOwnership(address payable newOwner) external onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}

library Safe

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 5357
Estimated Gas Usage: 1345 - 1770
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:112

ate, 
        uint256 _auctionDuration,
        uint256 _startPrice, 
        uint256 _minimumPrice,
        uint256 _withdrawDelay,
        address payable _wallet
    ) 
        external onlyOwner
    {
        require(_auctionDuration > 0, "Auction duration should be longer than 0 seconds");
        require(_startPrice > _minimumPrice, "Start price should be bigger than minimum price");
        require(_minimumPrice > 0, "Minimum price should be bigger than 0");

        auctionToken = IERC20(_token);

        require(IERC20(auctionToken).transferFrom(msg.sender, address(this), _tokenSupply), "Fail to transfer tokens to this contract");

        // 100 tokens are subtracted from totalSupply to ensure that this contract holds more tokens than tokenSuppy.
        // This is to prevent any reverting of withdrawTokens() in case of any insufficiency of tokens due to programming
        // languages' inability to handle float precisely, which might lead to extremely small insufficiency in tokens
        // to be distributed. This potentail insufficiency is extremely small (far less than 1 token), which is more than
        // sufficiently compensated hence.       
        tokenSupply =_tokenSupply.sub(100000000000000000000);
        startDate = block.timestamp;
        endDate = block.timestamp.add(_auctionDuration);
        startPrice = _startPrice;
        minimumPrice = _minimumPrice; 
        withdrawDelay = _withdrawDelay;
        wallet = _wallet;
        finalised = false;
    }


    // Dutch Auction Price Function
    // ============================
    //  
    // Start Price ----- 
    //                   \ 
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 5869
Estimated Gas Usage: 51866 - 268363
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:129

    // 100 tokens are subtracted from totalSupply to ensure that this cont

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02020101010102010401040002000000000000000000000000000000000000001009a2a1229c104208080220261487467d6864307e050517b9dac0a180020ad00808018001800204010102020101010801010200020402050002010501010203080801800180020401010202010101080101020002040204000201048001020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6043
Estimated Gas Usage: 51866 - 268363
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:136

tionDuration);
        startPrice = _startPrice;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6050
Estimated Gas Usage: 51866 - 268363
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:138

mPrice = _minimumPrice; 
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6075
Estimated Gas Usage: 51866 - 268363
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:139

rawDelay = _withdrawDelay;
        wallet = _wa

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6082
Estimated Gas Usage: 51866 - 268363
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:141

   finalised = false;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6089
Estimated Gas Usage: 51866 - 268363
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:145

/ Dutch Auction Price Functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6096
Estimated Gas Usage: 51866 - 268363
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:146

==========================
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6108
Estimated Gas Usage: 51866 - 268363
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:148

/ Start Price --

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6161
Estimated Gas Usage: 51866 - 268363
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:148

/ Start Price --

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6174
Estimated Gas Usage: 51866 - 268363
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:149

                 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6188
Estimated Gas Usage: 51866 - 268363
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:149

                 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef100101020401020104010200020000000000000000000000000000000000000041dfcfeb00025cf762010240070005aaffffdfff7b84145db7fff77ffffffdff0101090402080204200104020180040120400110010104100201080201800205010104040208020220010402014004012000011001010410020108020140020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DutchSwapAuction
Function name: removeWithdrawDelay()
PC address: 6282
Estimated Gas Usage: 1111 - 1536
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:291

ithdrawDelay = withdrawDelay.add(_delay);
    }


    //------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeWithdrawDelay(), txdata: 0xfe153834, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 6385
Estimated Gas Usage: 20026 - 115863
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:24


    function s

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initDutchAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0xf41f8ee10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010103000101010101010101010101010101010103010101010101010101010101010280010101010101010101010101010101010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DutchSwapAuction
Function name: checkWithdraw()
PC address: 6406
Estimated Gas Usage: 1934 - 2029
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5c3211611286c23ec47b0a58ce4ab281.sol:27

c = a - b;
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkWithdraw(), txdata: 0x359792b2, value: 0x0