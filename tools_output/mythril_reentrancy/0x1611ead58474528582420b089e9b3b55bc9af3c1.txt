==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MultiChanger
Function name: fallback
PC address: 251
Estimated Gas Usage: 71 - 166
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:637

256 div) external {

        uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MultiChanger
Function name: change(bytes,uint256[])
PC address: 1269
Estimated Gas Usage: 804 - 6166
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:639

his).balance.mul(mul).div(div);

        // solium-disable-next-line security/no-call-value

        require(target.call.value(value)());

    }



    // Ether token



    function depositEtherTokenAmount(IEtherToken etherToken, uint256 amount) external {

        etherToken.deposit.value(amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: change(bytes,uint256[]), txdata: 0xdc0ba228fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: sendEthProportion(address,uint256,uint256)
PC address: 2339
Estimated Gas Usage: 1987 - 36268
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:679

, uint256 div) external {


--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendEthProportion(address,uint256,uint256), txdata: 0x196d42f1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: depositEtherTokenAmount(address,uint256)
PC address: 3499
Estimated Gas Usage: 1882 - 36258
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:693

tion transferTokenAmount(address t

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositEtherTokenAmount(address,uint256), txdata: 0x630b76eb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: sendEthValue(address,uint256)
PC address: 3624
Estimated Gas Usage: 1156 - 35437
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:663

iv(div);

        etherTok

--------------------
Initial State:

Account: [CREATOR], balance: 0x205bd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendEthValue(address,uint256), txdata: 0x9feb05d3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: withdrawEtherTokenAmount(address,uint256)
PC address: 4073
Estimated Gas Usage: 1996 - 36467
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:705



    }



    function tra

--------------------
Initial State:

Account: [CREATOR], balance: 0x100040000000011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawEtherTokenAmount(address,uint256), txdata: 0xbd3e904f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: change(bytes,uint256[])
PC address: 4135
Estimated Gas Usage: 834 - 6289
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:639

his).balance.mul(mul).div(div);

        // solium-disable-next-line security/no-call-value

        require(target.call.value(value)());

    }



    // Ether token



    function depositEtherTokenAmount(IEtherToken etherToken, uint256 amount) external {

        etherToken.deposit.value(amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: change(bytes,uint256[]), txdata: 0xdc0ba228, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: depositEtherTokenProportion(address,uint256,uint256)
PC address: 4434
Estimated Gas Usage: 2955 - 37331
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:701

 uint256 div) external {

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000c0000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositEtherTokenProportion(address,uint256,uint256), txdata: 0xe17eba5d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: transferFromTokenAmount(address,uint256)
PC address: 5121
Estimated Gas Usage: 2207 - 37244
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:449

    return handleReturnBool();

    }



    //



    function checkedTransfer(ERC20 t

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000c0000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFromTokenAmount(address,uint256), txdata: 0x10f2e390000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: withdrawEtherTokenProportion(address,uint256,uint256)
PC address: 5199
Estimated Gas Usage: 2136 - 36793
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:719

function transferFromTokenProportio

--------------------
Initial State:

Account: [CREATOR], balance: 0x10c000101810004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawEtherTokenProportion(address,uint256,uint256), txdata: 0x5499716a00000000000000000000000000000000000000000000000000000000000000002c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: multitokenChangeProportion(address,address,address,uint256,uint256,uint256)
PC address: 5199
Estimated Gas Usage: 2163 - 36820
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:755
Initial State:

Account: [CREATOR], balance: 0xe4d80c44006f62b6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multitokenChangeProportion(address,address,address,uint256,uint256,uint256), txdata: 0x12cc40ce000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: transferFromTokenProportion(address,uint256,uint256)
PC address: 5199
Estimated Gas Usage: 2224 - 36881
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:751

(mtkn, fromToken, toToken, minRetu

--------------------
Initial State:

Account: [CREATOR], balance: 0x110080808140c0006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFromTokenProportion(address,uint256,uint256), txdata: 0xab58b119000000000000000000000000000000000000000000000000000000000000000006, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: sendEthProportion(address,uint256,uint256)
PC address: 5222
Estimated Gas Usage: 1159 - 1254
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:673

      etherToken.withdraw(amount);

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c10c00020c0d0c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: sendEthProportion(address,uint256,uint256), txdata: 0x196d42f1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: depositEtherTokenProportion(address,uint256,uint256)
PC address: 5222
Estimated Gas Usage: 1357 - 1452
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:701

ortion(address target, ERC20 fromToken,

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c10c00020c0d0c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: depositEtherTokenProportion(address,uint256,uint256), txdata: 0xe17eba5d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: withdrawEtherTokenProportion(address,uint256,uint256)
PC address: 5222
Estimated Gas Usage: 2223 - 36880
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:719

function transferFromTokenProportion(ERC20 f

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawEtherTokenProportion(address,uint256,uint256), txdata: 0x5499716a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: multitokenChangeProportion(address,address,address,uint256,uint256,uint256)
PC address: 5222
Estimated Gas Usage: 2250 - 36907
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:755
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: multitokenChangeProportion(address,address,address,uint256,uint256,uint256), txdata: 0x12cc40ce, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: transferFromTokenProportion(address,uint256,uint256)
PC address: 5222
Estimated Gas Usage: 2311 - 36968
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:751

(mtkn, fromToken, toToken, minReturn, amoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFromTokenProportion(address,uint256,uint256), txdata: 0xab58b119, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiChanger
Function name: transferTokenAmount(address,address,uint256)
PC address: 5772
Estimated Gas Usage: 2312 - 37159
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/76f8b50ca53adba3cb59dfce17b56f03.sol:433

from, to, value));

        return handleReturnBool();

    }



    

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokenAmount(address,address,uint256), txdata: 0x9be6529f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0