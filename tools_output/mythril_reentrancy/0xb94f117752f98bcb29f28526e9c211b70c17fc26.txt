==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: Proxy
Function name: fallback
PC address: 103
Estimated Gas Usage: 1686 - 38085
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:29

delegatecall(not(0), _masterCopy, 0, calldatasize(), 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CentralizedBugOracleData
Function name: ipfsHash()
PC address: 560
Estimated Gas Usage: 1409 - 2349
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:136

bytes public ipfsHash

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000024008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ipfsHash(), txdata: 0xc623674f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CentralizedBugOracle
Function name: ipfsHash()
PC address: 790
Estimated Gas Usage: 1469 - 2409
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:136

bytes public ipfsHash

--------------------
Initial State:

Account: [CREATOR], balance: 0x8404c0803000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ipfsHash(), txdata: 0xc623674f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OracleVendingMachine
Function name: oracleProposed(address,address,uint256)
PC address: 1431
Estimated Gas Usage: 3409 - 6429
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:246

mapping (address => mapping (address => mapping (uint256 => proposal))) public oracleProposed

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: oracleProposed(address,address,uint256), txdata: 0x3ff8bb9c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OracleVendingMachine
Function name: checkBalance(address)
PC address: 2011
Estimated Gas Usage: 14695 - 91147
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:418

paymentToken.balanceOf(holder)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkBalance(address), txdata: 0x5f515226, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleVendingMachine
Function name: checkBalance(address)
PC address: 2086
Estimated Gas Usage: 14695 - 91147
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:418

balances[holder] = paymentToken.balanceOf(holder)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkBalance(address), txdata: 0x5f515226, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleVendingMachine
Function name: checkBalance(address)
PC address: 2093
Estimated Gas Usage: 14695 - 91147
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:419

balanceChecked[holder] = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkBalance(address), txdata: 0x5f515226, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OracleVendingMachine
Function name: checkBalance(address)
PC address: 2102
Estimated Gas Usage: 14695 - 91147
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:419

balanceChecked[holder] = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: checkBalance(address), txdata: 0x5f515226, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OracleVendingMachine
Function name: buyOracle(bytes,address)
PC address: 5144
Estimated Gas Usage: 18544 - 97963
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:108

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80, value: 0x0
Caller: [CREATOR], function: buyOracle(bytes,address), txdata: 0x9a10f819, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OracleVendingMachine
Function name: buyOracleFor(bytes,address,address)
PC address: 5144
Estimated Gas Usage: 20539 - 102271
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8a4d6675eb1596416700fa67d699cea7.sol:108

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 71, value: 0x0
Caller: [CREATOR], function: buyOracleFor(bytes,address,address), txdata: 0xdb8374ee, value: 0x0