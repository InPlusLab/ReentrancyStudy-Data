==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: fallback
PC address: 239
Estimated Gas Usage: 161 - 256
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:16

b(uint a, uint b) public pure returns (uint c) {
        assert(b <= a);
        c = a - b;
    }
 
    function sa

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: safeSub(uint256,uint256), txdata: 0xa293d1e8000000000000000000000000000000000000000000000000000000000000000802, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: safeDiv(uint256,uint256)
PC address: 256
Estimated Gas Usage: 180 - 275
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:26

uint b) public pure returns (uint c) {
        assert(b > 0);
        c = a / b;
    }
}
 
 
//ERC Token Standard 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: safeDiv(uint256,uint256), txdata: 0xb5931f7c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMath
Function name: safeAdd(uint256,uint256)
PC address: 328
Estimated Gas Usage: 233 - 328
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:11

afeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        assert(c >= a);
    }
 
    functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x48002500008c0013, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: safeAdd(uint256,uint256), txdata: 0xe6cb90130826e41aa0087af524e409203ad336481880640885189976582d808b529550c0f8, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IGFXToken
Function name: fallback
PC address: 928
Estimated Gas Usage: 2330 - 4071
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:60

public _totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IGFXToken
Function name: symbol()
PC address: 1514
Estimated Gas Usage: 2484 - 4225
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:59

 public decimals;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x60400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IGFXToken
Function name: safeSub(uint256,uint256)
PC address: 1591
Estimated Gas Usage: 337 - 432
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:16

b(uint a, uint b) public pure returns (uint c) {
        assert(b <= a);
        c = a - b;
    }
 
    function sa

--------------------
Initial State:

Account: [CREATOR], balance: 0x201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: safeSub(uint256,uint256), txdata: 0xa293d1e8000000000000000000000000000000000000000000000000000000000000000102, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IGFXToken
Function name: transferFrom(address,address,uint256)
PC address: 1591
Estimated Gas Usage: 1185 - 2130
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:97

sender], tokens);
        balan

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000002000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IGFXToken
Function name: transfer(address,uint256)
PC address: 1591
Estimated Gas Usage: 1276 - 1891
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:84

, tokens);
        emit Transfer(msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IGFXToken
Function name: safeDiv(uint256,uint256)
PC address: 1772
Estimated Gas Usage: 378 - 473
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:26

uint b) public pure returns (uint c) {
        assert(b > 0);
        c = a / b;
    }
}
 
 
//ERC Token Standard 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: safeDiv(uint256,uint256), txdata: 0xb5931f7c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: IGFXToken
Function name: approveAndCall(address,uint256,bytes)
PC address: 2114
Estimated Gas Usage: 9442 - 70148
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:113


    function () public payable {
        revert();
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IGFXToken
Function name: safeAdd(uint256,uint256)
PC address: 2234
Estimated Gas Usage: 475 - 570
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: source_code/dfbfb8befd3fe937586daa076f6273e2.sol:11

afeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        assert(c >= a);
    }
 
    functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: safeAdd(uint256,uint256), txdata: 0xe6cb9013ea4088d04004800490f10210e96b0062016000c4a00812880084000e769a01008a, value: 0x0


