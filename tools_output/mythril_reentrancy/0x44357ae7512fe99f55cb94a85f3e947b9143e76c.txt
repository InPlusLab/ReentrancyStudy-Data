==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Blocker
Function name: Blocker_send(address)
PC address: 405
Estimated Gas Usage: 927 - 35115
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:743
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Blocker_resume(bool), txdata: 0xab7748da, value: 0x0
Caller: [SOMEGUY], function: Blocker_send(address), txdata: 0xa604c1ad000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: distribution
Function name: fallback
PC address: 779
Estimated Gas Usage: 59862 - 263657
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:473

t = distribution(_ol

--------------------
Initial State:

Account: [CREATOR], balance: 0x200104010200055a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x2386f26fc10000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getPaimentStatus(address,uint256)
PC address: 2107
Estimated Gas Usage: 1114 - 2059
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:735

lic {

        require(msg.sender == 

--------------------
Initial State:

Account: [CREATOR], balance: 0x140080000040006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getPaimentStatus(address,uint256), txdata: 0x2646b176, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: deposites(uint256)
PC address: 2194
Estimated Gas Usage: 1024 - 1119
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:373

= address(0));

        dis

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposites(uint256), txdata: 0x3f66d160, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: depositors(address,uint256)
PC address: 2282
Estimated Gas Usage: 1165 - 1780
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:379



    function setNewMinDeposite(uint newMin

--------------------
Initial State:

Account: [CREATOR], balance: 0x81000000062002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: depositors(address,uint256), txdata: 0x466c01b8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getUserDeposit(address,uint256)
PC address: 2347
Estimated Gas Usage: 1236 - 2181
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:683

ew returns (bool) {

        if (depo

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100040000040052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getUserDeposit(address,uint256), txdata: 0x60711058, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getPaimentTime(address,uint256)
PC address: 2627
Estimated Gas Usage: 1246 - 2191
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:725

_send(address to) public payable {

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2010105, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPaimentTime(address,uint256), txdata: 0x631b0520, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3029
Estimated Gas Usage: 83247 - 439202
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:517

6).div(100));

        di

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3029
Estimated Gas Usage: 83247 - 439202
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:517

6).div(100));

        di

--------------------
Initial State:

Account: [CREATOR], balance: 0x200201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff08, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3029
Estimated Gas Usage: 83247 - 439202
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:517

6).div(100));

        di

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3133
Estimated Gas Usage: 83247 - 439202
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3140
Estimated Gas Usage: 83247 - 439202
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3190
Estimated Gas Usage: 83247 - 439202
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:523

      wallet2.transfer(amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3208
Estimated Gas Usage: 83247 - 439202
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:523

      wallet2.transfer(amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3246
Estimated Gas Usage: 83247 - 439202
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:523

      wallet2.transfer(amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3284
Estimated Gas Usage: 83247 - 439202
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:523

      wallet2.transfer(amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3326
Estimated Gas Usage: 83247 - 439202
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:523

      wallet2.transfer(amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3338
Estimated Gas Usage: 83247 - 439202
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:525

 wallet3.transfe

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3340
Estimated Gas Usage: 83247 - 439202
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3345
Estimated Gas Usage: 83247 - 439202
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3358
Estimated Gas Usage: 83247 - 439202
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:525

 wallet3.transfer(am

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f0000000000000000000000000000000000000000000000000000000000000000a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 3366
Estimated Gas Usage: 83247 - 439202
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:523

.mul(1).div(100));

        wallet3.transfer(amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getDeposit(uint256)
PC address: 4478
Estimated Gas Usage: 1479 - 1574
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:641

address, uint,

--------------------
Initial State:

Account: [CREATOR], balance: 0x181080002080802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getDeposit(uint256), txdata: 0x9f9fb968, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getDepositeTime(address,uint256)
PC address: 4666
Estimated Gas Usage: 1642 - 2587
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be09224db3cbefbc5e2fcf779ef964e2.sol:707

 "Do not accept money");

        }



--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getDepositeTime(address,uint256), txdata: 0xc6837a87, value: 0x0