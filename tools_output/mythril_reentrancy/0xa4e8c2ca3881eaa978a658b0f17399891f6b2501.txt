==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Allocation
Function name: addShare(address,uint256,uint256) or addShare(address,uint256,uint256)
PC address: 945
Estimated Gas Usage: 19979 - 116005
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:961

oken.transfer(_owner,unlockedToken);


--------------------
Initial State:

Account: [CREATOR], balance: 0x1001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: acacacacacacacacacacacacdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256) or addShare(address,uint256,uint256)
PC address: 1094
Estimated Gas Usage: 19979 - 116005
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:971

 ICreator{



    function Crea

--------------------
Initial State:

Account: [CREATOR], balance: 0x1001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: acacacacacacacacacacacacdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256) or addShare(address,uint256,uint256)
PC address: 1190
Estimated Gas Usage: 19979 - 116005
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:965

  }

}



contract Creator is ICreator{



    function Creator() public{

        address[] memor

--------------------
Initial State:

Account: [CREATOR], balance: 0x1001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: acacacacacacacacacacacacdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256) or addShare(address,uint256,uint256)
PC address: 1200
Estimated Gas Usage: 19979 - 116005
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:965

  }

}



contract Creator is ICreator{



    function Creator() public{

        address[] memor

--------------------
Initial State:

Account: [CREATOR], balance: 0x1001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: acacacacacacacacacacacacdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256) or addShare(address,uint256,uint256)
PC address: 1210
Estimated Gas Usage: 19979 - 116005
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:978


        /

--------------------
Initial State:

Account: [CREATOR], balance: 0x1001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: acacacacacacacacacacacacdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256) or addShare(address,uint256,uint256)
PC address: 1229
Estimated Gas Usage: 19979 - 116005
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:977

ddress[](8);

        //Crowdsale.

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: acacacacacacacacacacacacdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Allocation
Function name: unlockFor(address)
PC address: 1292
Estimated Gas Usage: 1122 - 1217
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:993

ing Round1 & Round2)

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlockFor(address), txdata: 0xdde49979, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Allocation
Function name: unlockFor(address)
PC address: 1376
Estimated Gas Usage: 2851 - 3136
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:997

 Observer

        // Has only the right to call paymentsInOtherCurrency (please read the document)

        tmp[4] = 0x8a91aC199440Da0B45B2E2

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlockFor(address), txdata: 0xdde49979, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: debt(uint256)
PC address: 1903
Estimated Gas Usage: 214 - 309
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:289

uint256 public benReady=0;



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: debt(uint256), txdata: 0x1e0029c880, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: took(uint256)
PC address: 2016
Estimated Gas Usage: 324 - 419
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:293

;



    address public benW

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: took(uint256), txdata: 0x69dadecd80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: percent(uint256)
PC address: 2056
Estimated Gas Usage: 368 - 463
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:283

ress[1] public wallets = [0xB9B2

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000100001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: percent(uint256), txdata: 0x7532b4ac80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: wallets(uint256)
PC address: 2082
Estimated Gas Usage: 390 - 485
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:303

equire(state == State.Closed);

        _;

    }



    function Financ

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: wallets(uint256), txdata: 0x7ad71f7280, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: total(uint256)
PC address: 3290
Estimated Gas Usage: 456 - 551
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:291

56 public newCash=0;

    uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x808000d8001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: total(uint256), txdata: 0xb119ebfe80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4373
Estimated Gas Usage: 3349 - 38431
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:385

ms.length == 0);

            // Call

--------------------
Initial State:

Account: [CREATOR], balance: 0x183, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Unprotected Selfdestruct ====
SWC ID: 106
Severity: High
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4523
Estimated Gas Usage: 3349 - 38431
Any sender can cause the contract to self-destruct.
Any sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account and withdraw its balance to an arbitrary address. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:399

      require(state == State.Acti

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000090, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4572
Estimated Gas Usage: 3349 - 38431
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:423

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: ready(uint256)
PC address: 5401
Estimated Gas Usage: 632 - 727
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:298




    modifier canGetCash(){

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ready(uint256), txdata: 0xf0bd2b9e80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: cap(uint256)
PC address: 6533
Estimated Gas Usage: 720 - 815
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4f94e3223c0e8766b23a880f84ff6475.sol:283

3C9bA6924c0c00B47909ab7d2D2

--------------------
Initial State:

Account: [CREATOR], balance: 0x20003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cap(uint256), txdata: 0xff2ad8e480, value: 0x0