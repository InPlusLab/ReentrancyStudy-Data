==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenBounty
Function name: fallback
PC address: 89
Estimated Gas Usage: 4245 - 79257
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/76686659d696c9a6fcddcc525c34c491.sol:22

vateTokenBounty(
        address _issuer,
        uint _deadline,
        string _data,
        uint256 _fulfillmentAmount,
        address _arbiter,
        bool _paysTokens,
        address _tokenContract,
        uint256 _value,
        address _bountyContract
        ) public payable returns (uint) {
        require(ERC20Frag(_tokenContract).approve(_bountyContract, _fulfillmentAmount));
        return BountyFrag(_bountyContract).issueAndActivateBounty(
            _issuer,
            _deadline,
            _data,
            _fulfillmentAmount,
            _arbiter,
            _paysTokens,
            _tokenContract,
            _value
        );
    }

    function() public payable {
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: issueAndActivateTokenBounty(address,uint256,string,uint256,address,bool,address,uint256,address), txdata: 0x0329189300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenBounty
Function name: fallback
PC address: 338
Estimated Gas Usage: 4245 - 79257
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/76686659d696c9a6fcddcc525c34c491.sol:33

e(_bountyContract, _fulfillmentAmount));
        return BountyFrag(_bo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c0000000008fb8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: issueAndActivateTokenBounty(address,uint256,string,uint256,address,bool,address,uint256,address), txdata: 0x03291893000000000000000000000000000000000000000000000000000000000000003f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenBounty
Function name: fallback
PC address: 648
Estimated Gas Usage: 4245 - 79257
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/76686659d696c9a6fcddcc525c34c491.sol:34

AndActivateBounty(
            _issuer,
            _deadline,
            _data,
            _fulfillmentAmount,
            _arbiter,
            _paysTokens,
            _tokenContract,
            _value
        );
    }

    function() public payable {
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000400000e1a98, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: issueAndActivateTokenBounty(address,uint256,string,uint256,address,bool,address,uint256,address), txdata: 0x032918930000000000000000000000000000000000000000000000000000000000000000003f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenBounty
Function name: fallback
PC address: 648
Estimated Gas Usage: 4178 - 79002
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/76686659d696c9a6fcddcc525c34c491.sol:34

AndActivateBounty(
            _issuer,
            _deadline,
            _data,
            _fulfillmentAmount,
            _arbiter,
            _paysTokens,
            _tokenContract,
            _value
        );
    }

    function() public payable {
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1229a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: issueAndActivateTokenBounty(address,uint256,string,uint256,address,bool,address,uint256,address), txdata: 0x03291893000000000000000000000000000000000000000000000000000000000000001a, value: 0x0