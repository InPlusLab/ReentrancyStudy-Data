==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CNYxPoolReward
Function name: createUniswapPool(address,address,address)
PC address: 3073
Estimated Gas Usage: 2053 - 37086
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/6e80102d92f8e77cc8c60fc06b246166.sol:516

swapV2Factory(factory).createPair(tokenA, tokenB);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000044150020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createUniswapPool(address,address,address), txdata: 0x0602beef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CNYxPoolReward
Function name: getPoolAllocPoints(uint256)
PC address: 3171
Estimated Gas Usage: 1061 - 1156
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6e80102d92f8e77cc8c60fc06b246166.sol:502

tion getPoolAllocPoints(uint256 _poolID) external view returns (uint256) {
        return poolInfo[_poolID].allocPoint;
    }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2840080103, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPoolAllocPoints(uint256), txdata: 0x0c92ff83, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CNYxPoolReward
Function name: poolInfo(uint256)
PC address: 3258
Estimated Gas Usage: 1102 - 1197
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6e80102d92f8e77cc8c60fc06b246166.sol:454

Info[] public poolInfo;

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x842020140000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: poolInfo(uint256), txdata: 0x1526fe27, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CNYxPoolReward
Function name: deposit(uint256,uint256)
PC address: 8957
Estimated Gas Usage: 9268 - 29743
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6e80102d92f8e77cc8c60fc06b246166.sol:521

tion deposit(uint256 _poolID, uint256 _amount) external nonReentrant returns (bool) {
        // validation checks to see if sufficient LP balance
        require(userStatus[_poolID][msg.sender] != 2, 'users committed to withdraw cannot deposit');
        require(IERC20(address(poolInfo[_poolID].lpToken)).balanceOf(msg.sender) >= _amount, "insuffient balance");

        PoolInfo storage pool = poolInfo[_poolID];
        UserInfo storage user = userInfo[_poolID][msg.sender];

        require(IERC20(pool.lpToken).transferFrom(msg.sender, address(this), _amount), "LP transfer failed");

        // auto claim if user deposits more + update their lastSynthPoints
        claimRewardInternal(_poolID, msg.sender);
        user.amount = user.amount.add(_amount);

        lastUserAction[_poolID][msg.sender] = now;
        userStatus[_poolID][msg.sender] = 1;

        return true;
    }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000402002a0bd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256,uint256), txdata: 0xe2bbb158, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CNYxPoolReward
Function name: claimReward(uint256,address)
PC address: 10343
Estimated Gas Usage: 8539 - 29014
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6e80102d92f8e77cc8c60fc06b246166.sol:591

tion claimReward(uint256 _poolID, address _user) public nonReentrant returns (bool) {
        require(_user != address(0x0));
        UserInfo storage user = userInfo[_poolID][_user];
        PoolInfo storage pool = poolInfo[_poolID];

        uint256 owedSynth = pendingReward(_user, _poolID);

        if (owedSynth > 0) require(Synth.transfer(_user, owedSynth), "Synth payout failed");
        user.lastSynthPoints = pool.totalSynthPoints;

        return true;
    }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1030000038a000af9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimReward(uint256,address), txdata: 0xe70eb392000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CNYxPoolReward
Function name: getPoolToken(uint256)
PC address: 10813
Estimated Gas Usage: 1655 - 1750
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6e80102d92f8e77cc8c60fc06b246166.sol:510

tion getPoolToken(uint256 _poolID) external view returns (address) {
        return address(poolInfo[_poolID].lpToken);
    }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x8610000000080b31, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPoolToken(uint256), txdata: 0xeda7c599, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CNYxPoolReward
Function name: pendingReward(address,uint256)
PC address: 10925
Estimated Gas Usage: 1747 - 1842
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6e80102d92f8e77cc8c60fc06b246166.sol:479

tion pendingReward(address _user, uint256 _poolID) public view returns (uint256) {
        PoolInfo storage pool = poolInfo[_poolID];
        UserInfo storage user = userInfo[_poolID][_user];

        uint256 userStake = user.amount;

        // no rewards for committed users
        if (pool.totalSynthPoints > user.lastSynthPoints && userStatus[_poolID][_user] != 2) {
            uint256 newDividendPoints = pool.totalSynthPoints.sub(user.lastSynthPoints);
            uint256 owedSynth =  userStake.mul(newDividendPoints).div(POINT_MULTIPLIER);

            owedSynth = owedSynth > Synth.balanceOf(address(this)) ? Synth.balanceOf(address(this)).div(2) : owedSynth;

            return owedSynth;
        } else {
            return 0;
        }
    }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x10040800003dd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: pendingReward(address,uint256), txdata: 0xf430cf0d, value: 0x0