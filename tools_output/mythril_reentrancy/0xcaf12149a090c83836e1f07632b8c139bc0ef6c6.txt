==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AppCoinsTimelock
Function name: allocateFundsBulk(address[],uint256[])
PC address: 278
Estimated Gas Usage: 24417 - 213151
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:335

    require(balances[_address] > 0);

        uint nowInMilliseconds = block.timestamp * 1000;

        require(nowInMilliseconds >= releaseTime);

        uint amount = balances[_address];

        balances[_address] = 0;

        appc.transfer(_address, amount);

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x80100008010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: allocateFundsBulk(address[],uint256[]), txdata: 0x87730ed7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AppCoinsTimelock
Function name: allocateFundsBulk(address[],uint256[])
PC address: 402
Estimated Gas Usage: 24417 - 213151
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:319

int2

--------------------
Initial State:

Account: [CREATOR], balance: 0x5004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: allocateFundsBulk(address[],uint256[]), txdata: 0x87730ed7800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AppCoinsTimelock
Function name: fallback
PC address: 513
Estimated Gas Usage: 11873 - 103426
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:319

int256[] _amounts) public {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000044, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: allocateFunds(address,uint256), txdata: 0x189ed356, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AppCoinsTimelock
Function name: allocateFundsBulk(address[],uint256[])
PC address: 513
Estimated Gas Usage: 24417 - 213151
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:319

int256[] _amounts) public {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x88002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: allocateFundsBulk(address[],uint256[]), txdata: 0x87730ed7800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AppCoinsTimelock
Function name: allocateFundsBulk(address[],uint256[])
PC address: 513
Estimated Gas Usage: 24417 - 213151
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:319

int256[] _amounts) public {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x68341, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateFundsBulk(address[],uint256[]), txdata: 0x87730ed7800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AppCoinsTimelock
Function name: allocateFundsBulk(address[],uint256[])
PC address: 513
Estimated Gas Usage: 24417 - 213151
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:319

int256[] _amounts) public {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x5004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: allocateFundsBulk(address[],uint256[]), txdata: 0x87730ed7800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AppCoinsTimelock
Function name: fallback
PC address: 569
Estimated Gas Usage: 11873 - 103426
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:321

_amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: allocateFunds(address,uint256), txdata: 0x189ed356, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AppCoinsTimelock
Function name: fallback
PC address: 684
Estimated Gas Usage: 11873 - 103426
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:321

_amounts.length);

        for(uint i = 0; i < _addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000044, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: allocateFunds(address,uint256), txdata: 0x189ed356, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AppCoinsTimelock
Function name: allocateFundsBulk(address[],uint256[])
PC address: 684
Estimated Gas Usage: 24417 - 213151
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:321

_amounts.length);

        for(uint i = 0; i < _addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x88002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: allocateFundsBulk(address[],uint256[]), txdata: 0x87730ed7800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AppCoinsTimelock
Function name: fallback
PC address: 684
Estimated Gas Usage: 11873 - 103426
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:321

_amounts.length);

        for(uint i = 0; i < _addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: allocateFunds(address,uint256), txdata: 0x189ed356, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AppCoinsTimelock
Function name: fallback
PC address: 684
Estimated Gas Usage: 11873 - 103426
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:321

_amounts.length);

        for(uint i = 0; i < _addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: allocateFunds(address,uint256), txdata: 0x189ed356, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AppCoinsTimelock
Function name: fallback
PC address: 755
Estimated Gas Usage: 11873 - 103426
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:325

locateFunds(_addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: allocateFunds(address,uint256), txdata: 0x189ed356, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AppCoinsTimelock
Function name: fallback
PC address: 761
Estimated Gas Usage: 11873 - 103426
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2b2d347cbadd9ec685f67f8b67e9bf95.sol:323

i++){

            allocateFunds(_addresses[i], _

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: allocateFunds(address,uint256), txdata: 0x189ed356, value: 0x0


