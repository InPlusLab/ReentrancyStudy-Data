==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: tokenRecipient
Function name: fallback
PC address: 381
Estimated Gas Usage: 3305 - 42736
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/278abc9b5cf80404936c9d6f94f86596.sol:61

it receivedTokens(_from, _value, _token, _ex

--------------------
Initial State:

Account: [CREATOR], balance: 0x4200000000000000c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WSKY_Shareholder
Function name: fallback
PC address: 1418
Estimated Gas Usage: 958 - 1053
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/278abc9b5cf80404936c9d6f94f86596.sol:108


    event ProposalAdded(ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: proposals(uint256), txdata: 0x013cf08b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WSKY_Shareholder
Function name: executeProposal(uint256,bytes)
PC address: 1671
Estimated Gas Usage: 1231 - 3913
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/278abc9b5cf80404936c9d6f94f86596.sol:463

/ ...then tally the resul

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: executeProposal(uint256,bytes), txdata: 0x237e9492, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WSKY_Shareholder
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2861
Estimated Gas Usage: 3395 - 43912
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/278abc9b5cf80404936c9d6f94f86596.sol:61

it receivedTokens(_from, _value, _token, _ex

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WSKY_Shareholder
Function name: vote(uint256,bool)
PC address: 4201
Estimated Gas Usage: 3709 - 39026
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/278abc9b5cf80404936c9d6f94f86596.sol:436


     * Count the votes p

--------------------
Initial State:

Account: [CREATOR], balance: 0x10005000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: vote(uint256,bool), txdata: 0xc9d27afe, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WSKY_Shareholder
Function name: checkProposalCode(uint256,address,uint256,bytes)
PC address: 4520
Estimated Gas Usage: 1498 - 4510
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/278abc9b5cf80404936c9d6f94f86596.sol:391

ther in favor or against 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: checkProposalCode(uint256,address,uint256,bytes), txdata: 0xeceb2945, value: 0x0


