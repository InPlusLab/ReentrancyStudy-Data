==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CommonWallet
Function name: depoToken(address,uint256)
PC address: 1783
Estimated Gas Usage: 8299 - 63906
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e144572346296eedf49ab7e0bcf5b61b.sol:87

    tokenBalance[tokenAddr][msg.sender] = safeAdd(tokenBalan

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depoToken(address,uint256), txdata: 0x53c099e0000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CommonWallet
Function name: depoToken(address,uint256)
PC address: 1971
Estimated Gas Usage: 8299 - 63906
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e144572346296eedf49ab7e0bcf5b61b.sol:95

her(uint amount) public{

        r

--------------------
Initial State:

Account: [CREATOR], balance: 0xb0007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: depoToken(address,uint256), txdata: 0x53c099e0000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CommonWallet
Function name: depoToken(address,uint256)
PC address: 2103
Estimated Gas Usage: 8299 - 63906
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e144572346296eedf49ab7e0bcf5b61b.sol:87

unt);

        }

    }

  

    function wdEther(uint amount) public{

        require(et

--------------------
Initial State:

Account: [CREATOR], balance: 0xb0007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: depoToken(address,uint256), txdata: 0x53c099e0000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CommonWallet
Function name: wdToken(address,uint256)
PC address: 2413
Estimated Gas Usage: 9285 - 65177
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e144572346296eedf49ab7e0bcf5b61b.sol:117

= safeSub(tokenBalance[tokenAddr][msg.sender], amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: wdToken(address,uint256), txdata: 0x5d9d7910000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CommonWallet
Function name: wdToken(address,uint256)
PC address: 2601
Estimated Gas Usage: 9285 - 65177
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e144572346296eedf49ab7e0bcf5b61b.sol:125

ic view returns(uint256) {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: wdToken(address,uint256), txdata: 0x5d9d7910000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CommonWallet
Function name: wdToken(address,uint256)
PC address: 2733
Estimated Gas Usage: 9285 - 65177
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e144572346296eedf49ab7e0bcf5b61b.sol:125

   function getEtherBalance(address user) public view returns(uint256) {

        return e

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: wdToken(address,uint256), txdata: 0x5d9d7910000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CommonWallet
Function name: sendTokenTo(address,address,uint256)
PC address: 3250
Estimated Gas Usage: 9387 - 65279
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e144572346296eedf49ab7e0bcf5b61b.sol:163

);

        }

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000040000070001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: sendTokenTo(address,address,uint256), txdata: 0xe1a2f315000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CommonWallet
Function name: sendTokenTo(address,address,uint256)
PC address: 3438
Estimated Gas Usage: 9387 - 65279
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e144572346296eedf49ab7e0bcf5b61b.sol:169
Initial State:

Account: [CREATOR], balance: 0x404000a0003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: sendTokenTo(address,address,uint256), txdata: 0xe1a2f315000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CommonWallet
Function name: sendTokenTo(address,address,uint256)
PC address: 3570
Estimated Gas Usage: 9387 - 65279
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e144572346296eedf49ab7e0bcf5b61b.sol:169
Initial State:

Account: [CREATOR], balance: 0x404000a0003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: sendTokenTo(address,address,uint256), txdata: 0xe1a2f315000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0