==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BoomerangLiquidity
Function name: fallback
PC address: 911
Estimated Gas Usage: 18124 - 79208
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/cc8e01ed9d4212b631907e9e85e58658.sol:78


        uint balance 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3526a2810b190c0c3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fb, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01400102, value: 0x2

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BoomerangLiquidity
Function name: deposit()
PC address: 911
Estimated Gas Usage: 18124 - 79208
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/cc8e01ed9d4212b631907e9e85e58658.sol:78


        uint balance 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3526a2810b190c0c3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fb, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01400102, value: 0x2

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BoomerangLiquidity
Function name: participants(uint256)
PC address: 1073
Estimated Gas Usage: 1036 - 1131
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cc8e01ed9d4212b631907e9e85e58658.sol:70

blic {
        deposit();
    }
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: participants(uint256), txdata: 0x35c1d349, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BoomerangLiquidity
Function name: withdraw()
PC address: 1345
Estimated Gas Usage: 1902 - 36889
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cc8e01ed9d4212b631907e9e85e58658.sol:106

    }
    
    function transferAnyERC20Token(add

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: BoomerangLiquidity
Function name: withdraw()
PC address: 1345
Estimated Gas Usage: 1902 - 36889
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/cc8e01ed9d4212b631907e9e85e58658.sol:106

    }
    
    function transferAnyERC20Token(add

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BoomerangLiquidity
Function name: transferAnyERC20Token(address,uint256)
PC address: 2853
Estimated Gas Usage: 3941 - 39634
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cc8e01ed9d4212b631907e9e85e58658.sol:112

 IS HERE, DO NOT INVEST REAL MONEY.
    function exi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,uint256), txdata: 0xdc39d06d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0