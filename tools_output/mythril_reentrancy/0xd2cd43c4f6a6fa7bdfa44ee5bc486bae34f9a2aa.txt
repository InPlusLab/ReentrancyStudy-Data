==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMathLib
Function name: plus(uint256,uint256)
PC address: 321
Estimated Gas Usage: 231 - 326
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:165

investment count when we are still allowed to change the multisig address */
  uint public MAX_INVESTMENTS

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000a103, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: plus(uint256,uint256), txdata: 0x66098d4fa67ba8ea6192fb9e1480800e91480ce00b02a4e410040458800844c00040000483, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SafeMathLib
Function name: minus(uint256,uint256)
PC address: 345
Estimated Gas Usage: 236 - 331
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:156

c = a + b;
    assert(c>=a);
    return c;
  }

}

contract CrowdsaleBase is Haltable {

  /

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: minus(uint256,uint256), txdata: 0xf4f3bdc1000000000000000000000000000000000000000000000000008000800110100001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 382
Estimated Gas Usage: 93249 - 456416
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:279

sAt >= endsAt) {
        throw;


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 435
Estimated Gas Usage: 93249 - 456416
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:279

sAt >= endsAt) {
        throw;


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 444
Estimated Gas Usage: 93249 - 456416
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:283

 // Minimum fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 528
Estimated Gas Usage: 93249 - 456416
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:288

n&#39;t expect to

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 550
Estimated Gas Usage: 93249 - 456416
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:290

payable {
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 554
Estimated Gas Usage: 93249 - 456416
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:297

wdsale

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 557
Estimated Gas Usage: 93249 - 456416
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:296

  *
   *

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 576
Estimated Gas Usage: 93249 - 456416
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:298

ency brake.
   *
   * @param receiver Th

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 594
Estimated Gas Usage: 93249 - 456416
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:745

 this);
  }

  /**
   * Tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 647
Estimated Gas Usage: 93249 - 456416
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:745

 this);
  }

  /**
   * Tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatedCrowdsale
Function name: constructor
PC address: 974
Estimated Gas Usage: 93249 - 456416
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:439

) public onlyOwner {

    // Change

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101020000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatedCrowdsale
Function name: isPricingSane() or isPricingSane() or isPricingSane() or isPricingSane()
PC address: 3982
Estimated Gas Usage: 2713 - 38169
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:504

ess(this))) return State.Preparing;
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x7000003f003820, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000120010101010120800401010110010101800101100000100000000000000000000000000008000000000040000402001000000811, value: 0x0
Caller: [SOMEGUY], function: isPricingSane(), txdata: 0x062b01ce, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AllocatedCrowdsale
Function name: setFinalizeAgent(address) or setFinalizeAgent(address) or setFinalizeAgent(address) or setFinalizeAgent(address)
PC address: 4992
Estimated Gas Usage: 9495 - 65235
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:404

 setEndsAt(uint time) onlyOwner

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101200000000020010000080000000000010000000002010000000000000000000081, value: 0x0
Caller: [CREATOR], function: setFinalizeAgent(address), txdata: 0x19b667da000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AllocatedCrowdsale
Function name: setEndsAt(uint256) or setEndsAt(uint256) or setEndsAt(uint256) or setEndsAt(uint256)
PC address: 8637
Estimated Gas Usage: 1593 - 2018
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7bbcc97824abfa2710f6e285e4d4fc3c.sol:423

wner {
    pricingStrategy = _pricingStrategy;

    // Don&#39

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110800101020401400104082010200101020101200000000000000000000000000000000000000000000000000000000000000024, value: 0x0
Caller: [CREATOR], function: setEndsAt(uint256), txdata: 0x6e50eb3f, value: 0x0