==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DITECHCOIN
Function name: mintToken(address,uint256)
PC address: 4408
Estimated Gas Usage: 16320 - 58009
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/97de788534736ce0d5c83d3f9102291c.sol:264

 @param target Address to be froz

--------------------
Initial State:

Account: [CREATOR], balance: 0x209, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(address,uint256), txdata: 0x79c65068000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffeffffffffffffffffffffffffffffffffffffffffffffffffffffe0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DITECHCOIN
Function name: mintToken(address,uint256)
PC address: 4424
Estimated Gas Usage: 16320 - 58009
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/97de788534736ce0d5c83d3f9102291c.sol:265

@param freeze either to fre

--------------------
Initial State:

Account: [CREATOR], balance: 0x1200000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(address,uint256), txdata: 0x79c650680000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffe0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DITECHCOIN
Function name: buy()
PC address: 5435
Estimated Gas Usage: 1433 - 1528
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/97de788534736ce0d5c83d3f9102291c.sol:286

t of tokens to be sold
    function sell(uint256 amount) public {
        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy
        _transfer(msg.sender, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buy(), txdata: 0xa6f2ae3a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DITECHCOIN
Function name: transfer(address,uint256) or transfer(address,uint256)
PC address: 5600
Estimated Gas Usage: 4603 - 4698
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/97de788534736ce0d5c83d3f9102291c.sol:306

  }else if(msg.sender.balance == minBalanceForAccounts){
            sell(1e14/sellPrice); // min fee 0.01 tokens
        }
            
        _transfer(msg.sender, _to, _value);
        
        if(_to.balance<minBalanceForAccounts){

            require(this.balance >= ((minBalanceForAccounts - _to.balance) / sellPrice) * sellPrice);      // checks if the contract has enough ether to buy
            _transfer(_to, this, ((minBalanceForAccounts - _to.balance) / sellPrice));              // makes the transfers
            _to.transfer(((minBalanceForAccounts - _to.balance) / sellPrice) * sellPrice);          // sends ether to the seller. It&#39;s important to do this last to avoid recursion attacks

        }
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DITECHCOIN
Function name: setMinBalance(uint256)
PC address: 6034
Estimated Gas Usage: 6633 - 27058
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/97de788534736ce0d5c83d3f9102291c.sol:240

                      // Prevent 

--------------------
Initial State:

Account: [CREATOR], balance: 0x48052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setMinBalance(uint256), txdata: 0xc91d956c20, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DITECHCOIN
Function name: approveAndCall(address,uint256,bytes) or approveAndCall(address,uint256,bytes)
PC address: 6396
Estimated Gas Usage: 8151 - 66436
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000008008, value: 0x0