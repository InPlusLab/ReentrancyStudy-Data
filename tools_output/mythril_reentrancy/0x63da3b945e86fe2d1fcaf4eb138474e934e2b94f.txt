==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: HDCORE
Function name: constructor
PC address: 965
Estimated Gas Usage: 95765 - 472645
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2484

 payable
    {
        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");
        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HDCORE
Function name: constructor
PC address: 1012
Estimated Gas Usage: 95765 - 472645
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2483

     public
        payable
    {
        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");
        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HDCORE
Function name: constructor
PC address: 1038
Estimated Gas Usage: 95765 - 472645
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2483

     public
        payable
    {
        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");
        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: NBUNIERC20
Function name: name()
PC address: 2168
Estimated Gas Usage: 1424 - 2364
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2445

ncy drain fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HDCORE
Function name: name()
PC address: 2868
Estimated Gas Usage: 2433 - 4174
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2445

ncy drain fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HDCORE
Function name: delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)
PC address: 2868
Estimated Gas Usage: 22872 - 101662
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2445

ncy drain fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x401c00c0100030000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32), txdata: 0xc3cda520000000000000000000000000000404040104010202010101010101040101010100000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NBUNIERC20
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 3396
Estimated Gas Usage: 1997 - 2092
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2627

er(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NBUNIERC20
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 3614
Estimated Gas Usage: 13860 - 88711
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2640

es the allowance granted

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NBUNIERC20
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 3624
Estimated Gas Usage: 13860 - 88711
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2640

 @dev Atomically increases the allowance granted

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NBUNIERC20
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 3629
Estimated Gas Usage: 13860 - 88711
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2640

r` by the caller.
     *
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NBUNIERC20
Function name: getSecondsLeftInLiquidityGenerationEvent()
PC address: 3660
Estimated Gas Usage: 6026 - 80100
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2502

ready finished");
        totalETHContributed = add

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getSecondsLeftInLiquidityGenerationEvent(), txdata: 0x5b5f3e87, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NBUNIERC20
Function name: addLiquidityToUniswapHDCORExWETHPair()
PC address: 3885
Estimated Gas Usage: 5939 - 80013
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2543

  (bool success, ) = msg.sender.call.value(address(this).balance)(""

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidityToUniswapHDCORExWETHPair(), txdata: 0x5c5a73de, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HDCORE
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 4132
Estimated Gas Usage: 1976 - 2071
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2627

er(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HDCORE
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 4350
Estimated Gas Usage: 13839 - 88690
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2640

es the allowance granted

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HDCORE
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 4360
Estimated Gas Usage: 13839 - 88690
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2640

 @dev Atomically increases the allowance granted

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HDCORE
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 4365
Estimated Gas Usage: 13839 - 88690
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2640

r` by the caller.
     *
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HDCORE
Function name: getSecondsLeftInLiquidityGenerationEvent()
PC address: 4426
Estimated Gas Usage: 5960 - 80034
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2502

ready finished");
        totalETHContributed = add

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getSecondsLeftInLiquidityGenerationEvent(), txdata: 0x5b5f3e87, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NBUNIERC20
Function name: createUniswapPairMainnet()
PC address: 5852
Estimated Gas Usage: 11857 - 101357
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2484

 payable
    {
        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");
        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createUniswapPairMainnet(), txdata: 0x75b208bc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NBUNIERC20
Function name: createUniswapPairMainnet()
PC address: 5897
Estimated Gas Usage: 11857 - 101357
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2483

     public
        payable
    {
        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");
        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createUniswapPairMainnet(), txdata: 0x75b208bc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NBUNIERC20
Function name: createUniswapPairMainnet()
PC address: 5923
Estimated Gas Usage: 11857 - 101357
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2483

     public
        payable
    {
        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");
        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createUniswapPairMainnet(), txdata: 0x75b208bc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: NBUNIERC20
Function name: symbol()
PC address: 6128
Estimated Gas Usage: 1488 - 2428
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2449

ng public liqu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NBUNIERC20
Function name: addLiquidity(bool)
PC address: 6623
Estimated Gas Usage: 5980 - 80054
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2526

the LPGenerationCompleted bool
    // 3) LP per unit is 0 - impossible c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidity(bool), txdata: 0xda620cd70000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: HDCORE
Function name: createUniswapPairMainnet()
PC address: 6652
Estimated Gas Usage: 11946 - 101446
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2484

 payable
    {
        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");
        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createUniswapPairMainnet(), txdata: 0x75b208bc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HDCORE
Function name: createUniswapPairMainnet()
PC address: 6697
Estimated Gas Usage: 11946 - 101446
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2483

     public
        payable
    {
        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");
        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createUniswapPairMainnet(), txdata: 0x75b208bc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HDCORE
Function name: createUniswapPairMainnet()
PC address: 6723
Estimated Gas Usage: 11946 - 101446
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2483

     public
        payable
    {
        require(liquidityGenerationOngoing(), "Liquidity Generation Event over");
        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createUniswapPairMainnet(), txdata: 0x75b208bc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: HDCORE
Function name: getPriorVotes(address,uint256)
PC address: 6738
Estimated Gas Usage: 380 - 475
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:3091

ewVotes);
            numCheckpoints[delegatee] = nCheckpoints + 1;
        }

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPriorVotes(address,uint256), txdata: 0x782d6fe100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HDCORE
Function name: symbol()
PC address: 7466
Estimated Gas Usage: 2497 - 4238
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:2449

ng public liqu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NBUNIERC20
Function name: getSecondsLeftInLiquidityGenerationEvent()
PC address: 8255
Estimated Gas Usage: 9661 - 121880
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:171

ing on
     * overflow.
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getSecondsLeftInLiquidityGenerationEvent(), txdata: 0x5b5f3e87, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HDCORE
Function name: delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)
PC address: 8345
Estimated Gas Usage: 12979 - 70850
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:3063

ckpoints[srcRep][srcRepNum - 1].votes : 0;
                uint256

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32), txdata: 0xc3cda520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NBUNIERC20
Function name: liquidityGenerationOngoing()
PC address: 9944
Estimated Gas Usage: 5991 - 80346
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:454

sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: liquidityGenerationOngoing(), txdata: 0x60a02590, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NBUNIERC20
Function name: addLiquidity(bool)
PC address: 9944
Estimated Gas Usage: 18976 - 133777
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:454

sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x69004818c1002131, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x44000002000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addLiquidity(bool), txdata: 0xda620cd70001200004104020020200008010802002080010018080408008801080200404, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NBUNIERC20
Function name: getSecondsLeftInLiquidityGenerationEvent()
PC address: 9944
Estimated Gas Usage: 9779 - 122279
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:454

sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getSecondsLeftInLiquidityGenerationEvent(), txdata: 0x5b5f3e87, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: NBUNIERC20
Function name: liquidityGenerationOngoing()
PC address: 9944
Estimated Gas Usage: 5991 - 80346
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:454

sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: liquidityGenerationOngoing(), txdata: 0x60a02590, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: NBUNIERC20
Function name: addLiquidity(bool)
PC address: 9944
Estimated Gas Usage: 18976 - 133777
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:454

sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000002140000014, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1002014000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addLiquidity(bool), txdata: 0xda620cd70001002020004008021008800220201004040404044008800210200480010102, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: NBUNIERC20
Function name: getSecondsLeftInLiquidityGenerationEvent()
PC address: 9944
Estimated Gas Usage: 9779 - 122279
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/da63e776508766f745fb9ee1c3974ca0.sol:454

sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getSecondsLeftInLiquidityGenerationEvent(), txdata: 0x5b5f3e87, value: 0x0