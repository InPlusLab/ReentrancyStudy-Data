==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address) or setOwner(address)
PC address: 479
Estimated Gas Usage: 12497 - 69436
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:327

g));

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x880065d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address) or setOwner(address)
PC address: 532
Estimated Gas Usage: 12497 - 69436
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:327

g));

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x880065d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address) or setOwner(address)
PC address: 539
Estimated Gas Usage: 12497 - 69436
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:335

thori

--------------------
Initial State:

Account: [CREATOR], balance: 0x880065d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address)
PC address: 704
Estimated Gas Usage: 12519 - 69458
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:340


        } else if (sr

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address)
PC address: 757
Estimated Gas Usage: 12519 - 69458
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:340


        } else if (sr

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address)
PC address: 763
Estimated Gas Usage: 12519 - 69458
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:343

true;

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DSAuth
Function name: setOwner(address) or setOwner(address)
PC address: 1502
Estimated Gas Usage: 12497 - 69436
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:375

en if our domain goes down.

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000009d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address)
PC address: 1502
Estimated Gas Usage: 12519 - 69458
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:375

en if our domain goes down.

    

--------------------
Initial State:

Account: [CREATOR], balance: 0xe100207d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: upgrade(address)
PC address: 4171
Estimated Gas Usage: 15505 - 56920
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:351

ll(src, this, sig);

        }

    }

}



interface MobiusBlueToken {

    function mint(address _to, uint _amount) external;

    function finishMinting() external returns (bool);

    function disburseDividends() external payable;

}

 

contract MobiusBLUE is DSMath, DSAuth {

    // IPFS hash of the website - can be accessed even if our domain goes down.

    // Just go to any publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: upgrade(address), txdata: 0x0900f01000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: investorInfo(address,uint256)
PC address: 4791
Estimated Gas Usage: 1279 - 1374
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:637

adline,

        uint _softDeadline,

        bool finalized

        )

    {

        MobiusRound storage rnd = rounds[roundID];

        leader = rnd.lastInvestor;

        price = rnd.price;

        jackpot = rnd.jackpot;

        airdrop = rnd.airdropPot;

        shares = rnd.totalShares;

        totalInvested = rnd.totalInvested;



--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: investorInfo(address,uint256), txdata: 0x3d6859f2, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: updateMyReturns(uint256)
PC address: 4921
Estimated Gas Usage: 1259 - 1354
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:863

price = STARTING_SHARE_PRICE;

        rnd.hardDeadline = now + HARD_DEADLINE_DURATION;

        rnd.softDeadline = now + SOFT_DEADLINE_DURATION;

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateMyReturns(uint256), txdata: 0x40c0ece3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: roundInfo(uint256)
PC address: 4983
Estimated Gas Usage: 1311 - 1406
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:661

ributedReturns = wmul(rnd.totalInvested, RETURNS_FRACTION);

        _hardDeadline = rnd.hardDeadline;

        _softDeadline = rnd.softDeadline;

        finalized = rnd.finalized;

    }



    function totalsInfo() external view 

    returns(

        uint totalReturns,

        uint totalShares,

        uint totalDividends,

        uint totalJackpots

    ) {

        MobiusRound storage rnd = rounds[latestRoundID];

        if(rnd.softDeadline > now) {

            totalShares = totalSharesSold + rnd.totalShares;

            totalReturns = totalEarningsGenerated + wmul(rnd.totalInvested, RETURNS_FRACTION);

            totalDividends = totalDividendsPaid + wmul(rnd.totalInvested, DIVIDENDS_FRACTION);

        } else {

            totalShares = totalSharesSold;

            totalReturns = totalEarningsGenerated;

            totalDivid

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: roundInfo(uint256), txdata: 0x427f0b00, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: hasReturns(address,uint256)
PC address: 5309
Estimated Gas Usage: 1361 - 1456
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:619

 roundInfo(uint roundID) external view 

    returns(

        address leader, 

        uint price,

        uint jackpot, 

        uint airdrop, 

        uint shares, 

        uint totalInvested,

        uint distributedReturns,

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: hasReturns(address,uint256), txdata: 0x48afd1b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: withdrawReturns()
PC address: 5431
Estimated Gas Usage: 2097 - 2192
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:805

mulativeReturnsPoints;

        msg.sender.transfer(amount);



        emit ReturnsWithdrawn(msg.sender, amount);

    }



    // Manually update your returns for a given round in case you were inactive since before it ended

    function updateMyReturns(uint roundID) public {

        MobiusRound storage rnd = rounds[roundID];

        _updateReturns(msg.sender, rnd);

    }



    function finalizeAndRestart() public payable {

        finalizeLastRound();

        startNewRound();

    }



    /// Anyone can start a new round

    function startNewRound() public payable {

        require(!upgraded, "This contract has been upgraded!");

        if(rounds.length > 0) {

            require(rounds[latestRoundID].finalized, "Previous round not finalized");

            require(rounds[latestRoundID].softDeadline < now, "Previous round still running");

        }

        uint _rID = rounds.length++;

        MobiusRou

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawReturns(), txdata: 0x4c7ce18a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: totalsInfo()
PC address: 6536
Estimated Gas Usage: 2191 - 2286
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:703

DividendsPaid;

        }

        totalJackpots = totalJackpotsWon;

    }



    function () public payable {

        buyShares(address(0x0));

    }



    /// Function to buy shares in the latest round. Purchase logic is abstracted

    function buyShares(address ref) public payable {        

        if(rounds.length > 0) {

            MobiusRound storage rnd = rounds[latestRoundID];   

               

            _purchase(rnd, msg.value, ref);            

        } else {

            revert("Not yet started");

        }

    }



    /// Function to purchase with what you have in your vault as returns

    function reinvestReturns(uint value) public {        

        reinvestReturns(value, address(0x0));

    }



    function reinvestReturns(uint value, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: totalsInfo(), txdata: 0x57b16811, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: estimateReturns(address,uint256)
PC address: 7035
Estimated Gas Usage: 1744 - 1839
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:585

ults[investor].totalReturns + outstanding;

        refReturns = vaults[investor].refReturns;

    }



    function hasReturns(address investor, uint roundID) public view returns (bool) {

        MobiusRound storage rnd = rounds[roundID];

        return rnd.cumulativeReturnsPoints > rnd.investors[investor].lastCumulativeReturnsPoints;

    }



    function investorInfo(address investor, uint roundID) external view

    returns(uint shares, uint totalReturns, uint referralReturns) 

    {

        MobiusRound storage rnd = rounds[roundID];

        shares = rnd.investors[investor].shares;

        (totalReturns, referralReturns) = estimateReturns(investor, roundID);

    }





--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: estimateReturns(address,uint256), txdata: 0xa2860050, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: finalizeAndRestart()
PC address: 8145
Estimated Gas Usage: 2126 - 2221
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:875

chase(rnd, msg.valu

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0402030001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: finalizeAndRestart(), txdata: 0x536942b6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: finalizeLastRound()
PC address: 8145
Estimated Gas Usage: 2575 - 2670
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:933

kpot seed to the new version

            vaults[nextVersion].totalReturns = jackpotSeed;

            jackpotSeed = 0;

        }

    }


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: finalizeLastRound(), txdata: 0xc24a9674, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: reinvestReturns(uint256)
PC address: 8211
Estimated Gas Usage: 2498 - 2593
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:779

ounds.length > 1) {// check if they 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reinvestReturns(uint256), txdata: 0x9e93d0e4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MobiusBLUE
Function name: reinvestReturns(uint256,address)
PC address: 8211
Estimated Gas Usage: 2708 - 2803
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:779

 before

            if(hasReturns(msg.sender, latestRoundID - 1)) {

                MobiusRound storage prevRnd = rounds[latestRoundID - 1];

                _updateReturns(msg.sender, prevRnd);

            }

        }

        _updateReturns(msg.sender, rnd);

        uint amount = vaults[msg.sender].totalReturns;

        require(amount > 0, "Nothing to withdraw!");

        unclaimedReturns = sub(unclaimedReturns, amount);

        vaults[msg.sender].totalReturns = 0;

        vaults[msg.sender].refReturns = 0;

        

        rnd.investors[msg.sender].lastCumulativeReturnsPoi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reinvestReturns(uint256,address), txdata: 0xc5c87db4, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MobiusBLUE
Function name: startNewRound()
PC address: 9085
Estimated Gas Usage: 47822 - 208672
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:989

* 10^18, divide by 10^18

        // adjust soft de

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: startNewRound(), txdata: 0xbd85948c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobiusBLUE
Function name: startNewRound()
PC address: 12860
Estimated Gas Usage: 55504 - 236354
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/a00cad1077e84d0941e562edb6240235.sol:1375
Initial State:

Account: [CREATOR], balance: 0x40000500018803, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: startNewRound(), txdata: 0xbd85948c, value: 0x5af3107a4000