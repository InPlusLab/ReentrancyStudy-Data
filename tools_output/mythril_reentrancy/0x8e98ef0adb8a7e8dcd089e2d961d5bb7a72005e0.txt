==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AxiaVault
Function name: distributeDEFI(address,uint256)
PC address: 1953
Estimated Gas Usage: 4464 - 39451
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:74

signed time for distribution of DefiLiquidity"); // Max once a week 
        require(msg.sender == owner, "No Authorizat

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: distributeDEFI(address,uint256), txdata: 0x59ec2a9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c30f5c28f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AxiaVault
Function name: distributeDEFI(address,uint256)
PC address: 2401
Estimated Gas Usage: 12886 - 103190
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:77

ingFeeDistributionDefi = now;
    } 
    
    function sy

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: distributeDEFI(address,uint256), txdata: 0x59ec2a9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c30f5c28f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AxiaVault
Function name: distributeDEFI(address,uint256)
PC address: 2401
Estimated Gas Usage: 12886 - 103190
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:77

ingFeeDistributionDefi = now;
    } 
    
    function sy

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeDEFI(address,uint256), txdata: 0x59ec2a9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c30f5c28f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AxiaVault
Function name: distributeDEFI(address,uint256)
PC address: 2464
Estimated Gas Usage: 12886 - 103190
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:80

 _digits, uint256 _digitsb) public r

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: distributeDEFI(address,uint256), txdata: 0x59ec2a9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c30f5c28f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AxiaVault
Function name: startLiquidityMigration(address)
PC address: 3025
Estimated Gas Usage: 12879 - 53634
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:97

new loca

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startLiquidityMigration(address), txdata: 0x890d86370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AxiaVault
Function name: distributeSWAP(address,uint256)
PC address: 3439
Estimated Gas Usage: 4442 - 39429
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:56

me is less than assigned time for distribution of SwapLiquidity"); // Max once a week 
        require(msg.sender == own

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: distributeSWAP(address,uint256), txdata: 0x93a639879d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f5c28f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AxiaVault
Function name: distributeSWAP(address,uint256)
PC address: 3887
Estimated Gas Usage: 12864 - 103168
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:58

;
        lastTradingFeeDistributionSwap = now;
    } 
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x300020000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeSWAP(address,uint256), txdata: 0x93a639879d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f5c28f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AxiaVault
Function name: distributeSWAP(address,uint256)
PC address: 3887
Estimated Gas Usage: 12864 - 103168
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:58

;
        lastTradingFeeDistributionSwap = now;
    } 
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeSWAP(address,uint256), txdata: 0x93a639879d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f5c28f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AxiaVault
Function name: distributeSWAP(address,uint256)
PC address: 3950
Estimated Gas Usage: 12864 - 103168
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:62

tion distributeORACLE(address recipi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeSWAP(address,uint256), txdata: 0x93a639879d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f5c28f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AxiaVault
Function name: distributeAXIA(address,uint256)
PC address: 4506
Estimated Gas Usage: 4486 - 39473
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:47

 now, "Time is less than assigned time for distribution of Axia"); // Max once a week 
        require(msg.send

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: distributeAXIA(address,uint256), txdata: 0xa1efa90d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f6028f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AxiaVault
Function name: distributeAXIA(address,uint256)
PC address: 4953
Estimated Gas Usage: 12908 - 103212
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:49

;
        lastTradingFeeDistributionAxia = now;


--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeAXIA(address,uint256), txdata: 0xa1efa90d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f6028f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AxiaVault
Function name: distributeAXIA(address,uint256)
PC address: 4953
Estimated Gas Usage: 12908 - 103212
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:49

;
        lastTradingFeeDistributionAxia = now;


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeAXIA(address,uint256), txdata: 0xa1efa90d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f6028f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AxiaVault
Function name: distributeAXIA(address,uint256)
PC address: 5016
Estimated Gas Usage: 12908 - 103212
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:52


    function distributeSWAP(address

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeAXIA(address,uint256), txdata: 0xa1efa90d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d01011002405c2c08028f802905c2c0603204d1842b011016921084624a0127a0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AxiaVault
Function name: processMigration()
PC address: 5368
Estimated Gas Usage: 2734 - 3489
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:105

ddress(this));
        uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startLiquidityMigration(address), txdata: 0x890d86370000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: processMigration(), txdata: 0xc7f614ea, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AxiaVault
Function name: distributeORACLE(address,uint256)
PC address: 7651
Estimated Gas Usage: 4485 - 39472
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:65

ess than assigned time for distribution of OracleLiquidty"); // Max once a week 
        require(msg.sender == owner, "No A

--------------------
Initial State:

Account: [CREATOR], balance: 0x200800000001000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: distributeORACLE(address,uint256), txdata: 0xd88eb6f39d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f6028f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AxiaVault
Function name: distributeORACLE(address,uint256)
PC address: 8099
Estimated Gas Usage: 12907 - 103211
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:68

  lastTradingFeeDistributionOracle = now;
    } 
    
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeORACLE(address,uint256), txdata: 0xd88eb6f39d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f6028f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AxiaVault
Function name: distributeORACLE(address,uint256)
PC address: 8099
Estimated Gas Usage: 12907 - 103211
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:68

  lastTradingFeeDistributionOracle = now;
    } 
    
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeORACLE(address,uint256), txdata: 0xd88eb6f39d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f6028f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AxiaVault
Function name: distributeORACLE(address,uint256)
PC address: 8162
Estimated Gas Usage: 12907 - 103211
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ec2fe13e18e2d4cf1ac9474469920ee6.sol:71

stributeDEFI(address recipient, uint25

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startToken(address,address,address,address), txdata: 0x5c58a6c500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: distributeORACLE(address,uint256), txdata: 0xd88eb6f39d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d00205338cf5c28f6028f5c28f5c28f5c290cd173aadc6e556c6d345d9577a798, value: 0x0