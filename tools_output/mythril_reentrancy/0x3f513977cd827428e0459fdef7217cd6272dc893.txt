==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KittenSelfDrop2
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 1623
Estimated Gas Usage: 23689 - 107595
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/e0ff002f4c702240512d6138e0c6d6a2.sol:239

] = values;

        donatorRewardLevels = levels;

    }

    

    // Sends all ETH contributions to lovely kitten owner

    function withdrawAll() public onlyOwner {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d129380000000000000000000000000000000000000000000000000000000000000200ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KittenSelfDrop2
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 1629
Estimated Gas Usage: 23689 - 107595
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/e0ff002f4c702240512d6138e0c6d6a2.sol:239

] = values;

        donatorRewardLevels = levels;

    }

    

    // Sends all ETH contributions to lovely kitten owner

    function withdrawAll() public onlyOwner {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x80041, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d129380000000000000000000000000080000000080000000040000000000000000004ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KittenSelfDrop2
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 1644
Estimated Gas Usage: 23663 - 107383
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/e0ff002f4c702240512d6138e0c6d6a2.sol:239

] = values;

        donatorRewardLevels = levels;

    }

    

    // Sends all ETH contributions to lovely kitten owner

    function withdrawAll() public onlyOwner {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d12938000000000000000000000000ffffffffffffffffffffffffffffffffffffff02ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KittenSelfDrop2
Function name: setDropNumber(uint8)
PC address: 4236
Estimated Gas Usage: 14691 - 90338
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e0ff002f4c702240512d6138e0c6d6a2.sol:211

Kitten Coins to hold in order to get holder reward

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDropNumber(uint8), txdata: 0x7be2d5a2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KittenSelfDrop2
Function name: withdrawToken(address)
PC address: 4771
Estimated Gas Usage: 5533 - 75507
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e0ff002f4c702240512d6138e0c6d6a2.sol:287

 function updateKittenCoinsR

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KittenSelfDrop2
Function name: withdrawToken(address)
PC address: 4963
Estimated Gas Usage: 5533 - 75507
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e0ff002f4c702240512d6138e0c6d6a2.sol:285

ust in case it is needed

    function updateKittenCoinsRe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KittenSelfDrop2
Function name: withdrawToken(address)
PC address: 4963
Estimated Gas Usage: 5533 - 75507
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/e0ff002f4c702240512d6138e0c6d6a2.sol:285

ust in case it is needed

    function updateKittenCoinsRe

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address), txdata: 0x89476069, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: KittenSelfDrop2
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 5581
Estimated Gas Usage: 23689 - 107595
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d129380800000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: KittenSelfDrop2
Function name: setDonatorReward(uint8,uint256[],uint8)
PC address: 5583
Estimated Gas Usage: 23663 - 107383
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDonatorReward(uint8,uint256[],uint8), txdata: 0x68d12938000000000000000000000000002004008080000000101002400000100208000280, value: 0x0