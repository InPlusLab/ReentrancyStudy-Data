==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AurumPresale
Function name: constructor
PC address: 122
Estimated Gas Usage: 17695 - 81551
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:353

gTime;



        require(to

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AurumPresale
Function name: constructor
PC address: 315
Estimated Gas Usage: 36558 - 198270
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:377

   * @dev Sets minimal part

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000008000800000000000000000000000002000000000000000000000400002, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AurumPresale
Function name: fallback
PC address: 711
Estimated Gas Usage: 961 - 1056
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:383

     require(msg.value >= _amount, "Not en

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000110010104010801010101011001020101040101000080000800010000800000008010000400000000000000000080800100000120, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AurumPresale
Function name: reclaimToken(address)
PC address: 1481
Estimated Gas Usage: 1916 - 2671
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:439

wner.

     */

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000401011010010101040101010208010101100101000080020000008000010080000040800080800000008080008080008000000102, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AurumPresale
Function name: reclaimToken(address)
PC address: 1586
Estimated Gas Usage: 6882 - 77516
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:443

lyOwner {

        own

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010401010101020108010101010404040101000000000000208000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AurumPresale
Function name: reclaimToken(address)
PC address: 1631
Estimated Gas Usage: 6882 - 77516
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:446


    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000102010101020101041001010101010101010104000008008000000000000000200000000000000000000000000000000000000401, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AurumPresale
Function name: reclaimToken(address)
PC address: 1746
Estimated Gas Usage: 6882 - 77516
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:445

this).balance);

    }



    /**

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010401010101020108010101010404040101000000000000208000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AurumPresale
Function name: reclaimToken(address)
PC address: 1746
Estimated Gas Usage: 6882 - 77516
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:445

this).balance);

    }



    /**

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001001100101080410010101010110010110100101018000000000000000000000000000800080008080808080808080808080800202, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AurumPresale
Function name: reclaimToken(address)
PC address: 1746
Estimated Gas Usage: 6882 - 77516
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:445

this).balance);

    }



    /**

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000102010101020101041001010101010101010104000008008000000000000000200000000000000000000000000000000000000401, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AurumPresale
Function name: fallback
PC address: 1812
Estimated Gas Usage: 904 - 999
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:525

yable

        onlyWhileActive

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000104040104010101010101040101100104010101008000000000000000000000000000010101080101010100040101010100000201, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AurumPresale
Function name: fallback
PC address: 1826
Estimated Gas Usage: 924 - 1019
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a1c2b8bcc6e5dc8b5fcf201f3dba5e3a.sol:525

yable

        onlyWhileActive

        minThreshold(20 f

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000202080410010108010101010102041001010801000004000000000000000000000010000000000000000000000000000000000101, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0