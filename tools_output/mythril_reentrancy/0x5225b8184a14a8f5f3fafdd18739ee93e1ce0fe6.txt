==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthicHubArbitrage
Function name: assignArbiterForLendingContract(address,address)
PC address: 1594
Estimated Gas Usage: 8058 - 79370
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:255

on revokeArbiterForLendingContract(address _arbiter, address _lendingContra

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: assignArbiterForLendingContract(address,address), txdata: 0x8b855832adadadadadadadadadadadad0000000000000000000000000000000400080800adadadadadadadadadadadada1091520a546595816, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthicHubArbitrage
Function name: assignArbiterForLendingContract(address,address)
PC address: 1713
Estimated Gas Usage: 8058 - 79370
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:255

yOwner {

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000040000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: assignArbiterForLendingContract(address,address), txdata: 0x8b855832bebebebebebebebebebebebe0000000000000000000000000000004040002002bebebebebebebebebebebebea1091520a546595819, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthicHubArbitrage
Function name: assignArbiterForLendingContract(address,address)
PC address: 2035
Estimated Gas Usage: 8058 - 79370
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:255

yOwner {

        require(_arbiter != address(0));

        require(_lending

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: assignArbiterForLendingContract(address,address), txdata: 0x8b855832adadadadadadadadadadadad0000000000000000000000000000000400080800adadadadadadadadadadadada1091520a546595816, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EthicHubArbitrage
Function name: assignArbiterForLendingContract(address,address)
PC address: 2035
Estimated Gas Usage: 8058 - 79370
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:255

yOwner {

        require(_arbiter != address(0));

        require(_lending

--------------------
Initial State:

Account: [CREATOR], balance: 0x121, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: assignArbiterForLendingContract(address,address), txdata: 0x8b8558320000000000000000000000000000000000000000000000000000000101000002000000000000000000000000a1091520a546595816, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthicHubArbitrage
Function name: assignArbiterForLendingContract(address,address)
PC address: 2035
Estimated Gas Usage: 8058 - 79370
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:255

yOwner {

        require(_arbiter != address(0));

        require(_lending

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000040000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: assignArbiterForLendingContract(address,address), txdata: 0x8b855832bebebebebebebebebebebebe0000000000000000000000000000004040002002bebebebebebebebebebebebea1091520a546595819, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthicHubArbitrage
Function name: revokeArbiterForLendingContract(address,address)
PC address: 2676
Estimated Gas Usage: 10769 - 117254
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:267

d(_arbiter, _lendingContract);

    }



    function arbiterForLendingCont

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: revokeArbiterForLendingContract(address,address), txdata: 0x98dbeb57adadadadadadadadadadadadfffffffffffffb5f430064a44014100000000000adadadadadadadadadadadada1091520a546595818, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthicHubArbitrage
Function name: revokeArbiterForLendingContract(address,address)
PC address: 2861
Estimated Gas Usage: 10769 - 117254
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:275

ge.getAddress(k

--------------------
Initial State:

Account: [CREATOR], balance: 0x80080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: revokeArbiterForLendingContract(address,address), txdata: 0x98dbeb57adadadadadadadadadadadadfffffffffffffb5f430064a44014100000000000adadadadadadadadadadadada1091520a546595816, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthicHubArbitrage
Function name: revokeArbiterForLendingContract(address,address)
PC address: 3131
Estimated Gas Usage: 10769 - 117254
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:275

ge.getAddress(keccak256("arbiter", _lendingContract));

    }



}

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: revokeArbiterForLendingContract(address,address), txdata: 0x98dbeb57adadadadadadadadadadadadfffffffffffffb5f430064a44014100000000000adadadadadadadadadadadada1091520a546595818, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthicHubArbitrage
Function name: revokeArbiterForLendingContract(address,address)
PC address: 3131
Estimated Gas Usage: 10769 - 117254
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:275

ge.getAddress(keccak256("arbiter", _lendingContract));

    }



}

--------------------
Initial State:

Account: [CREATOR], balance: 0x80080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: revokeArbiterForLendingContract(address,address), txdata: 0x98dbeb57adadadadadadadadadadadadfffffffffffffb5f430064a44014100000000000adadadadadadadadadadadada1091520a546595816, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthicHubArbitrage
Function name: revokeArbiterForLendingContract(address,address)
PC address: 3253
Estimated Gas Usage: 10769 - 117254
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:281
Initial State:

Account: [CREATOR], balance: 0x80080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: revokeArbiterForLendingContract(address,address), txdata: 0x98dbeb57adadadadadadadadadadadadfffffffffffffb5f430064a44014100000000000adadadadadadadadadadadada1091520a546595816, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthicHubArbitrage
Function name: arbiterForLendingContract(address)
PC address: 3523
Estimated Gas Usage: 3034 - 38678
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:281
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: arbiterForLendingContract(address), txdata: 0xbe859705, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthicHubArbitrage
Function name: revokeArbiterForLendingContract(address,address)
PC address: 3523
Estimated Gas Usage: 10769 - 117254
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:281
Initial State:

Account: [CREATOR], balance: 0x40000000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: revokeArbiterForLendingContract(address,address), txdata: 0x98dbeb57adadadadadadadadadadadadfffffffffffffb5f430064a44014100000000000adadadadadadadadadadadada1091520a546595818, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EthicHubArbitrage
Function name: revokeArbiterForLendingContract(address,address)
PC address: 3523
Estimated Gas Usage: 10769 - 117254
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:281
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: revokeArbiterForLendingContract(address,address), txdata: 0x98dbeb57020202020202020202020202fffffffffffffb5f430064a44014100000000000020202020202020202020202a1091520a546595818, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthicHubArbitrage
Function name: revokeArbiterForLendingContract(address,address)
PC address: 3523
Estimated Gas Usage: 10769 - 117254
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e04a2e755050f68b044f9c3964562c50.sol:281
Initial State:

Account: [CREATOR], balance: 0x80080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: revokeArbiterForLendingContract(address,address), txdata: 0x98dbeb57adadadadadadadadadadadadfffffffffffffb5f430064a44014100000000000adadadadadadadadadadadada1091520a546595816, value: 0x0