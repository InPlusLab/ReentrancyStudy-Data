==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3588
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:345

 be claimed

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3622
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:347

 stakers[ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3668
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:353

 
            (bool _isStakeholder) = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3672
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:353

 
            (bool _isStakeholder) = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3673
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:355

stamp;
            
            

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3714
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:355

           if(!_isStakeholder) farmLock[msg.sender] =  block.timestamp;
            
            


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3721
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:358

alStakes = totalStakes.add(tokens.sub(_st

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3724
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:360

g.sender);
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3729
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:359

         
            addStakeholder(msg.sender);
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3732
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:362

, tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3741
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:362

       emit STAKED(msg.sender, tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3775
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:367

ic view returns (uint256){
        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3792
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:368

dress");
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3801
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:368

to the zero address");
        
       // uint enterBl

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3971
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:332

ction STAKE(uint256 tokens) ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 3977
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:332

ction STAKE(uint256 tokens) ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4019
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:332

ction STAKE(uint256 tokens) ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4042
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:332

ction STAKE(uint256 tokens) ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4054
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:323

der);
   }
   


  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4597
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:438

= address(0), "ERC20:

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4600
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:441

=  ((to

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4602
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:439

;
         
        uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4618
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:439

ersRound = stakers[staker

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4621
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:438


         uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4645
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:442

s.sub(p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4673
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:442

        amount += ((totalDiv

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4689
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:441

r].stakedTokens)).div(sca

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4692
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:441

).mul(stakers[

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4749
Estimated Gas Usage: 74766 - 314223
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:441

.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)).div(scaling);
        amount += ((totalDividends.sub(p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: HypeStake
Function name: STAKE(uint256)
PC address: 4757
Estimated Gas Usage: 74766 - 314223
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d9cb67353971f0fb9b5fa1ea5f1ff831.sol:441

.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)).div(scaling);
        amount += ((totalDividends.sub(p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910490ce025ce011c52687d0493b1e63260ca08b220a0e32a827bce126007b8342, value: 0x0