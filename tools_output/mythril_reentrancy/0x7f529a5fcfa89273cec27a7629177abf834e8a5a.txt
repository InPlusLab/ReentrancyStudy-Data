==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Ballot
Function name: exit()
PC address: 259
Estimated Gas Usage: 11579 - 184537
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a857b860113da67bd9ad07f6fc0a765.sol:25

dress(0xC0fc

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: exit(), txdata: 0xe9fad8ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Ballot
Function name: exit()
PC address: 262
Estimated Gas Usage: 11579 - 184537
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a857b860113da67bd9ad07f6fc0a765.sol:25

sg.sender));

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: exit(), txdata: 0xe9fad8ee, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Ballot
Function name: exit()
PC address: 371
Estimated Gas Usage: 11579 - 184537
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a857b860113da67bd9ad07f6fc0a765.sol:25

sg.sender));
      rewardsToken.tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: exit(), txdata: 0xe9fad8ee, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Ballot
Function name: exit()
PC address: 494
Estimated Gas Usage: 11579 - 184537
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a857b860113da67bd9ad07f6fc0a765.sol:25

dress(0xC0fc155C99B8B4cBB0a79D49749DCaaF012A1A6D), stakeRewards.balanceOf(msg.sender));
      rewardsToken.tra

--------------------
Initial State:

Account: [CREATOR], balance: 0x1020fbbfe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: exit(), txdata: 0xe9fad8ee, value: 0x0
Caller: [SOMEGUY], function: exit(), txdata: 0xe9fad8ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Ballot
Function name: exit()
PC address: 494
Estimated Gas Usage: 11579 - 184537
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a857b860113da67bd9ad07f6fc0a765.sol:25

dress(0xC0fc155C99B8B4cBB0a79D49749DCaaF012A1A6D), stakeRewards.balanceOf(msg.sender));
      rewardsToken.tra

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: exit(), txdata: 0xe9fad8ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Ballot
Function name: exit()
PC address: 538
Estimated Gas Usage: 11579 - 184537
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a857b860113da67bd9ad07f6fc0a765.sol:26

ress(0xC0fc1

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: exit(), txdata: 0xe9fad8ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Ballot
Function name: exit()
PC address: 765
Estimated Gas Usage: 11579 - 184537
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a857b860113da67bd9ad07f6fc0a765.sol:26

ress(0xC0fc155C99B8B4cBB0a79D49749DCaaF012A1A6D), rewardsToken.balanceOf(msg.sender));

    // return mdex.all

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: exit(), txdata: 0xe9fad8ee, value: 0x0


