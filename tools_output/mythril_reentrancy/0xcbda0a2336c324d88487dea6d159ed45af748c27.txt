==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Dollars
Function name: fallback
PC address: 3023
Estimated Gas Usage: 1342 - 2282
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/48311b7905469313833ba47014c61a88.sol:359

rn _name;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0xbc0042100004e10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Dollars
Function name: uniSyncPairs(uint256)
PC address: 3521
Estimated Gas Usage: 1068 - 1163
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/48311b7905469313833ba47014c61a88.sol:591

ess[] public uniSyncPairs;

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: uniSyncPairs(uint256), txdata: 0x14eb3f24, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Dollars
Function name: dividendsOwing(address)
PC address: 10716
Estimated Gas Usage: 4278 - 39876
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/48311b7905469313833ba47014c61a88.sol:993

alDividendPoints > S

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: dividendsOwing(address), txdata: 0x8391e45c, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Dollars
Function name: symbol()
PC address: 11578
Estimated Gas Usage: 2244 - 3184
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/48311b7905469313833ba47014c61a88.sol:636

rn _symbol;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0