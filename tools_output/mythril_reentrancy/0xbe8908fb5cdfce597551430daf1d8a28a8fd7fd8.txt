==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3258
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:301

er += ow

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3346
Estimated Gas Usage: 74985 - 347965
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:301

remainder += owing;
            
            stakers[msg.sender].stakedToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002012c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3421
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:306

g.sender].round =  round;
            

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3425
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:306

g.sender].round =  round;
            

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3426
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:309

takeholder) farmLock[msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3458
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:308

lder) = isStakeholder(msg.sender);
             if(!_isStakeholder) farmLock[msg.sender] 

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3465
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:309

amp;
            
            
          

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3469
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:313

         
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3474
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:312

 totalStakes.add(transferToAmount);
            
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3477
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:315

    


--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3483
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:314

eholder(msg.sender);
            


--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3517
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:320

---------------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3521
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:321

takers usin

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3534
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:321

stributed to stakers using this function
    //

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3630
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:291

-------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3636
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:291

-------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3678
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:291

-------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3703
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:291

-------------------------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 3714
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:283

Stakeholder) stakeh

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4138
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:382

urns(uint256 _pending

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4141
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:384

takers[

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4143
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:383

s");
         uint stakersRo

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4159
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:383

RC20: sending to the zero

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4161
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:383

r != address(0

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4185
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:386

okens))

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4213
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:386

 1])).mul(stakers[staker].st

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4229
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:386

dends.sub(payouts[stakers

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4232
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:386

ount =  ((tota

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4289
Estimated Gas Usage: 74985 - 347965
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:384

d;
         
        uint256 amount =  ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens))

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Hype_BetStake
Function name: STAKE(uint256)
PC address: 4297
Estimated Gas Usage: 74985 - 347965
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e7e4265b6cdbdb7c39a0368ad59c7d7a.sol:384

d;
         
        uint256 amount =  ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens))

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000002092c9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: STAKE(uint256), txdata: 0xca84d5910000000000000000000000000000000000000000000000000000000000000000, value: 0x0