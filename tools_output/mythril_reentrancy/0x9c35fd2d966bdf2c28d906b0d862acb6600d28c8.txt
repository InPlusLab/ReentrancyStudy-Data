==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Storage
Function name: set(address,uint256)
PC address: 747
Estimated Gas Usage: 1148 - 1763
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:36

int256 data) public onlyAdmin() {
        require(changeable==true || msg.sender==founder);
        slot[userAddress]=data;
        Set(msg.sender,userAddress,data);
    }
    
    function admin(address addr) 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000e30403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: set(address,uint256), txdata: 0x3825d828, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Payee
Function name: pay(address,uint256)
PC address: 775
Estimated Gas Usage: 9385 - 113945
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:121

       reve

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pay(address,uint256), txdata: 0xc4076876000000000000000000000000000000000000000000000000000000200180408001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Payee
Function name: fallback
PC address: 785
Estimated Gas Usage: 1775 - 2200
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:130
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Payee
Function name: pay(address,uint256)
PC address: 785
Estimated Gas Usage: 2077 - 2502
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:119

ue >= price*count);
        if(!founder.call.value(price*count)() || !msg.sender.call.value(msg.value-price*count)()){
            revert();
        }
        s.update(_addr,count);
        Buy(msg.sender,count);
    }
    
    function () public payable {
        pay(msg.sender,1);
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0010143000586, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80002140080002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pay(address,uint256), txdata: 0xc407687600000000000000000000000008800022204080400088800426002808208004400005, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Payee
Function name: pay(address,uint256)
PC address: 848
Estimated Gas Usage: 9385 - 113945
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:123

ddr,count);

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pay(address,uint256), txdata: 0xc4076876000000000000000000000000000000000000000000000000000000200180408001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Payee
Function name: fallback
PC address: 906
Estimated Gas Usage: 9326 - 113886
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:126

  
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x20800408, value: 0xaa87bee538000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Payee
Function name: pay(address,uint256)
PC address: 907
Estimated Gas Usage: 9385 - 113945
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:126

  
    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pay(address,uint256), txdata: 0xc4076876000000000000000000000000000000000000000000000000000000200180408001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Payee
Function name: fallback
PC address: 929
Estimated Gas Usage: 9326 - 113886
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:124

 Buy(msg.sender,count);
    }
    
    functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x401000c0000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x83381530000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x02010101, value: 0xaa87bee538000

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Payee
Function name: fallback
PC address: 929
Estimated Gas Usage: 9326 - 113886
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:124

 Buy(msg.sender,count);
    }
    
    functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x01010101, value: 0xaa87bee538000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Payee
Function name: fallback
PC address: 929
Estimated Gas Usage: 9326 - 113886
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:124

 Buy(msg.sender,count);
    }
    
    functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x20800408, value: 0xaa87bee538000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Payee
Function name: fallback
PC address: 951
Estimated Gas Usage: 9326 - 113886
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:128

)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000001c000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0xaa87bee538000

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Payee
Function name: fallback
PC address: 1147
Estimated Gas Usage: 9326 - 113886
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:128

);
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0xaa87bee538000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Payee
Function name: fallback
PC address: 1147
Estimated Gas Usage: 9083 - 113643
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:128

);
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xaa88000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0xaa87bee538000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Payee
Function name: setStorageAddress(address)
PC address: 1433
Estimated Gas Usage: 1168 - 1783
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:109

age(storageAddress);

    }
    
    function halt() public onlyFounder(){
        changeable=!changeable;
    }
    
    function pay(ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setStorageAddress(address), txdata: 0x59b910d6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Storage
Function name: update(address,uint256)
PC address: 1883
Estimated Gas Usage: 1302 - 1917
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:29

Address,uint256 data) public onlyAdmin(){
        assert(changeable==true);
        assert(slot[userAddress]+data>slot[userAddress]);
        slot[userAddress]+=data;
        Update(msg.sender,userAddress,data);
    }
    
    function set(address us

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100200040082822, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: update(address,uint256), txdata: 0xa2d83b5e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Storage
Function name: update(address,uint256)
PC address: 2053
Estimated Gas Usage: 3994 - 5319
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:29

Address,uint256 data) public onlyAdmin(){
        assert(changeable==true);
        assert(slot[userAddress]+data>slot[userAddress]);
        slot[userAddress]+=data;
        Update(msg.sender,userAddress,data);
    }
    
    function set(address us

--------------------
Initial State:

Account: [CREATOR], balance: 0x11, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: update(address,uint256), txdata: 0xa2d83b5e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Payee
Function name: setPrice(uint256)
PC address: 2312
Estimated Gas Usage: 1250 - 1865
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b56570a68b39afc2b19c4107aa6b1d0f.sol:104

er, price);
    }
    
    function setStorageAddress(address _addr) public onlyAdmin(){
        storageAddress=_addr;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setPrice(uint256), txdata: 0x91b7f5ed, value: 0x0