==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HTLCs
Function name: timeout(address,address,address,uint256,uint256,bytes20)
PC address: 829
Estimated Gas Usage: 298 - 393
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/beedbacdc83ccc5bb8de6f9fe843d8f4.sol:232

  delete active[id];
    require (token.transfer (from, value), "HTLCs: failed to send

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: timeout(address,address,address,uint256,uint256,bytes20), txdata: 0x136d9f35000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: HTLCs
Function name: timeout(address,address,address,uint256,uint256,bytes20)
PC address: 1108
Estimated Gas Usage: 10133 - 67411
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/beedbacdc83ccc5bb8de6f9fe843d8f4.sol:240

e willing to pay for executi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: create(address,address,uint256,uint256,bytes20), txdata: 0xbcace771000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000020000000080000800000000180004001808004104000400001000000000000010000000008000000200040000000020000000080000000000000000000000000, value: 0x0
Caller: [CREATOR], function: timeout(address,address,address,uint256,uint256,bytes20), txdata: 0x136d9f35808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8080808080808080808080800000010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000020000000080000800000000180004001808004104000400001000000000000010000000008000000200040000000020000000080808080808080808080808080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: HTLCs
Function name: create(address,address,uint256,uint256,bytes20)
PC address: 2095
Estimated Gas Usage: 10222 - 67876
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/beedbacdc83ccc5bb8de6f9fe843d8f4.sol:215

d;
  }

  /**
   * @dev Times out an HTLC.  This can b

--------------------
Initial State:

Account: [CREATOR], balance: 0x1010400000f1ffa, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: create(address,address,uint256,uint256,bytes20), txdata: 0xbcace77100000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000002004001001020404040404040401040404040010010100040000000420000201000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: create(address,address,uint256,uint256,bytes20), txdata: 0xbcace771000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000400100200000080804002080080800180002001404000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HTLCs
Function name: create(address,address,uint256,uint256,bytes20)
PC address: 2235
Estimated Gas Usage: 10222 - 67876
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/beedbacdc83ccc5bb8de6f9fe843d8f4.sol:220

ion, and will pay

--------------------
Initial State:

Account: [CREATOR], balance: 0x20bffbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: create(address,address,uint256,uint256,bytes20), txdata: 0xbcace771000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180800101800180010080010110012001808001048008080880008040018040001008108000200001101000000080208000004020008008000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: HTLCs
Function name: create(address,address,uint256,uint256,bytes20)
PC address: 2244
Estimated Gas Usage: 10222 - 67876
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/beedbacdc83ccc5bb8de6f9fe843d8f4.sol:220

ion, and will pay

--------------------
Initial State:

Account: [CREATOR], balance: 0x20bffbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: create(address,address,uint256,uint256,bytes20), txdata: 0xbcace771000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180800101800180010080010110012001808001048008080880008040018040001008108000200001101000000080208000004020008008000000000000000000000000, value: 0x0

==== Jump to an arbitrary instruction ====
SWC ID: 127
Severity: High
Contract: HTLCs
Function name: hashData(bytes)
PC address: 2516
Estimated Gas Usage: 1640 - 39681
The caller can redirect execution to arbitrary bytecode locations.
It is possible to redirect the control flow to arbitrary locations in the code. This may allow an attacker to bypass security controls or manipulate the business logic of the smart contract. Avoid using low-level-operations and assembly to prevent this issue.
--------------------
In file: /tmp/beedbacdc83ccc5bb8de6f9fe843d8f4.sol:188

 to refer
   * to an HTLC with the given data.  This is a hash value of the data,
   * so commits to the HTLC's cont

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000526, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: create(address,address,uint256,uint256,bytes20), txdata: 0xbcace77100000000000000000000000000000000000000000002000000000000000000020000000000000000000000000000000000400000010220000000000000040000000000000810008004040001010101018000000100000020000400010104010004000020000000000020000000100200000104000104000000000140408001400202400400000000000002000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: hashData(bytes), txdata: 0xe66ef92d000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200101010101010101010101010101010101010101010101010101010101010101, value: 0x0