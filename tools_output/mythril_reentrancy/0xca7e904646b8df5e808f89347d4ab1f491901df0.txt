==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ProphetTimelock
Function name: unlock(address)
PC address: 429
Estimated Gas Usage: 2406 - 3261
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:111

ire(
            ERC20(tokenAddress).transfer(_msgSender(), lockedMap[_msgSender()][t

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unlock(address), txdata: 0x2f6c493c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ProphetTimelock
Function name: unlock(address)
PC address: 662
Estimated Gas Usage: 17601 - 95641
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:113

lock failed'
        );
        
        lockedMap[_msgSender()][tokenAddress].lockedAmount = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4210000010007fafe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlock(address), txdata: 0x2f6c493c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProphetTimelock
Function name: unlock(address)
PC address: 826
Estimated Gas Usage: 17601 - 95641
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:117

p = 0;
        emit Unlocked(_msgSender(), tokenAddres

--------------------
Initial State:

Account: [CREATOR], balance: 0xe37fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlock(address), txdata: 0x2f6c493c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProphetTimelock
Function name: unlock(address)
PC address: 881
Estimated Gas Usage: 17601 - 95641
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:118

p[_msgSender()][tokenAddress].lockedAmount);
    }
    


--------------------
Initial State:

Account: [CREATOR], balance: 0xe37fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlock(address), txdata: 0x2f6c493c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProphetTimelock
Function name: unlock(address)
PC address: 977
Estimated Gas Usage: 17601 - 95641
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:121

) external view returns (uint256) {
        if(loc

--------------------
Initial State:

Account: [CREATOR], balance: 0xe37fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlock(address), txdata: 0x2f6c493c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ProphetTimelock
Function name: lock(address,uint256,uint256)
PC address: 1503
Estimated Gas Usage: 25918 - 227832
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:91

, 'Lock: the lock amount exceeds the balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x1e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000000000000000000000000000000000000000000000a08242010000010000020000000000adadad5a356ad6ad5bff6bacbdfebdff0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ProphetTimelock
Function name: lock(address,uint256,uint256)
PC address: 1723
Estimated Gas Usage: 25918 - 227832
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:94

Lock failed'
        );
        
        uint256 currentLockedAmount = ER

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000400020fbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a0823100000010000000000000000000100000000002aaaaaacaaaabaaaaab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProphetTimelock
Function name: lock(address,uint256,uint256)
PC address: 2018
Estimated Gas Usage: 25918 - 227832
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:99


        lockedMap[_msgSender()][tokenAddress].loc

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a0823100000010000000000000000000040000000002aaaaaacaaaabaaaaab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProphetTimelock
Function name: lock(address,uint256,uint256)
PC address: 2080
Estimated Gas Usage: 25918 - 227832
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:99

mount.add(currentLockedAmount.sub(prevLockedAmount));
        lockedMap[_msgSender()][tokenAddress].lockedHours = lockHours;
        lockedMap[_msgSen

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a0823100000010000000000000000000040000000002aaaaaacaaaabaaaaab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProphetTimelock
Function name: lock(address,uint256,uint256)
PC address: 2139
Estimated Gas Usage: 25918 - 227832
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:101

nAddress].startTimestamp = now;
        
        emit Locked(

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a0823100000010000000000000000000040000000002aaaaaacaaaabaaaaab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProphetTimelock
Function name: lock(address,uint256,uint256)
PC address: 2195
Estimated Gas Usage: 25918 - 227832
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:103

), tokenAddress, lockedMap[_msgSender()][tokenAddress].loc

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a0823100000010000000000000000000040000000002aaaaaacaaaabaaaaab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProphetTimelock
Function name: lock(address,uint256,uint256)
PC address: 2291
Estimated Gas Usage: 25918 - 227832
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9cc6772bf993d3df8c1bc2449ab8f73.sol:106

 tokenAddress) external returns (bool) {
        u

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a0823100000010000000000000000000040000000002aaaaaacaaaabaaaaab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0