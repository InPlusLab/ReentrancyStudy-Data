==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SMILE
Function name: distributeSMILE(address[],uint256)
PC address: 2823
Estimated Gas Usage: 1298 - 1723
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:469

    }



    /**

     * Implementation to retrieve accidentally sent EIP-20 compliant tokens

     * @param _token The contract address of the EIP-20 compliant token

     */



    function retrieveERC(address _token) external canWithdraw(_token) {

        SMILE interfaceProvider = SMILE(_token);

        // By default, the whole balance of the contract is sent to the caller

        interfaceProvider.transfer(msg.sender, interfaceProvider.balanceOf(address(this)));

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040080000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: distributeSMILE(address[],uint256), txdata: 0x8fd5a39e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SMILE
Function name: transfer(address,uint256)
PC address: 3368
Estimated Gas Usage: 454 - 549
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:229

(_to)) {

            return transferToContract(_to, _value, empty);

        } else {

            return transferToAddress(_to, _value);

        }

    }



    /**

     * ERC-223 Transfer implementation

     * @param _to The address to send tokens to

     * @param _value The amount of tokens to send

     * @param _data Any accompanying data for contract transfers

     */



    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SMILE
Function name: transfer(address,uint256,bytes)
PC address: 3456
Estimated Gas Usage: 692 - 3374
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:265

 _value, _data);

        } else {

            return transferToAddress(_to, _value);

        }

    }



    /**

     * EIP-20 Transfer From implementation

     * @param _from The address to transfer tokens from

     * @param _to The address to transfer tokens to

     * @param _value The amount of tokens to transfer

     */



    function transferFrom(address _from

--------------------
Initial State:

Account: [CREATOR], balance: 0x400c0000001022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256,bytes), txdata: 0xbe45fd62, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SMILE
Function name: retrieveERC(address)
PC address: 3679
Estimated Gas Usage: 1373 - 1798
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:507
Initial State:

Account: [CREATOR], balance: 0x2000000800082201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: retrieveERC(address), txdata: 0xd4afc8b6, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SMILE
Function name: retrieveERC(address)
PC address: 3870
Estimated Gas Usage: 4759 - 74403
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:507
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: retrieveERC(address), txdata: 0xd4afc8b6800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SMILE
Function name: retrieveERC(address)
PC address: 4062
Estimated Gas Usage: 4759 - 74403
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:507
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: retrieveERC(address), txdata: 0xd4afc8b6800000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SMILE
Function name: retrieveERC(address)
PC address: 4062
Estimated Gas Usage: 4759 - 74403
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:507
Initial State:

Account: [CREATOR], balance: 0x1040044000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: retrieveERC(address), txdata: 0xd4afc8b6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SMILE
Function name: transferFrom(address,address,uint256)
PC address: 4179
Estimated Gas Usage: 1386 - 1861
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:309

mitigation optional)

     * @param _s

--------------------
Initial State:

Account: [CREATOR], balance: 0x100002025, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000013, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SMILE
Function name: transfer(address,uint256)
PC address: 4179
Estimated Gas Usage: 2222 - 2507
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:431

           length := extcodesize(_addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000004000202100b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000000101010101010101010101010101014008200108ff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SMILE
Function name: transfer(address,uint256,bytes)
PC address: 4179
Estimated Gas Usage: 2460 - 5332
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:431

           length := extcodesize(_addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x40041000000000501, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256,bytes), txdata: 0xbe45fd6200000000000000000600000001020104010102100401010604010107ffffff00eb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SMILE
Function name: distributeSMILE(address[],uint256)
PC address: 4179
Estimated Gas Usage: 10953 - 32625
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:489

ceProvider.transfer(msg.sender, interfaceProvider.balanceOf(addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x201200a0481808121, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeSMILE(address[],uint256), txdata: 0x8fd5a39efbffffffffffffffffffffff0000000000000000000000000000000000000000c0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SMILE
Function name: distributeSMILE(address[],uint256)
PC address: 4204
Estimated Gas Usage: 3160 - 4105
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c8a4d0c309adb239e8c2f34d396c548d.sol:489

 interfaceProvider.balanceOf(addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeSMILE(address[],uint256), txdata: 0x8fd5a39e, value: 0x0