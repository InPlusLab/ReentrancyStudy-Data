==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarketplaceProxy
Function name: createAuthorizeAndSell(bytes32,uint256,address,address)
PC address: 688
Estimated Gas Usage: 6852 - 145015
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:881
Initial State:

Account: [CREATOR], balance: 0x40000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuthorizeAndSell(bytes32,uint256,address,address), txdata: 0xd3ee65810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketplaceProxy
Function name: authorizeAndSell(bytes32,uint256,address,address)
PC address: 688
Estimated Gas Usage: 5202 - 108989
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:881
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: authorizeAndSell(bytes32,uint256,address,address), txdata: 0x18c6926e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarketplaceProxy
Function name: authorizeAndSell(bytes32,uint256,address,address)
PC address: 790
Estimated Gas Usage: 5202 - 108989
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:881
Initial State:

Account: [CREATOR], balance: 0x101000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: authorizeAndSell(bytes32,uint256,address,address), txdata: 0x18c6926e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarketplaceProxy
Function name: createAuthorizeAndSell(bytes32,uint256,address,address)
PC address: 790
Estimated Gas Usage: 6852 - 145015
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:881
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuthorizeAndSell(bytes32,uint256,address,address), txdata: 0xd3ee658100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarketplaceProxy
Function name: cancel(bytes32,address)
PC address: 891
Estimated Gas Usage: 1828 - 36299
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:881
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuthorizeAndSell(bytes32,uint256,address,address), txdata: 0xd3ee65810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: cancel(bytes32,address), txdata: 0x22cae9a20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarketplaceProxy
Function name: sell(bytes32,uint256,address)
PC address: 1021
Estimated Gas Usage: 1845 - 36411
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:881
Initial State:

Account: [CREATOR], balance: 0x2000000540024000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuthorizeAndSell(bytes32,uint256,address,address), txdata: 0xd3ee65810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: sell(bytes32,uint256,address), txdata: 0x90423e4400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Marketplace
Function name: itemsArr(uint256)
PC address: 1232
Estimated Gas Usage: 1051 - 1146
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:475

egistry = ProxyRegistryIn

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: itemsArr(uint256), txdata: 0x1c19eb230000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 1283
Estimated Gas Usage: 51410 - 331705
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:773

Fd3F31b7db2;

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e6, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarketplaceProxy
Function name: createAuthorizeAndSell(bytes32,uint256,address,address)
PC address: 1360
Estimated Gas Usage: 6852 - 145015
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:847

lace).putOnSale(_cup, _discount);

    }



    ///@dev 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuthorizeAndSell(bytes32,uint256,address,address), txdata: 0xd3ee6581000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketplaceProxy
Function name: createAuthorizeAndSell(bytes32,uint256,address,address)
PC address: 1360
Estimated Gas Usage: 6852 - 145015
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:847

lace).putOnSale(_cup, _discount);

    }



    ///@dev 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuthorizeAndSell(bytes32,uint256,address,address), txdata: 0xd3ee65810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 1659
Estimated Gas Usage: 51410 - 331705
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:543

Sale(_cup, ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x400001000000032, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 1711
Estimated Gas Usage: 51410 - 331705
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:543

, o

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 1791
Estimated Gas Usage: 51410 - 331705
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:543

, owner, _dis

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e6, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2054
Estimated Gas Usage: 51410 - 331705
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:553

o buy

    function buy(bytes32 _cup

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2054
Estimated Gas Usage: 51410 - 331705
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:553

o buy

    function buy(bytes32 _cup

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2160
Estimated Gas Usage: 51410 - 331705
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:555

) public payable {

        SaleItem storage item = items[_cup];



        require(item.active == true, "Check if cup is on sale");

        require(item.proxy == t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2178
Estimated Gas Usage: 51410 - 331705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:555

) public payable {

        SaleItem storage item = items[_cup];



        require(item.active == true, "Check if cup is on sale");

        require(item.proxy == t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2185
Estimated Gas Usage: 51410 - 331705
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:555

) public payable {

        SaleItem storage item = items[_cup];



        require(item.active == true, "Check if cup is on sale");

        require(item.proxy == t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2198
Estimated Gas Usage: 51410 - 331705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:555

) public payable {

        SaleItem storage item = items[_cup];



        require(item.active == true, "Check if cup is on sale");

        require(item.proxy == t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2207
Estimated Gas Usage: 51410 - 331705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:555

) public payable {

        SaleItem storage item = items[_cup];



        require(item.active == true, "Check if cup is on sale");

        require(item.proxy == t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2215
Estimated Gas Usage: 51410 - 331705
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:555

) public payable {

        SaleItem storage item = items[_cup];



        require(item.active == true, "Check if cup is on sale");

        require(item.proxy == t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2230
Estimated Gas Usage: 51410 - 331705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:555

) public payable {

        SaleItem storage item = items[_cup];



        require(item.active == true, "Check if cup is on sale");

        require(item.proxy == t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2234
Estimated Gas Usage: 51410 - 331705
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2239
Estimated Gas Usage: 51410 - 331705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2278
Estimated Gas Usage: 51410 - 331705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:563

e owner must stay t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2279
Estimated Gas Usage: 51410 - 331705
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:567

pPrice;

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2293
Estimated Gas Usage: 51410 - 331705
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:567

pPrice;

        ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f98100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Marketplace
Function name: putOnSale(bytes32,uint256)
PC address: 2296
Estimated Gas Usage: 51410 - 331705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8067c1a6340bb39a04d2ce73ee9abc19.sol:566


        uint cdpPrice;

        ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: putOnSale(bytes32,uint256), txdata: 0x4db4f981000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e9, value: 0x0