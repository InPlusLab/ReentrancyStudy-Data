==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DistributeTokens
Function name: distributeEth(address[],uint256[])
PC address: 241
Estimated Gas Usage: 3421 - 79219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:64

nlyOwner {
    for(uint i = 0; i < _addrs.length; ++i) {
        _addrs[i].transfer(_bals[i]);
    }
  }

  function distributeFixed(address[] _addrs, uint _amoutToEach) p

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeEth(address[],uint256[]), txdata: 0x401bd3feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DistributeTokens
Function name: distributeEth(address[],uint256[])
PC address: 264
Estimated Gas Usage: 3421 - 79219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:64

nlyOwner {
    for(uint i = 0; i < _addrs.length; ++i) {
        _addrs[i].transfer(_bals[i]);
    }
  }

  function distributeFixed(address[] _addrs, uint _amoutToEach) p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeEth(address[],uint256[]), txdata: 0x401bd3fe8000000000000000000000000000000000000000000000000000000000000004fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DistributeTokens
Function name: distributeVariable(address[],uint256[])
PC address: 453
Estimated Gas Usage: 6817 - 85351
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:58

s) public onlyOwner{
    for(uint i = 0; i < _addrs.length; ++i){
      tokenReward.transfer(_addrs[i],_bals[i]);
    }
  }
  
  function distributeEth(address[] _addrs, uint[] _bals) 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeVariable(address[],uint256[]), txdata: 0xa028aa1bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DistributeTokens
Function name: distributeVariable(address[],uint256[])
PC address: 476
Estimated Gas Usage: 6817 - 85351
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:58

s) public onlyOwner{
    for(uint i = 0; i < _addrs.length; ++i){
      tokenReward.transfer(_addrs[i],_bals[i]);
    }
  }
  
  function distributeEth(address[] _addrs, uint[] _bals) 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeVariable(address[],uint256[]), txdata: 0xa028aa1b8001100000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DistributeTokens
Function name: distributeEth(address[],uint256[])
PC address: 1011
Estimated Gas Usage: 1558 - 8189
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:70

, uint _

--------------------
Initial State:

Account: [CREATOR], balance: 0x54900002c308a8c6a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeEth(address[],uint256[]), txdata: 0x401bd3fe800000000000000000000000000000000000000000000000000000008000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DistributeTokens
Function name: distributeEth(address[],uint256[])
PC address: 1040
Estimated Gas Usage: 3421 - 79219
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:70

ed(address[] _addrs, uint _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeEth(address[],uint256[]), txdata: 0x401bd3fe82, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DistributeTokens
Function name: distributeVariable(address[],uint256[])
PC address: 1146
Estimated Gas Usage: 6817 - 85351
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:64

nction dist

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeVariable(address[],uint256[]), txdata: 0xa028aa1b80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DistributeTokens
Function name: distributeVariable(address[],uint256[])
PC address: 1201
Estimated Gas Usage: 2439 - 9070
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:64

_addrs, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x801001182101a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeVariable(address[],uint256[]), txdata: 0xa028aa1b800000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DistributeTokens
Function name: distributeVariable(address[],uint256[])
PC address: 1297
Estimated Gas Usage: 6817 - 85351
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:64

nction distributeEth(address[] _addrs, u

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeVariable(address[],uint256[]), txdata: 0xa028aa1b80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DistributeTokens
Function name: distributeVariable(address[],uint256[])
PC address: 1297
Estimated Gas Usage: 6817 - 85351
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:64

nction distributeEth(address[] _addrs, u

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeVariable(address[],uint256[]), txdata: 0xa028aa1b80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DistributeTokens
Function name: distributeFixed(address[],uint256)
PC address: 1453
Estimated Gas Usage: 6586 - 82161
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:78

ept ETH
  f

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeFixed(address[],uint256), txdata: 0xf09bfcc280, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DistributeTokens
Function name: distributeFixed(address[],uint256)
PC address: 1581
Estimated Gas Usage: 6586 - 82161
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:78

ept ETH
  function () payable public {}

  f

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeFixed(address[],uint256), txdata: 0xf09bfcc280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DistributeTokens
Function name: distributeFixed(address[],uint256)
PC address: 1581
Estimated Gas Usage: 6586 - 82161
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/817d59e2773f6e254d6fff97bbb13732.sol:78

ept ETH
  function () payable public {}

  f

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeFixed(address[],uint256), txdata: 0xf09bfcc280, value: 0x0