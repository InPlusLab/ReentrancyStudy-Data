==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KYCVerification
Function name: updateVerifcationBatch(address[],bool)
PC address: 232
Estimated Gas Usage: 15320 - 62600
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/26ab2912e41ead5e91f86badd4d8270c.sol:489

bool)

    {

        kycAddress[_kycAddress] = _status;

        

        emit LogKYCVerification(_kycAddress,_status);

        

        return true;

    }

    

    function isVerified(address _user) view public returns(bool)

    {

        return kycAddress[_user] == true; 

    }

}





contract FEXToken is Owned, BurnableToken {



    string public name = "SUREBANQA UTIL

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateVerifcationBatch(address[],bool), txdata: 0x6aa0f48fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FEXToken
Function name: multiTransfer(address[],uint256[])
PC address: 947
Estimated Gas Usage: 5077 - 46318
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/26ab2912e41ead5e91f86badd4d8270c.sol:1015

 = allocatedTreasuryFund;

        

        return true;

    }

    



    /**

      * @dev Release EAPs/SLIPs Fund Time Locked releasable every year at the rate of 25% per yr   

      *  Can only be called by authorized caller   

      */

    function releaseEAPFund() public onlyAuthCaller returns(bool)

    {

        /* Only 4 Milestone are to be released */

        require(EAPMilestoneReleased <= 4);

        require(all

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000000089415, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d545ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc08, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FEXToken
Function name: name()
PC address: 2520
Estimated Gas Usage: 2352 - 4093
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/26ab2912e41ead5e91f86badd4d8270c.sol:553

*  Fund Allocation  */

    uint allocatedEAPF

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FEXToken
Function name: multiTransfer(address[],uint256[])
PC address: 3349
Estimated Gas Usage: 5077 - 46318
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/26ab2912e41ead5e91f86badd4d8270c.sol:705

  owner = msg.sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d545, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FEXToken
Function name: symbol()
PC address: 5318
Estimated Gas Usage: 2880 - 4621
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/26ab2912e41ead5e91f86badd4d8270c.sol:557

 uint allocatedAirdropAndBou

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FEXToken
Function name: releaseTreasuryFund()
PC address: 6287
Estimated Gas Usage: 2689 - 2974
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/26ab2912e41ead5e91f86badd4d8270c.sol:1057

estingPercent).div(100);

            EAPMilestoneR

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: releaseTreasuryFund(), txdata: 0xe338080e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FEXToken
Function name: mintToken(address,uint256)
PC address: 7254
Estimated Gas Usage: 8392 - 30187
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/26ab2912e41ead5e91f86badd4d8270c.sol:941

  /**

      * @dev transfer 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(address,uint256), txdata: 0x79c650680000000000000000000000000000000000000000000000000000000000800104ffffffffffffffffffffffffffffffffffffffffffffffffffff80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FEXToken
Function name: releaseTreasuryFund()
PC address: 7254
Estimated Gas Usage: 2656 - 2941
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/26ab2912e41ead5e91f86badd4d8270c.sol:1057

div(100);

            EAPMilestone

--------------------
Initial State:

Account: [CREATOR], balance: 0x80001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: releaseTreasuryFund(), txdata: 0xe338080e, value: 0x0


