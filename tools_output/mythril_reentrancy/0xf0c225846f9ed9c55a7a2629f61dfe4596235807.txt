==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Orchestrator
Function name: addUniPair(address,address)
PC address: 731
Estimated Gas Usage: 1108 - 1203
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:309

eave the contract without an owner,
     * thereby removing any fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x22801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x24801, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x20800, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0
Caller: [SOMEGUY], function: addUniPair(address,address), txdata: 0x09058dea24242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Orchestrator
Function name: renounceOwnership()
PC address: 1023
Estimated Gas Usage: 1093 - 1188
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:309

eave the contract without an owner,
     * thereby removing any fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0
Caller: [SOMEGUY], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Orchestrator
Function name: setUniPairEnabled(uint256,bool)
PC address: 1185
Estimated Gas Usage: 1089 - 1184
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:309

eave the contract without an owner,
     * thereby removing any fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x40010000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0
Caller: [SOMEGUY], function: setUniPairEnabled(uint256,bool), txdata: 0x7d989f420d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1595
Estimated Gas Usage: 19130 - 178248
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:500

ock.timesta

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1666
Estimated Gas Usage: 19130 - 178248
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:500

ock.timestamp);
        }
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x10240004015080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1666
Estimated Gas Usage: 19130 - 178248
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:500

ock.timestamp);
        }
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1718
Estimated Gas Usage: 19130 - 178248
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:505

 < uniSyncs.length; 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1799
Estimated Gas Usage: 19130 - 178248
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:511

 }
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1876
Estimated Gas Usage: 19130 - 178248
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:511

 }
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1899
Estimated Gas Usage: 19130 - 178248
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:513
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1914
Estimated Gas Usage: 19130 - 178248
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:513
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1976
Estimated Gas Usage: 15885 - 140392
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:513
Initial State:

Account: [CREATOR], balance: 0x810800000c008e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 1987
Estimated Gas Usage: 19130 - 178248
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:513
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 2064
Estimated Gas Usage: 19130 - 178248
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:513
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 2091
Estimated Gas Usage: 19130 - 178248
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:513
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Orchestrator
Function name: deleteUniPair(uint256)
PC address: 2420
Estimated Gas Usage: 1090 - 1185
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:309

eave the contract without an owner,
     * thereby removing any fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x2060, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0
Caller: [SOMEGUY], function: deleteUniPair(uint256), txdata: 0xbb51de943030303030303030303030303030303030303030303030303030303030303030, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Orchestrator
Function name: uniSyncs(uint256)
PC address: 2941
Estimated Gas Usage: 1027 - 1122
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:406

(UniV2PairI)
    {
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: uniSyncs(uint256), txdata: 0xe11f56680000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Orchestrator
Function name: initialize(address,address,uint256,uint256)
PC address: 3205
Estimated Gas Usage: 42889 - 182984
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:448

ex)
    {
        UniPair memory instan

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,uint256,uint256), txdata: 0xeb990c590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Orchestrator
Function name: transferOwnership(address)
PC address: 3282
Estimated Gas Usage: 1151 - 1246
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/d3149ecccf7d9275763abed2a1aa5366.sol:309

eave the contract without an owner,
     * thereby removing any fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x903480000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: rebase(), txdata: 0xaf14052c, value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38bd8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8, value: 0x0