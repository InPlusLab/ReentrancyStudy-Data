==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DefaultRegistryAccessManager
Function name: confirmWrite(address,uint8,address) or confirmWrite(address,uint8,address)
PC address: 315
Estimated Gas Usage: 3810 - 73310
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:773
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: confirmWrite(address,uint8,address), txdata: 0x755fe57a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: confirmWrite(address,uint8,address), txdata: 0x755fe57a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a007a7a7a7a7a7a7a7a7a7a7a7a01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DefaultRegistryAccessManager
Function name: confirmWrite(address,uint8,address) or confirmWrite(address,uint8,address)
PC address: 612
Estimated Gas Usage: 3810 - 73310
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:773
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: confirmWrite(address,uint8,address), txdata: 0x755fe57a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: confirmWrite(address,uint8,address), txdata: 0x755fe57a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a007a7a7a7a7a7a7a7a7a7a7a7a01, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DefaultRegistryAccessManager
Function name: confirmWrite(address,uint8,address) or confirmWrite(address,uint8,address)
PC address: 612
Estimated Gas Usage: 3810 - 73310
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:773
Initial State:

Account: [CREATOR], balance: 0x10001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: confirmWrite(address,uint8,address), txdata: 0x755fe57a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DefaultRegistryAccessManager
Function name: confirmWrite(address,uint8,address) or confirmWrite(address,uint8,address)
PC address: 697
Estimated Gas Usage: 3705 - 72924
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:773
Initial State:

Account: [CREATOR], balance: 0x9a3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: confirmWrite(address,uint8,address), txdata: 0x755fe57a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: 0x72c68108a82e82617b93d1be0d7975d762035015
Function name: confirmWrite(address,uint8,address) or confirmWrite(address,uint8,address)
PC address: 887
Estimated Gas Usage: 5457 - 109614
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:763

 Attribute.AttributeType.ROLE_OPERATOR)) {

      return (_attribute != Attribute.AttributeType.ROLE_OPERATOR &&

              _attribute != Attribute.AttributeType.ROLE_MANAGE

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setAttribute(address,uint8,string), txdata: 0x3eb869f5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Registry
Function name: clearAttribute(address,uint8,string)
PC address: 1425
Estimated Gas Usage: 1415 - 4710
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:669

ttribute is non-zero

  function hasAttribute(

    address _who,

    Attribute.AttributeType _attribute

  )

    public

    view

    returns (bool)

  {

    return attributes[_who].value.checkBit(Attribute.toUint256(_attribute));

  }



  // Returns the exact value of the attribute, as well as its metadata

  function getAttributes(

    address _who

  )

    public

    view

    returns (uint256)

  {

    AttributeData memory _data = attributes[_who];

    return _data.value;

  }



  function setManager(RegistryAccessManager _accessManager) public onlyOwner {

    emit SetManager(acce

--------------------
Initial State:

Account: [CREATOR], balance: 0x2300000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: clearAttribute(address,uint8,string), txdata: 0x23423fd70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: clearAttribute(address,uint8,string)
PC address: 1655
Estimated Gas Usage: 11336 - 72088
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:703

ew

    returns (uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: clearAttribute(address,uint8,string), txdata: 0x23423fd70000000000000000000000000000000000000000000000000000000000000024, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: clearAttribute(address,uint8,string)
PC address: 1772
Estimated Gas Usage: 11336 - 72088
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:709

 AttributeData memory _data = attributes[_who];

    return _data.value;

  }



  function setManager

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: clearAttribute(address,uint8,string), txdata: 0x23423fd70000000000000000000000000000000000000000000000000000000000000024, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Registry
Function name: setAttribute(address,uint8,string)
PC address: 2386
Estimated Gas Usage: 1459 - 4754
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:621

earAttribute(

    address _who,

    Attribute.AttributeType _attribute,

    string _notes

  )

    public

  {

    bool _canWrite = accessManager.confirmWrite(

      _who,

      _attribute,

      msg.sender

    );

    require(_canWrite);



    // Get value of previous attribute before setting new attribute

    uint256 _tempVal = attributes[_who].value;



    attributes[_who] = AttributeData(

      _tempVal.clearBit(Attribute.toUint256(_attribute))

    );



    emit SetAttribute(_who, _attribute, false, _notes, msg.sender);

  }



  // Returns true if the uint256 value stored 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setAttribute(address,uint8,string), txdata: 0x3eb869f50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: setAttribute(address,uint8,string)
PC address: 2616
Estimated Gas Usage: 11377 - 72129
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:655

es[_who] = AttributeDa

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setAttribute(address,uint8,string), txdata: 0x3eb869f50000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: setAttribute(address,uint8,string)
PC address: 2733
Estimated Gas Usage: 11377 - 72129
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:657

empVal.clearBit(Attribute.toUint256(_attribute))

    );



    emit SetAttribute(_who, _attribute, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setAttribute(address,uint8,string), txdata: 0x3eb869f50000000000000000000000000000000000000000000000000000000000000021, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Registry
Function name: hasAttribute(address,uint8)
PC address: 4331
Estimated Gas Usage: 274 - 369
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/49c795e2be27f19841cf44501d07dbdd.sol:749

turns (bool)

  {

    Registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: hasAttribute(address,uint8), txdata: 0x1ca451a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e, value: 0x0