==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MicroDAO
Function name: constructor
PC address: 270
Estimated Gas Usage: 30571 - 134948
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:146

+(86400*direct

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SpendingRequest
Function name: addOption(string,address,uint256)
PC address: 538
Estimated Gas Usage: 46513 - 211877
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:99

ator) throw;
		if(voting_started) throw;
		options.push(option(_description,_payout_to,_amount,0,0));
	}	
}
contract MicroDAO
{
	string public directorNode;
	address public director;
	string public directo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addOption(string,address,uint256), txdata: 0x227f9633ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SpendingRequest
Function name: setDescription(string)
PC address: 1465
Estimated Gas Usage: 17831 - 81217
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:51

if(voting_started) throw;
		description=_description;		
	}
	
	function setDAO(address _dao) {
		if(msg.sender!

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000040029, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setDescription(string), txdata: 0x90c3f38fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SpendingRequest
Function name: setDescription(string)
PC address: 1486
Estimated Gas Usage: 7691 - 30891
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:51

if(voting_started) throw;
		description=_description;		
	}
	
	function setDAO(address _dao) {
		if(msg.sender!

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080100000100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setDescription(string), txdata: 0x90c3f38fb4, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MicroDAO
Function name: setDirectorNode(string)
PC address: 1874
Estimated Gas Usage: 23480 - 106866
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:146

);
	} 
	
	function blockTransfer(address a,uint256 until) {
		bool found=false;
		for(var i=0;((i<allowances.length)&&(found==false));i++) {
			if(allo

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDirectorNode(string), txdata: 0x38eaf913ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MicroDAO
Function name: setDirectorNode(string)
PC address: 1895
Estimated Gas Usage: 13340 - 56540
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:146

);
	} 
	
	function blockTransfer(address a,uint256 until) {
		bool found=false;
		for(var i=0;((i<allowances.length)&&(found==false));i++) {
			if(allo

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDirectorNode(string), txdata: 0x38eaf913a6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SpendingRequest
Function name: options(uint256)
PC address: 2445
Estimated Gas Usage: 1097 - 1192
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:30

 address public dao;
	 m

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000100040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: options(uint256), txdata: 0x409e2205, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SpendingRequest
Function name: execute()
PC address: 2593
Estimated Gas Usage: 1134 - 1229
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:67

(msg.sender!=dao)&&(msg.se

--------------------
Initial State:

Account: [CREATOR], balance: 0x553c6b97ca7ffe7a4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x839040350001009, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: execute(), txdata: 0x61461954, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SpendingRequest
Function name: execute()
PC address: 2608
Estimated Gas Usage: 1959 - 2054
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:67

!=creator)) throw;
		for(var 

--------------------
Initial State:

Account: [CREATOR], balance: 0x200800004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: execute(), txdata: 0x61461954, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MicroDAO
Function name: setJurisdication(string)
PC address: 3028
Estimated Gas Usage: 8713 - 32336
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:209

sg.sender!=director) throw;	
		SpendingRequest s = SpendingRequest(spendingRequest);		
		if(s.executed()) throw;
		if(s.vote_until()<now) th

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setJurisdication(string), txdata: 0x7f0c949cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MicroDAO
Function name: setJurisdication(string)
PC address: 3049
Estimated Gas Usage: 8746 - 32276
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:209

sg.sender!=director) throw;	
		SpendingRequest s = SpendingRequest(spendingRequest);		
		if(s.executed()) throw;
		if(s.vote_until()<now) th

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setJurisdication(string), txdata: 0x7f0c949ce8, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SpendingRequest
Function name: setRequestUntil(uint8)
PC address: 3428
Estimated Gas Usage: 7183 - 27938
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:94

nder!=creator) throw;
		i

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setRequestUntil(uint8), txdata: 0x718bd6dd0000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SpendingRequest
Function name: setVotetUntil(uint8)
PC address: 3729
Estimated Gas Usage: 7227 - 27982
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:98

256 _amount) {
		if(msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setVotetUntil(uint8), txdata: 0x7318b4530000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SpendingRequest
Function name: vote(uint256,bool)
PC address: 3965
Estimated Gas Usage: 2341 - 2956
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:84

	if(!veto) options[optio

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: vote(uint256,bool), txdata: 0xc9d27afe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SpendingRequest
Function name: setDAO(address)
PC address: 5105
Estimated Gas Usage: 11542 - 68037
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:64

 execute(){
		if(vot

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDAO(address), txdata: 0xe73a914c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SpendingRequest
Function name: setDAO(address)
PC address: 5148
Estimated Gas Usage: 11542 - 68037
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:65

eturn;
	

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDAO(address), txdata: 0xe73a914c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SpendingRequest
Function name: setDAO(address)
PC address: 5201
Estimated Gas Usage: 11542 - 68037
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:65

eturn;
	

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDAO(address), txdata: 0xe73a914c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: SpendingRequest
Function name: addOption(string,address,uint256)
PC address: 5324
Estimated Gas Usage: 36373 - 161551
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addOption(string,address,uint256), txdata: 0x227f963380, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: SpendingRequest
Function name: addOption(string,address,uint256)
PC address: 5338
Estimated Gas Usage: 36373 - 161551
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addOption(string,address,uint256), txdata: 0x227f9633a0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: SpendingRequest
Function name: setDescription(string)
PC address: 5452
Estimated Gas Usage: 7691 - 30891
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDescription(string), txdata: 0x90c3f38f81, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: SpendingRequest
Function name: setDescription(string)
PC address: 5466
Estimated Gas Usage: 7691 - 30891
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDescription(string), txdata: 0x90c3f38f80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MicroDAO
Function name: bookings(uint256)
PC address: 6101
Estimated Gas Usage: 1053 - 1148
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:139

tialFunding=true;
		direc

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bookings(uint256), txdata: 0x1dab301e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MicroDAO
Function name: allowances(uint256)
PC address: 8417
Estimated Gas Usage: 1273 - 1368
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:131

terpart;
		string text;
	}
	booking[

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: allowances(uint256), txdata: 0x5b69f2ca, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MicroDAO
Function name: myFundsExpireIn(uint256)
PC address: 8504
Estimated Gas Usage: 6571 - 27046
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:245

ckExpiredfunds() {
	

--------------------
Initial State:

Account: [CREATOR], balance: 0x2002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: myFundsExpireIn(uint256), txdata: 0x6e658fbe02, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MicroDAO
Function name: myFundsExpireIn(uint256)
PC address: 8506
Estimated Gas Usage: 6571 - 27046
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:245

n checkExpiredfunds() {
		

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: myFundsExpireIn(uint256), txdata: 0x6e658fbe01, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MicroDAO
Function name: myFundsExpireIn(uint256)
PC address: 8579
Estimated Gas Usage: 1433 - 1718
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:246

nitialFunding) return;
		for(var i=0;i<funders.length;i++) {
			if((fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x20804000011222093, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: myFundsExpireIn(uint256), txdata: 0x6e658fbe, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MicroDAO
Function name: transfer(address,uint256)
PC address: 9507
Estimated Gas Usage: 1702 - 1987
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:262

                   // Subtract from the s

--------------------
Initial State:

Account: [CREATOR], balance: 0x98b8000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MicroDAO
Function name: funders(uint256)
PC address: 10672
Estimated Gas Usage: 1669 - 1764
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:130

256 spending;
		address 

--------------------
Initial State:

Account: [CREATOR], balance: 0x84001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: funders(uint256), txdata: 0xdc0d3dff, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MicroDAO
Function name: transferDirector(address)
PC address: 10897
Estimated Gas Usage: 1717 - 1812
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:182

;
		}
	}
	function setdirectorName(string name) {
		if(msg.sender!=director) t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferDirector(address), txdata: 0xddd41ef6, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MicroDAO
Function name: transferDirector(address)
PC address: 10972
Estimated Gas Usage: 1734 - 1829
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/6019e652ac9595aeda6f4d29db67b7d4.sol:182

rue;
		}
	}
	function setdirectorName(string name) {
		if(msg.sender!=director) throw;
		if(!initialFunding) throw;
		directorName=name;
	}
	
	function setFundingGoal(uint256 goal) {
		if(ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferDirector(address), txdata: 0xddd41ef6, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: MicroDAO
Function name: setDirectorNode(string)
PC address: 11401
Estimated Gas Usage: 13340 - 56540
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDirectorNode(string), txdata: 0x38eaf913c0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: MicroDAO
Function name: setDirectorNode(string)
PC address: 11415
Estimated Gas Usage: 13340 - 56540
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setDirectorNode(string), txdata: 0x38eaf91392, value: 0x0