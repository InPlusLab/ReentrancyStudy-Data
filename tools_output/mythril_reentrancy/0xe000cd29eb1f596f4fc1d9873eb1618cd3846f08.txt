==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: proposals(uint256)
PC address: 2072
Estimated Gas Usage: 1014 - 1109
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:259

 5;

    // Start with a pa

--------------------
Initial State:

Account: [CREATOR], balance: 0x18eb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: proposals(uint256), txdata: 0x013cf08b80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: proposalReason(uint256)
PC address: 2517
Estimated Gas Usage: 1061 - 1156
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:541
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: proposalReason(uint256), txdata: 0x1cbea83d80, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vote
Function name: withdraw(uint256)
PC address: 2956
Estimated Gas Usage: 2085 - 2560
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:327

he contract. This will lock the user's deposit

  // until the voting ends fo

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vote
Function name: withdraw(uint256)
PC address: 3420
Estimated Gas Usage: 10735 - 66577
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:331

ns away and use them to vote agai

--------------------
Initial State:

Account: [CREATOR], balance: 0x10c000000103024, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: proposalVotes(uint256)
PC address: 4384
Estimated Gas Usage: 1292 - 3974
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:541
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: proposalVotes(uint256), txdata: 0x544ffc9c80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: proposalTarget(uint256)
PC address: 4519
Estimated Gas Usage: 1171 - 1266
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:541
Initial State:

Account: [CREATOR], balance: 0xc1000100000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: proposalTarget(uint256), txdata: 0x5dc4d8a680, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: vote(uint256,uint256,uint256)
PC address: 4846
Estimated Gas Usage: 1290 - 1385
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:349

ender].lockedUntil = proposals[proposalId].deadline;

    }

    // Track vote counts to ensure voters can only vote their deposited tokens

    proposals[proposalId].votes[msg.sender] = proposals[proposalId].votes[msg.sender].add(yeas).add(nays);

    require(proposals[proposalId].votes[msg.sender] <= deposits[msg.sender].balance, "Insufficient balance");



    // Presumably only one of these will change.

    proposals[proposalId].yeas = proposals[proposalId].yeas.add(yeas);

    proposals[proposalId].nays = proposals[proposalId].nays.add(nays);



    emit Vote(proposalId, msg.sender, yeas, nays, proposals[proposalId].yeas, proposals[proposalId].nays);

  }



  // depositAndVote allows users to call deposit() and vote() in a single

  // transaction.

  function depositAndVote(uint proposalId, uint yeas, uint nays) external {

    deposit(yeas.add(nays));

    vote(proposalId, yeas, nays);

  }



  // Authorized proposers may issue proposals. They must provide the contract

  // data, the target contract, and a reason

--------------------
Initial State:

Account: [CREATOR], balance: 0x341, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: vote(uint256,uint256,uint256), txdata: 0x8a6655d680, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: depositAndVote(uint256,uint256,uint256)
PC address: 4846
Estimated Gas Usage: 10118 - 65675
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:397

poser");

    require(data.l

--------------------
Initial State:

Account: [CREATOR], balance: 0x200060002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositAndVote(uint256,uint256,uint256), txdata: 0x88f34bc2c5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vote
Function name: vote(uint256,uint256,uint256)
PC address: 4872
Estimated Gas Usage: 2174 - 2364
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:353

 vote counts to ensure voters can only vote their deposited tokens

    proposals[proposalId].votes[m

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000024003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: vote(uint256,uint256,uint256), txdata: 0x8a6655d6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: proposalData(uint256)
PC address: 6060
Estimated Gas Usage: 1259 - 1354
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:533

ls[proposalId].yeas;

    votes[1] = proposals[proposalId].nays;

    return votes;

  }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0xff42, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: proposalData(uint256), txdata: 0x96dea93680, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Vote
Function name: proposalData(uint256)
PC address: 6092
Estimated Gas Usage: 5391 - 7605
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:537

 votes;

  }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1040000009002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: proposalData(uint256), txdata: 0x96dea936, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Vote
Function name: proposalData(uint256)
PC address: 6144
Estimated Gas Usage: 5391 - 7605
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:537

 votes;

  }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1040000009002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: proposalData(uint256), txdata: 0x96dea936, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vote
Function name: deposit(uint256)
PC address: 6489
Estimated Gas Usage: 9143 - 64700
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:311

nt units) external {

    require(deposits[msg.sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f25, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vote
Function name: deposit(uint256)
PC address: 6732
Estimated Gas Usage: 9143 - 64700
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:315

eposits[msg.sender].lockedUn

--------------------
Initial State:

Account: [CREATOR], balance: 0x69140102024441, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f25, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vote
Function name: deposit(uint256)
PC address: 6815
Estimated Gas Usage: 9143 - 64700
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:313

cient balance");

    require(deposits[msg.sender].lockedUntil < block

--------------------
Initial State:

Account: [CREATOR], balance: 0x69140102024441, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f25, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: proposalDeadline(uint256)
PC address: 6835
Estimated Gas Usage: 1303 - 1398
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:529

nction proposalVotes(uint proposalId) public view returns (uint[]) {

    uint[] memory votes = new uint[](2);

    votes[0]

--------------------
Initial State:

Account: [CREATOR], balance: 0xc108000001f603, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: proposalDeadline(uint256), txdata: 0xc01f9e3780, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Vote
Function name: execute(uint256)
PC address: 7248
Estimated Gas Usage: 1555 - 2408
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1e00000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: execute(uint256), txdata: 0xfe0d94c180, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: depositAndVote(uint256,uint256,uint256)
PC address: 8504
Estimated Gas Usage: 519 - 614
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:397

sg.sender], "I

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000022042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: depositAndVote(uint256,uint256,uint256), txdata: 0x88f34bc20000000000000000000000000000000000000000000000000000000000000000af194cb562a94655ae6a20a7d7420154bd5e9c3c9242495460c377889668081d84, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vote
Function name: vote(uint256,uint256,uint256)
PC address: 8504
Estimated Gas Usage: 13606 - 34651
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7a3ca379d5395d96b5f142c807ae90b5.sol:365

ys.add(nays);



    emit Vote(proposalId, msg.sender, yeas

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000018802818, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: vote(uint256,uint256,uint256), txdata: 0x8a6655d60000000000000000000000000000000000000000000000000000000000000000f4516a03a60b7bfb5dc00b9d4510d8163d10c722b59f8ae1ded0250400801c0010, value: 0x0