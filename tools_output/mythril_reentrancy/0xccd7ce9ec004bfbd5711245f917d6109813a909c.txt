==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Exchange
Function name: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[])
PC address: 686
Estimated Gas Usage: 542 - 637
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1673

  }

    }



    /**

    * @dev Internal function to check if the volume capacity is reached.

    * @return Whether the volume is reached or not.

    */

    function isVolumeReached()

        internal

        view

        returns(bool)

    {

        return dailyVolume >= dailyVolumeCap;

    }



    /**

    * @dev Private function to determine today's index

    * @return uint256 of today's index.

    */

    function today()

        private

        view

        returns(uint256)

    {

        return block.timestam

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[]), txdata: 0x86d8aab4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: fallback
PC address: 1267
Estimated Gas Usage: 11613 - 70167
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1337

bytes)

    * @param _s bytes32 part of the 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdrawTokens(address,uint256), txdata: 0x06b091f9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: fallback
PC address: 1474
Estimated Gas Usage: 11613 - 70167
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1347

SellAmount,

        uint8 _v

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000a0088, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawTokens(address,uint256), txdata: 0x06b091f9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: depositTokensFor(address,uint256,address)
PC address: 2325
Estimated Gas Usage: 10776 - 68715
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1187

l

    {

        address user = msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x40083001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositTokensFor(address,uint256,address), txdata: 0x62a49ae3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Exchange
Function name: depositTokens(address,uint256)
PC address: 2325
Estimated Gas Usage: 10804 - 68743
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1187

l

    {

        address user = msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x42000000000020024, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: depositTokens(address,uint256), txdata: 0x66168bd7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[])
PC address: 2637
Estimated Gas Usage: 695 - 3282
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1673

  }

    }



    /**

    * @dev Internal function to check if the volume capacity is reached.

    * @return Whether the volume is reached or not.

    */

    function isVolumeReached()

        internal

        view

        returns(bool)

    {

        return dailyVolume >= dailyVolumeCap;

    }



    /**

    * @dev Private function to determine today's index

    * @return uint256 of today's index.

    */

    function today()

        private

        view

        returns(uint256)

    {

        return block.timestam

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[]), txdata: 0x86d8aab4800002000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[])
PC address: 2692
Estimated Gas Usage: 843 - 5922
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1673

  }

    }



    /**

    * @dev Internal function to check if the volume capacity is reached.

    * @return Whether the volume is reached or not.

    */

    function isVolumeReached()

        internal

        view

        returns(bool)

    {

        return dailyVolume >= dailyVolumeCap;

    }



    /**

    * @dev Private function to determine today's index

    * @return uint256 of today's index.

    */

    function today()

        private

        view

        returns(uint256)

    {

        return block.timestam

--------------------
Initial State:

Account: [CREATOR], balance: 0x1800100110000091, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[]), txdata: 0x86d8aab480000080000000000000000000000000000000000000000000000000000000008000000000000000000000000fffffffffffffffffffffffffffffffffffffe880, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[])
PC address: 2716
Estimated Gas Usage: 906 - 5985
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1673

  }

    }



    /**

    * @dev Internal function to check if the volume capacity is reached.

    * @return Whether the volume is reached or not.

    */

    function isVolumeReached()

        internal

        view

        returns(bool)

    {

        return dailyVolume >= dailyVolumeCap;

    }



    /**

    * @dev Private function to determine today's index

    * @return uint256 of today's index.

    */

    function today()

        private

        view

        returns(uint256)

    {

        return block.timestam

--------------------
Initial State:

Account: [CREATOR], balance: 0x232e62cc20aec00c4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[]), txdata: 0x86d8aab480020180104002400408024040800404042080404001010201800801018040028000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Exchange
Function name: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[])
PC address: 2738
Estimated Gas Usage: 966 - 6045
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1673

  }

    }



    /**

    * @dev Internal function to check if the volume capacity is reached.

    * @return Whether the volume is reached or not.

    */

    function isVolumeReached()

        internal

        view

        returns(bool)

    {

        return dailyVolume >= dailyVolumeCap;

    }



    /**

    * @dev Private function to determine today's index

    * @return uint256 of today's index.

    */

    function today()

        private

        view

        returns(uint256)

    {

        return block.timestam

--------------------
Initial State:

Account: [CREATOR], balance: 0x440481204220a8404, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cancelMultipleOrders(address[3][],uint256[3][],uint8[],bytes32[],bytes32[]), txdata: 0x86d8aab40000000000000000000000000000000000000000000000000000000000000024bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec800000000000000000000000000000000000000000000000000000000000000affffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: depositTokensFor(address,uint256,address)
PC address: 4467
Estimated Gas Usage: 10776 - 68715
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1233

Address,

        uint256 _amount

    )

        external



--------------------
Initial State:

Account: [CREATOR], balance: 0x22084, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositTokensFor(address,uint256,address), txdata: 0x62a49ae3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Exchange
Function name: depositTokens(address,uint256)
PC address: 4467
Estimated Gas Usage: 10804 - 68743
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/021a11c714f2835636c5b6e3d649bbe1.sol:1233

Address,

        uint256 _amount

    )

        external



--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositTokens(address,uint256), txdata: 0x66168bd7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0


