==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: creatorProxy
Function name: fallback
PC address: 281
Estimated Gas Usage: 1745 - 36216
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21511f5b93688bf7c5dd6a905dcc9865.sol:253

ddress public receiver = 0xD906Cecf64772ae28153Bd37b433

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: proxyCall(address,address), txdata: 0x29c5f9f9, value: 0x0
Caller: [SOMEGUY], function: proxyCall(address,address), txdata: 0x29c5f9f90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LetsBreakThings
Function name: verifyBlockHash(string,uint256)
PC address: 435
Estimated Gas Usage: 4483 - 11715
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21511f5b93688bf7c5dd6a905dcc9865.sol:207

      return(hash1, hash2) ;

    }

    

}



/// @dev now lets try this via a proxy



/// @dev creator proxy calls the target function

/// @dev same test, same tx.origin, different msg.sender

contract creatorProxy {

    function proxyCa

--------------------
Initial State:

Account: [CREATOR], balance: 0x21, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: verifyBlockHash(string,uint256), txdata: 0xfccc7914ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: LetsBreakThings
Function name: checkBalanceSendEth(address)
PC address: 673
Estimated Gas Usage: 1076 - 1831
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21511f5b93688bf7c5dd6a905dcc9865.sol:133

        



        /// transfer recipient sma

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: checkBalanceSendEth(address), txdata: 0x82bc92aa, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LetsBreakThings
Function name: verifyBlockHash(string,uint256)
PC address: 1068
Estimated Gas Usage: 4483 - 11715
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x400000420f7f88, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: verifyBlockHash(string,uint256), txdata: 0xfccc791480, value: 0x0


