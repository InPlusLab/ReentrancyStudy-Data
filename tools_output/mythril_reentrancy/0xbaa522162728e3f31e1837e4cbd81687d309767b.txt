==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MerkleDistributor
Function name: createAirdrop(address,bytes32,address,uint256) or createAirdrop(address,bytes32,address,uint256)
PC address: 1422
Estimated Gas Usage: 28629 - 145573
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:722

 uint256 mask = (1 << claimedBitIndex);
        return claimedW

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAirdrop(address,bytes32,address,uint256), txdata: 0x4b89eaa6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000400000000000000000000000000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MerkleDistributor
Function name: createAirdrop(address,bytes32,address,uint256) or createAirdrop(address,bytes32,address,uint256)
PC address: 1569
Estimated Gas Usage: 28629 - 145573
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:726

vate {
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAirdrop(address,bytes32,address,uint256), txdata: 0x4b89eaa6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0040008000000000800000008000808008008000800000800000000800008000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MerkleDistributor
Function name: createAirdrop(address,bytes32,address,uint256) or createAirdrop(address,bytes32,address,uint256)
PC address: 1599
Estimated Gas Usage: 28629 - 145573
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:727

claimedWordIndex = index / 256;
        ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAirdrop(address,bytes32,address,uint256), txdata: 0x4b89eaa6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0040008000000000800000008000808008008000800000800000000800008000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MerkleDistributor
Function name: createAirdrop(address,bytes32,address,uint256) or createAirdrop(address,bytes32,address,uint256)
PC address: 1652
Estimated Gas Usage: 28629 - 145573
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:727

claimedWordIndex = index / 256;
        ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAirdrop(address,bytes32,address,uint256), txdata: 0x4b89eaa6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0040008000000000800000008000808008008000800000800000000800008000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MerkleDistributor
Function name: createAirdrop(address,bytes32,address,uint256) or createAirdrop(address,bytes32,address,uint256)
PC address: 1681
Estimated Gas Usage: 28629 - 145573
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:728

edBitIndex = index % 256;
        claimedBit

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAirdrop(address,bytes32,address,uint256), txdata: 0x4b89eaa6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0040008000000000800000008000808008008000800000800000000800008000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MerkleDistributor
Function name: createAirdrop(address,bytes32,address,uint256) or createAirdrop(address,bytes32,address,uint256)
PC address: 1734
Estimated Gas Usage: 28629 - 145573
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:728

edBitIndex = index % 256;
        claimedBit

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAirdrop(address,bytes32,address,uint256), txdata: 0x4b89eaa6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0040008000000000800000008000808008008000800000800000000800008000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MerkleDistributor
Function name: createAirdrop(address,bytes32,address,uint256) or createAirdrop(address,bytes32,address,uint256)
PC address: 1758
Estimated Gas Usage: 28629 - 145573
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:729

Index][claimedWordIndex] = claimedBitMap[aird

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAirdrop(address,bytes32,address,uint256), txdata: 0x4b89eaa6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0040008000000000800000008000808008008000800000800000000800008000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MerkleDistributor
Function name: createAirdrop(address,bytes32,address,uint256) or createAirdrop(address,bytes32,address,uint256)
PC address: 1765
Estimated Gas Usage: 28629 - 145573
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:729

laimedWordInde

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAirdrop(address,bytes32,address,uint256), txdata: 0x4b89eaa6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0040008000000000800000008000808008008000800000800000000800008000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MerkleDistributor
Function name: createAirdrop(address,bytes32,address,uint256) or createAirdrop(address,bytes32,address,uint256)
PC address: 1776
Estimated Gas Usage: 28629 - 145573
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:729

laimedWordInde

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAirdrop(address,bytes32,address,uint256), txdata: 0x4b89eaa6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0040008000000000800000008000808008008000800000800000000800008000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MerkleDistributor
Function name: rescue(address)
PC address: 5632
Estimated Gas Usage: 5512 - 77459
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/f5f6a24e4b3b778aa92d71459e0118cc.sol:202

],
     * but performing a static

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000043002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rescue(address), txdata: 0x839006f2d9e2c184dac6c3a8ba37c8225d30ac291d7ab6c3c2ed174d0ba4cf901e84dded, value: 0x0