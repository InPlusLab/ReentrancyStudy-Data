==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateOutput(address,address,uint256)
PC address: 1766
Estimated Gas Usage: 8861 - 148145
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:163

IUniswapExchange(to_token_exchange);


--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0202020202020202020202020202020202020202020202020202020202020202020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getConversionRateOutput(address,address,uint256), txdata: 0x505069c8000000000000000000000000020202020202020202020202020202010101010100000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateOutput(address,address,uint256)
PC address: 2122
Estimated Gas Usage: 8861 - 148145
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:170

rom_token_exchange = uniswap_factory.getExch

--------------------
Initial State:

Account: [CREATOR], balance: 0x40042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getConversionRateOutput(address,address,uint256), txdata: 0x505069c8000000000000000000000000020202020202020202020202020202010201010100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateOutput(address,address,uint256)
PC address: 2226
Estimated Gas Usage: 8861 - 148145
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:172

UniswapExchange

--------------------
Initial State:

Account: [CREATOR], balance: 0x901080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getConversionRateOutput(address,address,uint256), txdata: 0x505069c80000000000000000000000000202020202020202020202020202020101010101000000000000000000000000ec, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateOutput(address,address,uint256)
PC address: 2412
Estimated Gas Usage: 8861 - 148145
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:172

UniswapExchange(from_token_exchange);
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0202020202020202020202020202020202020202020202020202020202020202020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getConversionRateOutput(address,address,uint256), txdata: 0x505069c8000000000000000000000000020202020202020202020202020202010101010100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateOutput(address,address,uint256)
PC address: 2412
Estimated Gas Usage: 8861 - 148145
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:172

UniswapExchange(from_token_exchange);
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x901080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getConversionRateOutput(address,address,uint256), txdata: 0x505069c80000000000000000000000000202020202020202020202020202020101010101000000000000000000000000ec, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateOutput(address,address,uint256)
PC address: 2768
Estimated Gas Usage: 4691 - 74521
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:179

owner,, uint pricePerSecond, IMarketplace.C

--------------------
Initial State:

Account: [CREATOR], balance: 0x901080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getConversionRateOutput(address,address,uint256), txdata: 0x505069c800000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateOutput(address,address,uint256)
PC address: 2768
Estimated Gas Usage: 8861 - 148145
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:179

owner,, uint pricePerSecond, IMarketplace.C

--------------------
Initial State:

Account: [CREATOR], balance: 0x901080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getConversionRateOutput(address,address,uint256), txdata: 0x505069c80000000000000000000000000202020202020202020202020202020101010101000000000000000000000000ec, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateInput(address,address,uint256)
PC address: 3243
Estimated Gas Usage: 8883 - 148167
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:139

      IUniswapExchange exfrom = IUniswa

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getConversionRateInput(address,address,uint256), txdata: 0x85b3b9770000000000000000000000000202020202020202020202020202020101010101000000000000000000000000bd, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateInput(address,address,uint256)
PC address: 3599
Estimated Gas Usage: 8883 - 148167
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:145


            address to_token_exchange = uni

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getConversionRateInput(address,address,uint256), txdata: 0x85b3b977000000000000000000000000020202020202020202020202020202010101010100000000000000000000000055, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateInput(address,address,uint256)
PC address: 3703
Estimated Gas Usage: 8883 - 148167
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:148

xchange exto = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getConversionRateInput(address,address,uint256), txdata: 0x85b3b977000000000000000000000000000000000000000000000000000000110101010100000000000000000000000003, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateInput(address,address,uint256)
PC address: 3889
Estimated Gas Usage: 8883 - 148167
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:148

xchange exto = IUniswapExchange(to_to

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getConversionRateInput(address,address,uint256), txdata: 0x85b3b9770000000000000000000000000202020202020202020202020202020101010101000000000000000000000000bd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateInput(address,address,uint256)
PC address: 3889
Estimated Gas Usage: 8883 - 148167
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:148

xchange exto = IUniswapExchange(to_to

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getConversionRateInput(address,address,uint256), txdata: 0x85b3b977000000000000000000000000000000000000000000000000000000110101010100000000000000000000000003, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateInput(address,address,uint256)
PC address: 4245
Estimated Gas Usage: 4713 - 74543
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:154

on getConversionRateOutput(address from_

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getConversionRateInput(address,address,uint256), txdata: 0x85b3b977000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapAdaptor
Function name: getConversionRateInput(address,address,uint256)
PC address: 4245
Estimated Gas Usage: 8883 - 148167
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fce6fedc22cebbaa54a54bead93fdb46.sol:154

on getConversionRateOutput(address from_

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getConversionRateInput(address,address,uint256), txdata: 0x85b3b977000000000000000000000000000000000000000000000000000000110101010100000000000000000000000003, value: 0x0