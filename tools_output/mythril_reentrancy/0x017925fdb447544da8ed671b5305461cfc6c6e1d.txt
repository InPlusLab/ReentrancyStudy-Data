==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountRegistryLogic
Function name: removeAddressFromAccountFor(address)
PC address: 5111
Estimated Gas Usage: 7796 - 78261
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:787
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: removeAddressFromAccountFor(address), txdata: 0xdc628c04, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountRegistryLogic
Function name: removeAddressFromAccountFor(address)
PC address: 5175
Estimated Gas Usage: 7796 - 78261
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:787
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: removeAddressFromAccountFor(address), txdata: 0xdc628c04, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountRegistryLogic
Function name: removeAddressFromAccountFor(address)
PC address: 5361
Estimated Gas Usage: 7796 - 78261
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:787
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: removeAddressFromAccountFor(address), txdata: 0xdc628c04, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AccountRegistryLogic
Function name: removeAddressFromAccountFor(address)
PC address: 5361
Estimated Gas Usage: 7796 - 78261
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:787
Initial State:

Account: [CREATOR], balance: 0x40000000002010002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeAddressFromAccountFor(address), txdata: 0xdc628c04, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountRegistryLogic
Function name: removeAddressFromAccountFor(address)
PC address: 5361
Estimated Gas Usage: 7796 - 78261
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:787
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: removeAddressFromAccountFor(address), txdata: 0xdc628c04, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountRegistryLogic
Function name: createAccount(address)
PC address: 10314
Estimated Gas Usage: 7846 - 78311
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:633

ake them one time use

   */

  fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: createAccount(address), txdata: 0x9859387b00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountRegistryLogic
Function name: createAccount(address)
PC address: 10341
Estimated Gas Usage: 7846 - 78311
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:638


    add

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: createAccount(address), txdata: 0x9859387b00000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AccountRegistryLogic
Function name: createAccount(address)
PC address: 10527
Estimated Gas Usage: 7846 - 78311
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:638


    address _newAddress,

    bytes _

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: createAccount(address), txdata: 0x9859387b00000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AccountRegistryLogic
Function name: createAccount(address)
PC address: 10527
Estimated Gas Usage: 7846 - 78311
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:638


    address _newAddress,

    bytes _

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createAccount(address), txdata: 0x9859387b00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AccountRegistryLogic
Function name: createAccount(address)
PC address: 10527
Estimated Gas Usage: 7846 - 78311
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f674e4deee69af6e4a0451272c7e445f.sol:638


    address _newAddress,

    bytes _

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: createAccount(address), txdata: 0x9859387b00000000000000000000000001, value: 0x0