==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ECP_Token
Function name: sendToMultipleAccount(address[],uint256[])
PC address: 776
Estimated Gas Usage: 1633 - 7606
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2ad4356af3c41bbe5cfc97256b92da46.sol:125

ken To Multiple Account At A Time

    {

        uint256 i = 0;

        while (i < dests.length) {



                if(remaining > 0)

                {

                     _transfer(owner, dests[i], values[i]);  // Transfer Token Via Internal Transfer Function

                     TokenTransferEvent(owner, dests[i], values[i],'MultipleAccount'); // Raise Event After Transfer

                }

                else

                {

                    revert();

                }



            i += 1;

        }

        return(i);

    }





    function sendTokenToSingleAccount(address receiversAddress ,uint256 amountToTransfer) public onlyOwner  // Function To Send Token To Single Account At

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendToMultipleAccount(address[],uint256[]), txdata: 0x44773a6cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ECP_Token
Function name: approveAndCall(address,uint256,bytes)
PC address: 1269
Estimated Gas Usage: 8076 - 68859
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2ad4356af3c41bbe5cfc97256b92da46.sol:447

value) public returns (bool success)                   // ERC20 Function Implementation Of Burn

      {

          require (balanceOf[msg.sender] > _value);                             // Check If The Sender Has Enough Balance

          balanceOf[msg.sender] -= _value;                                      // Subtract From The Sender

          totalSupply -= _value;                                           

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca5100000000000000000000000001010101010101010101010101010101000101010000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ECP_Token
Function name: sendToMultipleAccount(address[],uint256[])
PC address: 2375
Estimated Gas Usage: 3320 - 9621
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2ad4356af3c41bbe5cfc97256b92da46.sol:141

eAccount'

--------------------
Initial State:

Account: [CREATOR], balance: 0xb020404880802021, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendToMultipleAccount(address[],uint256[]), txdata: 0x44773a6c800000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ECP_Token
Function name: mintToken(uint256)
PC address: 3395
Estimated Gas Usage: 22202 - 83684
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2ad4356af3c41bbe5cfc97256b92da46.sol:279

 Supply

                

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(uint256), txdata: 0xc634d03201, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ECP_Token
Function name: mintToken(uint256)
PC address: 3398
Estimated Gas Usage: 22202 - 83684
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2ad4356af3c41bbe5cfc97256b92da46.sol:281

 // Update Remaining

              

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000018a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(uint256), txdata: 0xc634d032020011f980c277d9d3e7a1bf4261ceb5bd5f0224b8d321, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ECP_Token
Function name: mintToken(uint256)
PC address: 3407
Estimated Gas Usage: 22202 - 83684
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2ad4356af3c41bbe5cfc97256b92da46.sol:283

The Event

            }

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(uint256), txdata: 0xc634d032048015abb828cd756b43f0b5965e86ee6935283ef3b314, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ECP_Token
Function name: mintToken(uint256)
PC address: 3415
Estimated Gas Usage: 22202 - 83684
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2ad4356af3c41bbe5cfc97256b92da46.sol:293

  public onlyOwner // Admin T

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(uint256), txdata: 0xc634d032048015abb828cd756b43f0b5965e86ee6935283ef3b314, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ECP_Token
Function name: approveAndCall(address,uint256,bytes)
PC address: 3757
Estimated Gas Usage: 8076 - 68859
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2ad4356af3c41bbe5cfc97256b92da46.sol:453

              // Subtract From The Sender

          totalSup

--------------------
Initial State:

Account: [CREATOR], balance: 0x40082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0


