==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DelayedClaimable
Function name: fallback
PC address: 415
Estimated Gas Usage: 1788 - 2213
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:531



     */

    function bindContract(address _co

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000008c0120, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: claimOwnership(), txdata: 0x4e71e0c8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: DelayedClaimable
Function name: fallback
PC address: 429
Estimated Gas Usage: 1808 - 2233
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:531

Contract

     */

    function bindContract(address _con

--------------------
Initial State:

Account: [CREATOR], balance: 0x21240204340055001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: claimOwnership(), txdata: 0x4e71e0c8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: OwnerContract
Function name: claimOwnership()
PC address: 634
Estimated Gas Usage: 1810 - 2235
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:531



     */

    function bindContract(address _co

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: claimOwnership(), txdata: 0x4e71e0c8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: OwnerContract
Function name: claimOwnership()
PC address: 648
Estimated Gas Usage: 1830 - 2255
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:531

Contract

     */

    function bindContract(address _con

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000086, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: claimOwnership(), txdata: 0x4e71e0c8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OwnerContract
Function name: bindContract(address)
PC address: 1018
Estimated Gas Usage: 11085 - 102519
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:583

s to another one.

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b500000000000000000000000001, value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: bindContract(address)
PC address: 1077
Estimated Gas Usage: 11085 - 102519
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:587

ontract addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OwnerContract
Function name: bindContract(address)
PC address: 1168
Estimated Gas Usage: 11085 - 102519
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:587

ontract address that will be n

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b500000000000000000000000001, value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: OwnerContract
Function name: bindContract(address)
PC address: 1168
Estimated Gas Usage: 11085 - 102519
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:587

ontract address that will be n

--------------------
Initial State:

Account: [CREATOR], balance: 0x20250000010100002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: bindContract(address)
PC address: 1168
Estimated Gas Usage: 11085 - 102519
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:587

ontract address that will be n

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OwnerContract
Function name: ownedOwnershipTransferred()
PC address: 1428
Estimated Gas Usage: 17013 - 93506
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:677

bind a contract as it

--------------------
Initial State:

Account: [CREATOR], balance: 0x88, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownedOwnershipTransferred(), txdata: 0xdbf35430, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: ownedOwnershipTransferred()
PC address: 1489
Estimated Gas Usage: 17013 - 93506
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:681

r Contract

     * @param _flyDropCon

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownedOwnershipTransferred(), txdata: 0xdbf35430, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: ownedOwnershipTransferred()
PC address: 1504
Estimated Gas Usage: 17013 - 93506
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:681

r Contract

     * @param _flyDropCon

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownedOwnershipTransferred(), txdata: 0xdbf35430, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: ownedOwnershipTransferred()
PC address: 1508
Estimated Gas Usage: 17013 - 93506
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:683

 contract for transfer tokens 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownedOwnershipTransferred(), txdata: 0xdbf35430, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: ownedOwnershipTransferred()
PC address: 1513
Estimated Gas Usage: 17013 - 93506
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:683

 contract for transfer tokens 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownedOwnershipTransferred(), txdata: 0xdbf35430, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OwnerContract
Function name: changeOwnershipto(address)
PC address: 1691
Estimated Gas Usage: 17018 - 93560
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:629

() onlyOwner public r

--------------------
Initial State:

Account: [CREATOR], balance: 0x10010006000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: changeOwnershipto(address), txdata: 0xede930c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: changeOwnershipto(address)
PC address: 1914
Estimated Gas Usage: 17018 - 93560
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:645

        return false;

        }

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x8002fcfe3410e1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: changeOwnershipto(address), txdata: 0xede930c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: changeOwnershipto(address)
PC address: 1929
Estimated Gas Usage: 17018 - 93560
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:645

        return false;

        }

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x8002fcfe3410e1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: changeOwnershipto(address), txdata: 0xede930c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: changeOwnershipto(address)
PC address: 1933
Estimated Gas Usage: 17018 - 93560
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:655

 ReleaseAndLockToken is OwnerC

--------------------
Initial State:

Account: [CREATOR], balance: 0x8002fcfe3410e1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: changeOwnershipto(address), txdata: 0xede930c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OwnerContract
Function name: changeOwnershipto(address)
PC address: 1938
Estimated Gas Usage: 17018 - 93560
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:655

 ReleaseAndLockToken is OwnerC

--------------------
Initial State:

Account: [CREATOR], balance: 0x8002fcfe3410e1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bindContract(address), txdata: 0x8157d4b5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: changeOwnershipto(address), txdata: 0xede930c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ReleaseAndLockToken
Function name: fallback
PC address: 2521
Estimated Gas Usage: 3661 - 40579
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:1133

in the token 

--------------------
Initial State:

Account: [CREATOR], balance: 0x11000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: releaseAccount(address,address), txdata: 0x00cde2bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ReleaseAndLockToken
Function name: setNewReleasePeriod(address,uint256,uint256,uint256)
PC address: 3972
Estimated Gas Usage: 3737 - 40655
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:1463

 @param _targ

--------------------
Initial State:

Account: [CREATOR], balance: 0x18008000800000028, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setNewReleasePeriod(address,uint256,uint256,uint256), txdata: 0x03df6106000000000000000000000000010101010101010101010101010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ReleaseAndLockToken
Function name: getRemainReleaseTimeOfStage(address,uint256)
PC address: 4811
Estimated Gas Usage: 2817 - 39219
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:1635

           i = i.add(1);

        }



        return res;

    }



    /**

     * @dev co

--------------------
Initial State:

Account: [CREATOR], balance: 0x3a00010100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getRemainReleaseTimeOfStage(address,uint256), txdata: 0x04def10200000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ReleaseAndLockToken
Function name: getRemainReleaseTimeOfStage(address,uint256)
PC address: 4823
Estimated Gas Usage: 2914 - 39597
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:1651

   *

     * 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getRemainReleaseTimeOfStage(address,uint256), txdata: 0x04def10200000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ReleaseAndLockToken
Function name: needRelease()
PC address: 9586
Estimated Gas Usage: 2936 - 39429
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/17929068c543736d0172a13b5f22e102.sol:777

56 timeRecLen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: needRelease(), txdata: 0x69e111ba, value: 0x0


