==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 791
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:175

lic {

        if (balanc

--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 795
Estimated Gas Usage: 29439 - 145415
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:175

lic {

        if (balanc

--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 819
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 825
Estimated Gas Usage: 29439 - 145415
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 876
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:177

r] != 0) {

            uint256 fee = balance[feeCollector];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 916
Estimated Gas Usage: 29439 - 145415
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:177

r] != 0) {

            uint256 fee = balance[feeCollector];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 954
Estimated Gas Usage: 29439 - 145415
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:177

r] != 0) {

            uint256 fee = balance[feeCollector];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TwoCoinsOneMoon
Function name: history(uint256)
PC address: 986
Estimated Gas Usage: 1068 - 1163
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:75

e;



    address priv

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: history(uint256), txdata: 0xa7a38f0b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TwoCoinsOneMoon
Function name: bettorsRed(uint256)
PC address: 1055
Estimated Gas Usage: 1112 - 1207
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:75

mapping (address => uint) 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bettorsRed(uint256), txdata: 0xc55f2b1d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1146
Estimated Gas Usage: 29637 - 145613
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:157

ction betRedCoin() public 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1150
Estimated Gas Usage: 29637 - 145613
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:157

ction betRedCoin() public 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1174
Estimated Gas Usage: 29637 - 145613
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1180
Estimated Gas Usage: 29637 - 145613
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1231
Estimated Gas Usage: 29637 - 145613
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:159

      uint256 betAmount = getBetAmount();



        marketCapRe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1271
Estimated Gas Usage: 29637 - 145613
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:159

      uint256 betAmount = getBetAmount();



        marketCapRe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1309
Estimated Gas Usage: 29637 - 145613
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:159

      uint256 betAmount = getBetAmount();



        marketCapRe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TwoCoinsOneMoon
Function name: bettorsBlue(uint256)
PC address: 1332
Estimated Gas Usage: 1244 - 1339
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:70


    Event[] public history

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bettorsBlue(uint256), txdata: 0xfff31ae0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1517
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:141

     uint256

--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1517
Estimated Gas Usage: 29637 - 145613
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:141

     uint256

--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1542
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:139

e {

        uint256 betAmount = g

--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1542
Estimated Gas Usage: 29637 - 145613
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:139

e {

        uint256 betAmount = g

--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1555
Estimated Gas Usage: 29439 - 145415
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:139

e {

        uint256 betAmount = g

--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1555
Estimated Gas Usage: 29637 - 145613
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:139

e {

        uint256 betAmount = g

--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1573
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:305
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1581
Estimated Gas Usage: 26148 - 142124
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:305
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1603
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:305
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1606
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:305
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1617
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:305
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1620
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:305
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betRedCoin()
PC address: 1919
Estimated Gas Usage: 29439 - 145415
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:267

 moonLevel =

--------------------
Initial State:

Account: [CREATOR], balance: 0x142140100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betRedCoin(), txdata: 0x46ff4ce6, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoCoinsOneMoon
Function name: betBlueCoin()
PC address: 1922
Estimated Gas Usage: 29637 - 145613
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3074c710b2daf97a4a23bb4e2af25242.sol:265

winner);

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2880460900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: betBlueCoin(), txdata: 0xf1d71b73, value: 0x16345785d8a0000


