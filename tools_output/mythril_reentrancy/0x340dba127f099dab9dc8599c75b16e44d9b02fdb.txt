==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 1134
Estimated Gas Usage: 3546 - 39569
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:692

uyer, uint256 _amount) onlyRC pub

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,uint256), txdata: 0x06b091f9, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TokenSale
Function name: addMeByRC()
PC address: 2196
Estimated Gas Usage: 1177 - 1602
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:673

ontract = tokenInterface(_t

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addMeByRC(), txdata: 0x66b52b93, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TokenSale
Function name: setRateContract(address)
PC address: 2300
Estimated Gas Usage: 1230 - 1985
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:61

ev Allows the current owner 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10a04022d0008410a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setRateContract(address), txdata: 0x6b96668f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: tokenValueInEther(uint256)
PC address: 2510
Estimated Gas Usage: 3202 - 38660
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:608

 {
        require( rc[msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x243100000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02, value: 0x0
Caller: [SOMEGUY], function: tokenValueInEther(uint256), txdata: 0x7b413985000000000000000e, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TokenSale
Function name: setTime(uint256,uint256)
PC address: 2621
Estimated Gas Usage: 1299 - 1724
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:61

ev Allows the current owner 

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setTime(uint256,uint256), txdata: 0xa0355eca, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TokenSale
Function name: setWalletAddress(address)
PC address: 2702
Estimated Gas Usage: 1362 - 2117
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:61

ev Allows the current owner 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setWalletAddress(address), txdata: 0xac1a386a, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TokenSale
Function name: setTokenContract(address)
PC address: 2772
Estimated Gas Usage: 1384 - 2139
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:61

ev Allows the current owner 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setTokenContract(address), txdata: 0xbbcd5bbe, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TokenSale
Function name: setAdvisorFee(uint256)
PC address: 2842
Estimated Gas Usage: 1381 - 1806
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:61

ev Allows the current owner 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAdvisorFee(uint256), txdata: 0xcd1ce6d5, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TokenSale
Function name: transferOwnership(address)
PC address: 2885
Estimated Gas Usage: 1450 - 2205
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:61

ev Allows the current owner 

--------------------
Initial State:

Account: [CREATOR], balance: 0x202c40e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: TokenSale
Function name: withdraw(address,uint256)
PC address: 3033
Estimated Gas Usage: 1478 - 2233
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:61

ev Allows the current owner 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw(address,uint256), txdata: 0xf3fef3a3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenSale
Function name: tokenValueInEther(uint256)
PC address: 3132
Estimated Gas Usage: 3033 - 38210
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e8d7225a73d1266dae29f1fbd4ebba.sol:609

s an authorized rcContract
        _;
    }
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenValueInEther(uint256), txdata: 0x7b4139857f, value: 0x0


