==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 269
Estimated Gas Usage: 1687 - 1782
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:227

urn Current LRC balance.
    function lrcBalance(

--------------------
Initial State:

Account: [CREATOR], balance: 0x1b000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001080044010400840200401080108040201014001000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 282
Estimated Gas Usage: 1704 - 1799
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:227

@return Current LRC balance.
    function lrcBalance() public constant returns (uint) {
        return Token(lrcTokenAddress).balanceOf(address(this));
    }

    /// @dev Deposit LRC.
    function depositLR

--------------------
Initial State:

Account: [CREATOR], balance: 0x10310080000004081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001020400001010404011002204004100802041004000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 305
Estimated Gas Usage: 2529 - 2624
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:229

rn Token(lrcTokenAddress).balanceOf(address(this));
    }

    /// @dev Deposit LRC.
    function depositLR

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000080000000000000000000000000008080000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1072
Estimated Gas Usage: 4228 - 4323
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:241

(this)));

        require(lrcAmount > 0);

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000008000000000200080080000000800000000200010000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1086
Estimated Gas Usage: 5061 - 5156
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:241

 address(this)));

        require(lrcAmount > 0);

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080400042009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000008000000000000000000400000004000000000400000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1351
Estimated Gas Usage: 46956 - 272928
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:250

  lrcDeposited += lrcAmount;

        Deposit

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1351
Estimated Gas Usage: 44431 - 270403
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:250

  lrcDeposited += lrcAmount;

        Deposit

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1541
Estimated Gas Usage: 46956 - 272928
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:247

ord.timestamp = now;
        records[msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1541
Estimated Gas Usage: 44431 - 270403
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:247

ord.timestamp = now;
        records[msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1541
Estimated Gas Usage: 46956 - 272928
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:247

ord.timestamp = now;
        records[msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000008010100000040010101010000010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x01, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1541
Estimated Gas Usage: 44431 - 270403
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:247

ord.timestamp = now;
        records[msg.sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000008020040100108080000100008080000080800000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1668
Estimated Gas Usage: 46956 - 272928
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:254

der, address(this), lrcAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1668
Estimated Gas Usage: 44431 - 270403
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:254

der, address(this), lrcAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1675
Estimated Gas Usage: 46956 - 272928
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:254

der, address(this), lrcAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1675
Estimated Gas Usage: 44431 - 270403
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:254

der, address(this), lrcAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1684
Estimated Gas Usage: 46956 - 272928
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:257

    /// @dev Withdrawa

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1684
Estimated Gas Usage: 44431 - 270403
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:257

    /// @dev Withdrawa

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1754
Estimated Gas Usage: 46956 - 272928
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:258

function withdrawLRC() payab

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1754
Estimated Gas Usage: 44431 - 270403
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:258

function withdrawLRC() payab

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1759
Estimated Gas Usage: 46956 - 272928
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:258

function withdrawLRC() payab

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1759
Estimated Gas Usage: 44431 - 270403
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:258

function withdrawLRC() payab

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1764
Estimated Gas Usage: 46956 - 272928
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:258

function withdrawLRC() payab

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1764
Estimated Gas Usage: 44431 - 270403
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:258

function withdrawLRC() payab

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1769
Estimated Gas Usage: 46956 - 272928
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:258

function withdrawLRC() payab

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1769
Estimated Gas Usage: 44431 - 270403
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:258

function withdrawLRC() payab

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1780
Estimated Gas Usage: 46956 - 272928
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:259

require(depositStartTime 

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1780
Estimated Gas Usage: 44431 - 270403
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:259

require(depositStartTime 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1787
Estimated Gas Usage: 46956 - 272928
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:259

require(depositStartTime 

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1787
Estimated Gas Usage: 44431 - 270403
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:259

require(depositStartTime 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1850
Estimated Gas Usage: 46956 - 272928
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:260

(lrcDeposit

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1850
Estimated Gas Usage: 44431 - 270403
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:260

(lrcDeposit

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1861
Estimated Gas Usage: 46956 - 272928
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:260

(lrcDeposit

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1861
Estimated Gas Usage: 44431 - 270403
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:260

(lrcDeposit

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 2119
Estimated Gas Usage: 46956 - 272928
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:263

       require(now >= record.timestamp + WITHDRAWAL_DELAY);

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 2119
Estimated Gas Usage: 44431 - 270403
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:263

       require(now >= record.timestamp + WITHDRAWAL_DELAY);

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 2119
Estimated Gas Usage: 46559 - 272531
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:263

       require(now >= record.timestamp + WITHDRAWAL_DELAY);

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000303a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: lrcBalance()
PC address: 3270
Estimated Gas Usage: 2655 - 38111
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:236

e && now <= depositStopTime);
        
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: lrcBalance(), txdata: 0x0fc33bb7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: drain()
PC address: 3270
Estimated Gas Usage: 9538 - 81085
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:236

e && now <= depositStopTime);
        
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: drain(), txdata: 0x9890220b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LRCLongTermHoldingContract
Function name: drain()
PC address: 3546
Estimated Gas Usage: 9538 - 81085
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:215

  function () payable {
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: drain(), txdata: 0x9890220b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: drain()
PC address: 3556
Estimated Gas Usage: 2872 - 3297
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:210

);

        Drained(balance);
    }

    function () payable {
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x81080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000010000014000800000000080000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: drain(), txdata: 0x9890220b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: drain()
PC address: 3591
Estimated Gas Usage: 9538 - 81085
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:219

            dep

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4800010, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: drain(), txdata: 0x9890220b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: drain()
PC address: 3653
Estimated Gas Usage: 9538 - 81085
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:220

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4800010, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: drain(), txdata: 0x9890220b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: drain()
PC address: 3830
Estimated Gas Usage: 9538 - 81085
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:218

me) {
            depositLRC();
        } else 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: drain(), txdata: 0x9890220b, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: drain()
PC address: 3830
Estimated Gas Usage: 9538 - 81085
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:218

me) {
            depositLRC();
        } else 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000040018000000800010000080001000001010008000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: drain(), txdata: 0x9890220b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: drain()
PC address: 3830
Estimated Gas Usage: 9538 - 81085
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:218

me) {
            depositLRC();
        } else 

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4800010, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: drain(), txdata: 0x9890220b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LRCLongTermHoldingContract
Function name: start()
PC address: 4058
Estimated Gas Usage: 14558 - 55520
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/595ce12b4f1896d4064bfeb2d472af26.sol:205

tartTime > 0 && now >= depositSta

--------------------
Initial State:

Account: [CREATOR], balance: 0x803, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000004000800101010101208002010108108001000200000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0