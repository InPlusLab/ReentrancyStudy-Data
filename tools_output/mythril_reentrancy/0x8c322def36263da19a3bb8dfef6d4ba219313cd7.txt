==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 624
Estimated Gas Usage: 57773 - 296290
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:103

ess  _smartContract,

   uint _decimals

   )

   public

   minEth

   payable

   {

       Token t = Token(_smartContract);

       if(t.balanceOf(this)>=_tokenAmount){

        uint lastIndex = airdrops.length++;

        Airdrop storage airdrop = airdrops[lastIndex];

        airdrop.name=_name;

        airdrop.id =lastIndex;

        airdrop.decimals = _decimals;

        airdrop.tokenAmount = _tokenAmount;

        airdrop.countDown=_countDown;

        airdrop.gasFeePaid= msg.value;

        airdrop.timeStamp=now;

        airdrop.distributor = msg.sender;

        airdrop.tokenSC = Token(_smartContract);

       }else revert('Air Drop not added, Please make sure you send your ERC20 tokens to the smart contract before adding new airdrop');

   }



    ///@notice  Distirbutes a differen quantity of tokens to all the specified addresses.

    ///@dev Distribution will only occur when a d

--------------------
Initial State:

Account: [CREATOR], balance: 0x42040003009202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd80, value: 0x2c68af0bb140000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 631
Estimated Gas Usage: 57773 - 296290
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:103

ess  _smartContract,

   uint _decimals

   )

   public

   minEth

   payable

   {

       Token t = Token(_smartContract);

       if(t.balanceOf(this)>=_tokenAmount){

        uint lastIndex = airdrops.length++;

        Airdrop storage airdrop = airdrops[lastIndex];

        airdrop.name=_name;

        airdrop.id =lastIndex;

        airdrop.decimals = _decimals;

        airdrop.tokenAmount = _tokenAmount;

        airdrop.countDown=_countDown;

        airdrop.gasFeePaid= msg.value;

        airdrop.timeStamp=now;

        airdrop.distributor = msg.sender;

        airdrop.tokenSC = Token(_smartContract);

       }else revert('Air Drop not added, Please make sure you send your ERC20 tokens to the smart contract before adding new airdrop');

   }



    ///@notice  Distirbutes a differen quantity of tokens to all the specified addresses.

    ///@dev Distribution will only occur when a d

--------------------
Initial State:

Account: [CREATOR], balance: 0x24001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10280ab50bf100008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd80, value: 0x2c68af0bb140000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 653
Estimated Gas Usage: 67913 - 346616
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:103

ess  _smartContract,

   uint _decimals

   )

   public

   minEth

   payable

   {

       Token t = Token(_smartContract);

       if(t.balanceOf(this)>=_tokenAmount){

        uint lastIndex = airdrops.length++;

        Airdrop storage airdrop = airdrops[lastIndex];

        airdrop.name=_name;

        airdrop.id =lastIndex;

        airdrop.decimals = _decimals;

        airdrop.tokenAmount = _tokenAmount;

        airdrop.countDown=_countDown;

        airdrop.gasFeePaid= msg.value;

        airdrop.timeStamp=now;

        airdrop.distributor = msg.sender;

        airdrop.tokenSC = Token(_smartContract);

       }else revert('Air Drop not added, Please make sure you send your ERC20 tokens to the smart contract before adding new airdrop');

   }



    ///@notice  Distirbutes a differen quantity of tokens to all the specified addresses.

    ///@dev Distribution will only occur when a d

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000900580040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476ddffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x2c68af0bb140000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Axioms
Function name: fallback
PC address: 756
Estimated Gas Usage: 2419 - 9721
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:181



            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeAirdrop(uint256,address[],uint256[]), txdata: 0x2581f5a4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Axioms
Function name: airdrops(uint256)
PC address: 1432
Estimated Gas Usage: 980 - 1075
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:33

   address public owner;



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: airdrops(uint256), txdata: 0x60db5082, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Axioms
Function name: transferGasFee(uint256)
PC address: 1704
Estimated Gas Usage: 2114 - 4242
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:227
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferGasFee(uint256), txdata: 0x8aac0fa4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Axioms
Function name: refoundTokens(uint256)
PC address: 2103
Estimated Gas Usage: 2158 - 4286
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:221

dex];

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: refoundTokens(uint256), txdata: 0xb50e4610, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2655
Estimated Gas Usage: 67913 - 346616
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:123

rops[lastIndex];


--------------------
Initial State:

Account: [CREATOR], balance: 0x90, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3c8037200000004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2705
Estimated Gas Usage: 67913 - 346616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:127

.id =lastIndex;



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2726
Estimated Gas Usage: 67913 - 346616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:131

        airdrop.tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2780
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:133

untDown=_countDown;



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2787
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:135

op.gasFeePaid= msg.value;

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2794
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:137

p.timeStamp=now;

        airdrop.

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2801
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:139

 msg.sender;

        airdro

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2807
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:141

oken(_smartContract);

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2813
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:143

('Air Drop not added,

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2819
Estimated Gas Usage: 67913 - 346616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:143

sure you send your ERC20 tokens 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2849
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:143

sure you send your ERC20 tokens 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2855
Estimated Gas Usage: 67913 - 346616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:143

contract before adding new airdrop');



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 2871
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8970b9c612081486563c591ae3601e5e.sol:143

contract before adding new airdrop');



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 3200
Estimated Gas Usage: 67913 - 346616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 3203
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 3245
Estimated Gas Usage: 67913 - 346616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 3302
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 3310
Estimated Gas Usage: 57773 - 296290
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x180020000008000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd80, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 3315
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 3324
Estimated Gas Usage: 57773 - 296290
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd80, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Axioms
Function name: addNewAirdrop(string,uint256,uint256,address,uint256)
PC address: 3337
Estimated Gas Usage: 67913 - 346616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewAirdrop(string,uint256,uint256,address,uint256), txdata: 0xde9476dd800000000000000000000000000000000000000000000000000000000000000010c202310140010420108010102004082008204f080440804029082070bd80460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x2c68af0bb140000