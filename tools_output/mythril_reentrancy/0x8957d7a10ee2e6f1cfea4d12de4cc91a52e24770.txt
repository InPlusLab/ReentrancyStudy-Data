==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EVMScriptRunner
Function name: getEVMScriptExecutor(bytes)
PC address: 659
Estimated Gas Usage: 4850 - 78019
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/385707f2eb234216667bd7c4b966e603.sol:1051

it ScriptResult(address(executor), _script, _inpu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getEVMScriptExecutor(bytes), txdata: 0x2914b9bd80, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AragonApp
Function name: getEVMScriptExecutor(bytes)
PC address: 851
Estimated Gas Usage: 4800 - 78913
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/385707f2eb234216667bd7c4b966e603.sol:1051

it ScriptResult(address(executor), _script, _inpu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getEVMScriptExecutor(bytes), txdata: 0x2914b9bd, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AragonApp
Function name: transferToVault(address)
PC address: 1570
Estimated Gas Usage: 5414 - 77135
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/385707f2eb234216667bd7c4b966e603.sol:843

interface IEVMScriptExecutor {

    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferToVault(address), txdata: 0x9d4941d8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AragonApp
Function name: transferToVault(address)
PC address: 1570
Estimated Gas Usage: 5414 - 77135
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/385707f2eb234216667bd7c4b966e603.sol:843

interface IEVMScriptExecutor {

    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferToVault(address), txdata: 0x9d4941d8, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AragonApp
Function name: transferToVault(address)
PC address: 1570
Estimated Gas Usage: 5414 - 77135
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/385707f2eb234216667bd7c4b966e603.sol:843

interface IEVMScriptExecutor {

    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [ATTACKER], function: transferToVault(address), txdata: 0x9d4941d8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: AragonApp
Function name: canPerform(address,bytes32,uint256[])
PC address: 1921
Estimated Gas Usage: 1541 - 4883
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/385707f2eb234216667bd7c4b966e603.sol:1481

/issues/4832

    function canForward(address sender, bytes evmCal

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: canPerform(address,bytes32,uint256[]), txdata: 0xa1658fad, value: 0x0


