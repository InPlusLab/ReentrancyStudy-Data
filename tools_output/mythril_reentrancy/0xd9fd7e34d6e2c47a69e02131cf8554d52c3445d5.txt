==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CountTransferManager
Function name: verifyTransfer(address,address,uint256,bytes,bool) or verifyTransfer(address,address,uint256,bytes,bool)
PC address: 4291
Estimated Gas Usage: 7558 - 80540
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1225

tion() public pure returns (bytes4) {

        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: verifyTransfer(address,address,uint256,bytes,bool), txdata: 0xde6ee1bc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CountTransferManager
Function name: verifyTransfer(address,address,uint256,bytes,bool) or verifyTransfer(address,address,uint256,bytes,bool)
PC address: 4350
Estimated Gas Usage: 7558 - 80540
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1225

ction getInitF

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: verifyTransfer(address,address,uint256,bytes,bool), txdata: 0xde6ee1bc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CountTransferManager
Function name: verifyTransfer(address,address,uint256,bytes,bool) or verifyTransfer(address,address,uint256,bytes,bool)
PC address: 4364
Estimated Gas Usage: 7558 - 80540
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1235

s flag that a

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: verifyTransfer(address,address,uint256,bytes,bool), txdata: 0xde6ee1bc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CountTransferManager
Function name: verifyTransfer(address,address,uint256,bytes,bool) or verifyTransfer(address,address,uint256,bytes,bool)
PC address: 4550
Estimated Gas Usage: 7558 - 80540
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1235

 the permissions flag that are associated wi

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: verifyTransfer(address,address,uint256,bytes,bool), txdata: 0xde6ee1bc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CountTransferManager
Function name: verifyTransfer(address,address,uint256,bytes,bool) or verifyTransfer(address,address,uint256,bytes,bool)
PC address: 4550
Estimated Gas Usage: 7558 - 80540
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1235

 the permissions flag that are associated wi

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: verifyTransfer(address,address,uint256,bytes,bool), txdata: 0xde6ee1bc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CountTransferManager
Function name: verifyTransfer(address,address,uint256,bytes,bool) or verifyTransfer(address,address,uint256,bytes,bool)
PC address: 4550
Estimated Gas Usage: 7558 - 80540
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1235

 the permissions flag that are associated wi

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: verifyTransfer(address,address,uint256,bytes,bool), txdata: 0xde6ee1bc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CountTransferManager
Function name: changeHolderCount(uint256)
PC address: 4827
Estimated Gas Usage: 13123 - 104059
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1027

 returns(bool) {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: changeHolderCount(uint256), txdata: 0xec8cae23, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CountTransferManager
Function name: changeHolderCount(uint256)
PC address: 4936
Estimated Gas Usage: 13123 - 104059
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1029

nable(f

--------------------
Initial State:

Account: [CREATOR], balance: 0xd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: changeHolderCount(uint256), txdata: 0xec8cae23, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CountTransferManager
Function name: changeHolderCount(uint256)
PC address: 5034
Estimated Gas Usage: 13123 - 104059
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1031

   return tru

--------------------
Initial State:

Account: [CREATOR], balance: 0xd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: changeHolderCount(uint256), txdata: 0xec8cae23, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CountTransferManager
Function name: changeHolderCount(uint256)
PC address: 5288
Estimated Gas Usage: 13123 - 104059
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: changeHolderCount(uint256), txdata: 0xec8cae23, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CountTransferManager
Function name: changeHolderCount(uint256)
PC address: 5288
Estimated Gas Usage: 13123 - 104059
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: changeHolderCount(uint256), txdata: 0xec8cae23, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CountTransferManager
Function name: changeHolderCount(uint256)
PC address: 5288
Estimated Gas Usage: 13123 - 104059
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0xd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: changeHolderCount(uint256), txdata: 0xec8cae23, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CountTransferManager
Function name: changeHolderCount(uint256)
PC address: 5497
Estimated Gas Usage: 13123 - 104059
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1277

Factory,

    

--------------------
Initial State:

Account: [CREATOR], balance: 0xd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: changeHolderCount(uint256), txdata: 0xec8cae23, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CountTransferManager
Function name: changeHolderCount(uint256)
PC address: 5532
Estimated Gas Usage: 13123 - 104059
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/859125831be2591ce424ebd9829baa95.sol:1281

uint256 _setupCost,

        uin

--------------------
Initial State:

Account: [CREATOR], balance: 0xd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: changeHolderCount(uint256), txdata: 0xec8cae23, value: 0x0