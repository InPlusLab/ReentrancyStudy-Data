==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: detonateBomb()
PC address: 2619
Estimated Gas Usage: 215 - 310
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:162


        bombDetonated = true;
        bombArmed = false;

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: detonateBomb(), txdata: 0x06bdfb5d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutBrownWire(bytes)
PC address: 2949
Estimated Gas Usage: 436 - 531
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:71

      require(!brownWireCutters[msg.sender], "Already cut");
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000221ee, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutBrownWire(bytes), txdata: 0x18d1b6c00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: commitToCutGreenWire(bytes32)
PC address: 3559
Estimated Gas Usage: 278 - 373
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:51

"You're too late");
        greenCommits[msg.sender] = _hash;
    }


--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: commitToCutGreenWire(bytes32), txdata: 0x506795e90000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutPurpleWire(string)
PC address: 3650
Estimated Gas Usage: 480 - 575
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:57

does it");
        require(!purpleWireCutters[msg.sender], "Alrea

--------------------
Initial State:

Account: [CREATOR], balance: 0x7a49e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cutPurpleWire(string), txdata: 0x58ad495c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BombDisposal
Function name: claimDisarmReward()
PC address: 4194
Estimated Gas Usage: 1009 - 1104
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:159

ternal {
        require(block.number > DETONATION_TIME, "N

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claimDisarmReward(), txdata: 0x5ec313b3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: commitToCutBrownWire(bytes32)
PC address: 4329
Estimated Gas Usage: 277 - 372
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:46

END, "You're too late");
        brownCommits[msg.sender] = _hash;
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: commitToCutBrownWire(bytes32), txdata: 0x66551f8e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BombDisposal
Function name: disarmCode()
PC address: 4435
Estimated Gas Usage: 1446 - 2386
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:36

    constructor() public

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: disarmCode(), txdata: 0x7ec62e01, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: commitToCutPurpleWire(bytes32)
PC address: 4579
Estimated Gas Usage: 234 - 329
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:41

RIOD_END, "You're too late");
        purpleCommits[msg.sender] = _h

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: commitToCutPurpleWire(bytes32), txdata: 0x8ff414380000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutOrangeWire(bytes2)
PC address: 5919
Estimated Gas Usage: 254 - 349
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:99

ters[msg.sender], "Already cut");
        bytes32 hashedValue = k

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cutOrangeWire(bytes2), txdata: 0xd48af3cd0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BombDisposal
Function name: cutOrangeWire(bytes2)
PC address: 6142
Estimated Gas Usage: 1392 - 2336
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:104

orangeWiresCut += 1;
    }
    
    // This i

--------------------
Initial State:

Account: [CREATOR], balance: 0x218108040207b7ba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cutOrangeWire(bytes2), txdata: 0xd48af3cd0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 6334
Estimated Gas Usage: 190 - 285
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:110

in], "No turning back");
        blueWireCutters[tx.origin] = !bl

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000fbcc8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 6571
Estimated Gas Usage: 26487 - 144210
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:114

mpted[tx.origin]) {
            redOrBlueWiresCut += 1;
        }
        redBlueAttem

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 6571
Estimated Gas Usage: 26487 - 144210
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:114

mpted[tx.origin]) {
            redOrBlueWiresCut += 1;
        }
        redBlueAttem

--------------------
Initial State:

Account: [CREATOR], balance: 0x21410c000204bdf6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 6641
Estimated Gas Usage: 26487 - 144210
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:117

= true;
    }
    
    // A

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 6654
Estimated Gas Usage: 26487 - 144210
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:120

rm code will be provid

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 6686
Estimated Gas Usage: 26487 - 144210
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:120

rm code will be provid

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 6704
Estimated Gas Usage: 26487 - 144210
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:120

lock 11511500
    function provide

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 6713
Estimated Gas Usage: 26487 - 144210
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:120

lock 11511500
    function provide

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutGreenWire(string,string,string)
PC address: 6725
Estimated Gas Usage: 792 - 887
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:86

greenWireCutters[msg.sender], "Already cut");
        bytes32 ans

--------------------
Initial State:

Account: [CREATOR], balance: 0x400c0000004106, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutGreenWire(string,string,string), txdata: 0xe9d5f1fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BombDisposal
Function name: provideDisarmCode(string)
PC address: 7344
Estimated Gas Usage: 1318 - 1413
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0e6a22df0d65177e024a8946b8d079a1.sol:126


        disarmCommits[msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x7a7ee, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: provideDisarmCode(string), txdata: 0xf244e9700000000000000000000000000000000000000000000000000000000000000000, value: 0x0


