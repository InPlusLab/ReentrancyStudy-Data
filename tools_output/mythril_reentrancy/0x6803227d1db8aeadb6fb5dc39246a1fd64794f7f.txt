==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: constructor
PC address: 77
Estimated Gas Usage: 205 - 3350
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:409

on can be used to buy toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CompliantCrowdsaleHardcap
Function name: constructor
PC address: 134
Estimated Gas Usage: 11952 - 55943
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:409

on can be used to buy toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Whitelist
Function name: disapproveInvestorsInBulk(address[])
PC address: 194
Estimated Gas Usage: 15627 - 59296
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:763

ed(address _account) {

        require(whiteListingContract.isInvestorApproved(_account));

        _;

    }



    modifier checkIsAddressValid(address _account) {

        require(_account != address(0));

        _;

    }



    /**

    * event for rejecte

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000040600800002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: disapproveInvestorsInBulk(address[]), txdata: 0x6deb515dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Whitelist
Function name: approveInvestorsInBulk(address[])
PC address: 394
Estimated Gas Usage: 15785 - 59454
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:715

 toDisapprove) external onlyOwner {

        for (uint i = 0; i < toDisapprove.length; i++) {

            delete investorMap[toDisapprove[i]];

            emit Disapproved(toDisapprove[i]);

        }

    }

}







/** @title Compliant Crow

--------------------
Initial State:

Account: [CREATOR], balance: 0x84b01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x84a20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: approveInvestorsInBulk(address[]), txdata: 0xf79acad3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 455
Estimated Gas Usage: 2760 - 3185
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:457

return true if crowdsale

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4000000100020000000000000000000000000100000000000000010100000001800000010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101404040404040404040404040010101010101010101010101010101010101010140404040404040404040404001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CompliantCrowdsaleHardcap
Function name: bulkRejectMints(uint256[],uint256[])
PC address: 463
Estimated Gas Usage: 1152 - 1577
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:1149

ens

        );



        forwardFunds(pendingMints[nonce].weiAmount);

        delete pendingMints[nonce];



        return true;

    }



    /** @dev reject buy tokens request called internally in the rejectMint and bulkRejectMints functions

      * @param nonce request recorded at this p

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101010101020101010110200101010801012000000000000000000000000000000000002000000000010000000000000001800000000000000000000000000000000000008000000001000000000000000000000000000000000000000000000000000000000000000000000000000000004001010101010101010101010101200101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: bulkRejectMints(uint256[],uint256[]), txdata: 0x1d7c194effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc20, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CompliantCrowdsaleHardcap
Function name: bulkRejectMints(uint256[],uint256[])
PC address: 474
Estimated Gas Usage: 1152 - 1577
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:1149

ens

        );



        forwardFunds(pendingMints[nonce].weiAmount);

        delete pendingMints[nonce];



        return true;

    }



    /** @dev reject buy tokens request called internally in the rejectMint and bulkRejectMints functions

      * @param nonce request recorded at this p

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101010120800101010801020101010101010104011001800101000000000000000000000210010004000000002000000000081000000000000000000000000000000000000000000000010140040200000000000000000000000000000000000000000000000000000000000000000000000101010101010101200101208001010101010101012001010101014001000101000000000000000000000000010101010101011001010001010180010101010200000000000000000000000001, value: 0x0
Caller: [CREATOR], function: bulkRejectMints(uint256[],uint256[]), txdata: 0x1d7c194e400000000000000000000000000000000000000000000000000000000000000dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CompliantCrowdsaleHardcap
Function name: bulkApproveMints(uint256[])
PC address: 648
Estimated Gas Usage: 1199 - 1624
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:1131

s[nonce].weiAmount);



        //No need to use mint-approval on token side, since the minting is already approved in the crowdsale side

        TokenInterface(token).mint(pendingMints[nonce].to, pendingMints[nonce].tokens);

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b8b8b8b8b8b8b8b8b8b8b8b80101010101010101010101010101010101010101b800000000000000000000000000000000000000000000000000000000000001bc00000000000000000000000000000000000000000000000000000000000000b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b80101010101010101010101010101010101010101010101010101010101010101b8b8b8b8b8b8b8b8b8b8b8b80101010101010101010101010101010101010101b8b8b8b8b8b8b8b8b8b8b8b801, value: 0x0
Caller: [CREATOR], function: bulkApproveMints(uint256[]), txdata: 0x3b59cb24ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 860
Estimated Gas Usage: 2681 - 3106
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:537





    /**

    * @dev Must be ca

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101404040404040404040404040010101010101010101010101010101010101010140404040404040404040404001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 881
Estimated Gas Usage: 2719 - 3144
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:545

Calls the contract's finalizati

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101404040404040404040404040010101010101010101010101010101010101010140404040404040404040404001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CompliantCrowdsaleHardcap
Function name: fallback
PC address: 1364
Estimated Gas Usage: 5189 - 40176
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:1043

     * @param reason rea

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 40404040404040404040404001010101010101010101010101010101010101014000000000020101000000000000000000000000000000000000000000000101800000000002010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101404040404040404040404040010101010101010101010101010101010101010140404040404040404040404001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CompliantCrowdsaleHardcap
Function name: transferTokenOwnership(address)
PC address: 2100
Estimated Gas Usage: 3538 - 39329
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:1293
Initial State:

Account: [CREATOR], balance: 0x4018000010203ff6a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000011001010101010201010101080110011008018040000000000280040000000000000004000000000080000080010101010100008000000000020101000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010201010101040101010201040000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: transferTokenOwnership(address), txdata: 0x21e6b53d80808080808080808080808001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CompliantCrowdsaleHardcap
Function name: finalize()
PC address: 2322
Estimated Gas Usage: 2847 - 3272
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:607

tor

    */

    ev

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80808080808080808080808001010101010101010101010101010101010101018000000000000000000000000000000000000000000000000000000000000102a0000000000000000000000000000000000000000000000000000000000000008080808080808080808080808080808080808080808080808080808080808080011001010101010101010801010101010101010100010101010101010101011080808080808080808080808004010801020104100101010102010102010201088080808080808080808080800101010102010101800201400101010101010820808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CompliantCrowdsaleHardcap
Function name: fallback
PC address: 3208
Estimated Gas Usage: 5110 - 40097
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:537





    /**

    * @dev Must be ca

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 40404040404040404040404001010101010101010101010101010101010101014000000000000000000000000000000000000000000000000000000000000101800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101404040404040404040404040010101010101010101010101010101010101010140404040404040404040404001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CompliantCrowdsaleHardcap
Function name: fallback
PC address: 3229
Estimated Gas Usage: 5148 - 40135
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/154417e3774ee8b46f8415138a95222e.sol:545

Calls the contract's finalizati

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 40404040404040404040404001010101010101010101010101010101010101014000000000010000000000000100000000000000000000000000000000000101800000000001000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101404040404040404040404040010101010101010101010101010101010101010140404040404040404040404001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0


