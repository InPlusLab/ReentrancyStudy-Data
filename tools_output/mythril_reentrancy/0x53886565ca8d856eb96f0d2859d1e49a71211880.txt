==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: doAirDrop(address[],uint256,uint256)
PC address: 173
Estimated Gas Usage: 6455 - 79572
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/9d092932bb6ee2f6785cc4e42fe05ccd.sol:139

ess.length;

    for (uint256 i = 0; i < count; i++)

    {

      /* calling transfer function from contract */

      tokenInstance.transfer(_address [i],_amount);

      if((_address [i].balance == 0) && (this.balance >= _ethAmount))

      {

        require(_address [i].send(_ethAmount));

      }

    }

  }



  /*

    Airdrop function which take up a array of address, indvidual token amount and eth amount

   */

   function sendBatch(address[] _recipients, ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000013, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doAirDrop(address[],uint256,uint256), txdata: 0x391c6cecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirDrop
Function name: doAirDrop(address[],uint256,uint256)
PC address: 902
Estimated Gas Usage: 6455 - 79572
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9d092932bb6ee2f6785cc4e42fe05ccd.sol:153

dress [i].sen

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: doAirDrop(address[],uint256,uint256), txdata: 0x391c6cecc0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: doAirDrop(address[],uint256,uint256)
PC address: 1119
Estimated Gas Usage: 6455 - 79572
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9d092932bb6ee2f6785cc4e42fe05ccd.sol:153

dress [i].send(_ethAmount));

      }

    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: doAirDrop(address[],uint256,uint256), txdata: 0x391c6cec80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirDrop
Function name: doAirDrop(address[],uint256,uint256)
PC address: 1119
Estimated Gas Usage: 6455 - 79572
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9d092932bb6ee2f6785cc4e42fe05ccd.sol:153

dress [i].send(_ethAmount));

      }

    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: doAirDrop(address[],uint256,uint256), txdata: 0x391c6cecc0, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AirDrop
Function name: doAirDrop(address[],uint256,uint256)
PC address: 1337
Estimated Gas Usage: 6455 - 79572
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/9d092932bb6ee2f6785cc4e42fe05ccd.sol:165

nt

   */

   function sendBa

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: doAirDrop(address[],uint256,uint256), txdata: 0x391c6cec86, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirDrop
Function name: sendBatch(address[],uint256[])
PC address: 1909
Estimated Gas Usage: 4363 - 45974
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9d092932bb6ee2f6785cc4e42fe05ccd.sol:189

re(owner.send

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sendBatch(address[],uint256[]), txdata: 0x8535d2ecfffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffc280, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: sendBatch(address[],uint256[])
PC address: 2149
Estimated Gas Usage: 4363 - 45974
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9d092932bb6ee2f6785cc4e42fe05ccd.sol:189

re(owner.send(this.balance));

  }



  /*

    fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d2d2d2d2d2d2d2d2d2d2d2d2deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sendBatch(address[],uint256[]), txdata: 0x8535d2ecffffffffffffffffffefffffffffffffffffffffffffffffffffffffffffffc0ff, value: 0x0