==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ProxyBonusContract
Function name: buyTickets(address,uint256)
PC address: 1904
Estimated Gas Usage: 5621 - 76169
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/99cf1bb24ba1b5f5cf628fb1972aa9c0.sol:218


            amount,

            amount,

            amount,



--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000004, value: 0x0
Caller: [ATTACKER], function: buyTickets(address,uint256), txdata: 0x88f5776702020202020202020202020200000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProxyBonusContract
Function name: buyTickets(address,uint256)
PC address: 2074
Estimated Gas Usage: 5621 - 76169
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/99cf1bb24ba1b5f5cf628fb1972aa9c0.sol:234


    }





--------------------
Initial State:

Account: [CREATOR], balance: 0x3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: buyTickets(address,uint256), txdata: 0x88f5776700000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ProxyBonusContract
Function name: buyTickets(address,uint256)
PC address: 2288
Estimated Gas Usage: 5621 - 76169
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/99cf1bb24ba1b5f5cf628fb1972aa9c0.sol:232


        );

    }



    function changeToken(address _token) public onlyManager {

        token = IERC20(_token);

    }

}



library SafeMath {



    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a ==

--------------------
Initial State:

Account: [CREATOR], balance: 0x4002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101020801800101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: buyTickets(address,uint256), txdata: 0x88f5776702020202020202020202020200000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ProxyBonusContract
Function name: buyTickets(address,uint256)
PC address: 2288
Estimated Gas Usage: 5621 - 76169
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/99cf1bb24ba1b5f5cf628fb1972aa9c0.sol:232


        );

    }



    function changeToken(address _token) public onlyManager {

        token = IERC20(_token);

    }

}



library SafeMath {



    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a ==

--------------------
Initial State:

Account: [CREATOR], balance: 0x1041, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800101010201010101000101010180100101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: buyTickets(address,uint256), txdata: 0x88f5776700000000000000000000000000000000000000000000000000000000000000000101020201020101010202020202010101010102010202020202020102020201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ProxyBonusContract
Function name: buyTickets(address,uint256)
PC address: 2288
Estimated Gas Usage: 5621 - 76169
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/99cf1bb24ba1b5f5cf628fb1972aa9c0.sol:232


        );

    }



    function changeToken(address _token) public onlyManager {

        token = IERC20(_token);

    }

}



library SafeMath {



    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a ==

--------------------
Initial State:

Account: [CREATOR], balance: 0x3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: buyTickets(address,uint256), txdata: 0x88f5776700000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101, value: 0x0