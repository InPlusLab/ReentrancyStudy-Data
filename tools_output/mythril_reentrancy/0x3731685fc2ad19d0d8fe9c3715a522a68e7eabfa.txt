==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: AraProxy
Function name: fallback
PC address: 131
Estimated Gas Usage: 1773 - 38453
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14dc66e66725834e08e98fa91301713b.sol:327

ty ^0.4.24;





contract Registry {

  address p

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x10000400, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Library
Function name: init(bytes)
PC address: 253
Estimated Gas Usage: 12947 - 55815
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14dc66e66725834e08e98fa91301713b.sol:647

ry_.getProxyAddress(_contentId), "Proxy not authorized.");

     _;

  }



  function getLibrarySize(bytes32 _identity) public view returns (uint32 size) {

    return libraries_[_identity].size;

  }



  function getLibraryItem(bytes32 _identity, uint32 _index) public view returns (bytes32 contentId) {

    require (_index < libraries_[_identity].size, "Index does not exist.");

    return libraries_[_identity].content[_index];

  }





--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: init(bytes), txdata: 0x4ddf47d4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Library
Function name: fallback
PC address: 707
Estimated Gas Usage: 16964 - 92920
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14dc66e66725834e08e98fa91301713b.sol:721

t256);



  function allow

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addLibraryItem(bytes32,bytes32), txdata: 0x0c2bb965, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Library
Function name: fallback
PC address: 725
Estimated Gas Usage: 16964 - 92920
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14dc66e66725834e08e98fa91301713b.sol:725

er, address _spender)

    public view

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addLibraryItem(bytes32,bytes32), txdata: 0x0c2bb965, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Library
Function name: fallback
PC address: 773
Estimated Gas Usage: 16964 - 92920
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14dc66e66725834e08e98fa91301713b.sol:731

 function transfer(address _to, uint256 _value) pub

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addLibraryItem(bytes32,bytes32), txdata: 0x0c2bb965, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Library
Function name: fallback
PC address: 782
Estimated Gas Usage: 16964 - 92920
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14dc66e66725834e08e98fa91301713b.sol:731

ns (bool);



  function app

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addLibraryItem(bytes32,bytes32), txdata: 0x0c2bb965, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Library
Function name: fallback
PC address: 805
Estimated Gas Usage: 16964 - 92920
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14dc66e66725834e08e98fa91301713b.sol:731

ns (bool);



  function app

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addLibraryItem(bytes32,bytes32), txdata: 0x0c2bb965, value: 0x0


