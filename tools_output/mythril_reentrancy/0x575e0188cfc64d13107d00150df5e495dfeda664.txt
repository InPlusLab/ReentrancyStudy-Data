==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BalancerZAP
Function name: initBalancerZAP(address,address,address,address)
PC address: 1277
Estimated Gas Usage: 26229 - 140981
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:412

(msg.sender);
        }
    }

    function ad

--------------------
Initial State:

Account: [CREATOR], balance: 0xc05e0c60000040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initBalancerZAP(address,address,address,address), txdata: 0x32ae7bc3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BalancerZAP
Function name: initBalancerZAP(address,address,address,address)
PC address: 1331
Estimated Gas Usage: 26229 - 140981
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:416

HOnly(address payab

--------------------
Initial State:

Account: [CREATOR], balance: 0x8c15e0c60000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initBalancerZAP(address,address,address,address), txdata: 0x32ae7bc3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BalancerZAP
Function name: initBalancerZAP(address,address,address,address)
PC address: 1335
Estimated Gas Usage: 26229 - 140981
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:416

ic payable {
        require(t

--------------------
Initial State:

Account: [CREATOR], balance: 0x8c15e0c60000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initBalancerZAP(address,address,address,address), txdata: 0x32ae7bc3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BalancerZAP
Function name: initBalancerZAP(address,address,address,address)
PC address: 1362
Estimated Gas Usage: 26229 - 140981
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:416

ic payable {
        require(t

--------------------
Initial State:

Account: [CREATOR], balance: 0x8c15e0c60000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initBalancerZAP(address,address,address,address), txdata: 0x32ae7bc3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BalancerZAP
Function name: initBalancerZAP(address,address,address,address)
PC address: 1387
Estimated Gas Usage: 26229 - 140981
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:417

s(0), "Invalid add

--------------------
Initial State:

Account: [CREATOR], balance: 0x8c15e0c60000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initBalancerZAP(address,address,address,address), txdata: 0x32ae7bc3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BalancerZAP
Function name: addLiquidityTokenOnly(uint256,address)
PC address: 2434
Estimated Gas Usage: 8572 - 112828
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:457

t reserve1,) 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidityTokenOnly(uint256,address), txdata: 0x59204fed01010101010101010101100101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BalancerZAP
Function name: addLiquidityTokenOnly(uint256,address)
PC address: 2438
Estimated Gas Usage: 8572 - 112828
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:457

HPair)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidityTokenOnly(uint256,address), txdata: 0x59204fed01010101010101010101100101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BalancerZAP
Function name: addLiquidityTokenOnly(uint256,address)
PC address: 2533
Estimated Gas Usage: 8572 - 112828
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:457

e0, uint reserve1,) = IUniswapV2Pair(_tokenWETHPair).getReserves();
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addLiquidityTokenOnly(uint256,address), txdata: 0x59204fed01010101010101010101010101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BalancerZAP
Function name: addLiquidityTokenOnly(uint256,address)
PC address: 2533
Estimated Gas Usage: 8572 - 112828
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:457

e0, uint reserve1,) = IUniswapV2Pair(_tokenWETHPair).getReserves();
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidityTokenOnly(uint256,address), txdata: 0x59204fed01010101010101010101100101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BalancerZAP
Function name: addLiquidityTokenOnly(uint256,address)
PC address: 2661
Estimated Gas Usage: 8572 - 112828
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:462
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidityTokenOnly(uint256,address), txdata: 0x59204fed01010101010101010101100101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BalancerZAP
Function name: addLiquidityTokenOnly(uint256,address)
PC address: 2747
Estimated Gas Usage: 8572 - 112828
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7d7c6f1b4c40dd2f1e2596fb4da01bc8.sol:462
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidityTokenOnly(uint256,address), txdata: 0x59204fed01010101010101010101100101010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101, value: 0x0