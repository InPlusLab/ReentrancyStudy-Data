==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BasicAuth
Function name: fallback
PC address: 167
Estimated Gas Usage: 991 - 1746
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:355

ct StoreGoods is BasicAuth

{

    using 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetAuth(address), txdata: 0xbf7abee6, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BasicAuth
Function name: fallback
PC address: 189
Estimated Gas Usage: 1011 - 1766
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:353



contract StoreGoods is BasicAuth

{

    using I

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetAuth(address), txdata: 0xbf7abee6, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BasicAuth
Function name: ClearAuth(address)
PC address: 252
Estimated Gas Usage: 1013 - 1768
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:355

ct StoreGoods is BasicAuth

{

    using 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: ClearAuth(address), txdata: 0xcc9b714c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BasicAuth
Function name: ClearAuth(address)
PC address: 274
Estimated Gas Usage: 1033 - 1788
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:353



contract StoreGoods is BasicAuth

{

    using I

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ClearAuth(address), txdata: 0xcc9b714c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: StoreGoods
Function name: BuyGoods(address,uint32)
PC address: 1266
Estimated Gas Usage: 225 - 980
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:325

ess target) external Vali

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: BuyGoods(address,uint32), txdata: 0x3567d5ef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StoreGoods
Function name: IsOnSale(uint32)
PC address: 2142
Estimated Gas Usage: 2004 - 2289
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:563
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddGoods(uint32,uint32,uint256,uint32,uint32,uint32,uint32,uint8,uint8,uint8), txdata: 0xddbfd63e0000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010802000000000000000000000000000000000000000000000000000000000002001100400000000000000000000000000000000000000000000000000000000400280800000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: IsOnSale(uint32), txdata: 0x9b10394c0000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreGoods
Function name: GetRealCost(address,uint32)
PC address: 2408
Estimated Gas Usage: 3843 - 39916
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:531

alse;

    }


--------------------
Initial State:

Account: [CREATOR], balance: 0x618, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: GetRealCost(address,uint32), txdata: 0xaf8927c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreGoods
Function name: GetRealCost(address,uint32)
PC address: 2417
Estimated Gas Usage: 4680 - 40753
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:537

 view returns(bool

--------------------
Initial State:

Account: [CREATOR], balance: 0x45980700000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddGoods(uint32,uint32,uint256,uint32,uint32,uint32,uint32,uint8,uint8,uint8), txdata: 0xddbfd63e000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [SOMEGUY], function: GetRealCost(address,uint32), txdata: 0xaf8927c102020202020202020202020200000000000000000100000000000000000000000202020202020202020202020202020202020202020202020202020202, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreGoods
Function name: GetRealCost(address,uint32)
PC address: 2422
Estimated Gas Usage: 4680 - 40753
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:537

iGoods) exter

--------------------
Initial State:

Account: [CREATOR], balance: 0x45980700000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddGoods(uint32,uint32,uint256,uint32,uint32,uint32,uint32,uint8,uint8,uint8), txdata: 0xddbfd63evalue: 0x0
Caller: [SOMEGUY], function: GetRealCost(address,uint32), txdata: 0xaf8927c102020202020202020202020200000000000000000100000000000000000000000202020202020202020202020202020202020202020202020202020202, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: StoreGoods
Function name: GetRealCost(address,uint32)
PC address: 2459
Estimated Gas Usage: 4680 - 40753
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:537

iGoods) external view returns(bool

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020040010308a610, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddGoods(uint32,uint32,uint256,uint32,uint32,uint32,uint32,uint8,uint8,uint8), txdata: 0xddbfd63evalue: 0x0
Caller: [ATTACKER], function: GetRealCost(address,uint32), txdata: 0xaf8927c100000000000000000000000000102000402004100400100880402000010440010000000000000000000000000000000000000000000000000000000008, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: StoreGoods
Function name: DelGoods(uint32)
PC address: 2485
Estimated Gas Usage: 1123 - 1548
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:59



    function IsLimitPart(uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: DelGoods(uint32), txdata: 0xb38de8ce, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: StoreGoods
Function name: SetAuth(address)
PC address: 2569
Estimated Gas Usage: 1167 - 1922
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:355

ct StoreGoods is BasicAuth

{

    using 

--------------------
Initial State:

Account: [CREATOR], balance: 0xb76, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: SetAuth(address), txdata: 0xbf7abee6, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: StoreGoods
Function name: SetAuth(address)
PC address: 2591
Estimated Gas Usage: 1187 - 1942
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:353



contract StoreGoods is BasicAuth

{

    using I

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetAuth(address), txdata: 0xbf7abee6, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: StoreGoods
Function name: ClearAuth(address)
PC address: 2654
Estimated Gas Usage: 1189 - 1944
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:355

ct StoreGoods is BasicAuth

{

    using 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ClearAuth(address), txdata: 0xcc9b714c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: StoreGoods
Function name: ClearAuth(address)
PC address: 2676
Estimated Gas Usage: 1209 - 1964
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:353



contract StoreGoods is BasicAuth

{

    using I

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ClearAuth(address), txdata: 0xcc9b714c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: StoreGoods
Function name: AddGoods(uint32,uint32,uint256,uint32,uint32,uint32,uint32,uint8,uint8,uint8)
PC address: 2732
Estimated Gas Usage: 1315 - 1740
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01fd8fa779b4cb40227ed90fdaaeaf53.sol:59



    function IsLimitPart(uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c000004000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: AddGoods(uint32,uint32,uint256,uint32,uint32,uint32,uint32,uint8,uint8,uint8), txdata: 0xddbfd63e, value: 0x0


