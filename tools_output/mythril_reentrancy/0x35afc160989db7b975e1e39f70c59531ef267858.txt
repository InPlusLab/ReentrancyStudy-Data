==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLiquidityContract
Function name: withdraw_token(uint256)
PC address: 3777
Estimated Gas Usage: 10438 - 66180
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ea4e72c95d3e2731729dfdbbb21cf9b8.sol:221



    eth_balance = eth_balance.add(msg.v

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: get_amount_buy(uint256)
PC address: 4085
Estimated Gas Usage: 2312 - 2407
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ea4e72c95d3e2731729dfdbbb21cf9b8.sol:475

her);  

    

  }



  function activate_admin_commission() publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: get_amount_buy(uint256), txdata: 0x7b5825d5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: get_amount_sell(uint256)
PC address: 4085
Estimated Gas Usage: 2444 - 2539
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ea4e72c95d3e2731729dfdbbb21cf9b8.sol:460




    return (traded_token_balance.mul(_amount)).div(eth_balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: get_amount_sell(uint256), txdata: 0xa45230ec, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: withdraw_token(uint256)
PC address: 4347
Estimated Gas Usage: 2827 - 3582
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ea4e72c95d3e2731729dfdbbb21cf9b8.sol:215

 }



  function transferETHToCon

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: withdraw_eth(uint256)
PC address: 4347
Estimated Gas Usage: 2871 - 3626
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ea4e72c95d3e2731729dfdbbb21cf9b8.sol:247

unt) private { 



    t

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_eth(uint256), txdata: 0x30a95e6701, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLiquidityContract
Function name: seed_traded_token()
PC address: 4638
Estimated Gas Usage: 17656 - 93823
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ea4e72c95d3e2731729dfdbbb21cf9b8.sol:203

romContract(address _to, uint256 _amount) private {

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0