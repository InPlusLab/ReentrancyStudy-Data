==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LGRSale
Function name: fallback
PC address: 214
Estimated Gas Usage: 1695 - 1790
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:173

 executeSell();

      }

    } else {

      executeSell();

    }

  }

  

  function executeSell() private {

    uint256 tokensToSell;

    require(msg.value >= pricePerToken[currentLevel], "Minimum amount is 1 token");

    tokensToSell = ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LGRSale
Function name: fallback
PC address: 977
Estimated Gas Usage: 26878 - 156197
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:209

) {

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x148014c2821000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LGRSale
Function name: fallback
PC address: 999
Estimated Gas Usage: 26878 - 156197
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:209

_kill == true) {

      selfdestruct(owne

--------------------
Initial State:

Account: [CREATOR], balance: 0x148014c2821000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LGRSale
Function name: fallback
PC address: 1002
Estimated Gas Usage: 26878 - 156197
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:219

 functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x148014c2821000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LGRSale
Function name: fallback
PC address: 1021
Estimated Gas Usage: 26878 - 156197
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:213

}

  }



  function setWallet(add

--------------------
Initial State:

Account: [CREATOR], balance: 0x148014c2821000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LGRSale
Function name: fallback
PC address: 1024
Estimated Gas Usage: 26878 - 156197
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:219

let) public o

--------------------
Initial State:

Account: [CREATOR], balance: 0x148014c2821000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x5543df729c000

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LGRSale
Function name: fallback
PC address: 1056
Estimated Gas Usage: 20984 - 130303
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:219

let) public onlyOwner {

    wall

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000020, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x4f94ae6af8000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LGRSale
Function name: fallback
PC address: 1056
Estimated Gas Usage: 26878 - 156197
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:219

let) public onlyOwner {

    wall

--------------------
Initial State:

Account: [CREATOR], balance: 0x148014c2821000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x5543df729c000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LGRSale
Function name: levelEndDate(uint256)
PC address: 1109
Estimated Gas Usage: 177 - 272
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:139

  uint256 public ethRised;



  constructor() public {

    currentLe

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: levelEndDate(uint256), txdata: 0x2ccdd95a80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LGRSale
Function name: setLevelEndDate(uint256,uint256)
PC address: 1244
Estimated Gas Usage: 1099 - 1524
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:235
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLevelEndDate(uint256,uint256), txdata: 0x6efef04d80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LGRSale
Function name: pricePerToken(uint256)
PC address: 1413
Estimated Gas Usage: 353 - 448
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/33a124c473d5911b41972a5853049d20.sol:133

0, 1546300740];

  uint8 public currentLevel;

  uint256 public tokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: pricePerToken(uint256), txdata: 0xd1cc6e3f80, value: 0x0


