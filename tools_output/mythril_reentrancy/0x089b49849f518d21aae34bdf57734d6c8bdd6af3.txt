==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ShowEth2DAI
Function name: constructor
PC address: 421
Estimated Gas Usage: 31975 - 218155
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/ea844391af24518f3a749b64fb12c983.sol:58

(wethToken.approve(address(otc), 2**25

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ShowEth2DAI
Function name: constructor
PC address: 474
Estimated Gas Usage: 31975 - 218155
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ea844391af24518f3a749b64fb12c983.sol:61

tion() ex

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ShowEth2DAI
Function name: constructor
PC address: 477
Estimated Gas Usage: 31975 - 218155
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ea844391af24518f3a749b64fb12c983.sol:62

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ShowEth2DAI
Function name: constructor
PC address: 619
Estimated Gas Usage: 31975 - 218155
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ea844391af24518f3a749b64fb12c983.sol:61

tion() external payable {
        
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShowEth2DAI
Function name: calcOfferLimits(bool,uint256,uint256,uint256)
PC address: 1476
Estimated Gas Usage: 376 - 471
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ea844391af24518f3a749b64fb12c983.sol:187

FERS + offerLevel;
        maxTak

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calcOfferLimits(bool,uint256,uint256,uint256), txdata: 0xaa7d0cbf0101010101010101010101010101010101010101010101010101010101010101101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ShowEth2DAI
Function name: calcDaiTokenAmount(bool,uint256,uint256,uint256)
PC address: 1963
Estimated Gas Usage: 422 - 893
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ea844391af24518f3a749b64fb12c983.sol:67

= daiAmount / 10 ** 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080042080845, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calcDaiTokenAmount(bool,uint256,uint256,uint256), txdata: 0xd4d2a7b300000000000000000000000000000000000000000000000000000000000000002020202020202020202020202020202020202020202020202020202020202020c4f130e6157d3ceb914d0b39f07dd52ae2082a5aa0af1101a73d02e28900004800000000000000000000000000101080c24d110482cc404f028000b136142450, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ShowEth2DAI
Function name: calcDaiTokenAmount(bool,uint256,uint256,uint256)
PC address: 1969
Estimated Gas Usage: 325 - 420
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/ea844391af24518f3a749b64fb12c983.sol:67

= daiAmount / 10 ** 18;
    }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calcDaiTokenAmount(bool,uint256,uint256,uint256), txdata: 0xd4d2a7b30101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0