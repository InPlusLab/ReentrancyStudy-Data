==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WithdrawFromKickTheCoin
Function name: fallback
PC address: 307
Estimated Gas Usage: 2594 - 37395
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:407
Initial State:

Account: [CREATOR], balance: 0x122008283, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setKtcAddress(address), txdata: 0x7ff988c5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x02, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KickTheCoin
Function name: fallback
PC address: 1534
Estimated Gas Usage: 38191 - 140825
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:94

alue, targetBlockNumber);
    }

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x25bf6196bd10000

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: KickTheCoin
Function name: getCurrentValue()
PC address: 1702
Estimated Gas Usage: 994 - 1089
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:143

er()
    public
    constant
    returns (address)
    {
        if (isGameActive()) {
            return l

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCurrentValue(), txdata: 0x0f76c114, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: KickTheCoin
Function name: sundown()
PC address: 1829
Estimated Gas Usage: 1897 - 2322
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:46

));
        _;
    }

    modifier onlyDuringNo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sundown(), txdata: 0x16fef995, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KickTheCoin
Function name: sundown()
PC address: 1867
Estimated Gas Usage: 38191 - 140825
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:280

etBlock;
    }

    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x25bf6196bd10000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x25bf6196bd10000

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: KickTheCoin
Function name: getLastKicker()
PC address: 2066
Estimated Gas Usage: 1082 - 1177
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:155

lShares(address shareHolder)
    public
    {
        var share = shares[shareHolder];
        if (share == 0) {
            re

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getLastKicker(), txdata: 0x35cd4cc4, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: KickTheCoin
Function name: changeGameParameters(uint256,uint256)
PC address: 2573
Estimated Gas Usage: 2109 - 2534
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:46

));
        _;
    }

    modifier onlyDuringNo

--------------------
Initial State:

Account: [CREATOR], balance: 0xda0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeGameParameters(uint256,uint256), txdata: 0x64d6a95f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: KickTheCoin
Function name: getBlocksLeftInCurrentKick()
PC address: 2630
Estimated Gas Usage: 1197 - 1292
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:200


    returns (uint)
    {
        return numberOfBlocksPerKick;
    }

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getBlocksLeftInCurrentKick(), txdata: 0x7329036a, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KickTheCoin
Function name: airDrop(address)
PC address: 3213
Estimated Gas Usage: 3098 - 71895
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:185

  }

    function getBlocksLeftInC

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: airDrop(address), txdata: 0xcd18d5a4, value: 0x2

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: KickTheCoin
Function name: sunrise()
PC address: 3678
Estimated Gas Usage: 2359 - 2784
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5beb3f27deffe6f3fcdcaec9778c5e89.sol:46

));
        _;
    }

    modifier onlyDuringNo

--------------------
Initial State:

Account: [CREATOR], balance: 0x800c00000000c5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sunrise(), txdata: 0xfc06d2a6, value: 0x0