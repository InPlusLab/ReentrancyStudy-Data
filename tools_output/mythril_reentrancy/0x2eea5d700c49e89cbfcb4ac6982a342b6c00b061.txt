==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RandomUtil
Function name: getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32)
PC address: 352
Estimated Gas Usage: 549 - 2005
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:143

iteData{

    function GetAddressByName(bytes32 name) publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getRandom(bytes32), txdata: 0xb737ed1b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RandomUtil
Function name: getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32)
PC address: 353
Estimated Gas Usage: 559 - 2015
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:129

stamp) + (block.difficulty) 

           +((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) 

           +(block.gaslimit) +((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)) + (block.number)));

           return value;

    }

}



contract IInviteData{

    function GetAddressByName(bytes32 name) public view returns (address);

}

contract IConfigData {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getRandom(bytes32), txdata: 0xb737ed1b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RandomUtil
Function name: getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32)
PC address: 557
Estimated Gas Usage: 913 - 3730
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:133

ed(msg.sender)))) / (now)) + (block.number)));

           ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getRandom(bytes32), txdata: 0xb737ed1b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RandomUtil
Function name: getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32)
PC address: 567
Estimated Gas Usage: 1443 - 6090
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:133

   +(block.gaslimit) +((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)) + (block.number)));

           return value;

    }

}



contract IInviteData{

    function GetAddressByName(bytes32 name) public view returns (a

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000004001a419, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getRandom(bytes32), txdata: 0xb737ed1b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: transferToOwner() or transferToOwner()
PC address: 824
Estimated Gas Usage: 1806 - 2231
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferToOwner(), txdata: 0x2d90ae94, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: updateLock(bool) or updateLock(bool)
PC address: 1247
Estimated Gas Usage: 1117 - 1542
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateLock(bool), txdata: 0xa1f91057, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 1687
Estimated Gas Usage: 1139 - 1564
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRBasketballConfig
Function name: transferToOwner() or transferToOwner()
PC address: 1803
Estimated Gas Usage: 1850 - 2275
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferToOwner(), txdata: 0x2d90ae94, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRBasketballConfig
Function name: updateLock(bool) or updateLock(bool)
PC address: 2362
Estimated Gas Usage: 1271 - 1696
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0xb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateLock(bool), txdata: 0xa1f91057, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRBasketballConfig
Function name: getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32) or getRandom(bytes32)
PC address: 2897
Estimated Gas Usage: 3050 - 38318
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:285

ns (uint) {

       return m

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getRandom(bytes32), txdata: 0xb737ed1b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRBasketballConfig
Function name: GetAddressByName(bytes32) or GetAddressByName(bytes32) or GetAddressByName(bytes32)
PC address: 3205
Estimated Gas Usage: 3954 - 39552
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:295
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: GetAddressByName(bytes32), txdata: 0xba9d407a, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRBasketballConfig
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 3360
Estimated Gas Usage: 1359 - 1784
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/4442058d1acc50034b902cf6fd3b9423.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2940080020001835, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0