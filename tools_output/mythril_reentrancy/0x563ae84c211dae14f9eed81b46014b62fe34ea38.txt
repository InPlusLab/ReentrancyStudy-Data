==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: JoyToken
Function name: fallback
PC address: 1718
Estimated Gas Usage: 2343 - 4414
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:861

 onlySale() {

	   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 2071
Estimated Gas Usage: 29123 - 162980
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:427

wed to a spe

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 2071
Estimated Gas Usage: 29387 - 163904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:427

wed to a spe

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 2071
Estimated Gas Usage: 29541 - 164058
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:427

wed to a spe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 2071
Estimated Gas Usage: 29783 - 163640
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:427

wed to a spe

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 2396
Estimated Gas Usage: 29123 - 162980
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1071

ire 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 2473
Estimated Gas Usage: 29123 - 162980
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1071

ire (!sendedToAdv

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 2473
Estimated Gas Usage: 29123 - 162980
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1071

ire (!sendedToAdv

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 2515
Estimated Gas Usage: 29123 - 162980
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1071

ire (!sendedToAdvisorsLock);


--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 2524
Estimated Gas Usage: 7007 - 78676
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1069

rsAddress != address(0x0));

        require (!sendedToAdvisorsLock);

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 2533
Estimated Gas Usage: 29123 - 162980
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1073

 (sale.getEndDate() > 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 2588
Estimated Gas Usage: 29123 - 162980
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1073

 (sale.getEndDate() > 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 2591
Estimated Gas Usage: 29123 - 162980
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1073

CK_TIME) );


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 3285
Estimated Gas Usage: 29387 - 163904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1089

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 3365
Estimated Gas Usage: 29387 - 163904
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1089

       require (!

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 3365
Estimated Gas Usage: 29387 - 163904
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1089

       require (!

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 3415
Estimated Gas Usage: 7271 - 79600
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1087

ire (_serviceAddress != address(0x0));

        require (!se

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 3424
Estimated Gas Usage: 29387 - 163904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1089

);

        sendedT

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 3477
Estimated Gas Usage: 29387 - 163904
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1089

);

        sendedT

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 3480
Estimated Gas Usage: 29387 - 163904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1093

serviceA

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: JoyToken
Function name: symbol()
PC address: 3589
Estimated Gas Usage: 2849 - 4920
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:855

    _;

    }



   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 3878
Estimated Gas Usage: 29541 - 164058
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 3958
Estimated Gas Usage: 29541 - 164058
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 3958
Estimated Gas Usage: 29541 - 164058
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 4008
Estimated Gas Usage: 7425 - 79754
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 4017
Estimated Gas Usage: 29541 - 164058
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 4074
Estimated Gas Usage: 29541 - 164058
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 4077
Estimated Gas Usage: 29541 - 164058
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 4933
Estimated Gas Usage: 29783 - 163640
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 5010
Estimated Gas Usage: 29783 - 163640
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 5010
Estimated Gas Usage: 29783 - 163640
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 5052
Estimated Gas Usage: 29783 - 163640
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 5061
Estimated Gas Usage: 7667 - 79336
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 5070
Estimated Gas Usage: 29783 - 163640
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 5129
Estimated Gas Usage: 29783 - 163640
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 5132
Estimated Gas Usage: 29783 - 163640
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:1099
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 5224
Estimated Gas Usage: 29123 - 162980
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:939

k = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 5224
Estimated Gas Usage: 29387 - 163904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:939

k = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 5224
Estimated Gas Usage: 29541 - 164058
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:939

k = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisorsLock(address)
PC address: 5224
Estimated Gas Usage: 29783 - 163640
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:939

k = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisorsLock(address), txdata: 0xf90fa5dd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 5975
Estimated Gas Usage: 29123 - 162980
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:741

 of the toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 5975
Estimated Gas Usage: 29387 - 163904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:741

 of the toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 5975
Estimated Gas Usage: 29541 - 164058
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:741

 of the toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 5994
Estimated Gas Usage: 29123 - 162980
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:741

burns an amount of the token of a give

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 5994
Estimated Gas Usage: 29387 - 163904
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:741

burns an amount of the token of a give

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 5994
Estimated Gas Usage: 29541 - 164058
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:741

burns an amount of the token of a give

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 6019
Estimated Gas Usage: 29123 - 162980
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:743

m the sender's all

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeam(address)
PC address: 6019
Estimated Gas Usage: 29387 - 163904
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:743

m the sender's all

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeam(address), txdata: 0x748e4f4000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToAdvisors(address)
PC address: 6019
Estimated Gas Usage: 29541 - 164058
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:743

m the sender's all

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToAdvisors(address), txdata: 0xa0f7bbcd00000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: JoyToken
Function name: sendTokensToTeamLock(address)
PC address: 6064
Estimated Gas Usage: 29123 - 162980
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3032ad331a3493810a50933b485492a5.sol:743

ccount, deducting from the sender's allowance for 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendTokensToTeamLock(address), txdata: 0x346f599100000000000000000000000001, value: 0x0


