==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: future1new
Function name: admin_token_withdraw(address,address,uint256)
PC address: 2113
Estimated Gas Usage: 10135 - 66357
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fd1beda2503d091d46a2929a9b7eebbf.sol:131

public view returns(uint256)     

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: admin_token_withdraw(address,address,uint256), txdata: 0x5ed15d91000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001010101010101010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: future1new
Function name: safeSub(uint256,uint256)
PC address: 2221
Estimated Gas Usage: 442 - 818
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/fd1beda2503d091d46a2929a9b7eebbf.sol:83

balanceOf(addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: safeSub(uint256,uint256), txdata: 0xa293d1e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: future1new
Function name: transfer(address,uint256) or transfer(address,uint256)
PC address: 2451
Estimated Gas Usage: 8204 - 63811
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fd1beda2503d091d46a2929a9b7eebbf.sol:99

en] = safeAdd(dep_token[msg.sender][token] , tokens);

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000100000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: future1new
Function name: transfer(address,uint256) or transfer(address,uint256)
PC address: 2636
Estimated Gas Usage: 8204 - 63811
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd1beda2503d091d46a2929a9b7eebbf.sol:107

(address token, address to, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000100000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: future1new
Function name: transfer(address,uint256) or transfer(address,uint256)
PC address: 2769
Estimated Gas Usage: 8204 - 63811
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd1beda2503d091d46a2929a9b7eebbf.sol:105

   

     function admin_token_withdraw(address token, address to, uint256 to

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000100000000000010, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: future1new
Function name: safeAdd(uint256,uint256)
PC address: 2991
Estimated Gas Usage: 419 - 795
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/fd1beda2503d091d46a2929a9b7eebbf.sol:71

unction safeSub

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: safeAdd(uint256,uint256), txdata: 0xe6cb901380000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0