==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStampRegister
Function name: getAuditOutcome(address,bytes32)
PC address: 641
Estimated Gas Usage: 1611 - 4388
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatavalue: 0x0
Caller: [CREATOR], function: getAuditOutcome(address,bytes32), txdata: 0x1f74de51, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStampRegister
Function name: registerAuditOutcome(address,bytes32,bool)
PC address: 1542
Estimated Gas Usage: 8521 - 32734
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatavalue: 0x0
Caller: [CREATOR], function: changeSolidStampContract(address), txdata: 0x545a5896000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: registerAuditOutcome(address,bytes32,bool), txdata: 0xadcf483100000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3228
Estimated Gas Usage: 29025 - 151713
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:699



        Rewards[hashAuditorCode] = currentReward.add(msg.value);

        TotalR

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000000000000000000010000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3457
Estimated Gas Usage: 29025 - 151713
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000102002002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10010000000800000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3524
Estimated Gas Usage: 29025 - 151713
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:709

uest = AuditRequests[has

--------------------
Initial State:

Account: [CREATOR], balance: 0x68204800441100a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000020000000000000010000000400200000000000008000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3579
Estimated Gas Usage: 29025 - 151713
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:711



            // first request from msg.sender to audit

--------------------
Initial State:

Account: [CREATOR], balance: 0x68204800441100a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000020000000000000010000000400200000000000008000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3582
Estimated Gas Usage: 29025 - 151713
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:715

           AuditReq

--------------------
Initial State:

Account: [CREATOR], balance: 0x68204800441100a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000020000000000000010000000400200000000000008000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3601
Estimated Gas Usage: 29025 - 151713
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:713

odeHash by _auditor

            AuditRequests[hashAudit

--------------------
Initial State:

Account: [CREATOR], balance: 0x68204800441100a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000020000000000000010000000400200000000000008000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3709
Estimated Gas Usage: 29025 - 151713
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x304a10400498020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3777
Estimated Gas Usage: 29025 - 151713
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:723

ireDate);

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x68204800441100a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000020000000000000010000000400200000000000008000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3830
Estimated Gas Usage: 29025 - 151713
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:729

ount.add(msg.value);

            // if new expireDate is later than existing one - increase the existing one

            if ( expireDate > request.expi

--------------------
Initial State:

Account: [CREATOR], balance: 0x68204800441100a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000020000000000000010000000400200000000000008000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 3840
Estimated Gas Usage: 29025 - 151713
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:729

ount.add(msg.value);

            // if new expireDate is later than existing one - increase the existing one

            if ( expireDate > request.expi

--------------------
Initial State:

Account: [CREATOR], balance: 0x68204800441100a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000020000000000000010000000400200000000000008000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 5571
Estimated Gas Usage: 5365 - 43508
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:335

n and an upgra

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003, value: 0x1

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SolidStamp
Function name: requestAudit(address,bytes32,uint256)
PC address: 5572
Estimated Gas Usage: 5375 - 43518
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/4b6db612a0bd6a054d97891107f591b7.sol:335

n and an upgra

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000001043, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: requestAudit(address,bytes32,uint256), txdata: 0x9bf1f14800000000000000000000000080080080008080010080400101100100000001000000011080000000000800000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x1