==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LptOrderBook
Function name: createLptSellOrder(uint256,uint256,uint256,uint256)
PC address: 2320
Estimated Gas Usage: 29893 - 166533
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:377

ic {

        LptSellOrder storage lptSellOrder = lptSellOrders[msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x203b7be, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: createLptSellOrder(uint256,uint256,uint256,uint256), txdata: 0xa84bacd40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: createLptSellOrder(uint256,uint256,uint256,uint256)
PC address: 2420
Estimated Gas Usage: 29893 - 166533
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:383

  require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);



        daiToken.transfer(msg.sender, l

--------------------
Initial State:

Account: [CREATOR], balance: 0x203bfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: createLptSellOrder(uint256,uint256,uint256,uint256), txdata: 0xa84bacd40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: createLptSellOrder(uint256,uint256,uint256,uint256)
PC address: 2427
Estimated Gas Usage: 29893 - 166533
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:383

  require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);



        daiToken.transfer(msg.sender, l

--------------------
Initial State:

Account: [CREATOR], balance: 0x203bfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: createLptSellOrder(uint256,uint256,uint256,uint256), txdata: 0xa84bacd40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: createLptSellOrder(uint256,uint256,uint256,uint256)
PC address: 2436
Estimated Gas Usage: 29893 - 166533
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:383

  require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);



        daiToken.transfer(msg.sender, l

--------------------
Initial State:

Account: [CREATOR], balance: 0x203bfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: createLptSellOrder(uint256,uint256,uint256,uint256), txdata: 0xa84bacd40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: createLptSellOrder(uint256,uint256,uint256,uint256)
PC address: 2442
Estimated Gas Usage: 29893 - 166533
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:383

  require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);



        daiToken.transfer(msg.sender, l

--------------------
Initial State:

Account: [CREATOR], balance: 0x203bfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: createLptSellOrder(uint256,uint256,uint256,uint256), txdata: 0xa84bacd40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: createLptSellOrder(uint256,uint256,uint256,uint256)
PC address: 2450
Estimated Gas Usage: 29893 - 166533
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:383

  require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);



        daiToken.transfer(msg.sender, l

--------------------
Initial State:

Account: [CREATOR], balance: 0x203bfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: createLptSellOrder(uint256,uint256,uint256,uint256), txdata: 0xa84bacd40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: createLptSellOrder(uint256,uint256,uint256,uint256)
PC address: 2478
Estimated Gas Usage: 29893 - 166533
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:383

  require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);



        daiToken.transfer(msg.sender, l

--------------------
Initial State:

Account: [CREATOR], balance: 0x203bfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: createLptSellOrder(uint256,uint256,uint256,uint256), txdata: 0xa84bacd40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LptOrderBook
Function name: cancelLptSellOrder()
PC address: 2719
Estimated Gas Usage: 30490 - 168116
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:405

 storage lptSellOrder = lptSellOrders[_sellOrderCreator];



 

--------------------
Initial State:

Account: [CREATOR], balance: 0x20bbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: cancelLptSellOrder(), txdata: 0xaded99f4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: cancelLptSellOrder()
PC address: 2780
Estimated Gas Usage: 30490 - 168116
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:409

e(lptSellOrder.lptSellValue > 0,

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: cancelLptSellOrder(), txdata: 0xaded99f4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: cancelLptSellOrder()
PC address: 2787
Estimated Gas Usage: 30490 - 168116
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:409

e(lptSellOrder.lptSellValue > 0,

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: cancelLptSellOrder(), txdata: 0xaded99f4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: cancelLptSellOrder()
PC address: 2793
Estimated Gas Usage: 30490 - 168116
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:409

e(lptSellOrder.lptSellValue > 0,

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: cancelLptSellOrder(), txdata: 0xaded99f4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: cancelLptSellOrder()
PC address: 2801
Estimated Gas Usage: 30490 - 168116
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:409

e(lptSellOrder.lptSellValue > 0,

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: cancelLptSellOrder(), txdata: 0xaded99f4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: cancelLptSellOrder()
PC address: 2806
Estimated Gas Usage: 30490 - 168116
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:409

e(lptSellOrder.lptSellValue > 0,

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: cancelLptSellOrder(), txdata: 0xaded99f4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LptOrderBook
Function name: cancelLptSellOrder()
PC address: 2818
Estimated Gas Usage: 30490 - 168116
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/10a7860d89f05c5314d32b8f0fb34802.sol:409

e(lptSellOrder.lptSellValue > 0,

--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: cancelLptSellOrder(), txdata: 0xaded99f4, value: 0x0


