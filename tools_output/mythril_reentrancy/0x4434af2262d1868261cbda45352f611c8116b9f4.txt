==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 2501
Estimated Gas Usage: 3618 - 4373
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:185

weiAmount.mul(decimalsMu

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000100008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0202020202020202020202020401010401010104200101010204800801010101000000000000000000000000000000000000000000000000000000000000010001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: totalSupply() or totalSupply()
PC address: 3225
Estimated Gas Usage: 2660 - 38021
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:252

ken.balanceOf(_owner);
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000004000000000002, value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: enableMasterTransfers()
PC address: 3523
Estimated Gas Usage: 3548 - 38679
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:289


      assembly {
          size := ex

--------------------
Initial State:

Account: [CREATOR], balance: 0x100080400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000200020200000000000000000000000010000000800000001000100010201, value: 0x0
Caller: [CREATOR], function: enableMasterTransfers(), txdata: 0x24fad665, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: lockMasterTransfers()
PC address: 3787
Estimated Gas Usage: 3570 - 38701
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:297

tes Proof tokens to the given Proof Tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000441000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000400000000000000000000001, value: 0x0
Caller: [CREATOR], function: lockMasterTransfers(), txdata: 0x2bb70e54, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: changeController(address)
PC address: 4037
Estimated Gas Usage: 3641 - 38442
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:274

 < endTime);
    proofToken.enableTransfer

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000010200000000010000000000000001, value: 0x0
Caller: [ATTACKER], function: changeController(address), txdata: 0x3cebb82302020202020202020202020201, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: balanceOf(address) or balanceOf(address)
PC address: 5076
Estimated Gas Usage: 3119 - 38575
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:261

l(_newController);
  }


  f

--------------------
Initial State:

Account: [CREATOR], balance: 0x2004000022040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000200000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: balanceOf(address), txdata: 0x70a08231, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: lockTransfers()
PC address: 5246
Estimated Gas Usage: 2337 - 2762
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:286

  function isContract(

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000008002018080012002010201400104010104012001000000000000000000000000000000000000002000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: lockTransfers(), txdata: 0x82b74b89, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: lockTransfers()
PC address: 5406
Estimated Gas Usage: 4772 - 39903
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:286

 _addr) constant internal returns

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000001001, value: 0x0
Caller: [CREATOR], function: lockTransfers(), txdata: 0x82b74b89, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: enableTransfers()
PC address: 5703
Estimated Gas Usage: 1568 - 1663
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:278

c onlyOwner {
    proofToken.enableMasterTransfers(true);
  }

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010410010140012001011001200402010401000000000000010000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: enableTransfers()
PC address: 5950
Estimated Gas Usage: 4878 - 40009
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:282

n lockMasterTransfers() public o

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000008000000000000000000000001, value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 6900
Estimated Gas Usage: 2681 - 3436
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:239

en supply
  * @return total sup

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010801010101010101010101010101400101000000000000000000000000000000000000000000000000000000000001000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 6951
Estimated Gas Usage: 3567 - 4322
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b8a40bfc12519f22d58ccd594502c4e6.sol:243

Supply();
  }

  /**
  * Returns token holder Proof 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4040404040404040404040400401020101011001011001010401020140200140000000000000000000000000000000000000000000000000000000000000010001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1