with mythril_dir
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20Shifted
Function name: name()
PC address: 1021
Estimated Gas Usage: 1379 - 2319
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:363

reviousOwner

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatavalue: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BTCShifter
Function name: claimTokenOwnership()
PC address: 1544
Estimated Gas Usage: 2589 - 37295
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:508

inShiftAmount = _minSh

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: claimTokenOwnership(), txdata: 0x10731a65, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shifter
Function name: claimTokenOwnership()
PC address: 1544
Estimated Gas Usage: 2589 - 37295
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:508

inShiftAmount = _minSh

--------------------
Initial State:

Account: [CREATOR], balance: 0x2282000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: claimTokenOwnership(), txdata: 0x10731a65, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZECShifter
Function name: claimTokenOwnership()
PC address: 1544
Estimated Gas Usage: 2589 - 37295
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:508

inShiftAmount = _minSh

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: claimTokenOwnership(), txdata: 0x10731a65, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BTCShifter
Function name: transferTokenOwnership(address)
PC address: 1725
Estimated Gas Usage: 5102 - 73854
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:514

wner {
        
        require(_nextFeeRecipient

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shifter
Function name: transferTokenOwnership(address)
PC address: 1725
Estimated Gas Usage: 5102 - 73854
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:514

wner {
        
        require(_nextFeeRecipient

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZECShifter
Function name: transferTokenOwnership(address)
PC address: 1725
Estimated Gas Usage: 5102 - 73854
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:514

wner {
        
        require(_nextFeeRecipient

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 1783
Estimated Gas Usage: 347 - 442
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:687

en), "failed to transfer base token");
            emit LogAddLiqu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BTCShifter
Function name: transferTokenOwnership(address)
PC address: 1808
Estimated Gas Usage: 5102 - 73854
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:516

(0x0), "fee recipient cannot be 0x0")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shifter
Function name: transferTokenOwnership(address)
PC address: 1808
Estimated Gas Usage: 5102 - 73854
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:516

(0x0), "fee recipient cannot be 0x0")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZECShifter
Function name: transferTokenOwnership(address)
PC address: 1808
Estimated Gas Usage: 5102 - 73854
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:516

(0x0), "fee recipient cannot be 0x0")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BTCShifter
Function name: transferTokenOwnership(address)
PC address: 1808
Estimated Gas Usage: 5102 - 73854
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:516

(0x0), "fee recipient cannot be 0x0")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: transferTokenOwnership(address), txdata: 0x21e6b53d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20Shifted
Function name: symbol()
PC address: 1871
Estimated Gas Usage: 1444 - 2384
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:367

ender;
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatavalue: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2432
Estimated Gas Usage: 20745 - 132176
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:701

idity) public view returns (uint256) {
        require(totalSupply() != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a000000000000000000000000000000000000000100000201010100100110004000000000000000000000000000000000000000000000000000000000000000000005ad9100c001003030902480460000708104202000280020c20002223000494000080120000808000101040101010104000820804001010100000001000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DEXReserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2432
Estimated Gas Usage: 20745 - 132176
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:701

idity) public view returns (uint256) {
        require(totalSupply() != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a00000000000000000000000000000000000000002000010200010000020000010000000000000000000000000000000000000000000000000000000000000000101008b1884932b0b00a2460b88445030890107414642913cc0dc5dba2022b0e8000010100101001010204020004020804020120100000000210000000400000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZEC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2432
Estimated Gas Usage: 20745 - 132176
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:701

idity) public view returns (uint256) {
        require(totalSupply() != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x14026, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d5d5d5d5d5d5d5d5d5d5d5d5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a0000000000000000000000000000000000000001010001000000000000000102000000000000000000000000000000000000000000000000000000000000000044c020c6668392063c0534669108a00257c92123ddad4819c865818146d52b2d4002080004084000020820004000020804010800000800008002000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2634
Estimated Gas Usage: 20745 - 132176
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:704

y();


--------------------
Initial State:

Account: [CREATOR], balance: 0x230a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 929292929292929292929292deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a000000000000000000000000000000000000000000012000000101000001000000000000000000000000000000000000000000000000000000000000000000001040010001004850000c002522240600608930110010009200c23111000080012004100004800020028020804000100040010204100880400140000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2727
Estimated Gas Usage: 20745 - 132176
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:704

y();
    }

    function expectedBaseTokenAmount(uint256 _q

--------------------
Initial State:

Account: [CREATOR], balance: 0x42000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1212121212121212121212120000000000000000000000000000000000000000121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a000000000000000000000000010001010100020000010100020100000201000000000000000000000000000000000000000000000000000000000000000000004008c809180000012080122080c0018020088110200100008030d000c20c0b053002010000080010010002400002000402080402080402400000000000084002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DEXReserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2727
Estimated Gas Usage: 20745 - 132176
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:704

y();
    }

    function expectedBaseTokenAmount(uint256 _q

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1010101010101010101010100000000000000000000000000000000000000000101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a00000000000000000000000004000000020001000001000100000001000201000000000000000000000000000000000000000000000000000000000000000000400000008000000040421400040428088100004080002004000111000c1000523080080480082002002010082002012002080410040080000000000010000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZEC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2727
Estimated Gas Usage: 20745 - 132176
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:704

y();
    }

    function expectedBaseTokenAmount(uint256 _q

--------------------
Initial State:

Account: [CREATOR], balance: 0x4a842214302009c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800104011010020010088000801020208008004004808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a0000000000000000000000000001800220801008800020010120100210000108000000000000000000000000000000000000000000000000000000000000000080420c12494005be02048510110820c0c6022a081010800058aa04c0e07305b48040000104000200808020000240088080000120024000100000400802000010, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2727
Estimated Gas Usage: 20745 - 132176
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:704

y();
    }

    function expectedBaseTokenAmount(uint256 _q

--------------------
Initial State:

Account: [CREATOR], balance: 0x104010001210a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a00000000000000000000000040012008100200040000000000000000010202100000000000000000000000000000000000000000000000000000000000000000088777330a4b2947b222d8182129444c421084d14430619411806550ba903660aa8a400000000404000040040800000000200000000000010000000110000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2727
Estimated Gas Usage: 20745 - 132176
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:704

y();
    }

    function expectedBaseTokenAmount(uint256 _q

--------------------
Initial State:

Account: [CREATOR], balance: 0x230a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 929292929292929292929292deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a000000000000000000000000000000000000000000012000000101000001000000000000000000000000000000000000000000000000000000000000000000001040010001004850000c002522240600608930110010009200c23111000080012004100004800020028020804000100040010204100880400140000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2777
Estimated Gas Usage: 20745 - 132176
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:707

(uint256) {
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000800040d31, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a00000000000000000000000010080200012008001000000000000000800002010000000000000000000000000000000000000000000000000000000000000000c1a014c202e3f68853d6360b31f776c55b592816049a4a8acfc90d7f7207be088000000000000000000000080000000040080000000000000008000008000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 2787
Estimated Gas Usage: 20745 - 132176
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:708

eserve = BaseT

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000001006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a00000000000000000000000010400001010001000200000000000108800000000000000000000000000000000000000000000000000000000000000000000000e0200a4220440001d010002040010109018800404111801644066408003888d7c000000080400000002010000000008000000000000000000000000008000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BTC_DAI_Reserve
Function name: expectedBaseTokenAmount(uint256)
PC address: 3388
Estimated Gas Usage: 5282 - 74782
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:726
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: expectedBaseTokenAmount(uint256), txdata: 0x4b90ad540000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BTC_DAI_Reserve
Function name: expectedBaseTokenAmount(uint256)
PC address: 3435
Estimated Gas Usage: 5282 - 74782
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:726
Initial State:

Account: [CREATOR], balance: 0x8000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400002000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: expectedBaseTokenAmount(uint256), txdata: 0x4b90ad54151114b8043dc144018a5ac636400422c000f19ca00aaef90130016e36050841, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 5649
Estimated Gas Usage: 20745 - 132176
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:310

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x2091001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3131313131313131313131310000000000000000000000000000000000000000313131313131313131313131deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a0000000000000000000000000101000001000100000800012000088002400000000000000000000000000000000000000000000000000000000000000000000024080040135579963631dc0d4092c44b4c801704242a29e01401004d60090cc01602402001020280010802010410040102010102200002400001020000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 5668
Estimated Gas Usage: 20745 - 132176
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:308

ss");

        _totalSupply = _totalSup

--------------------
Initial State:

Account: [CREATOR], balance: 0x2091001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3131313131313131313131310000000000000000000000000000000000000000313131313131313131313131deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a0000000000000000000000000101000001000100000800012000088002400000000000000000000000000000000000000000000000000000000000000000000024080040135579963631dc0d4092c44b4c801704242a29e01401004d60090cc01602402001020280010802010410040102010102200002400001020000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 5693
Estimated Gas Usage: 20745 - 132176
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:311

s[account] = _bala

--------------------
Initial State:

Account: [CREATOR], balance: 0x2091001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3131313131313131313131310000000000000000000000000000000000000000313131313131313131313131deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a0000000000000000000000000101000001000100000800012000088002400000000000000000000000000000000000000000000000000000000000000000000024080040135579963631dc0d4092c44b4c801704242a29e01401004d60090cc01602402001020280010802010410040102010102200002400001020000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BTC_DAI_Reserve
Function name: addLiquidity(address,uint256,uint256,uint256)
PC address: 5738
Estimated Gas Usage: 20745 - 132176
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/07638b8a30bbde8eef0c8de138f9e0b0.sol:310

ue);
        _balances[account] = _balances[account

--------------------
Initial State:

Account: [CREATOR], balance: 0x2091001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3131313131313131313131310000000000000000000000000000000000000000313131313131313131313131deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addLiquidity(address,uint256,uint256,uint256), txdata: 0x1ece366a0000000000000000000000000101000001000100000800012000088002400000000000000000000000000000000000000000000000000000000000000000000024080040135579963631dc0d4092c44b4c801704242a29e01401004d60090cc01602402001020280010802010410040102010102200002400001020000000000, value: 0x0


