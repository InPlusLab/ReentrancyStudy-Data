==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 989
Estimated Gas Usage: 1100 - 1525
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:77

require(_newOwner != owner);

        newOwner = _newOwner;

    }



    function acceptOwnership() public {

        require(msg.sender == newOw

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckyTree
Function name: setCreditGameAddress(address)
PC address: 2612
Estimated Gas Usage: 1056 - 1481
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:391

    //a single account contributed - just transfer funds back

                IERC20Token(tokenAddress).transfer(leafOwners[0], totalP

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setCreditGameAddress(address), txdata: 0x106d2813, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckyTree
Function name: killContract()
PC address: 2768
Estimated Gas Usage: 1038 - 1463
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:749
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: killContract(), txdata: 0x1c02708d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckyTree
Function name: setTokenAddress(address)
PC address: 2938
Estimated Gas Usage: 1122 - 1547
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:379

ame ends. 

     * Check that more than 1 wallet contributed

     **/

    function pickWinner() internal{

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x21010c05420c0001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setTokenAddress(address), txdata: 0x26a4e8d2, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckyTree
Function name: manualLockFunds()
PC address: 3437
Estimated Gas Usage: 1192 - 1617
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:487

    * Method called by participants to unlock and transfer their funds 

     * First call to method transfers tokens from game contract to this contractÄ‘

     * Last call to method cleans up the game contract

     **/

    function unlockFunds() public {

        require(gameState == state.clos

--------------------
Initial State:

Account: [CREATOR], balance: 0x20410001000f2001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: manualLockFunds(), txdata: 0x4eb06f61, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckyTree
Function name: closeGame()
PC address: 3891
Estimated Gas Usage: 1280 - 1705
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:501

sWithdrawn[msg.sender] == false);

        

        if(fundsTransfered == false){



--------------------
Initial State:

Account: [CREATOR], balance: 0x1810c0002088109, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: closeGame(), txdata: 0x786b844b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckyTree
Function name: salvageTokensFromContract(address,address,uint256)
PC address: 5295
Estimated Gas Usage: 1528 - 1953
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:749
Initial State:

Account: [CREATOR], balance: 0x42004080000000503, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: salvageTokensFromContract(address,address,uint256), txdata: 0xa0929cda, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LuckyTree
Function name: salvageTokensFromContract(address,address,uint256)
PC address: 5553
Estimated Gas Usage: 4037 - 39449
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:749
Initial State:

Account: [CREATOR], balance: 0x8000040000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: salvageTokensFromContract(address,address,uint256), txdata: 0xa0929cda000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckyTree
Function name: manuallyProcessTransaction(address,uint256)
PC address: 7306
Estimated Gas Usage: 1611 - 2036
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:727

dress);

        IERC20Token(_tokenAddress).transfer(_to, _amount);

    }



    /**

     * Kill contract if needed

     * 

     **/

    function killContract() onlyOwner public {

      selfdestruct(owner);

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: manuallyProcessTransaction(address,uint256), txdata: 0xc7aff0d7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckyTree
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 8125
Estimated Gas Usage: 1760 - 2185
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e255be23865348ff7a7ccabcbe81488a.sol:77

require(_newOwner != owner);

        newOwner = _newOwner;

    }



    function acceptOwnership() public {

        require(msg.sender == newOw

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000104000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0