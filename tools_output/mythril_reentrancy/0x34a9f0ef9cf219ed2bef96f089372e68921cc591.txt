==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: AkilosIco
Function name: fallback
PC address: 871
Estimated Gas Usage: 894 - 989
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:170

256 _endBlock, uint256 _maxGasPrice

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: AkilosIco
Function name: fallback
PC address: 888
Estimated Gas Usage: 1725 - 1820
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:170

exchangeRate, uint256 _maxSupply)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2440
Estimated Gas Usage: 116398 - 456638
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:181

;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2501
Estimated Gas Usage: 116398 - 456638
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:182

xchan

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2673
Estimated Gas Usage: 116398 - 456638
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:181

;
        exchangeRate = _exchangeRat

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2673
Estimated Gas Usage: 116398 - 456638
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:181

;
        exchangeRate = _exchangeRat

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2699
Estimated Gas Usage: 116398 - 456638
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:183

maxSupply;
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2752
Estimated Gas Usage: 116398 - 456638
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:183

maxSupply;
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2759
Estimated Gas Usage: 116398 - 456638
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:184

sed = true;

        ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2766
Estimated Gas Usage: 116398 - 456638
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:187

    }


    function

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2773
Estimated Gas Usage: 116398 - 456638
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:190

ayable {
        participa

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2780
Estimated Gas Usage: 116398 - 456638
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:191

er, msg.value);
    }

    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2787
Estimated Gas Usage: 116398 - 456638
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:194

ticipate(address parti

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2800
Estimated Gas Usage: 116398 - 456638
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:194

t256 value) intern

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2814
Estimated Gas Usage: 116398 - 456638
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:194

t256 value) intern

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AkilosIco
Function name: initialise(address,uint256,uint256,uint256,uint256,uint256)
PC address: 2821
Estimated Gas Usage: 116398 - 456638
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/caac34074eb0d97b23f389ac9b5344ed.sol:194

 {
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialise(address,uint256,uint256,uint256,uint256,uint256), txdata: 0x8410956a, value: 0x0