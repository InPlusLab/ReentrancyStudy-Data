==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityProvider
Function name: pendingRewards()
PC address: 1557
Estimated Gas Usage: 4413 - 74243
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:259

idityProtectionContract() private view returns(ILiquidity

--------------------
Initial State:

Account: [CREATOR], balance: 0x1ba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pendingRewards(), txdata: 0xeded3fda, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: claimRewards()
PC address: 2000
Estimated Gas Usage: 10118 - 148979
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:251

Rew

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000c00020db128, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: claimRewards(), txdata: 0x372500ab, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: claimRewards()
PC address: 2003
Estimated Gas Usage: 10118 - 148979
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:251

erna

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000c00020db128, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: claimRewards(), txdata: 0x372500ab, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityProvider
Function name: claimRewards()
PC address: 2088
Estimated Gas Usage: 10118 - 148979
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:251

view returns(uint){
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x21010401020fbfe5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: claimRewards(), txdata: 0x372500ab, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: claimRewards()
PC address: 2211
Estimated Gas Usage: 10118 - 148979
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:251

Rewards() external view returns(uint){
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000205b3f8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: claimRewards(), txdata: 0x372500ab, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: claimRewards()
PC address: 2211
Estimated Gas Usage: 10118 - 148979
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:251

Rewards() external view returns(uint){
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000c00020db128, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: claimRewards(), txdata: 0x372500ab, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 2479
Estimated Gas Usage: 37933 - 291643
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:199

y's rewards
     */
    function c

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000404000189ea, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: pendingRewards(), txdata: 0xeded3fda, value: 0x0
Caller: [ATTACKER], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 2523
Estimated Gas Usage: 37933 - 291643
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:201

urn

--------------------
Initial State:

Account: [CREATOR], balance: 0x12, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 2617
Estimated Gas Usage: 37933 - 291643
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:201

ress _poolToken) external onlyXbntContract returns(uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 2617
Estimated Gas Usage: 37933 - 291643
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:201

ress _poolToken) external onlyXbntContract returns(uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x12, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 2895
Estimated Gas Usage: 37933 - 291643
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:255

Cont

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000fbabc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityProvider
Function name: claimAndRestake(address)
PC address: 2970
Estimated Gas Usage: 11063 - 150209
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:255

Contract() private view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: claimAndRestake(address), txdata: 0xa04d48130000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 3014
Estimated Gas Usage: 37933 - 291643
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:255

Rewa

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000fbabc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 3017
Estimated Gas Usage: 37933 - 291643
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:256

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000fbabc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 3105
Estimated Gas Usage: 37933 - 291643
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:255

Rewards){
        return ISt

--------------------
Initial State:

Account: [CREATOR], balance: 0x4204000000007ade6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: pendingRewards(), txdata: 0xeded3fda, value: 0x0
Caller: [ATTACKER], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: claimAndRestake(address)
PC address: 3105
Estimated Gas Usage: 11063 - 150209
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:255

Rewards){
        return ISt

--------------------
Initial State:

Account: [CREATOR], balance: 0x2038a9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: claimAndRestake(address), txdata: 0xa04d48130000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 3105
Estimated Gas Usage: 37933 - 291643
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:255

Rewards){
        return ISt

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2021, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: pendingRewards(), txdata: 0xeded3fda, value: 0x0
Caller: [SOMEGUY], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LiquidityProvider
Function name: initializeAndAddLiquidity(address,address,address,address,address,uint256)
PC address: 3105
Estimated Gas Usage: 37933 - 291643
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd94d8092154e6b42f7d269dbbdaf156.sol:255

Rewards){
        return ISt

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000fbabc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initializeAndAddLiquidity(address,address,address,address,address,uint256), txdata: 0x410ace930000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0