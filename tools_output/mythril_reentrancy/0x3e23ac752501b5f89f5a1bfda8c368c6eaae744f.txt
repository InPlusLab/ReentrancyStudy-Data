==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: claimTokens(uint256)
PC address: 2574
Estimated Gas Usage: 1115 - 1210
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:260

.sender] = 0;
        _sendTo(auctionIndex, amount);
        emit ClaimTokens(auctionIndex, msg.sender, amount);
    }

    function _sendTo(uint256 auctionIndex, uint256 amount) internal {
        Auction storage auction = auctions[auctionIndex];
        if (isTRXAuction(auctionIndex)) {
            require(msg.sender.send(amount));
        } else {
            ERC20 token = E

--------------------
Initial State:

Account: [CREATOR], balance: 0xac35c0c000e0000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claimTokens(uint256), txdata: 0x46e04a2f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: getStatus(uint256)
PC address: 2995
Estimated Gas Usage: 1140 - 1235
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:228

startTime) {
            return Status.pending;
        }
	if (now < auction.endTime) {
            return Status.active;
        }
	return Status.finished;
    }

    function getCurrentBidOwner(uint256 auctionIndex) public view returns (address) {
        return auctions[auctionIndex].currentBidOwner;
    }

    function getCurrentBidAmount(uint256 auctionIndex) public view returns (uint256)

--------------------
Initial State:

Account: [CREATOR], balance: 0xac3482020000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getStatus(uint256), txdata: 0x5c622a0e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: isFinished(uint256)
PC address: 2995
Estimated Gas Usage: 1167 - 1262
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:225

tatus.finished;


--------------------
Initial State:

Account: [CREATOR], balance: 0x2180000002000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: isFinished(uint256), txdata: 0xe8ba65090000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: isActive(uint256)
PC address: 2995
Estimated Gas Usage: 1168 - 1263
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:222

c view returns (

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: isActive(uint256), txdata: 0x82afd23b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: getWinner(uint256)
PC address: 2995
Estimated Gas Usage: 1167 - 1262
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:225

tatus.finished;


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getWinner(uint256), txdata: 0x4129b2c90000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: claimAsset(uint256)
PC address: 2995
Estimated Gas Usage: 1187 - 1282
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:225

tatus.finished;


--------------------
Initial State:

Account: [CREATOR], balance: 0x2bc14c0800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimAsset(uint256), txdata: 0xd3c2a5920000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: claimWonBid(uint256)
PC address: 2995
Estimated Gas Usage: 1207 - 1302
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:225

tatus.finished;


--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimWonBid(uint256), txdata: 0xf7b908930000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: getCurrentBidAmount(uint256)
PC address: 3113
Estimated Gas Usage: 1159 - 1254
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:246

auctions[auctionIndex].bidCount;
    }

    function getWinner(uint256 auctionIndex) public view returns (address) {
        require(isFinished(au

--------------------
Initial State:

Account: [CREATOR], balance: 0x2bc14c0800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getCurrentBidAmount(uint256), txdata: 0x6975846a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: getBidCount(uint256)
PC address: 3152
Estimated Gas Usage: 1071 - 1166
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:250

ex));
        return auctions[auctionIndex].currentBidOwner;
    }

    function claimTokens(uint256 auctionIndex) public {
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBidCount(uint256), txdata: 0x744d34110000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 3718
Estimated Gas Usage: 81983 - 438629
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:156

(_startTime >= now, "Start time should be in future");
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000002026dbb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103c2b400100a40011081800a550084a2970ba0455e92c13958c22102c14205400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 3718
Estimated Gas Usage: 81983 - 438629
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:156

(_startTime >= now, "Start time should be in future");
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x101040000002039, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054520000cc0901b7ff7ff800d0010044000201007064442c108c2c220954c0a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 3760
Estimated Gas Usage: 3856 - 73269
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:159

n = Auction({
        assetAddress : _assetAddress,
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x8411c0000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4213
Estimated Gas Usage: 81983 - 438629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4217
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4267
Estimated Gas Usage: 81983 - 438629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4320
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4331
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4341
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4351
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4361
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4371
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4388
Estimated Gas Usage: 81983 - 438629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4441
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4452
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4463
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4481
Estimated Gas Usage: 81983 - 438629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4495
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4514
Estimated Gas Usage: 81983 - 438629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4528
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4547
Estimated Gas Usage: 81983 - 438629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4600
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4619
Estimated Gas Usage: 81983 - 438629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 4672
Estimated Gas Usage: 81983 - 438629
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:179

dex) public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x210004040002003f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d80a0d000095a008800810410000000000c001fb42000000082000337745e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: getCurrentBidOwner(uint256)
PC address: 4918
Estimated Gas Usage: 1137 - 1232
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:242

   return auctions[auctionIndex].currentBidAmount;
    }

    function getBidCount(uint256 auctionIndex) public view returns (uint256) {
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCurrentBidOwner(uint256), txdata: 0x86b460730000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: instantBuyAssetWithTRX(uint256)
PC address: 4991
Estimated Gas Usage: 1116 - 1211
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:109

 auctionIndex) {
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x40ac24e2802000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: instantBuyAssetWithTRX(uint256), txdata: 0x18b3b56a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: instantBuyAssetWithERC20(uint256,uint256)
PC address: 4991
Estimated Gas Usage: 1121 - 1216
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:115

event AuctionCreated(uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: instantBuyAssetWithERC20(uint256,uint256), txdata: 0xcb3fa4ac00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: bidTRX(uint256)
PC address: 4991
Estimated Gas Usage: 1138 - 1233
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:109

 auctionIndex) {
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x404020fbefd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bidTRX(uint256), txdata: 0x2bdd8b2e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: isTRXAuction(uint256)
PC address: 4991
Estimated Gas Usage: 1162 - 1257
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:181

ress(0);
    }

    function bidTRX(uint256 auctionIndex) public payable trxAuction(auctionIndex) {
        _bid(auctionIndex, msg.value);
    }

    function bidERC20(uint256 auctionIndex, uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: isTRXAuction(uint256), txdata: 0x9fdd78770000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionEngineV5
Function name: bidERC20(uint256,uint256)
PC address: 4991
Estimated Gas Usage: 1209 - 1304
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:115

event AuctionCreated(uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bidERC20(uint256,uint256), txdata: 0xfd3c4cbf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AuctionEngineV5
Function name: createAuction(address,uint256,uint256,uint256,uint256,uint256,address)
PC address: 8761
Estimated Gas Usage: 4366 - 75770
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/c06b21f56bbe5870d221f7e947299929.sol:58

return c;
    }
}

contract ERC20 {
    functi

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00020b2ff9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,uint256,address), txdata: 0x8237016b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010201010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0