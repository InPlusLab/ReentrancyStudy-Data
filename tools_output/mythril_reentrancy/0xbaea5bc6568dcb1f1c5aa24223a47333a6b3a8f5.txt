==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TrustlessOTC
Function name: cancelTrade(uint256)
PC address: 1386
Estimated Gas Usage: 1041 - 1136
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:513

emit OfferCance

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cancelTrade(uint256), txdata: 0x09ec6cc70000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2201
Estimated Gas Usage: 67258 - 323592
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:467

  o.amountTo = _amountTo;

            o.creator = msg.sender;

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4000000000000040, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000091198383d58d01050240010a42088620a610709912a04a884048049000500c0800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2248
Estimated Gas Usage: 67258 - 323592
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:473

;

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2272
Estimated Gas Usage: 67258 - 323592
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:477

TradeID);

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2315
Estimated Gas Usage: 67258 - 323592
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:485

    function cancelTrade(u

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2373
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:479

eated(newTradeID);

    }



    function cancelTrade(uint tradeID) publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2375
Estimated Gas Usage: 67258 - 323592
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:485

 {

        TradeOffer s

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2392
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:485

 {

        TradeOffer s

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2397
Estimated Gas Usage: 67258 - 323592
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:487

[tradeID];

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2406
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:487

[tradeID];

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2413
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:489

r == o.creator);

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2421
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:491

= address(0)) {

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2427
Estimated Gas Usage: 67258 - 323592
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:493

ransfer(o.amountFrom);

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2436
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:493

ransfer(o.amountFrom);

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2442
Estimated Gas Usage: 67258 - 323592
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:495

{

          if(noERC20Return[o.

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2473
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:499

          Token

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2480
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:499

rom).transfer(o.creato

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2491
Estimated Gas Usage: 67258 - 323592
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2496
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 2505
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:499



          } else {

            Token(o

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TrustlessOTC
Function name: reclaimToken(address)
PC address: 3227
Estimated Gas Usage: 6317 - 75728
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:693

 > 0);

        if (address(_tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TrustlessOTC
Function name: reclaimToken(address)
PC address: 3227
Estimated Gas Usage: 6317 - 75728
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:693

 > 0);

        if (address(_tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc3200000000000000000000000000020000000021010408008010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TrustlessOTC
Function name: tradeTracker(address,uint256)
PC address: 3300
Estimated Gas Usage: 1152 - 1437
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:369

eBasisPoints = _feeBasisPoints;

      noERC20

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tradeTracker(address,uint256), txdata: 0x2b4c1fdc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TrustlessOTC
Function name: getOfferDetails(uint256)
PC address: 3350
Estimated Gas Usage: 1105 - 1200
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:647

cker[address(_t

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getOfferDetails(uint256), txdata: 0x4fb64be20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TrustlessOTC
Function name: take(uint256)
PC address: 3523
Estimated Gas Usage: 1082 - 1177
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:543

m.sub(fee));

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: take(uint256), txdata: 0x4fd9efc40000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TrustlessOTC
Function name: offers(uint256)
PC address: 4930
Estimated Gas Usage: 1053 - 1148
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:439

= 0);

                if(

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: offers(uint256), txdata: 0x8a72ea6a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TrustlessOTC
Function name: reclaimTokenNoReturn(address)
PC address: 5597
Estimated Gas Usage: 6365 - 75683
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:709
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimTokenNoReturn(address), txdata: 0xfec82b5c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TrustlessOTC
Function name: reclaimTokenNoReturn(address)
PC address: 5597
Estimated Gas Usage: 6365 - 75683
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/d4640373679a4c482dddac1ee94c5f05.sol:709
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimTokenNoReturn(address), txdata: 0xfec82b5c0000000000000000000000008080808080808080808080808080808040808080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 5864
Estimated Gas Usage: 67258 - 323592
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TrustlessOTC
Function name: initiateTrade(address,address,uint256,uint256,address)
PC address: 5867
Estimated Gas Usage: 67258 - 323592
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000d26, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initiateTrade(address,address,uint256,uint256,address), txdata: 0x0adbf743000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000304801aa0109221902011044044007091094a24eb2c810036c0400005270080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0