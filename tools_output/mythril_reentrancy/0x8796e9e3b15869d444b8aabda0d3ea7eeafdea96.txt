==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: transferToOwner() or transferToOwner()
PC address: 824
Estimated Gas Usage: 1806 - 2231
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferToOwner(), txdata: 0x2d90ae94, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: updateLock(bool) or updateLock(bool)
PC address: 1247
Estimated Gas Usage: 1117 - 1542
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000000007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateLock(bool), txdata: 0xa1f91057, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRMobaInviteData
Function name: transferToOwner() or transferToOwner()
PC address: 1547
Estimated Gas Usage: 1806 - 2231
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferToOwner(), txdata: 0x2d90ae94, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 1687
Estimated Gas Usage: 1139 - 1564
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRMobaInviteData
Function name: GetNameByAddr(address)
PC address: 2042
Estimated Gas Usage: 2891 - 38159
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:231
Initial State:

Account: [CREATOR], balance: 0x1101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dadadadadadadadadadadadadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: GetNameByAddr(address), txdata: 0x68b9a64a, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRMobaInviteData
Function name: createInviteName(bytes32)
PC address: 2558
Estimated Gas Usage: 1911 - 2336
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createInviteName(bytes32), txdata: 0x93e7d6c6, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRMobaInviteData
Function name: createInviteName(bytes32)
PC address: 2706
Estimated Gas Usage: 7326 - 43448
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:165

addrToName[msg.sender] = name;

        emit createInviteNameEvent(msg.sender,name);

    }

    

    f

--------------------
Initial State:

Account: [CREATOR], balance: 0x1040400000803, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createInviteName(bytes32), txdata: 0x93e7d6c6, value: 0x2386f26fc10000

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRMobaInviteData
Function name: updateLock(bool) or updateLock(bool)
PC address: 3260
Estimated Gas Usage: 1183 - 1608
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateLock(bool), txdata: 0xa1f91057, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRMobaInviteData
Function name: GetAddressByName(bytes32) or GetAddressByName(bytes32)
PC address: 3773
Estimated Gas Usage: 3921 - 39709
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:217

ddr) public view returns (bytes32 na

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: GetAddressByName(bytes32), txdata: 0xba9d407a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BRMobaInviteData
Function name: GetAddressByName(bytes32) or GetAddressByName(bytes32)
PC address: 3924
Estimated Gas Usage: 3921 - 39709
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:223

     return oldNam

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: GetAddressByName(bytes32), txdata: 0xba9d407a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRMobaInviteData
Function name: checkUp(address,bytes32) or checkUp(address,bytes32)
PC address: 4384
Estimated Gas Usage: 4994 - 41067
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:201

blic view returns (address){

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: checkUp(address,bytes32), txdata: 0xc9af241800000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRMobaInviteData
Function name: createInviteName(bytes32)
PC address: 4455
Estimated Gas Usage: 7257 - 43379
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:203

 oldAddr =  oldInviteAddr.GetAddressByName(name);

        if(oldAd

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000040000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createInviteName(bytes32), txdata: 0x93e7d6c6, value: 0x2386f26fc10000

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRMobaInviteData
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 4612
Estimated Gas Usage: 1271 - 1696
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/c3f0cf4f73591b1073bb5b195481a6db.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x140080000040628, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0