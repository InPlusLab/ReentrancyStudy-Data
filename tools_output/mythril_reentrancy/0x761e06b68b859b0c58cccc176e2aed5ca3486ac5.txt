==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: setVesting(address,uint256,uint256)
PC address: 1645
Estimated Gas Usage: 24845 - 140352
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:180

eriod;
        beneficiary = ofBeneficiary;
    }

    /// @no

--------------------
Initial State:

Account: [CREATOR], balance: 0x2004001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c5c5c5c5c5c5c5c5c5c5c5c5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setVesting(address,uint256,uint256), txdata: 0xe0a668b4000000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: setVesting(address,uint256,uint256)
PC address: 1718
Estimated Gas Usage: 24845 - 140352
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:184

w
    function withdra

--------------------
Initial State:

Account: [CREATOR], balance: 0xa000204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c5c5c5c5c5c5c5c5c5c5c5c5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setVesting(address,uint256,uint256), txdata: 0xe0a668b4000000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: setVesting(address,uint256,uint256)
PC address: 1725
Estimated Gas Usage: 24845 - 140352
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:186

 pre_cond(isBeneficiary())
        

--------------------
Initial State:

Account: [CREATOR], balance: 0xa000204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c5c5c5c5c5c5c5c5c5c5c5c5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setVesting(address,uint256,uint256), txdata: 0xe0a668b4000000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: setVesting(address,uint256,uint256)
PC address: 1732
Estimated Gas Usage: 24845 - 140352
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:187

VestingStarted())
    {
       

--------------------
Initial State:

Account: [CREATOR], balance: 0xa000204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c5c5c5c5c5c5c5c5c5c5c5c5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setVesting(address,uint256,uint256), txdata: 0xe0a668b4000000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: setVesting(address,uint256,uint256)
PC address: 1744
Estimated Gas Usage: 24845 - 140352
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:189

rawable = calculateWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0xa000204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c5c5c5c5c5c5c5c5c5c5c5c5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setVesting(address,uint256,uint256), txdata: 0xe0a668b4000000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: setVesting(address,uint256,uint256)
PC address: 1797
Estimated Gas Usage: 24845 - 140352
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:189

rawable = calculateWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0xa000204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c5c5c5c5c5c5c5c5c5c5c5c5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setVesting(address,uint256,uint256), txdata: 0xe0a668b4000000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vesting
Function name: calculateWithdrawable()
PC address: 1843
Estimated Gas Usage: 2076 - 2171
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:157

thdrawn);
        } else {
            withdrawable = totalVestedAmount.sub(withdrawn);
        }
    }

    // NON-CONSTANT METHODS

    /// @param ofMelonAsset Address of Melon asset
    function Vesting(address ofMelonAsset) {
        MELON_CONTRACT = E

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateWithdrawable(), txdata: 0xf0c69e8d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vesting
Function name: calculateWithdrawable()
PC address: 1987
Estimated Gas Usage: 1212 - 1307
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:16


    return a 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateWithdrawable(), txdata: 0xf0c69e8d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vesting
Function name: calculateWithdrawable()
PC address: 1988
Estimated Gas Usage: 1222 - 1317
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:157

          withdrawable = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setVesting(address,uint256,uint256), txdata: 0xe0a668b4000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: calculateWithdrawable(), txdata: 0xf0c69e8d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Vesting
Function name: withdraw()
PC address: 1988
Estimated Gas Usage: 2848 - 3273
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:157

          withdrawable = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000003070001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setVesting(address,uint256,uint256), txdata: 0xe0a668b4000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe01, value: 0x0
Caller: [CREATOR], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vesting
Function name: calculateWithdrawable()
PC address: 2039
Estimated Gas Usage: 3827 - 3922
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a420a84e8a6fc161961d71415d39d425.sol:6

t(a == 0 || c / a == b);
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x20040310082001114, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setVesting(address,uint256,uint256), txdata: 0xe0a668b40000000000000000000000000000000000000000000000000000000000000000800840010101080101010101010110010102010102010201100140010201010112, value: 0x0
Caller: [ATTACKER], function: calculateWithdrawable(), txdata: 0xf0c69e8d, value: 0x0