==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: EthereumForkArbiter
Function name: announceFork(string,string,uint256)
PC address: 1558
Estimated Gas Usage: 3186 - 43820
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:360

ed by a blockhash) is the valid fork. The valid fork is

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, value: 0x0
Caller: [ATTACKER], function: announceFork(string,string,uint256), txdata: 0x51dd81190202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthereumForkArbiter
Function name: setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address)
PC address: 2542
Estimated Gas Usage: 12218 - 104100
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:97

///////////
    // Constructor
    ///////////////////

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 313131313131313131313131deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setAccessPolicy(address,address), txdata: 0x57875631, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthereumForkArbiter
Function name: setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address)
PC address: 2952
Estimated Gas Usage: 12218 - 104100
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:123

w policy without foot shooting.
        IAccessPolicy oldPolicy = _accessPoli

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setAccessPolicy(address,address), txdata: 0x57875631010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EthereumForkArbiter
Function name: setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address)
PC address: 2952
Estimated Gas Usage: 12218 - 104100
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:123

w policy without foot shooting.
        IAccessPolicy oldPolicy = _accessPoli

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: setAccessPolicy(address,address), txdata: 0x57875631, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthereumForkArbiter
Function name: setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address)
PC address: 2989
Estimated Gas Usage: 12218 - 104100
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:128

y, newPolicy)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setAccessPolicy(address,address), txdata: 0x57875631010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthereumForkArbiter
Function name: setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address)
PC address: 3030
Estimated Gas Usage: 12218 - 104100
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:131

  function accessPolicy()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setAccessPolicy(address,address), txdata: 0x57875631010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthereumForkArbiter
Function name: setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address) or setAccessPolicy(address,address)
PC address: 3083
Estimated Gas Usage: 12218 - 104100
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:131

  function accessPolicy()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setAccessPolicy(address,address), txdata: 0x57875631010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 3740
Estimated Gas Usage: 37376 - 193468
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:97

///////////
    // Constructor
    ///////////////////

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 3790
Estimated Gas Usage: 2996 - 38456
A control flow decision is made based on The block hash of a previous block.
The block hash of a previous block is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:378

stSignedBlockNumber, _lastSignedBlockHas

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 3829
Estimated Gas Usage: 37376 - 193468
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:386

     return _nextForkName;


--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000ec008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 3835
Estimated Gas Usage: 37376 - 193468
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:390

 public
        constant
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000ec008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 3846
Estimated Gas Usage: 37376 - 193468
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:392

string)
    {
        retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000ec008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 3853
Estimated Gas Usage: 37376 - 193468
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:394

Url;
    }

    function nextForkBlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000ec008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 3890
Estimated Gas Usage: 37376 - 193468
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:400

      returns (uint256

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000ec008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 3893
Estimated Gas Usage: 37376 - 193468
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:401

    {
        return

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000ec008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthereumForkArbiter
Function name: reclaim(address) or reclaim(address)
PC address: 4562
Estimated Gas Usage: 6306 - 111361
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:97

///////////
    // Constructor
    ///////////////////

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000090051, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: reclaim(address), txdata: 0xfc772c8b00000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EthereumForkArbiter
Function name: reclaim(address) or reclaim(address)
PC address: 4721
Estimated Gas Usage: 4564 - 74210
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:252


    // Events
    /////////////

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: reclaim(address), txdata: 0xfc772c8b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthereumForkArbiter
Function name: reclaim(address) or reclaim(address)
PC address: 4911
Estimated Gas Usage: 6306 - 111361
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:257

ring name,
        st

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: reclaim(address), txdata: 0xfc772c8b020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: EthereumForkArbiter
Function name: reclaim(address) or reclaim(address)
PC address: 4911
Estimated Gas Usage: 6306 - 111361
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:257

ring name,
        st

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, value: 0x0
Caller: [SOMEGUY], function: reclaim(address), txdata: 0xfc772c8b02020202020202020202020201, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthereumForkArbiter
Function name: reclaim(address) or reclaim(address)
PC address: 5111
Estimated Gas Usage: 6306 - 111361
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/40a526a39380537339ca4362c95d93bf.sol:259

56 blockNumber
    );

    event L

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: reclaim(address), txdata: 0xfc772c8b020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 5303
Estimated Gas Usage: 37376 - 193468
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000ec008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: EthereumForkArbiter
Function name: signFork(uint256,bytes32)
PC address: 5324
Estimated Gas Usage: 37376 - 193468
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000ec008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dddddddddddddddddddddddddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: signFork(uint256,bytes32), txdata: 0xbf375fb5, value: 0x0