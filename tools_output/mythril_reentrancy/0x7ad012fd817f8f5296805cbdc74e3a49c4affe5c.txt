==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RBAC
Function name: hasRole(address,string)
PC address: 487
Estimated Gas Usage: 1688 - 6014
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40002001001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3f, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: hasRole(address,string), txdata: 0x217fe6c60000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VeraCrowdsale
Function name: fallback
PC address: 1616
Estimated Gas Usage: 1699 - 6404
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000201000101100180012001010201010802012000000000000000000000000000400204000104010101010101040801010801010400000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: checkRole(address,string), txdata: 0x0988ca8c000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: VeraCrowdsale
Function name: hasRole(address,string)
PC address: 2286
Estimated Gas Usage: 1730 - 6716
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010801010202020204020201010102020201000000000000000000000000010101010102010110020108010101040108011000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: hasRole(address,string), txdata: 0x217fe6c60000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: VeraCrowdsale
Function name: withdrawTokens(address)
PC address: 2651
Estimated Gas Usage: 6544 - 78968
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05f56747ae3aa1ccf304dc673fcb14aa.sol:404

onlyBackend
  {
    if (! RBAC

--------------------
Initial State:

Account: [CREATOR], balance: 0x82, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000010101200001010402080101800101010101010900000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address), txdata: 0x49df728c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VeraCrowdsale
Function name: withdrawTokens(address)
PC address: 2808
Estimated Gas Usage: 6544 - 78968
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05f56747ae3aa1ccf304dc673fcb14aa.sol:407

cVeri

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000081080010880400802088040080820018004000000000000000000000000000080, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address), txdata: 0x49df728c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: VeraCrowdsale
Function name: withdrawTokens(address)
PC address: 2919
Estimated Gas Usage: 6544 - 78968
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05f56747ae3aa1ccf304dc673fcb14aa.sol:407

cVerifiedInvestor(_investor

--------------------
Initial State:

Account: [CREATOR], balance: 0x82, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000010101200001010402080101800101010101010900000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address), txdata: 0x49df728c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: VeraCrowdsale
Function name: withdrawTokens(address)
PC address: 2919
Estimated Gas Usage: 6544 - 78968
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05f56747ae3aa1ccf304dc673fcb14aa.sol:407

cVerifiedInvestor(_investor

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101000100000101010100000101010100000009000000000000000000000000010101010101010101010101200101010101018100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address), txdata: 0x49df728c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VeraCrowdsale
Function name: withdrawTokens(address)
PC address: 2919
Estimated Gas Usage: 6544 - 78968
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05f56747ae3aa1ccf304dc673fcb14aa.sol:407

cVerifiedInvestor(_investor

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000081080010880400802088040080820018004000000000000000000000000000080, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address), txdata: 0x49df728c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VeraCrowdsale
Function name: amountBonuses(uint256)
PC address: 3638
Estimated Gas Usage: 1354 - 1449
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05f56747ae3aa1ccf304dc673fcb14aa.sol:305

ll bonuses)
   * @param bonusIds f

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: amountBonuses(uint256), txdata: 0xd036261f80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VeraCrowdsale
Function name: computeTokens(uint256)
PC address: 4632
Estimated Gas Usage: 1425 - 1520
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/05f56747ae3aa1ccf304dc673fcb14aa.sol:460

 Revoke admin privil

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: computeTokens(uint256), txdata: 0xaebf1e3d7f, value: 0x0


