==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Blocker
Function name: Blocker_send(address)
PC address: 553
Estimated Gas Usage: 991 - 35272
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e99af56c0d0d7b16940cfb7c5290f0cc.sol:689
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Blocker_resume(bool), txdata: 0xab7748da, value: 0x0
Caller: [SOMEGUY], function: Blocker_send(address), txdata: 0xa604c1add1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getPaimentStatus(address,uint256)
PC address: 3404
Estimated Gas Usage: 1168 - 1453
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e99af56c0d0d7b16940cfb7c5290f0cc.sol:671

public payable {

        address buggycontract = to;

        require(buggycontract.call.value(msg.value).gas(gasleft())());

    }

    

    function Blocker_destroy() public {

        require(msg.sender == owner);

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPaimentStatus(address,uint256), txdata: 0x2646b176, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: deposites(uint256)
PC address: 3492
Estimated Gas Usage: 1080 - 1175
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e99af56c0d0d7b16940cfb7c5290f0cc.sol:367

ress != address(0));

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposites(uint256), txdata: 0x3f66d160, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: depositors(address,uint256)
PC address: 3599
Estimated Gas Usage: 1198 - 1483
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e99af56c0d0d7b16940cfb7c5290f0cc.sol:371

   }



    function setNewMinDeposite(uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: depositors(address,uint256), txdata: 0x466c01b8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getUserDeposit(address,uint256)
PC address: 3703
Estimated Gas Usage: 1259 - 1544
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e99af56c0d0d7b16940cfb7c5290f0cc.sol:621

iew returns (uint) {

        return deposites[depositors[depositor][depositeNumber]].paimentTime;

    }



    function getPaimentStatus(address depositor, uint depositeNumber) public view returns (bool) {

        if (deposites[depositors[depositor][depositeNumber]].paimentTime == 0) return false;

        else return true;

    }



--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getUserDeposit(address,uint256), txdata: 0x60711058, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getPaimentTime(address,uint256)
PC address: 4075
Estimated Gas Usage: 1275 - 1560
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e99af56c0d0d7b16940cfb7c5290f0cc.sol:653

ey");

        }

    }

    

    function Blocker_resume(bool _stop) public{

        require(msg.sender == owner);

        stop = _stop;

    }

    

    function Blocker_send(

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPaimentTime(address,uint256), txdata: 0x631b0520, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getDeposit(uint256)
PC address: 6282
Estimated Gas Usage: 1466 - 1561
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e99af56c0d0d7b16940cfb7c5290f0cc.sol:585

lest (0 - last payment), returns: address of depositor, payment time, payment amount

    function getLastPayments(uint lastIndex) public view returns (address, uint, uint) {

        uint depositeIndex = currentP

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getDeposit(uint256), txdata: 0x9f9fb968, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getDepositeTime(address,uint256)
PC address: 6536
Estimated Gas Usage: 1627 - 1912
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e99af56c0d0d7b16940cfb7c5290f0cc.sol:641

ocker {

    bool private stop = true;

    address private owner = msg.sender;

    

    function () public payable {

        if(msg.value > 0) {

            require(!stop, "Do no

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getDepositeTime(address,uint256), txdata: 0xc6837a87, value: 0x0