==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenContinuousDistribution
Function name: constructor
PC address: 704
Estimated Gas Usage: 38647 - 182833
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:113

event Ownership

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101020102010102fffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7988800000000000000000000000000000000000000000000000000000000004, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 1322
Estimated Gas Usage: 4660 - 42098
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:523

y'

            uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x901080800012000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: distributedAmount(address), txdata: 0x04ff760f010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenContinuousDistribution
Function name: distributedAmountWithBlockTimestamp(address,uint256)
PC address: 1322
Estimated Gas Usage: 4861 - 42299
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:523

y'

            uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x8020200a002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, value: 0x0
Caller: [CREATOR], function: distributedAmountWithBlockTimestamp(address,uint256), txdata: 0x9a70fae6020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenContinuousDistribution
Function name: releasableAmount(address)
PC address: 1322
Estimated Gas Usage: 4913 - 42871
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:523

y'

            uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x4204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001c2, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc8010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 1388
Estimated Gas Usage: 4660 - 42098
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:531

          if (u

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: distributedAmount(address), txdata: 0x04ff760f010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenContinuousDistribution
Function name: distributedAmountWithBlockTimestamp(address,uint256)
PC address: 1388
Estimated Gas Usage: 4861 - 42299
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:531

          if (u

--------------------
Initial State:

Account: [CREATOR], balance: 0x294a5290252940082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: distributedAmountWithBlockTimestamp(address,uint256), txdata: 0x9a70fae6606060606060606060606060deadbeefdeadbeefdeadbeefdeadbeefdeadbeef80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenContinuousDistribution
Function name: releasableAmount(address)
PC address: 1388
Estimated Gas Usage: 4913 - 42871
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:531

          if (u

--------------------
Initial State:

Account: [CREATOR], balance: 0x100026080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000140, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc8010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 1413
Estimated Gas Usage: 4660 - 42098
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:533

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: distributedAmount(address), txdata: 0x04ff760f010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenContinuousDistribution
Function name: releasableAmount(address)
PC address: 1413
Estimated Gas Usage: 4913 - 42871
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:533

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x100026080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000140, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc8010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 1420
Estimated Gas Usage: 3713 - 40870
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:531

In1Phase) {

                weight = 5;

                unitsInThisPhase = unitsPassed;

                // delay division to last step to keep precision

                return unitsInThisPhase.mul(totalBalance).mul(weight).div(slice).div(unitsIn1Phase);

            } else if (unitsPassed < unitsIn1Phase.mul(2)) {

                weight = 4;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase);

                // "5" because we have everything in the previous phase 

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(5).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            } else if (unitsPassed < unitsIn1Phase.mul(3)) {

                weight = 3;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(2));

                // "9" because we have everything in the previous phase = 5+4

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(9).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            } else if (unitsPassed < unitsIn1Phase.mul(4)) {

                weight = 2;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(3));

                // "12" because we have everything in the previous phase = 5+4+3

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(12).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            } else if (unitsPassed < unitsIn1Phase.mul(5)) {

                weight = 1;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(4));

                // "14" because we have everything in the previous phase = 5+4+3+2

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(14).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            }

            require(blockTimestamp < endTime, "Block timestamp is expected to have not reached distribution endTime if the code even falls in here.");

        }

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x200010c0000010862, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [ATTACKER], function: distributedAmount(address), txdata: 0x04ff760f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 1432
Estimated Gas Usage: 4660 - 42098
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:537

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: distributedAmount(address), txdata: 0x04ff760f010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 1438
Estimated Gas Usage: 4536 - 41693
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:535

e = unitsPassed;

                // delay division to last step to keep precision

                return unitsInThisPhase.mul(totalBalance).mul(weight).div(slice).div(unitsIn1Phase);

            } else if (unitsPassed < unitsIn1Phase.mul(2)) {

                weight = 4;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase);

                // "5" because we have everything in the previous phase 

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(5).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            } else if (unitsPassed < unitsIn1Phase.mul(3)) {

                weight = 3;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(2));

                // "9" because we have everything in the previous phase = 5+4

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(9).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            } else if (unitsPassed < unitsIn1Phase.mul(4)) {

                weight = 2;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(3));

                // "12" because we have everything in the previous phase = 5+4+3

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(12).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            } else if (unitsPassed < unitsIn1Phase.mul(5)) {

                weight = 1;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(4));

                // "14" because we have everything in the previous phase = 5+4+3+2

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(14).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            }

            require(blockTimestamp < endTime, "Block timestamp is expected to have not reached distribution endTime if the code even falls in here.");

        }

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x44020080000000601, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [SOMEGUY], function: distributedAmount(address), txdata: 0x04ff760f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 1452
Estimated Gas Usage: 4660 - 42098
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:539

v(slice).div(u

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: distributedAmount(address), txdata: 0x04ff760f010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 1458
Estimated Gas Usage: 4660 - 42098
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:539

(weig

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: distributedAmount(address), txdata: 0x04ff760f010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenContinuousDistribution
Function name: releasableAmount(address)
PC address: 1493
Estimated Gas Usage: 4913 - 42871
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:545

 unitsInThisPh

--------------------
Initial State:

Account: [CREATOR], balance: 0x100026080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000140, value: 0x0
Caller: [SOMEGUY], function: releasableAmount(address), txdata: 0x1726cbc8010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 1520
Estimated Gas Usage: 8036 - 45193
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:549

 // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(5).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            } else if (unitsPassed < unitsIn1Phase.mul(3)) {

                weight = 3;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(2));

                // "9" because we have everything in the previous phase = 5+4

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(9).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            } else if (unitsPassed < unitsIn1Phase.mul(4)) {

                weight = 2;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(3));

                // "12" because we have everything in the previous phase = 5+4+3

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(12).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            } else if (unitsPassed < unitsIn1Phase.mul(5)) {

                weight = 1;

                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(4));

                // "14" because we have everything in the previous phase = 5+4+3+2

                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))

                return totalBalance.mul(14).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);

            }

            require(blockTimestamp < endTime, "Block timestamp is expected to have not reached distribution endTime if the code even falls in here.");

        }

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: distributedAmount(address), txdata: 0x04ff760f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenContinuousDistribution
Function name: fallback
PC address: 2292
Estimated Gas Usage: 6207 - 43364
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f17376c7d282e939dcabb2df392458e.sol:87

ers, throws on o

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: distributedAmount(address), txdata: 0x04ff760f, value: 0x0