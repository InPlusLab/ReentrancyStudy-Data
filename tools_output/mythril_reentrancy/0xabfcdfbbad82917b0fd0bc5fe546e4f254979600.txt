==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 1013
Estimated Gas Usage: 1147 - 1572
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:121

    newOwner = _newOwner;

    }



    function acceptOwnership() public {

        require(msg.sender == newOwner);

        emit OwnerUpdate(owner, new

--------------------
Initial State:

Account: [CREATOR], balance: 0x2044, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Lockable
Function name: lockUntil(uint256,string) or lockUntil(uint256,string) or lockUntil(uint256,string)
PC address: 1250
Estimated Gas Usage: 1497 - 4604
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:187

}

}



contract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {



    // Name of token

    string public name;

    // Abbreviation of tokens name

    string public sym

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lockUntil(uint256,string), txdata: 0xb26eafe40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Lockable
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 1557
Estimated Gas Usage: 1191 - 1616
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:121

    newOwner = _newOwner;

    }



    function acceptOwnership() public {

        require(msg.sender == newOwner);

        emit OwnerUpdate(owner, new

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ERC20Token
Function name: approve(address,uint256) or approve(address,uint256) or approve(address,uint256)
PC address: 2794
Estimated Gas Usage: 1075 - 1170
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:171

UntilBlock = _untilBlock;

        emit 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3bfdf, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC20Token
Function name: killContract() or killContract()
PC address: 3136
Estimated Gas Usage: 1059 - 1484
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:563
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: killContract(), txdata: 0x1c02708d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ERC20Token
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 3208
Estimated Gas Usage: 1174 - 1269
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:171

UntilBlock = _untilBlock;

        emit 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC20Token
Function name: ownerTransferFrom(address,address,uint256) or ownerTransferFrom(address,address,uint256)
PC address: 4303
Estimated Gas Usage: 1320 - 1745
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:433

   * @param _owner Account that has tokens

    * @param _spender Account that can spend tokens

    * @return remaining balance to spend

    */

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {

        return allowances[_owner][_spender];

    }



    /**

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ownerTransferFrom(address,address,uint256), txdata: 0x53043490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC20Token
Function name: salvageTokensFromContract(address,address,uint256) or salvageTokensFromContract(address,address,uint256)
PC address: 5417
Estimated Gas Usage: 1427 - 1852
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:549

r() public {

        owner = 0xa12F88dC40BA5629C87D37d20EE46759b6a2f6ac;

        name = "MRPROToken";

        symbol = "MRPRO";

        decimals = 18;

        totalSupplyLimit =

--------------------
Initial State:

Account: [CREATOR], balance: 0xa1400001fbf96, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: salvageTokensFromContract(address,address,uint256), txdata: 0xa0929cda000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ERC20Token
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 5659
Estimated Gas Usage: 1361 - 1456
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:171

UntilBlock = _untilBlock;

        emit 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC20Token
Function name: lockUntil(uint256,string) or lockUntil(uint256,string) or lockUntil(uint256,string)
PC address: 6148
Estimated Gas Usage: 1783 - 4890
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:187

}

}



contract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {



    // Name of token

    string public name;

    // Abbreviation of tokens name

    string public sym

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000100033087, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockUntil(uint256,string), txdata: 0xb26eafe400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: ERC20Token
Function name: approveAndCall(address,uint256,bytes) or approveAndCall(address,uint256,bytes)
PC address: 6343
Estimated Gas Usage: 1805 - 4582
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:171

UntilBlock = _untilBlock;

        emit 

--------------------
Initial State:

Account: [CREATOR], balance: 0x440044148e3201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC20Token
Function name: approveAndCall(address,uint256,bytes) or approveAndCall(address,uint256,bytes)
PC address: 6691
Estimated Gas Usage: 11576 - 71387
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:373

alue The amount that msg.sender is sending

    * @return if successfu

--------------------
Initial State:

Account: [CREATOR], balance: 0x83000000000406, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000002000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC20Token
Function name: mintTokens(address,uint256) or mintTokens(address,uint256)
PC address: 6990
Estimated Gas Usage: 1570 - 1995
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:483

troy

    */

    function burn(uint _amount) public {

        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);

        supply = safeSub(supply, _amount);

        emit Burn(msg.sender, _amount);

        emit Transfer(msg.sender, address(0x0), _amount);

    }



    /**

    * @dev Saves exidentaly sent tokens 

--------------------
Initial State:

Account: [CREATOR], balance: 0x9206f8811830820c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mintTokens(address,uint256), txdata: 0xf0dda65c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC20Token
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 7441
Estimated Gas Usage: 1565 - 1990
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/40d22b8fcda0af9409c31a6a1d7450b6.sol:121

    newOwner = _newOwner;

    }



    function acceptOwnership() public {

        require(msg.sender == newOwner);

        emit OwnerUpdate(owner, new

--------------------
Initial State:

Account: [CREATOR], balance: 0x104000207afbe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0