with mythril_dir
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: OVRChainlinkCompetition
Function name: getRandomNumber()
PC address: 1706
Estimated Gas Usage: 21316 - 134214
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a3078235796b5fe0f0766b08c57a984.sol:342

makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandomNumber(), txdata: 0xdbdff2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: OVRChainlinkCompetition
Function name: getRandomNumber()
PC address: 1762
Estimated Gas Usage: 21316 - 134214
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a3078235796b5fe0f0766b08c57a984.sol:347

ble/duplicate ou

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandomNumber(), txdata: 0xdbdff2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: OVRChainlinkCompetition
Function name: getRandomNumber()
PC address: 1792
Estimated Gas Usage: 21316 - 134214
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a3078235796b5fe0f0766b08c57a984.sol:359

once */) private

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandomNumber(), txdata: 0xdbdff2c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: OVRChainlinkCompetition
Function name: getRandomNumber()
PC address: 1827
Estimated Gas Usage: 21316 - 134214
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2a3078235796b5fe0f0766b08c57a984.sol:359

 */ => uint256 /* nonce */) private nonces

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandomNumber(), txdata: 0xdbdff2c1, value: 0x0


