==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: lockEtherPay
Function name: lock()
PC address: 1421
Estimated Gas Usage: 21305 - 116903
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6032fa099fda7a10dee5e94b6900899e.sol:94


  function lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lock(), txdata: 0xf83d08ba, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: lockEtherPay
Function name: lock()
PC address: 1424
Estimated Gas Usage: 21305 - 116903
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6032fa099fda7a10dee5e94b6900899e.sol:95

bool){
  	uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lock(), txdata: 0xf83d08ba, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: lockEtherPay
Function name: lock()
PC address: 1443
Estimated Gas Usage: 21305 - 116903
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6032fa099fda7a10dee5e94b6900899e.sol:95

 constant public returns (bool){
  	uint25

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lock(), txdata: 0xf83d08ba, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: lockEtherPay
Function name: lock()
PC address: 1447
Estimated Gas Usage: 21305 - 116903
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6032fa099fda7a10dee5e94b6900899e.sol:96

ent_time = now;

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lock(), txdata: 0xf83d08ba, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: lockEtherPay
Function name: lock()
PC address: 1496
Estimated Gas Usage: 21305 - 116903
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6032fa099fda7a10dee5e94b6900899e.sol:96

ent_time = now;

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lock(), txdata: 0xf83d08ba, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: lockEtherPay
Function name: lock()
PC address: 1546
Estimated Gas Usage: 10386 - 65703
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/6032fa099fda7a10dee5e94b6900899e.sol:26

rn c;
  }
}

c

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lock(), txdata: 0xf83d08ba, value: 0x0