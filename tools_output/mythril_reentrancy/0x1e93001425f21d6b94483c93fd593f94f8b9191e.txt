==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Purchase
Function name: purchaseFor(address,uint256,address[],uint256)
PC address: 578
Estimated Gas Usage: 4162 - 76815
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/df269ad91ca555e459fce5f069a726fd.sol:18

.value(price)(users[i], count, address(0));
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: purchaseFor(address,uint256,address[],uint256), txdata: 0xdab6ca90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x4

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Purchase
Function name: purchaseFor(address,uint256,address[],uint256)
PC address: 578
Estimated Gas Usage: 4162 - 76815
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/df269ad91ca555e459fce5f069a726fd.sol:18

.value(price)(users[i], count, address(0));
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: purchaseFor(address,uint256,address[],uint256), txdata: 0xdab6ca900000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Purchase
Function name: purchaseFor(address,uint256,address[],uint256)
PC address: 578
Estimated Gas Usage: 4162 - 76815
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/df269ad91ca555e459fce5f069a726fd.sol:18

.value(price)(users[i], count, address(0));
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x5009408004001139c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: purchaseFor(address,uint256,address[],uint256), txdata: 0xdab6ca90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x4