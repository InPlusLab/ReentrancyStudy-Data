==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Timlock
Function name: unlock(address)
PC address: 780
Estimated Gas Usage: 2488 - 3343
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:115


            ERC20(tokenAddress).transfer(_msgSender(), lockedMap[_msgSender()][token

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlock(address), txdata: 0x2f6c493c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Timlock
Function name: unlock(address)
PC address: 1117
Estimated Gas Usage: 17700 - 95740
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:117

 failed'
        );
        
        lockedMap[_msgSender()][tokenAddress].lockedAmount = 0;
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unlock(address), txdata: 0x2f6c493c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Timlock
Function name: unlock(address)
PC address: 1425
Estimated Gas Usage: 17700 - 95740
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:121

0;
        emit Unlocked(_msgSender(), tokenAddress, l

--------------------
Initial State:

Account: [CREATOR], balance: 0x102049, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unlock(address), txdata: 0x2f6c493c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Timlock
Function name: unlock(address)
PC address: 1564
Estimated Gas Usage: 17700 - 95740
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:122

sgSender()][tokenAddress].lockedAmount);
    }
    
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x102049, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unlock(address), txdata: 0x2f6c493c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Timlock
Function name: unlock(address)
PC address: 1741
Estimated Gas Usage: 17700 - 95740
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:125

ternal view returns (uint256) {
        if(lockedM

--------------------
Initial State:

Account: [CREATOR], balance: 0x102049, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unlock(address), txdata: 0x2f6c493c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Timlock
Function name: lock(address,uint256,uint256)
PC address: 2717
Estimated Gas Usage: 26153 - 228067
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:95

ock: the lock amount exceeds the balance' );

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000001008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000000000000000000000000000000000000000000000a0823100000000000000002000000000000000ae00aaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Timlock
Function name: lock(address,uint256,uint256)
PC address: 3017
Estimated Gas Usage: 26153 - 228067
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:98

 failed'
        );
        
        uint256 currentLockedAmount = ERC20(

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a08231000000000000000000000000deadbeefdeadf8efdeadbeefdeadbeff0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Timlock
Function name: lock(address,uint256,uint256)
PC address: 3509
Estimated Gas Usage: 26153 - 228067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:104

     lockedMap[_msgSender()][tokenAddress].lockedH

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a08231000000000000000000000000deadbeefdeadfcff9eadbeefdeadbeff0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Timlock
Function name: lock(address,uint256,uint256)
PC address: 3659
Estimated Gas Usage: 26153 - 228067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:103

t.add(currentLockedAmount.sub(prevLockedAmount));
        lockedMap[_msgSender()][tokenAddress].lockedHours = lockHours;
        lockedMap[_msgSender(

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a08231000000000000000000000000deadbeefdeadfcff9eadbeefdeadbeff0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Timlock
Function name: lock(address,uint256,uint256)
PC address: 3797
Estimated Gas Usage: 26153 - 228067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:105

ress].startTimestamp = now;
        
        emit Locked(_msg

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a08231000000000000000000000000deadbeefdeadfcff9eadbeefdeadbeff0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Timlock
Function name: lock(address,uint256,uint256)
PC address: 3935
Estimated Gas Usage: 26153 - 228067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:107

okenAddress, lockedMap[_msgSender()][tokenAddress].lockedA

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a08231000000000000000000000000deadbeefdeadfcff9eadbeefdeadbeff0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Timlock
Function name: lock(address,uint256,uint256)
PC address: 4112
Estimated Gas Usage: 26153 - 228067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/55f2efe48e1fcf50af39df6a59cbab5b.sol:110

enAddress) external returns (bool) {
        uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00a08231000000000000000000000000deadbeefdeadfcff9eadbeefdeadbeff0000000000000000000000000000000000000000000000000000000000000000, value: 0x0