==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BasicToken
Function name: transfer(address,uint256,uint256) or transfer(address,uint256,uint256)
PC address: 985
Estimated Gas Usage: 17500 - 93929
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9bb659e6e0742230afe2553d5c44de70.sol:145

ev Gets the balance of the specified address.
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000e873d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256,uint256), txdata: 0x095bcdb6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BasicToken
Function name: transferToContract(address,uint256,uint256) or transferToContract(address,uint256,uint256)
PC address: 1659
Estimated Gas Usage: 17566 - 93995
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9bb659e6e0742230afe2553d5c44de70.sol:187

blic constant name = "NiceVotingToken";
  strin

--------------------
Initial State:

Account: [CREATOR], balance: 0xe97bd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferToContract(address,uint256,uint256), txdata: 0x95f847fd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NVT
Function name: getTokenForTeam(address,uint256)
PC address: 2306
Estimated Gas Usage: 2042 - 2467
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/9bb659e6e0742230afe2553d5c44de70.sol:239

) onlyOwner returns(bool){

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getTokenForTeam(address,uint256), txdata: 0x34d4cd82000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NVT
Function name: getTokenForInvester(address,uint256)
PC address: 2306
Estimated Gas Usage: 2174 - 2599
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/9bb659e6e0742230afe2553d5c44de70.sol:248

lyOwner{
    require(_amout <=

--------------------
Initial State:

Account: [CREATOR], balance: 0x3100100b012000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getTokenForInvester(address,uint256), txdata: 0x7ffce58e000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BasicToken
Function name: transfer(address,uint256) or transfer(address,uint256)
PC address: 2711
Estimated Gas Usage: 17607 - 94036
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9bb659e6e0742230afe2553d5c44de70.sol:132

ction transfer(address _to, uint _value, ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x78fbd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0