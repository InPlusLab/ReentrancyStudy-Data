==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DailycoinCrowdsale
Function name: fallback
PC address: 984
Estimated Gas Usage: 1796 - 2221
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b2860cd5f2ec4b0e07319409b438c102.sol:199

 // 20 last days
				multiple = multiple * 115 / 100;
			}
        } else {
			if (now <= deadline - 35 days) { // first 10 days
				multiple = multiple * 120 / 100;
			} else if (now <= deadline - 20 days) {  // next 15 days
				multiple = multiple * 110 / 

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DailycoinCrowdsale
Function name: fallback
PC address: 1023
Estimated Gas Usage: 2630 - 3055
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b2860cd5f2ec4b0e07319409b438c102.sol:203

- 35 days) { // first 10 days
				multiple = multiple * 120 / 100;
			} else if (now <= deadline - 20 days) {  // next 15 days
				multiple = multiple * 110 / 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DailycoinCrowdsale
Function name: fallback
PC address: 1087
Estimated Gas Usage: 1797 - 2222
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b2860cd5f2ec4b0e07319409b438c102.sol:207

last days
				multiple = multiple * 105 / 100;
			}
		}
		return multiple * 10**8 * _value / 10**18;
	}

    modifier afterDeadline() { if (now >= deadline) _; }

    /**
     * Withdraw the funds
     *
     * Checks to see if goal or time limit has been rea

--------------------
Initial State:

Account: [CREATOR], balance: 0x81, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DailycoinCrowdsale
Function name: fallback
PC address: 1126
Estimated Gas Usage: 2631 - 3056
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b2860cd5f2ec4b0e07319409b438c102.sol:211

;
	}

    modifier afterDeadline() { if (now >= deadline) _; }

    /**
     * Withdraw the funds
     *
     * Checks to see if goal or time limit has been rea

--------------------
Initial State:

Account: [CREATOR], balance: 0x4905, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DailycoinCrowdsale
Function name: endFunding()
PC address: 1218
Estimated Gas Usage: 933 - 1028
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b2860cd5f2ec4b0e07319409b438c102.sol:220

*/
    function endFun

--------------------
Initial State:

Account: [CREATOR], balance: 0x4040000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: endFunding(), txdata: 0x1c8eac0f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DailycoinCrowdsale
Function name: withdraw(uint256)
PC address: 1825
Estimated Gas Usage: 1011 - 1106
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b2860cd5f2ec4b0e07319409b438c102.sol:220

*/
    function endFun

--------------------
Initial State:

Account: [CREATOR], balance: 0x40005000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DailyCoinToken
Function name: approveAndCall(address,uint256,bytes)
PC address: 3307
Estimated Gas Usage: 7995 - 67174
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80402020104, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaf0080, value: 0x0