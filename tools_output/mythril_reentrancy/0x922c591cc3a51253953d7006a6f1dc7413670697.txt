==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RecuringInternetPayer
Function name: payJosh()
PC address: 626
Estimated Gas Usage: 10053 - 64712
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/395d27478a88fc4a6d186f97694c1056.sol:21

       dai.tran

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payJosh(), txdata: 0xa484f413, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RecuringInternetPayer
Function name: payJosh()
PC address: 634
Estimated Gas Usage: 10053 - 64712
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/395d27478a88fc4a6d186f97694c1056.sol:20

ePayout * (now - createdAt);
        dai.trans

--------------------
Initial State:

Account: [CREATOR], balance: 0x420010000000b8001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: payJosh(), txdata: 0xa484f413, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RecuringInternetPayer
Function name: payJosh()
PC address: 637
Estimated Gas Usage: 10053 - 64712
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/395d27478a88fc4a6d186f97694c1056.sol:21

Paid);
        amountPai

--------------------
Initial State:

Account: [CREATOR], balance: 0x2101000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payJosh(), txdata: 0xa484f413, value: 0x0
Caller: [SOMEGUY], function: payJosh(), txdata: 0xa484f413, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RecuringInternetPayer
Function name: payJosh()
PC address: 736
Estimated Gas Usage: 10053 - 64712
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/395d27478a88fc4a6d186f97694c1056.sol:22

out;
    }
    function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: payJosh(), txdata: 0xa484f413, value: 0x0


