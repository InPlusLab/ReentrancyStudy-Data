==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address) or setOwner(address)
PC address: 479
Estimated Gas Usage: 12497 - 69436
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:31

LogSetOwner(ow

--------------------
Initial State:

Account: [CREATOR], balance: 0x10040004d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address) or setOwner(address)
PC address: 532
Estimated Gas Usage: 12497 - 69436
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:31

LogSetOwner(ow

--------------------
Initial State:

Account: [CREATOR], balance: 0x10040004d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setOwner(address) or setOwner(address)
PC address: 539
Estimated Gas Usage: 12497 - 69436
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:34

tAuth

--------------------
Initial State:

Account: [CREATOR], balance: 0x10040004d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address)
PC address: 704
Estimated Gas Usage: 12519 - 69458
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:39

LogSetAuthority(author

--------------------
Initial State:

Account: [CREATOR], balance: 0xc10003ed, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address)
PC address: 757
Estimated Gas Usage: 12519 - 69458
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:39

LogSetAuthority(author

--------------------
Initial State:

Account: [CREATOR], balance: 0xc10003ed, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address)
PC address: 763
Estimated Gas Usage: 12519 - 69458
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:42


        

--------------------
Initial State:

Account: [CREATOR], balance: 0xc10003ed, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DSAuth
Function name: setOwner(address) or setOwner(address)
PC address: 1502
Estimated Gas Usage: 12497 - 69436
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:60

contract Exchange is DSAuth {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1600902dd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setOwner(address), txdata: 0x13af4035, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DSAuth
Function name: setAuthority(address) or setAuthority(address)
PC address: 1502
Estimated Gas Usage: 12519 - 69458
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:60

contract Exchange is DSAuth {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x130017a1d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAuthority(address), txdata: 0x7a9e5e4b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAuthority(address), txdata: 0x7a9e5e4b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Exchange
Function name: settlePut(uint256,uint256,address)
PC address: 6450
Estimated Gas Usage: 525 - 996
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:692

       }

        uint yield = putsSold[series][writer] * strike / 1 ether;
        _collectFee(writer, settlementFee);
        dai[write

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000204000010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: settlePut(uint256,uint256,address), txdata: 0x158048a000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000020202020202020202020202aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Exchange
Function name: settlePut(uint256,uint256,address)
PC address: 6550
Estimated Gas Usage: 545 - 1016
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/48181358219059f4c8ccdc5b428419e7.sol:691

expiration, strike);
        }

        uint yield = putsSold[series][writer] * strike / 1 ether;
        _collectFee(writer, settlementFee);
        dai[writer] += yield

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: settlePut(uint256,uint256,address), txdata: 0x158048a000000000000000000000000000000100000001000000000000018080808080808080808080808080808080808080808080808080808080808080808080808080020202020202020202020202aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0