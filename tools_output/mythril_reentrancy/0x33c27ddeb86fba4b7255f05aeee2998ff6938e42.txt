==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: transferToOwner()
PC address: 554
Estimated Gas Usage: 1734 - 2159
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferToOwner(), txdata: 0x2d90ae94, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 813
Estimated Gas Usage: 13583 - 154852
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c10c0000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 858
Estimated Gas Usage: 13583 - 154852
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c1040000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 861
Estimated Gas Usage: 13583 - 154852
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c1040000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 974
Estimated Gas Usage: 13583 - 154852
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c10c0000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 974
Estimated Gas Usage: 13583 - 154852
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 974
Estimated Gas Usage: 13583 - 154852
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c1040000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 1019
Estimated Gas Usage: 13583 - 154852
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c1040000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 1124
Estimated Gas Usage: 13583 - 154852
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c10c0000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 1124
Estimated Gas Usage: 13583 - 154852
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c1040000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MobaBase
Function name: transferOwnership(address)
PC address: 1144
Estimated Gas Usage: 1076 - 1831
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 1168
Estimated Gas Usage: 13583 - 154852
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c1040000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 1172
Estimated Gas Usage: 13583 - 154852
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c1040000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 1271
Estimated Gas Usage: 13583 - 154852
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c10c0000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BRBasketballControl
Function name: getGameInfo()
PC address: 1271
Estimated Gas Usage: 13583 - 154852
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:375
Initial State:

Account: [CREATOR], balance: 0x1c1040000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getGameInfo(), txdata: 0x1746bd1b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRBasketballControl
Function name: PK(uint8,bytes32)
PC address: 1601
Estimated Gas Usage: 1823 - 2248
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: PK(uint8,bytes32), txdata: 0x24675116, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRBasketballControl
Function name: transferToOwner()
PC address: 3795
Estimated Gas Usage: 1813 - 2568
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:59

x.origin");

        _;

    }

    

    function transferOwnership

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferToOwner(), txdata: 0x2d90ae94, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRBasketballControl
Function name: updateConfig(address)
PC address: 4026
Estimated Gas Usage: 1133 - 2218
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateConfig(address), txdata: 0x6cc919c8, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRBasketballControl
Function name: updateLock(bool)
PC address: 4196
Estimated Gas Usage: 1180 - 1935
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateLock(bool), txdata: 0xa1f91057, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BRBasketballControl
Function name: transferOwnership(address)
PC address: 4512
Estimated Gas Usage: 1221 - 2306
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/15a276c30efd0477883ac7ead4906593.sol:31

nly owner can call this function");

        _;

    }

    

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0


