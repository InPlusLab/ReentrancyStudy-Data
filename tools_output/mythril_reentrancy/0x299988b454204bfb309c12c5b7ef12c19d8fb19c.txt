==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FomoBet
Function name: takeOffer(uint256,uint256)
PC address: 937
Estimated Gas Usage: 24759 - 86654
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:28


    function s

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: takeOffer(uint256,uint256), txdata: 0x27c28b81, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3242
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:251

ated = true;

                 

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3281
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:253

Number].maker] = playerVault[plac

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3617
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:277

rVault[placedBets[betNumber].take

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3644
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:281

 wincon maker

             

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3650
Estimated Gas Usage: 5619 - 41931
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:281

          // wincon maker

                if(timer < placedBets[betNumber].betEnd && round > placedBets[betNumber].round){

                    placedBets[betNumber].validated = true;

                    playerVault[placedBets[betNumber].maker] = playerVault[placedBet

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3671
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:283

tNumber].betEnd && round > placedBets[

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3682
Estimated Gas Usage: 21033 - 98955
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:283

tNumber].betEnd && round > placedBets[

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3687
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:287

placedBets[betNumber].maker] 

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3694
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:286


                    player

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3714
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:285

ted = true;

                    playerV

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3748
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:285

   placedBets[betNumber].va

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3767
Estimated Gas Usage: 21033 - 98955
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:285

               placedBets[betNumber].validated = true;

                    playerVault[placedBets[betNumber].maker] =

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3786
Estimated Gas Usage: 21033 - 98955
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:289

       }

            }

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3794
Estimated Gas Usage: 20990 - 98912
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:289

               }

            }

        }

    }

    function death () ex

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FomoBet
Function name: validateBet(uint256)
PC address: 3821
Estimated Gas Usage: 21007 - 98929
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b82d491611f5904ef1c5346b816d823a.sol:287



                }

            }

        }

    }

    function death () external {

        require(msg.sender == 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220);

    selfdestruct(0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220);

        

    }

    // view function return all OpenOffers

    function getOff

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: validateBet(uint256), txdata: 0xa6cab5e3, value: 0x0