==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3368
Estimated Gas Usage: 37228 - 196153
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:279

n, _participantAddress, msg.sender, _value, _secretHash, now)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000001038810, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000400000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010102010108010101010101010101010180010102010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3685
Estimated Gas Usage: 37228 - 196153
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:283

tion getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddress][msg.sender].balance;

  }



  event Withdraw(address _buyer, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000210e2010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010101010208010101010101010101010101000101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3738
Estimated Gas Usage: 37228 - 196153
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:283

tion getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddress][msg.sender].balance;

  }



  event Withdraw(address _buyer, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000210e2010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010101010208010101010101010101010101000101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3756
Estimated Gas Usage: 37228 - 196153
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:283

tion getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddress][msg.sender].balance;

  }



  event Withdraw(address _buyer, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000210e2010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010101010208010101010101010101010101000101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3809
Estimated Gas Usage: 37228 - 196153
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:283

tion getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddress][msg.sender].balance;

  }



  event Withdraw(address _buyer, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000210e2010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010101010208010101010101010101010101000101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3820
Estimated Gas Usage: 37228 - 196153
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:283

tion getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddress][msg.sender].balance;

  }



  event Withdraw(address _buyer, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000210e2010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010101010208010101010101010101010101000101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3837
Estimated Gas Usage: 37228 - 196153
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:283

tion getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddress][msg.sender].balance;

  }



  event Withdraw(address _buyer, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000210e2010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010101010208010101010101010101010101000101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3884
Estimated Gas Usage: 37228 - 196153
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:283

tion getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddress][msg.sender].balance;

  }



  event Withdraw(address _buyer, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000210e2010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010101010208010101010101010101010101000101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3895
Estimated Gas Usage: 37228 - 196153
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:283

tion getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddress][msg.sender].balance;

  }



  event Withdraw(address _buyer, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000210e2010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010101010208010101010101010101010101000101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3905
Estimated Gas Usage: 37228 - 196153
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:283

tion getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddress][msg.sender].balance;

  }



  event Withdraw(address _buyer, add

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000210e2010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000100000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010101010208010101010101010101010101000101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6108
Estimated Gas Usage: 37170 - 196095
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:237

value

    );



    emit CreateSwap(_token, _participantAddr

--------------------
Initial State:

Account: [CREATOR], balance: 0x600082000020001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6425
Estimated Gas Usage: 37170 - 196095
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:243

r, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH Owner make token deposit

  function createSwapTarget(bytes20 _secre

--------------------
Initial State:

Account: [CREATOR], balance: 0x600081000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6478
Estimated Gas Usage: 37170 - 196095
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:243

r, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH Owner make token deposit

  function createSwapTarget(bytes20 _secre

--------------------
Initial State:

Account: [CREATOR], balance: 0x600081000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6496
Estimated Gas Usage: 37170 - 196095
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:243

r, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH Owner make token deposit

  function createSwapTarget(bytes20 _secre

--------------------
Initial State:

Account: [CREATOR], balance: 0x600081000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6549
Estimated Gas Usage: 37170 - 196095
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:243

r, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH Owner make token deposit

  function createSwapTarget(bytes20 _secre

--------------------
Initial State:

Account: [CREATOR], balance: 0x600081000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6560
Estimated Gas Usage: 37170 - 196095
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:243

r, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH Owner make token deposit

  function createSwapTarget(bytes20 _secre

--------------------
Initial State:

Account: [CREATOR], balance: 0x600081000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6577
Estimated Gas Usage: 37170 - 196095
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:243

r, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH Owner make token deposit

  function createSwapTarget(bytes20 _secre

--------------------
Initial State:

Account: [CREATOR], balance: 0x600081000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6624
Estimated Gas Usage: 37170 - 196095
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:243

r, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH Owner make token deposit

  function createSwapTarget(bytes20 _secre

--------------------
Initial State:

Account: [CREATOR], balance: 0x600081000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6635
Estimated Gas Usage: 37170 - 196095
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:243

r, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH Owner make token deposit

  function createSwapTarget(bytes20 _secre

--------------------
Initial State:

Account: [CREATOR], balance: 0x600081000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6645
Estimated Gas Usage: 37170 - 196095
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/42e4bcea04fffc18139e66f0b37a9165.sol:243

r, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH Owner make token deposit

  function createSwapTarget(bytes20 _secre

--------------------
Initial State:

Account: [CREATOR], balance: 0x600081000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000020101020401000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0