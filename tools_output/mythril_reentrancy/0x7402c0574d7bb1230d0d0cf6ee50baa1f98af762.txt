==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ValidationNodeLock
Function name: constructor
PC address: 122
Estimated Gas Usage: 11081 - 54277
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:102


    require(now >= lockedUntil

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ValidationNodeLock
Function name: constructor
PC address: 137
Estimated Gas Usage: 11112 - 54308
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:175

  require(_lastLockingTime 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ValidationNodeLock
Function name: withdrawFunds()
PC address: 760
Estimated Gas Usage: 944 - 1039
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:111

fundsToTransfer) {

    require(

      _fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000040000002, value: 0x0
Caller: [ATTACKER], function: withdrawFunds(), txdata: 0x24600fc3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ValidationNodeLock
Function name: withdrawFunds()
PC address: 784
Estimated Gas Usage: 964 - 1059
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:111

e(uint _fundsToTransfer) {

    require(

      _fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000144, value: 0x0
Caller: [ATTACKER], function: withdrawFunds(), txdata: 0x24600fc3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ValidationNodeLock
Function name: withdrawFunds()
PC address: 1244
Estimated Gas Usage: 11265 - 67921
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:295

nlocked(

      now,

      allFundsCanBeUnlocked

    );

  }



  f

--------------------
Initial State:

Account: [CREATOR], balance: 0x1003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [ATTACKER], function: withdrawFunds(), txdata: 0x24600fc3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 1384
Estimated Gas Usage: 1049 - 1144
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:137

re(_tokens >= nodePrice && _nod

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: lockFunds(uint256,uint256), txdata: 0x3287db4b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 1616
Estimated Gas Usage: 22749 - 134722
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:127

require(now <= lastLockingTime);

    _;

  }



--------------------
Initial State:

Account: [CREATOR], balance: 0x40000102000603, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef200000000000000000000000000000000000000000000000000000000000000221, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 1691
Estimated Gas Usage: 22749 - 134722
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:147

es * node

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000100000203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000000281, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 1723
Estimated Gas Usage: 22749 - 134722
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:165

 lastLock

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000100000203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000000281, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 1725
Estimated Gas Usage: 22749 - 134722
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:165

 modifier lastLock

--------------------
Initial State:

Account: [CREATOR], balance: 0x10084001940120b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000001000400000000800000080020040400100000000000000000008800100000102, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000040003, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 1744
Estimated Gas Usage: 22749 - 134722
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:253

      _nodes

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000100000203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000000281, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 1990
Estimated Gas Usage: 22749 - 134722
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:251

  _tokens,

      _nodes

    );

  }



  function withdrawFunds()

    p

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000102000603, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef200000000000000000000000000000000000000000000000000000000000000221, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 1990
Estimated Gas Usage: 22749 - 134722
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:251

  _tokens,

      _nodes

    );

  }



  function withdrawFunds()

    p

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000220, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 1990
Estimated Gas Usage: 22749 - 134722
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:251

  _tokens,

      _nodes

    );

  }



  function withdrawFunds()

    p

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000100000203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000000281, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 2186
Estimated Gas Usage: 22749 - 134722
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:265

kingPeriodIsOver()

  {

    uint amountToBe

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000100000203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000000281, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 2193
Estimated Gas Usage: 22749 - 134722
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:265

kingPeriodIsOver()

  {

    uint amountToBe

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000100000203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000000281, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 2323
Estimated Gas Usage: 22749 - 134722
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:269

ed = lockingData[msg.sender]["amount"];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000100000203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000000281, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ValidationNodeLock
Function name: lockFunds(uint256,uint256)
PC address: 2330
Estimated Gas Usage: 22749 - 134722
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50a61941ef4fd70689dc05bdb956d1bc.sol:269

ed = lockingData[msg.sender]["amount"];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000100000203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000000281, value: 0x0
Caller: [ATTACKER], function: lockFunds(uint256,uint256), txdata: 0x3287db4b4000000000000000000000000000000000000000000000000000000000000000808083, value: 0x0