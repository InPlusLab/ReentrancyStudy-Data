==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MultiSeller
Function name: fallback
PC address: 333
Estimated Gas Usage: 53 - 148
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1261

   _mtkn,

            _amount,


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CanReclaimToken
Function name: fallback
PC address: 364
Estimated Gas Usage: 5251 - 76875
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:775

 address src,

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CanReclaimToken
Function name: fallback
PC address: 408
Estimated Gas Usage: 5251 - 76875
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:779

ress 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CanReclaimToken
Function name: fallback
PC address: 729
Estimated Gas Usage: 5251 - 76875
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:679

ived in a contract by transf

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CanReclaimToken
Function name: fallback
PC address: 729
Estimated Gas Usage: 5251 - 76875
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:679

ived in a contract by transf

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CanReclaimToken
Function name: fallback
PC address: 729
Estimated Gas Usage: 5251 - 76875
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:679

ived in a contract by transf

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: bancorApproveTokenProportion(address,address[],uint256,uint256)
PC address: 2225
Estimated Gas Usage: 344 - 1099
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1059

6 _amount) external {

        _bancor.convert(_path, _amount, 1);

    }



    function bancorAlreadyTransferedTokenProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {

        uint256 amount = ERC20(_path[0]).balanceOf(_bancor).mul(_mul).div(_div);

        _bancor.convert(_path, amount, 1);

    }



    // Kyber Network



    function kyberSendEthProportio

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bancorApproveTokenProportion(address,address[],uint256,uint256), txdata: 0x38085649, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MultiSeller
Function name: fallback
PC address: 2251
Estimated Gas Usage: 1004 - 2089
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:551

Owner.

   * @param _newOwne

--------------------
Initial State:

Account: [CREATOR], balance: 0x80040000018802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: bancorTransferTokenAmount(address,address[],uint256)
PC address: 2781
Estimated Gas Usage: 354 - 1109
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1081

orkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _mul, uint256 _div) external {

        uint256 value = address(this).balance.mul(_mul).div(_div);

        _kyber.trade.value(value)(

            _fromTok

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bancorTransferTokenAmount(address,address[],uint256), txdata: 0x40f0b0f1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: bancorTransferTokenProportion(address,address[],uint256,uint256)
PC address: 3159
Estimated Gas Usage: 410 - 1165
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1089

     value,

            _toToken,

            this,

            1 << 255,

            0,

            0

        );

    }



    function kyberApproveTokenAmount(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _amount) external {

        if (_fromToken.allowance(this, _kyber) == 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bancorTransferTokenProportion(address,address[],uint256,uint256), txdata: 0x618e8ad3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiSeller
Function name: bancorApproveTokenProportion(address,address[],uint256,uint256)
PC address: 3288
Estimated Gas Usage: 366 - 1121
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1059

6 _amount) external {

        _bancor.convert(_path, _amount, 1);

    }



    function bancorAlreadyTransferedTokenProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {

        uint256 amount = ERC20(_path[0]).balanceOf(_bancor).mul(_mul).div(_div);

        _bancor.convert(_path, amount, 1);

    }



    // Kyber Network



    function kyberSendEthProportio

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bancorApproveTokenProportion(address,address[],uint256,uint256), txdata: 0x38085649, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiSeller
Function name: bancorTransferTokenAmount(address,address[],uint256)
PC address: 3822
Estimated Gas Usage: 376 - 1131
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1081

orkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _mul, uint256 _div) external {

        uint256 value = address(this).balance.mul(_mul).div(_div);

        _kyber.trade.value(value)(

            _fromTok

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bancorTransferTokenAmount(address,address[],uint256), txdata: 0x40f0b0f1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: bancorAlreadyTransferedTokenProportion(address,address[],uint256,uint256)
PC address: 3917
Estimated Gas Usage: 564 - 1319
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1125

    1 << 255,

            0,

            0

        );

    }



    function kyberApproveTokenProportion(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _mul, uint256 _div) external {

        uint256 amount = _fromToken.balanceOf(this).mul

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bancorAlreadyTransferedTokenProportion(address,address[],uint256,uint256), txdata: 0x9d99ce04, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiSeller
Function name: bancorTransferTokenProportion(address,address[],uint256,uint256)
PC address: 4200
Estimated Gas Usage: 432 - 1187
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1089

     value,

            _toToken,

            this,

            1 << 255,

            0,

            0

        );

    }



    function kyberApproveTokenAmount(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _amount) external {

        if (_fromToken.allowance(this, _kyber) == 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bancorTransferTokenProportion(address,address[],uint256,uint256), txdata: 0x618e8ad3, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: MultiSeller
Function name: renounceOwnership()
PC address: 4359
Estimated Gas Usage: 1168 - 1923
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:551

Owner.

   * @param _newOwne

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiSeller
Function name: bancorAlreadyTransferedTokenProportion(address,address[],uint256,uint256)
PC address: 4992
Estimated Gas Usage: 630 - 1385
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1125

    1 << 255,

            0,

            0

        );

    }



    function kyberApproveTokenProportion(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _mul, uint256 _div) external {

        uint256 amount = _fromToken.balanceOf(this).mul

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bancorAlreadyTransferedTokenProportion(address,address[],uint256,uint256), txdata: 0x9d99ce04, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: bancorSendEthProportion(address,address[],uint256,uint256)
PC address: 5941
Estimated Gas Usage: 1102 - 1857
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1041

vert(_path, _amount, 1);

    }



    fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bancorSendEthProportion(address,address[],uint256,uint256), txdata: 0x2545f8eb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: sendEthProportion(address,bytes,uint256,uint256)
PC address: 5941
Estimated Gas Usage: 1256 - 2011
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1041

vert(_path, _amount, 1);

    }



    fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendEthProportion(address,bytes,uint256,uint256), txdata: 0x846f1185, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiChanger
Function name: kyberSendEthProportion(address,address,address,uint256,uint256)
PC address: 5941
Estimated Gas Usage: 1297 - 2052
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1041

vert(_path, _amount, 1);

    }



    fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: kyberSendEthProportion(address,address,address,uint256,uint256), txdata: 0x8721fbe9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiSeller
Function name: bancorSendEthProportion(address,address[],uint256,uint256)
PC address: 9673
Estimated Gas Usage: 1102 - 1857
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1041

vert(_path, _amount, 1);

    }



    fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bancorSendEthProportion(address,address[],uint256,uint256), txdata: 0x2545f8eb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiSeller
Function name: sendEthProportion(address,bytes,uint256,uint256)
PC address: 9673
Estimated Gas Usage: 1300 - 2055
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/31051a0b788b9eee5cade79797dad79d.sol:1041

vert(_path, _amount, 1);

    }



    fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: sendEthProportion(address,bytes,uint256,uint256), txdata: 0x846f1185, value: 0x0


