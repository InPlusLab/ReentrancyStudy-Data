==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2707
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:145

ddPayout(_s

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2741
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:148

r].remainde

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2787
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:150

dTokens);
        stakers[msg.sender].

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2791
Estimated Gas Usage: 56021 - 235193
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:150

dTokens);
        stakers[msg.sender].

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2792
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:153

        stakers[msg.sender].roun

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2833
Estimated Gas Usage: 56021 - 235193
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:151

;
        stakers[msg.sender].fromTotalDividend= totalDividends;
        stakers[msg.sender].round

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2840
Estimated Gas Usage: 56021 - 235193
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:154

        
        totalStakes = totalStake

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2843
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:157

mit STAKED(msg

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2848
Estimated Gas Usage: 56021 - 235193
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:155

s.sub(_stakingFee));
        
        emit STAKED(msg

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2851
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:157

ngFee

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2857
Estimated Gas Usage: 56021 - 235193
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:157

kens.sub(_stakingFee), _stakingFee

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2873
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:160

ss _TRY) pu

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 2882
Estimated Gas Usage: 56021 - 235193
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:160

n addTRY(address _TRY) public onlyOwner {
        TRY 

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3519
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:213

ngRewar

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3548
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:210

t;
    }
    
    function g

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3554
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:209

 % scaling ;
        

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3568
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:209

Tokens)) % scaling ;
        retur

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3571
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:209

kers[staker].s

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3598
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:214

ound - 

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3627
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:214

nds.sub(payouts[stakers[stak

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3633
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:214

  uint256 amount =  (

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3648
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:213

{
        uint256 amount =  ((tota

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3651
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:213

56 _pendingRew

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3708
Estimated Gas Usage: 56021 - 235193
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:213

aker) public view returns(uint256 _pendingReward) {
        uint256 amount =  ((totalDividends.sub(payouts[stakers[staker].round - 

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TRYStake
Function name: STAKE(uint256)
PC address: 3716
Estimated Gas Usage: 56021 - 235193
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83f7c9da727ddae163b42661c3f206cf.sol:213

aker) public view returns(uint256 _pendingReward) {
        uint256 amount =  ((totalDividends.sub(payouts[stakers[staker].round - 

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00001408a30b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: STAKE(uint256), txdata: 0xca84d591401928491800681a93248418252009015403767ce60152199709055cc5a913a8, value: 0x0