==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SmartWalletLib
Function name: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256)
PC address: 835
Estimated Gas Usage: 9654 - 82431
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:136

ithdrawalAccount, _amount);
                

--------------------
Initial State:

Account: [CREATOR], balance: 0x100080000080503, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x540c0280000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d81938ffffffff3f00001000000074c17fff87ffffffffffbfffb90058000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000082020208000000280084000800401010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256), txdata: 0x1557a52fffffffff3f00001000000074c17fff87ffffffffffbfffb9005800000000000180808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SmartWalletLib
Function name: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256)
PC address: 894
Estimated Gas Usage: 9654 - 82431
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:137

feesToken, _self.feesAccoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d81938fcffe00000000000000002004004100004000100020000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000008080800f408080ef808080ef808080864004808800000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256), txdata: 0x1557a52ffcffe0000000000000000200400410000400010002000000000000000000000288888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SmartWalletLib
Function name: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256)
PC address: 1071
Estimated Gas Usage: 9654 - 82431
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:137

unt, _amount,  _feesToken, _self.feesAccount, _fee); 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d81938ffffeffffffff7ffffff00000008a01d801c82ff900fda2bd500000000100204000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000002ad104f20ad088a018d080f100000022028080a00000000000000000000000022, value: 0x0
Caller: [ATTACKER], function: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256), txdata: 0x1557a52fffffeffffffff7ffffff00000008a01d801c82ff900fda2bd500000000100205b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b9b901, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SmartWalletLib
Function name: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256)
PC address: 1071
Estimated Gas Usage: 9654 - 82431
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:137

unt, _amount,  _feesToken, _self.feesAccount, _fee); 

--------------------
Initial State:

Account: [CREATOR], balance: 0x21400000020e1c02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d81938fffffffffffffffffffffff7fffdbffffffffffffffffc000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000022080088020080820208008022008082020020800000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256), txdata: 0x1557a52ffffffffffffffffffffffff7fffdbffffffffffffffffc00000000000000000280808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SmartWalletLib
Function name: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256)
PC address: 1071
Estimated Gas Usage: 9654 - 82431
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:137

unt, _amount,  _feesToken, _self.feesAccount, _fee); 

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d81938fcffe00000000000000002004004100004000100020000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000008080800f408080ef808080ef808080864004808800000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256), txdata: 0x1557a52ffcffe0000000000000000200400410000400010002000000000000000000000288888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SmartWalletLib
Function name: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256)
PC address: 1135
Estimated Gas Usage: 9654 - 82431
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:142

 a smart wallet, created by

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000c00000c29a9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d81938ffffe9effbe6fff401800000000010bae3fdffffffffff9fd7a0f80000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000802d8080800d010140a980200825801080a4808000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256), txdata: 0x1557a52fffffe9effbe6fff401800000000010bae3fdffffffffff9fd7a0f80000000001101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SmartWalletLib
Function name: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256)
PC address: 1174
Estimated Gas Usage: 9654 - 82431
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:142

x user
contract S

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000c00000c29a9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d81938ffffe9effbe6fff401800000000010bae3fdffffffffff9fd7a0f80000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000802d8080800d010140a980200825801080a4808000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: transferToUserWithdrawalAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256,IERC20Token,uint256), txdata: 0x1557a52fffffe9effbe6fff401800000000010bae3fdffffffffff9fd7a0f80000000001101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101001, value: 0x0

==== Write to an arbitrary storage location ====
SWC ID: 124
Severity: High
Contract: SmartWalletLib
Function name: setUserWithdrawalAccount(SmartWalletLib.Wallet storage,address)
PC address: 1719
Estimated Gas Usage: 8704 - 30326
The caller can write to arbitrary storage locations.
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:98

userWithdrawalAccount);
    }

    /*
        @dev W

--------------------
Initial State:

Account: [CREATOR], balance: 0x21410000400a39a2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d819380000000000000000000000000000000000000000000000000000004b847e6e190000000000000000000000000000000000000000020000000100002010400040000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: setUserWithdrawalAccount(SmartWalletLib.Wallet storage,address), txdata: 0x2eb9e5d70000000000000000000000000000000000000000000000000000004b847e6e1910101010101010101010101001, value: 0x0

==== Write to an arbitrary storage location ====
SWC ID: 124
Severity: High
Contract: SmartWalletLib
Function name: initWallet(SmartWalletLib.Wallet storage,address,address,address)
PC address: 2009
Estimated Gas Usage: 18033 - 79118
The caller can write to arbitrary storage locations.
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:80

upAccount;
                _self.

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d819380000000000000000000000000000000000000000000000000000004b847e6e1b0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000014008010210010101200101010101040101010100000000000000000000000001, value: 0x0

==== Write to an arbitrary storage location ====
SWC ID: 124
Severity: High
Contract: SmartWalletLib
Function name: initWallet(SmartWalletLib.Wallet storage,address,address,address)
PC address: 2076
Estimated Gas Usage: 18033 - 79118
The caller can write to arbitrary storage locations.
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:81

Account;
    }

    /*
        @dev 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d819380000000000000000000000000000000000000000000000000000004b847e6e1a0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010110010101020401010101011001010101800100000000000000000000000001, value: 0x0

==== Write to an arbitrary storage location ====
SWC ID: 124
Severity: High
Contract: SmartWalletLib
Function name: initWallet(SmartWalletLib.Wallet storage,address,address,address)
PC address: 2143
Estimated Gas Usage: 18033 - 79118
The caller can write to arbitrary storage locations.
It is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:85

 of the user to send funds to. 


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d819380000000000000000000000000000000000000000000000000000004b847e6e180000000000000000000000000101010101010101010101010101010101010101000000000000000000000000400201800140010101010101011004010201010100000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SmartWalletLib
Function name: transferToBackupAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256)
PC address: 2461
Estimated Gas Usage: 5346 - 42003
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:115

t, _amount); 
    }
      
    /*
        @de

--------------------
Initial State:

Account: [CREATOR], balance: 0x210210000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d81938808000008dffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000400000000000000000000000000000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: transferToBackupAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256), txdata: 0xdaf01142808000008e000000000000000000000000000000000000000000000000000000101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SmartWalletLib
Function name: transferToBackupAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256)
PC address: 2525
Estimated Gas Usage: 5346 - 42003
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/50f2ffc4804de5d6235650a71c50e8ef.sol:121

ram _self          

--------------------
Initial State:

Account: [CREATOR], balance: 0x800401000a3d0c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initWallet(SmartWalletLib.Wallet storage,address,address,address), txdata: 0x56d81938800000000000000000000000000000000000800013b1f6ef73f6ed784102040c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000020, value: 0x0
Caller: [ATTACKER], function: transferToBackupAccount(SmartWalletLib.Wallet storage,IERC20Token,uint256), txdata: 0xdaf01142800000000000000000000000000000000000800013b1f6ef73f6ed784102040cb9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0