==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CanReclaimToken
Function name: fallback
PC address: 364
Estimated Gas Usage: 5251 - 76875
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:503

    )

        public

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000001000200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CanReclaimToken
Function name: fallback
PC address: 408
Estimated Gas Usage: 5251 - 76875
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:511

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CanReclaimToken
Function name: fallback
PC address: 729
Estimated Gas Usage: 5251 - 76875
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:301

, uint256 value) internal

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000001000200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CanReclaimToken
Function name: fallback
PC address: 729
Estimated Gas Usage: 5251 - 76875
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:301

, uint256 value) internal

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CanReclaimToken
Function name: fallback
PC address: 729
Estimated Gas Usage: 5251 - 76875
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:301

, uint256 value) internal

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiBuyer
Function name: fallback
PC address: 1457
Estimated Gas Usage: 5298 - 77912
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:503

    )

        public

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiBuyer
Function name: fallback
PC address: 1501
Estimated Gas Usage: 5298 - 77912
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:511

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiBuyer
Function name: buyFirstTokensOnTransfer(address,address,address[],bytes,uint256[],uint256[])
PC address: 1762
Estimated Gas Usage: 1053 - 12714
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:829

atas[j];

            }



            if (_throughToken != address(0) && i > 0) {

                _throughToken.transfer(_exchanges[i], _values[i]);

                require(_exchanges[i].call(data), "buy: exchange arbitrary call failed");

            } else {

                require(_exchanges[i].call.value(_values[i])(data), "buy: exchange arbitrary call failed");

            }

        }



        uint tokensCount = _mtkn.tokensCount();

        uint256[] memory amounts = new uint256[](tokensCount);

        for (i = 0; i < tokensCount; i++) {

            ERC20 token = _mtkn.tokens(i);

            amounts[i] = token.balanceOf(this);

            token.approve(_mtkn, 0);

            token.approve(_mtkn, amounts[i]);

        }



        _mtkn.bundleFirstTokens(msg.sender, msg.value.mul(1000), amounts);

        if (address(this).balance > 0) {

            msg.sender.transfer(address(this).balance);

        }

        if (_throughToken != address(0) && _throughToken.balanceOf(this) > 0) {

            _throughToken.transfer(msg.sender, _throughToken.balanceOf(this));

        }

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyFirstTokensOnTransfer(address,address,address[],bytes,uint256[],uint256[]), txdata: 0x319e8bd2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000039000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiBuyer
Function name: buyFirstTokensOnApprove(address,address,address[],bytes,uint256[],uint256[])
PC address: 4503
Estimated Gas Usage: 1119 - 12780
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:731

asIndexes[i]; j < _datasIndexes[i + 1]; j++) {

                data[j - _datasIndexes[i]] = _datas[j];

            }



            if (_throughToken != address(0) && i > 0) {

                if (_throughToken.allowance(this, _exchanges[i]) == 0) {

                    _throughToken.approve(_exchanges[i], uint256(-1));

                }

                require(_exchanges[i].call(data), "buy: exchange arbitrary call failed");

            } else {

                require(_exchanges[i].call.value(_values[i])(data), "buy: exchange arbitrary call failed");

            }

        }



        uint tokensCount = _mtkn.tokensCount();

        uint256[] memory amounts = new uint256[](tokensCount);

        for (i = 0; i < tokensCount; i++) {

            ERC20 token = _mtkn.tokens(i);

            amounts[i] = token.balanceOf(this);

            token.approve(_mtkn, 0);

            token.approve(_mtkn, amounts[i]);

        }



        _mtkn.bundleFirstTokens(msg.sender, msg.value.mul(1000), amounts);

        if (address(this).balance > 0) {

            msg.sender.transfer(address(this).balance);

        }

        if (_throughToken != address(0) && _throughToken.balanceOf(this) > 0) {

            _throughToken.transfer(msg.sender, _throughToken.balanceOf(this));

        }

    }



    function buyFirstTokensOnTransfer(

        IMultiToken _mtkn,

        ERC20 _throughToken,

        address[] _exchanges,

        bytes _datas,

        uint[] _datasIndexes, // including 0 and LENGTH values

        uint256[] _values

    )

        public

        payable

    {

        require(_datasIndexes.length == _exchanges.length + 1, "buy: _datasIndexes should start with 0 and end with LENGTH");

        require(_values.length == _exchanges.length, "buy: _values should have the same length as _exchanges");



        for (uint i = 0; i < _exchanges.length; i++) {

            bytes memory data = new bytes(_datasIndexes[i + 1] - _datasIndexes[i]);

            for (uint j = _datasIndexes[i]; j < _datasIndexes[i + 1]; j++) {

                data[j - _datasInde

--------------------
Initial State:

Account: [CREATOR], balance: 0x28101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyFirstTokensOnApprove(address,address,address[],bytes,uint256[],uint256[]), txdata: 0x9dbb5423ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000005f000000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiBuyer
Function name: buyOnTransfer(address,uint256,address,address[],bytes,uint256[],uint256[])
PC address: 6616
Estimated Gas Usage: 1184 - 12845
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:625

th; i++) {

            bytes memory data = new bytes(_datasIndexes[i + 1] - _datasIndexes[i]);

            for (uint j = _datasIndexes[i]; j < _datasIndexes[i + 1]; j++) {

                data[j - _datasIndexes[i]] = _datas[j];

            }



            if (_throughToken != address(0) && i > 0) {

                _throughToken.transfer(_exchanges[i], _values[i]);

                require(_exchanges[i].call(data), "buy: exchange arbitrary call failed");

            } else {

                require(_exchanges[i].call.value(_values[i])(data), "buy: exchange arbitrary call failed");

            }

        }



        j = _mtkn.totalSupply(); // optimization totalSupply

        uint256 bestAmount = uint256(-1);

        for (i = _mtkn.tokensCount(); i > 0; i--) {

            ERC20 token = _mtkn.tokens(i - 1);

            token.approve(_mtkn, 0);

            token.approve(_mtkn, token.balanceOf(this));



            uint256 amount = j.mul(token.balanceOf(this)).div(token.balanceOf(_mtkn));

            if (amount < bestAmount) {

                bestAmount = amount;

            }

        }



        require(bestAmount >= _minimumReturn, "buy: return value is too low");

        _mtkn.bundle(msg.sender, bestAmount);

        if (address(this).balance > 0) {

            msg.sender.transfer(address(this).balance);

        }

        if (_throughToken != address(0) && _throughToken.balanceOf(this) > 0) {

            _throughToken.transfer(msg.sender, _throughToken.balanceOf(this));

        }

    }



    function buyFirstTokensOnApprove(

        IMultiToken _mtkn,

        ERC20 _throughToken,

        address[] _exchanges,

        bytes _datas,

        uint[] _datasIndexes, // including 0 and LENGTH values

        uint256[] _values

    )

        public

        payable

    {

        require(_datasIndexes.length == _exchanges.length + 1, "buy: _datasIndexes should start with 0 and end with LENGTH");

        require(_values.length == _exchanges.length, "buy: _values should have the same length as _exchanges");



        for (uint i = 0; i < _exchanges.length; i++) {

            bytes memory data = new bytes(_datasIndexes[i + 1] - _datasIndexes[i]);

            for (u

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyOnTransfer(address,uint256,address,address[],bytes,uint256[],uint256[]), txdata: 0xf5cbc457ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiBuyer
Function name: buyOnApprove(address,uint256,address,address[],bytes,uint256[],uint256[])
PC address: 9622
Estimated Gas Usage: 1206 - 12867
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:513

 "buy: _values should have the same length as _exchanges");



        for (uint i = 0; i < _exchanges.length; i++) {

            bytes memory data = new bytes(_datasIndexes[i + 1] - _datasIndexes[i]);

            for (uint j = _datasIndexes[i]; j < _datasIndexes[i + 1]; j++) {

                data[j - _datasIndexes[i]] = _datas[j];

            }



            if (_throughToken != address(0) && i > 0) {

                if (_throughToken.allowance(this, _exchanges[i]) == 0) {

                    _throughToken.approve(_exchanges[i], uint256(-1));

                }

                require(_exchanges[i].call(data), "buy: exchange arbitrary call failed");

            } else {

                require(_exchanges[i].call.value(_values[i])(data), "buy: exchange arbitrary call failed");

            }

        }



        j = _mtkn.totalSupply(); // optimization totalSupply

        uint256 bestAmount = uint256(-1);

        for (i = _mtkn.tokensCount(); i > 0; i--) {

            ERC20 token = _mtkn.tokens(i - 1);

            token.approve(_mtkn, 0);

            token.approve(_mtkn, token.balanceOf(this));



            uint256 amount = j.mul(token.balanceOf(this)).div(token.balanceOf(_mtkn));

            if (amount < bestAmount) {

                bestAmount = amount;

            }

        }



        require(bestAmount >= _minimumReturn, "buy: return value is too low");

        _mtkn.bundle(msg.sender, bestAmount);

        if (address(this).balance > 0) {

            msg.sender.transfer(address(this).balance);

        }

        if (_throughToken != address(0) && _throughToken.balanceOf(this) > 0) {

            _throughToken.transfer(msg.sender, _throughToken.balanceOf(this));

        }

    }



    function buyOnTransfer(

        IMultiToken _mtkn,

        uint256 _minimumReturn,

        ERC20 _throughToken,

        address[] _exchanges,

        bytes _datas,

        uint[] _datasIndexes, // including 0 and LENGTH values

        uint256[] _values

    )

        public

        payable

    {

        require(_datasIndexes.length == _exchanges.length + 1, "buy: _datasIndexes should start with 0 and end with LENGTH");

        require(_values.length == _exchanges.length, "buy: _values should have the same length as _exchanges");



        for (uint i = 0; i < _ex

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyOnApprove(address,uint256,address,address[],bytes,uint256[],uint256[]), txdata: 0xfc671915ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiBuyer
Function name: fallback
PC address: 11758
Estimated Gas Usage: 5298 - 77912
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:301

, uint256 value) internal

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MultiBuyer
Function name: fallback
PC address: 11758
Estimated Gas Usage: 5298 - 77912
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:301

, uint256 value) internal

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiBuyer
Function name: fallback
PC address: 11758
Estimated Gas Usage: 5298 - 77912
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2374d62f8808694bd14544c801ffa165.sol:301

, uint256 value) internal

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0


