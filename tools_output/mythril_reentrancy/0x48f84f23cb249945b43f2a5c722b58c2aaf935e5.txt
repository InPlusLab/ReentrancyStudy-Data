==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: constructor
PC address: 323
Estimated Gas Usage: 40541 - 186089
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:533

o revoke the vesti

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800208088008084020082010011000101008801000000000000000000000000010040280100440400880100204011020081040800000000000000000000000000401010101000401020101010101200102010801a839802d44a3336c01993122240022e5d9aad940a4cadd424101a8a9ad69b06298100024056065240092d522240002408b288962a4424342034098a8a52a902ca0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1407
Estimated Gas Usage: 5625 - 43063
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:635

 beneficiary);

    re

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1407
Estimated Gas Usage: 4843 - 42801
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:635

 beneficiary);

    re

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000520400400008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000040100108080200040000010210800200020000000000000000000000000000000202010001000000008000000000010100000101000000000000000000000000000000000000040001000020010000000000008045, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8f8f8f8f8f8f8f8f8f8f8f8f8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1473
Estimated Gas Usage: 5625 - 43063
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:639

!= backup);

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1091140001a40052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1473
Estimated Gas Usage: 4843 - 42801
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:639

!= backup);

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x204240000040001c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000204104000010001008001001000020001028001000000000000000000000000000000000800000004010100000100100101040000000000000000000000000000010000000002000400080000020001000100004b, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8e8e8e8e8e8e8e8e8e8e8e8e8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1498
Estimated Gas Usage: 5625 - 43063
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:643

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1091140001a40052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1498
Estimated Gas Usage: 4843 - 42801
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:643

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x204240000040001c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000204104000010001008001001000020001028001000000000000000000000000000000000800000004010100000100100101040000000000000000000000000000010000000002000400080000020001000100004b, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8e8e8e8e8e8e8e8e8e8e8e8e8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1505
Estimated Gas Usage: 3806 - 40963
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:641

up != beneficiary);

      

    backup = _backup;

  }

  

  

  /**

   * @dev Request an update to current beneficiary only by backup address

   * @param _newBeneficiary new beneficiary

   */

  function updateBeneficiary(address _newBeneficiary) extern

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080002001001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000001000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1517
Estimated Gas Usage: 5625 - 43063
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:655

te to cu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1091140001a40052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1517
Estimated Gas Usage: 4843 - 42801
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:655

te to cu

--------------------
Initial State:

Account: [CREATOR], balance: 0x204240000040001c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000204104000010001008001001000020001028001000000000000000000000000000000000800000004010100000100100101040000000000000000000000000000010000000002000400080000020001000100004b, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8e8e8e8e8e8e8e8e8e8e8e8e8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1520
Estimated Gas Usage: 5625 - 43063
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:655

st an

--------------------
Initial State:

Account: [CREATOR], balance: 0x1091140001a40052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1520
Estimated Gas Usage: 4843 - 42801
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:655

st an

--------------------
Initial State:

Account: [CREATOR], balance: 0x204240000040001c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000204104000010001008001001000020001028001000000000000000000000000000000000800000004010100000100100101040000000000000000000000000000010000000002000400080000020001000100004b, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8e8e8e8e8e8e8e8e8e8e8e8e8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1543
Estimated Gas Usage: 5515 - 42672
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:653

**

   * @dev Request an update to current beneficiary on

--------------------
Initial State:

Account: [CREATOR], balance: 0x2181080000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000001000000000000000010000000000000000000000000000000000000020, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1569
Estimated Gas Usage: 4843 - 42801
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:655

 beneficiary on

--------------------
Initial State:

Account: [CREATOR], balance: 0x204240000040001c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000204104000010001008001001000020001028001000000000000000000000000000000000800000004010100000100100101040000000000000000000000000000010000000002000400080000020001000100004b, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8e8e8e8e8e8e8e8e8e8e8e8e8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1569
Estimated Gas Usage: 5625 - 43063
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:655

 beneficiary on

--------------------
Initial State:

Account: [CREATOR], balance: 0x1091140001a40052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1578
Estimated Gas Usage: 5532 - 42689
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:652


  /**

   * @dev Request an update to current beneficiary only by backup address

   * @param _newBeneficiary new beneficiary

   */

  function updateBeneficiary(address _newBeneficiary) extern

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1592
Estimated Gas Usage: 5625 - 43063
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:661

Benefici

--------------------
Initial State:

Account: [CREATOR], balance: 0x1091140001a40052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 2334
Estimated Gas Usage: 5481 - 42638
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:655

st an update to cur

--------------------
Initial State:

Account: [CREATOR], balance: 0x244000000010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000200000000000000000000801000020000000000100000000000000000000000000000200000101010002000000000000000000010000000000000000000000002001200001010201010008018000200102000440c9d1fba4bfade55d36b18e9ac12155ffffffffffffffffffffffffffe5bd35020220021080189e018001288015856d5203e001000000000000000000024000ff48, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 2334
Estimated Gas Usage: 6336 - 44013
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:655

st an update to cur

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000001000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000040000000000000002000000000000000000000000000000000001010001022000100108010102010001800800000000000000000000000000000810000800000000400480400401000220010004e9cb4fc962810a4228a960cf606a05088694090d480a45051141c68aa2d826040a8002004280003e882ac16821460000142e851969f81c107e408048a824400c8b, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: release(address)
PC address: 2334
Estimated Gas Usage: 6379 - 44056
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/14b917260190742c6818e9aa166dc91d.sol:655

st an update to cur

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000010001000000010000000000000000000000000000000000000000010001010220100001000200000101008000000000000000000000000000000002010201010101010201040004044001400001049588e3c0042349c86cb57a5820ba86e8b32022116ac0cb088300a0bcfd62ae724e3789802e1c8c6b000197c823900a182660321122400a788d5fa169104a442085, value: 0x0
Caller: [ATTACKER], function: release(address), txdata: 0x19165587, value: 0x0


