==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: get_amount_buy(uint256)
PC address: 1392
Estimated Gas Usage: 3655 - 3750
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5406d9342d95af2a556cfc68ff79548b.sol:447

      

    return (_amount*(1 ether - commission_ratio))/(1 ether);  

    

  }



  function activate_admin_c

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: get_amount_buy(uint256), txdata: 0x7b5825d5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: get_amount_sell(uint256)
PC address: 1632
Estimated Gas Usage: 3052 - 3147
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5406d9342d95af2a556cfc68ff79548b.sol:433

_ = eth_balance + _amount;

    

    return (_amount*traded_token_balance*(eth_ba

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: get_amount_sell(uint256), txdata: 0xa45230ec, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLiquidityContract
Function name: withdraw_token(uint256)
PC address: 2112
Estimated Gas Usage: 10262 - 66004
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5406d9342d95af2a556cfc68ff79548b.sol:193

) private {



    eth_balance = eth_bala

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: withdraw_token(uint256)
PC address: 2470
Estimated Gas Usage: 2725 - 3480
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5406d9342d95af2a556cfc68ff79548b.sol:11

t(b <= a);

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLiquidityContract
Function name: withdraw_eth(uint256)
PC address: 2470
Estimated Gas Usage: 2769 - 3524
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/5406d9342d95af2a556cfc68ff79548b.sol:11

t(b <= a);

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_eth(uint256), txdata: 0x30a95e6701, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLiquidityContract
Function name: seed_traded_token()
PC address: 2621
Estimated Gas Usage: 17456 - 92963
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5406d9342d95af2a556cfc68ff79548b.sol:177

ansferTokensFromContract(address _to, uint256 _amou

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0