==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenHolder
Function name: fallback
PC address: 300
Estimated Gas Usage: 1019 - 1774
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:94

the contract ownership
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address)
PC address: 413
Estimated Gas Usage: 1064 - 1819
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:94

the contract ownership
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenHolder
Function name: fallback
PC address: 495
Estimated Gas Usage: 2919 - 40311
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:237

unction withdrawTo(address _t

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenHolder
Function name: transferOwnership(address)
PC address: 737
Estimated Gas Usage: 1086 - 1841
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:94

the contract ownership
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorQuickConverter
Function name: fallback
PC address: 1149
Estimated Gas Usage: 1023 - 2108
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:94

the contract ownership
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: registerEtherToken(address,bool), txdata: 0x02ef521e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorQuickConverter
Function name: setSignerAddress(address)
PC address: 1259
Estimated Gas Usage: 1033 - 2118
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:94

the contract ownership
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x800020a8001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setSignerAddress(address), txdata: 0x046dc166, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorQuickConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 2156
Estimated Gas Usage: 1120 - 2205
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:94

the contract ownership
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorQuickConverter
Function name: withdrawTokens(address,address,uint256)
PC address: 2326
Estimated Gas Usage: 3033 - 41085
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:237

unction withdrawTo(address _t

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorQuickConverter
Function name: claimAndConvertFor(address[],uint256,uint256,address)
PC address: 2608
Estimated Gas Usage: 663 - 4098
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:479

 above
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimAndConvertFor(address[],uint256,uint256,address), txdata: 0xb1e9932b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorQuickConverter
Function name: claimAndConvert(address[],uint256,uint256)
PC address: 2608
Estimated Gas Usage: 680 - 3785
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:479

 above
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimAndConvert(address[],uint256,uint256), txdata: 0xc7ba24bc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorQuickConverter
Function name: setGasPriceLimit(address)
PC address: 2886
Estimated Gas Usage: 1319 - 2404
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:94

the contract ownership
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setGasPriceLimit(address), txdata: 0xe33051dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorQuickConverter
Function name: transferOwnership(address)
PC address: 3000
Estimated Gas Usage: 1341 - 2426
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:94

the contract ownership
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BancorQuickConverter
Function name: convertForPrioritized(address[],uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32)
PC address: 3264
Estimated Gas Usage: 2617 - 41840
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/cb27c245b8e436ab29924909838eec41.sol:354

refixedHash, _v, _r, _s) == signerAddress;

        // if 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c0080102000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: convertForPrioritized(address[],uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32), txdata: 0x1134269a8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0