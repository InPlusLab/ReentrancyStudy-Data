==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: deposit(uint256,uint256)
PC address: 874
Estimated Gas Usage: 25303 - 140057
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1fd8b28c6ce4170b0a796d17b37242c1.sol:100

vested_period = blocksUn

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256,uint256), txdata: 0xe2bbb158000000000000000000000000000000000000000000000000000000000000000038ce20dfd8aed3bb2376b085bebfffdd8f356ffde60003dfffffffffffffffff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: deposit(uint256,uint256)
PC address: 887
Estimated Gas Usage: 25303 - 140057
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1fd8b28c6ce4170b0a796d17b37242c1.sol:100

d;
        
        hasDeposited = true;
    }
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256,uint256), txdata: 0xe2bbb158000000000000000000000000000000000000000000000000000000000000000038ce20dfd8aed3bb2376b085bebfffdd8f356ffde60003dfffffffffffffffff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: deposit(uint256,uint256)
PC address: 890
Estimated Gas Usage: 25303 - 140057
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1fd8b28c6ce4170b0a796d17b37242c1.sol:105

 withdraw() public onlyOwner {
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256,uint256), txdata: 0xe2bbb158000000000000000000000000000000000000000000000000000000000000000038ce20dfd8aed3bb2376b085bebfffdd8f356ffde60003dfffffffffffffffff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: deposit(uint256,uint256)
PC address: 895
Estimated Gas Usage: 25303 - 140057
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1fd8b28c6ce4170b0a796d17b37242c1.sol:106

ed);
        
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256,uint256), txdata: 0xe2bbb158000000000000000000000000000000000000000000000000000000000000000038ce20dfd8aed3bb2376b085bebfffdd8f356ffde60003dfffffffffffffffff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: deposit(uint256,uint256)
PC address: 910
Estimated Gas Usage: 25303 - 140057
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1fd8b28c6ce4170b0a796d17b37242c1.sol:106

ed);
        
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256,uint256), txdata: 0xe2bbb158000000000000000000000000000000000000000000000000000000000000000038ce20dfd8aed3bb2376b085bebfffdd8f356ffde60003dfffffffffffffffff, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Vesting
Function name: deposit(uint256,uint256)
PC address: 1155
Estimated Gas Usage: 9414 - 64168
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1fd8b28c6ce4170b0a796d17b37242c1.sol:14

a, "SafeMath: addition overflow");

        re

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256,uint256), txdata: 0xe2bbb15800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0


