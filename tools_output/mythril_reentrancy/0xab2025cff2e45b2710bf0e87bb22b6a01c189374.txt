==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20TokenLatch
Function name: getBuyCost(uint256)
PC address: 2782
Estimated Gas Usage: 3841 - 5207
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:150

eBuyOrder(uint token

--------------------
Initial State:

Account: [CREATOR], balance: 0x422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getBuyCost(uint256), txdata: 0x0ae6682005c08462298a4ca08421a20033565211084214d5b844011705ad18d000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 3968
Estimated Gas Usage: 41266 - 216150
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:213

er
		for(uint32 i=0;i<num_buy_orders;i++){
		    if(sell_price>maxBuy

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000101010101abadb52ab2ad4ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC20TokenLatch
Function name: sell(uint256)
PC address: 3968
Estimated Gas Usage: 44436 - 220310
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:213

er
		for(uint32 i=0;i<num_buy_orders;i++){
		    if(sell_price>maxBuy

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: sell(uint256), txdata: 0xe4849b32008501800000000001000200000000004ad2aaabaaaaaaaaabab525208084030, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 3968
Estimated Gas Usage: 41266 - 216150
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:213

er
		for(uint32 i=0;i<num_buy_orders;i++){
		    if(sell_price>maxBuy

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d020810800000000000000000002000005bfed5ff3770dfd00d2ec3c4b85ee7ff0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ERC20TokenLatch
Function name: sell(uint256)
PC address: 3968
Estimated Gas Usage: 44436 - 220310
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:213

er
		for(uint32 i=0;i<num_buy_orders;i++){
		    if(sell_price>maxBuy

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: sell(uint256), txdata: 0xe4849b3222081280000000000000000000000000ded5bfa7eb528ef4ad6b5253df202804, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 4047
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:219

 can trade som

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: sell(uint256)
PC address: 4047
Estimated Gas Usage: 44436 - 220310
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:219

 can trade som

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sell(uint256), txdata: 0xe4849b3202850280010001000400020000000000dc0eafff003f403eaffeafff00000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20TokenLatch
Function name: getSellReturn(uint256)
PC address: 7740
Estimated Gas Usage: 3475 - 4841
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:143

    return ((amount*g

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000038000000909, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getSellReturn(uint256), txdata: 0xa5a9ba8d24e492693585dc9ab24e25924a0b6e16db6db94aaca171d1a516b80a418ac000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9015
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:83

ell_order_price

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: sell(uint256)
PC address: 9015
Estimated Gas Usage: 44436 - 220310
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:83

ell_order_price

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sell(uint256), txdata: 0xe4849b3202850280010001000400020000000000dc0eafff003f403eaffeafff00000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9062
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:82

] = qty;
        sell_order_price[num_se

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: sell(uint256)
PC address: 9062
Estimated Gas Usage: 44436 - 220310
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:82

] = qty;
        sell_order_price[num_se

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sell(uint256), txdata: 0xe4849b3202850280010001000400020000000000dc0eafff003f403eaffeafff00000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9115
Estimated Gas Usage: 41266 - 216150
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:82

] = qty;
        sell_order_price[num_se

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: sell(uint256)
PC address: 9115
Estimated Gas Usage: 44436 - 220310
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:82

] = qty;
        sell_order_price[num_se

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sell(uint256), txdata: 0xe4849b3202850280010001000400020000000000dc0eafff003f403eaffeafff00000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9127
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:84

  if(price<sell

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: sell(uint256)
PC address: 9127
Estimated Gas Usage: 44436 - 220310
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:84

  if(price<sell

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sell(uint256), txdata: 0xe4849b3202850280010001000400020000000000dc0eafff003f403eaffeafff00000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9169
Estimated Gas Usage: 41266 - 216150
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:83

= price;
        if(price<sell_order_

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: sell(uint256)
PC address: 9169
Estimated Gas Usage: 44436 - 220310
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:83

= price;
        if(price<sell_order_

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: sell(uint256), txdata: 0xe4849b3202850280010001000400020000000000dc0eafff003f403eaffeafff00000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9181
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:84

n_sell_price_id

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9228
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:84

ell_price_idx])min_sell_price_idx = num_s

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9257
Estimated Gas Usage: 41266 - 216150
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:84

ell_price_idx])min_sell_price_idx = num_s

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9268
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:85

s==0)min_sell_pric

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9311
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:85

if(num_sell_orders==0)min_sell_price

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9415
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:89

 function maxBu

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9452
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:89

ce() public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9473
Estimated Gas Usage: 41266 - 216150
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:89

ce() public view retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9483
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:89

price){
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9511
Estimated Gas Usage: 41266 - 216150
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:89

price){
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20TokenLatch
Function name: placeSellOrder(uint256,uint64)
PC address: 9532
Estimated Gas Usage: 41266 - 216150
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d2c61c40fad6f70355d7e100010d419c.sol:89

price){
        r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: placeSellOrder(uint256,uint64), txdata: 0x4d996f9d21691240000000010002000401040104b5b5b52b56a54ab5aaaaaaab000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0