==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleMarket
Function name: withdrawTokenFromBalance(address,address)
PC address: 4335
Estimated Gas Usage: 5644 - 76422
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:764

sSaleMarket = true;
    

    // @dev c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokenFromBalance(address,address), txdata: 0xcda8c715000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: withdrawTokenFromBalance(address,address)
PC address: 4338
Estimated Gas Usage: 5622 - 76400
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:764

sSaleMarket = true;
    

    // @dev c

--------------------
Initial State:

Account: [CREATOR], balance: 0x800c11520e83b9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokenFromBalance(address,address), txdata: 0xcda8c715000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleMarket
Function name: withdrawTokenFromBalance(address,address)
PC address: 4489
Estimated Gas Usage: 5644 - 76422
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:767

tart a new auction
    // @param _cutieId - ID of cu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokenFromBalance(address,address), txdata: 0xcda8c715000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleMarket
Function name: withdrawTokenFromBalance(address,address)
PC address: 4489
Estimated Gas Usage: 5644 - 76422
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:767

tart a new auction
    // @param _cutieId - ID of cu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokenFromBalance(address,address), txdata: 0xcda8c715, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: withdrawTokenFromBalance(address,address)
PC address: 4492
Estimated Gas Usage: 5622 - 76400
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:767

tart a new auction
    // @param _cutieId - ID of cu

--------------------
Initial State:

Account: [CREATOR], balance: 0x800c11520e83b9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokenFromBalance(address,address), txdata: 0xcda8c715000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Market
Function name: withdrawTokenFromBalance(address,address)
PC address: 4492
Estimated Gas Usage: 5622 - 76400
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:767

tart a new auction
    // @param _cutieId - ID of cu

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000800042008214, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokenFromBalance(address,address), txdata: 0xcda8c715, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleMarket
Function name: setup(address,uint16)
PC address: 4673
Estimated Gas Usage: 14971 - 91843
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:547

       _bid(_cutieId, uint128(m

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setup(address,uint16), txdata: 0xe410a0c6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: setup(address,uint16)
PC address: 4676
Estimated Gas Usage: 14949 - 91821
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:547

       _bid(_cutieId, uint128(m

--------------------
Initial State:

Account: [CREATOR], balance: 0x8500002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setup(address,uint16), txdata: 0xe410a0c6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleMarket
Function name: setup(address,uint16)
PC address: 4729
Estimated Gas Usage: 14971 - 91843
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:548

        _transfer(msg.sender, _c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setup(address,uint16), txdata: 0xe410a0c6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Market
Function name: setup(address,uint16)
PC address: 4732
Estimated Gas Usage: 14949 - 91821
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:548

        _transfer(msg.sender, _c

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000100800000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setup(address,uint16), txdata: 0xe410a0c6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleMarket
Function name: setup(address,uint16)
PC address: 4770
Estimated Gas Usage: 14971 - 91843
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:548

        _transfer(msg.sender, _c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setup(address,uint16), txdata: 0xe410a0c6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Market
Function name: setup(address,uint16)
PC address: 4773
Estimated Gas Usage: 14949 - 91821
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:548

        _transfer(msg.sender, _c

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000100800000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setup(address,uint16), txdata: 0xe410a0c6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 5655
Estimated Gas Usage: 50071 - 273876
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:375

        // it will throw if transfer fails

--------------------
Initial State:

Account: [CREATOR], balance: 0xe393a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 5655
Estimated Gas Usage: 50071 - 273876
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:375

        // it will throw if transfer fails

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6167
Estimated Gas Usage: 50071 - 273876
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:388

 token owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6364
Estimated Gas Usage: 50071 - 273876
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6391
Estimated Gas Usage: 50071 - 273876
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6409
Estimated Gas Usage: 50071 - 273876
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6436
Estimated Gas Usage: 50071 - 273876
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6454
Estimated Gas Usage: 50071 - 273876
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6481
Estimated Gas Usage: 50071 - 273876
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6499
Estimated Gas Usage: 50071 - 273876
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6522
Estimated Gas Usage: 50071 - 273876
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6540
Estimated Gas Usage: 50071 - 273876
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6563
Estimated Gas Usage: 50071 - 273876
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6581
Estimated Gas Usage: 50071 - 273876
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6608
Estimated Gas Usage: 50071 - 273876
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6626
Estimated Gas Usage: 50071 - 273876
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Market
Function name: createAuction(uint40,uint128,uint128,uint40,address)
PC address: 6640
Estimated Gas Usage: 50071 - 273876
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2189118ba215a8c736c7511ecd3e2443.sol:352

laimant.
    // @param _claimant - Ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001012000820004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createAuction(uint40,uint128,uint128,uint40,address), txdata: 0xc1d1faf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, value: 0x0


