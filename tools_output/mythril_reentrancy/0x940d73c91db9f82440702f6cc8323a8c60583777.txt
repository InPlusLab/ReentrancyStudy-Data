==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoodsToken
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 2295
Estimated Gas Usage: 1124 - 1219
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:189

rom][msg.sender] = allowed[from][m

--------------------
Initial State:

Account: [CREATOR], balance: 0x42fc0202064008926, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoods827Token
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 2830
Estimated Gas Usage: 1124 - 1219
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:189

rom][msg.sender] = allowed[from][m

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoodsToken
Function name: releaseVestedTokens(uint256) or releaseVestedTokens(uint256)
PC address: 3290
Estimated Gas Usage: 1247 - 1342
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:124

estingMap[vestingPeriod][0].balance > 0);
    var v =

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002b92e0102602, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: releaseVestedTokens(uint256), txdata: 0x7d2aeb8a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TEFoods827Token
Function name: approve(address,uint256,bytes) or approve(address,uint256,bytes)
PC address: 3868
Estimated Gas Usage: 8454 - 66801
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256,bytes), txdata: 0x5c17f9f4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef237fffff83ffffffffffdf00008000000000000000000000000000000000000080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoods827Token
Function name: releaseVestedTokens(uint256) or releaseVestedTokens(uint256)
PC address: 3999
Estimated Gas Usage: 1269 - 1364
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:124

estingMap[vestingPeriod][0].balance > 0);
    var v =

--------------------
Initial State:

Account: [CREATOR], balance: 0x2003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: releaseVestedTokens(uint256), txdata: 0x7d2aeb8a, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoodsToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 5382
Estimated Gas Usage: 1270 - 1365
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:171

b(tokens);
    balances[to] = bala

--------------------
Initial State:

Account: [CREATOR], balance: 0x10106010000100a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoodsToken
Function name: enableTransfers() or enableTransfers()
PC address: 6057
Estimated Gas Usage: 2212 - 2637
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:143

ction () public payable {
    revert();
  }

  function totalSupply() public constant retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoods827Token
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 6091
Estimated Gas Usage: 1292 - 1387
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:171

b(tokens);
    balances[to] = bala

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000002040403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TEFoodsToken
Function name: allocateTokens(address,uint256) or allocateTokens(address,uint256)
PC address: 6653
Estimated Gas Usage: 2259 - 2874
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:105

_circulatingSupply.add(amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x21420000001080001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateTokens(address,uint256), txdata: 0x86ce0285000000000000000000000000000000000000000000000000000000000000000108, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TEFoodsToken
Function name: allocateVestedTokens(address,uint256,uint256) or allocateVestedTokens(address,uint256,uint256)
PC address: 6653
Estimated Gas Usage: 2378 - 2993
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:116

= _vestedSupply.add(amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateVestedTokens(address,uint256,uint256), txdata: 0xa29cc6c80000000000000000000000000000000000000000000000000000000000000001000000000000000000000001000000000000000000000000000000000000000080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoodsToken
Function name: enableTransfers() or enableTransfers()
PC address: 6683
Estimated Gas Usage: 2163 - 2588
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:26

rn c;
  }
}

c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TEFoodsToken
Function name: releaseVestedTokens(uint256) or releaseVestedTokens(uint256)
PC address: 6684
Estimated Gas Usage: 1200 - 1295
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:124

gPeriod][0].balance > 0);
    var v 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4954c060c00419081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: releaseVestedTokens(uint256), txdata: 0x7d2aeb8affffffffffffffffffffffffffffffffffffffffffffffffffffffffa6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TEFoodsToken
Function name: enableTransfers() or enableTransfers()
PC address: 6684
Estimated Gas Usage: 2173 - 2598
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:143

n () public pa

--------------------
Initial State:

Account: [CREATOR], balance: 0x8812, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoods827Token
Function name: enableTransfers() or enableTransfers()
PC address: 6942
Estimated Gas Usage: 2256 - 2681
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:143

ction () public payable {
    revert();
  }

  function totalSupply() public constant retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000054af5ff8053, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TEFoods827Token
Function name: allocateTokens(address,uint256) or allocateTokens(address,uint256)
PC address: 7712
Estimated Gas Usage: 2281 - 2896
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:105

_circulatingSupply.add(amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x200001000002001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateTokens(address,uint256), txdata: 0x86ce0285000000000000000000000000000000000000000000000000000000080008020010, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TEFoods827Token
Function name: allocateVestedTokens(address,uint256,uint256) or allocateVestedTokens(address,uint256,uint256)
PC address: 7712
Estimated Gas Usage: 2400 - 3015
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:116

= _vestedSupply.add(amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x4001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allocateVestedTokens(address,uint256,uint256), txdata: 0xa29cc6c80000000000000000000000000000000000000000000000000000000000000001000000000000000000000002000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TEFoods827Token
Function name: enableTransfers() or enableTransfers()
PC address: 7742
Estimated Gas Usage: 2207 - 2632
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:26

rn c;
  }
}

c

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TEFoods827Token
Function name: releaseVestedTokens(uint256) or releaseVestedTokens(uint256)
PC address: 7743
Estimated Gas Usage: 1222 - 1317
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:124

gPeriod][0].balance > 0);
    var v 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: releaseVestedTokens(uint256), txdata: 0x7d2aeb8affffffffffffffffffffffffffffffffffffffffffffffffffffffffc6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TEFoods827Token
Function name: enableTransfers() or enableTransfers()
PC address: 7743
Estimated Gas Usage: 2217 - 2642
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b4005924b76be7844d870c960a321dd0.sol:143

n () public pa

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0