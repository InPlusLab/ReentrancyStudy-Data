==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Partner
Function name: getTotalFeePercentage()
PC address: 756
Estimated Gas Usage: 1820 - 2196
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/edbc1fd8056dbc9bfebf44bdac26d038.sol:843

er(createClone());

        newPartne

--------------------
Initial State:

Account: [CREATOR], balance: 0x2041000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: init(address,uint256,address,uint256), txdata: 0x602bead50000000000000000000000000000000000000000000000000000000000000000800080102008409008000020000240000000100208040080000000000040008900000000000000000000000000000000000000000000000000000000000000008044000000000000000000000000000000000000000000000001000000000000, value: 0x0
Caller: [ATTACKER], function: getTotalFeePercentage(), txdata: 0x064367bb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PartnerRegistry
Function name: registerPartner(address,uint256)
PC address: 1622
Estimated Gas Usage: 44144 - 103299
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edbc1fd8056dbc9bfebf44bdac26d038.sol:887

createClone() internal returns (address paya

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerPartner(address,uint256), txdata: 0x7cc2097d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PartnerRegistry
Function name: registerPartner(address,uint256)
PC address: 1636
Estimated Gas Usage: 44144 - 103299
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edbc1fd8056dbc9bfebf44bdac26d038.sol:887

createClone() internal returns (address paya

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerPartner(address,uint256), txdata: 0x7cc2097d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PartnerRegistry
Function name: overrideRegisterPartner(address,uint256,address,uint256)
PC address: 2217
Estimated Gas Usage: 43375 - 102530
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edbc1fd8056dbc9bfebf44bdac26d038.sol:911

return partnerContracts[partnerContract];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: overrideRegisterPartner(address,uint256,address,uint256), txdata: 0xb62f30660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PartnerRegistry
Function name: overrideRegisterPartner(address,uint256,address,uint256)
PC address: 2231
Estimated Gas Usage: 43375 - 102530
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/edbc1fd8056dbc9bfebf44bdac26d038.sol:911

return partnerContracts[partnerContract];

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: overrideRegisterPartner(address,uint256,address,uint256), txdata: 0xb62f30660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0