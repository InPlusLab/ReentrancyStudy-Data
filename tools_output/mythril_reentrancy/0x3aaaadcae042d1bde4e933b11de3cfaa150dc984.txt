==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BRCustomFlags
Function name: flagOwners(uint256)
PC address: 1462
Estimated Gas Usage: 1102 - 1197
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e2906348adf1021e7d3fc07879178279.sol:129

er,

        uint256 timeSt

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: flagOwners(uint256), txdata: 0x56db560b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BRCustomFlags
Function name: acceptTokens(address,uint256,uint256,uint256,uint256) or acceptTokens(address,uint256,uint256,uint256,uint256)
PC address: 2308
Estimated Gas Usage: 25461 - 123019
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e2906348adf1021e7d3fc07879178279.sol:191

hasFlag[_user] = true;

  

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0002041521, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: acceptTokens(address,uint256,uint256,uint256,uint256), txdata: 0x9c908f61000000000000000000000000000000000000000000000000000000000000004001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ETToken
Function name: transferWithParams(address,uint256,uint256,uint256,uint256)
PC address: 5681
Estimated Gas Usage: 627 - 722
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e2906348adf1021e7d3fc07879178279.sol:911

t256 _value) internal {

        _invokeTokenRecipient(_from, _to, _value, 0, 0, 0);

    }





}



library SafeMath {

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a == 0) {

            return 0;

        }

        uint256 c = a * b;

        assert(c / a == b);

        return c;

    }



    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        // assert(b > 0); // Solidity automatically throws when dividing by 0

        uint256 c = a / b;

        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c

--------------------
Initial State:

Account: [CREATOR], balance: 0x2800000900018001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferWithParams(address,uint256,uint256,uint256,uint256), txdata: 0x411cc791, value: 0x0