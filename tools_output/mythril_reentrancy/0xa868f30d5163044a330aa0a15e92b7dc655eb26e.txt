with mythril_dir
==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreHub
Function name: deployStore()
PC address: 1455
Estimated Gas Usage: 53290 - 200302
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09e8ad4314025584e31fe90cac5d1be5.sol:70

        StoreHubInterface(usd

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deployStore(), txdata: 0xa97f3491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreHub
Function name: deployStore()
PC address: 1467
Estimated Gas Usage: 53290 - 200302
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09e8ad4314025584e31fe90cac5d1be5.sol:70

        StoreHubInterface(usd

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deployStore(), txdata: 0xa97f3491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreHub
Function name: deployStore()
PC address: 1479
Estimated Gas Usage: 53290 - 200302
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09e8ad4314025584e31fe90cac5d1be5.sol:70

initBalance(newStore);
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deployStore(), txdata: 0xa97f3491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreHub
Function name: deployStore()
PC address: 1480
Estimated Gas Usage: 53290 - 200302
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09e8ad4314025584e31fe90cac5d1be5.sol:71

reHub).initB

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deployStore(), txdata: 0xa97f3491, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StoreHub
Function name: deployStore()
PC address: 1542
Estimated Gas Usage: 53290 - 200302
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09e8ad4314025584e31fe90cac5d1be5.sol:71

ubInterface(daiStoreHub).initBalance(newStore);
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deployStore(), txdata: 0xa97f3491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreHub
Function name: deployStore()
PC address: 1542
Estimated Gas Usage: 53290 - 200302
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09e8ad4314025584e31fe90cac5d1be5.sol:71

ubInterface(daiStoreHub).initBalance(newStore);
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deployStore(), txdata: 0xa97f3491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreHub
Function name: deployStore()
PC address: 1564
Estimated Gas Usage: 53290 - 200302
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09e8ad4314025584e31fe90cac5d1be5.sol:72

, msg.sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deployStore(), txdata: 0xa97f3491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StoreHub
Function name: deployStore()
PC address: 1637
Estimated Gas Usage: 53290 - 200302
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/09e8ad4314025584e31fe90cac5d1be5.sol:72

reCreated(newStore, msg.sender, block.timestamp);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deployStore(), txdata: 0xa97f3491, value: 0x0


