==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BonusAwareCalculator
Function name: getAmount(uint256) or getAmount(uint256)
PC address: 281
Estimated Gas Usage: 5126 - 75567
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/83bf716947d3f622594e45f5806e931b.sol:22

lue);
        uint bonusP

--------------------
Initial State:

Account: [CREATOR], balance: 0x40c10800000e2111, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 999999999999999999999999deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getAmount(uint256), txdata: 0x9980ec86, value: 0x0
Caller: [SOMEGUY], function: getAmount(uint256), txdata: 0x9980ec86, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BonusAwareCalculator
Function name: getAmount(uint256) or getAmount(uint256)
PC address: 310
Estimated Gas Usage: 5126 - 75567
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83bf716947d3f622594e45f5806e931b.sol:23

us();
        u

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 999999999999999999999999deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getAmount(uint256), txdata: 0x9980ec86, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BonusAwareCalculator
Function name: getAmount(uint256) or getAmount(uint256)
PC address: 452
Estimated Gas Usage: 5126 - 75567
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/83bf716947d3f622594e45f5806e931b.sol:23

us();
        uint bonus =

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000080000072c9e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getAmount(uint256), txdata: 0x9980ec86, value: 0x0
Caller: [SOMEGUY], function: getAmount(uint256), txdata: 0x9980ec86, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BonusAwareCalculator
Function name: getAmount(uint256) or getAmount(uint256)
PC address: 452
Estimated Gas Usage: 5126 - 75567
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/83bf716947d3f622594e45f5806e931b.sol:23

us();
        uint bonus =

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getAmount(uint256), txdata: 0x9980ec86, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BonusAwareCalculator
Function name: getAmount(uint256) or getAmount(uint256)
PC address: 452
Estimated Gas Usage: 5126 - 75567
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/83bf716947d3f622594e45f5806e931b.sol:23

us();
        uint bonus =

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 999999999999999999999999deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getAmount(uint256), txdata: 0x9980ec86, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BonusAwareCalculator
Function name: getAmount(uint256) or getAmount(uint256)
PC address: 480
Estimated Gas Usage: 5126 - 75567
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/83bf716947d3f622594e45f5806e931b.sol:24

cent / 100;
        return 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getAmount(uint256), txdata: 0x9980ec86, value: 0x0