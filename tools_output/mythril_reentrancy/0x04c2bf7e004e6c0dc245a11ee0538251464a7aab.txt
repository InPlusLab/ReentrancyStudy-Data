==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BablosCrowdsaleWallet
Function name: changeState(uint8) or changeState(uint8)
PC address: 1767
Estimated Gas Usage: 1090 - 1515
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:755

ances[_investor] = weiBalances[_investor].add(amount);

    } else {

      amount = _amount;

    }

    require(amount != 0);

    require(_tokenAmount != 0);

    assert(_investor != controller);



    // register investor

    if (tokenBalances[_investor] == 0) {

      investors.push(_investor);

    }



    // register payment

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x82, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: changeState(uint8), txdata: 0x268f11530000000000000000000000000000000000000000000000000000000000000006, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BablosCrowdsaleWallet
Function name: changeState(uint8) or changeState(uint8)
PC address: 1804
Estimated Gas Usage: 1981 - 2736
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:755

ances[_investor] = weiBalances[_investor].add(amount);

    } else {

      amount = _amount;

    }

    require(amount != 0);

    require(_tokenAmount != 0);

    assert(_investor != controller);



    // register investor

    if (tokenBalances[_investor] == 0) {

      investors.push(_investor);

    }



    // register payment

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x180040000001001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: changeState(uint8), txdata: 0x268f1153, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BablosCrowdsaleWallet
Function name: investors(uint256) or investors(uint256)
PC address: 3531
Estimated Gas Usage: 1102 - 1197
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:477

tion changeState(State _ne

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: investors(uint256), txdata: 0x3feb5f2b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BablosCrowdsaleWallet
Function name: unholdTeamTokens() or unholdTeamTokens()
PC address: 3869
Estimated Gas Usage: 7908 - 78872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:925
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef3f3f3f3f3f3f3f3f3f3f3f3faffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: unholdTeamTokens(), txdata: 0x49c71fa8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BablosCrowdsaleWallet
Function name: unholdTeamTokens() or unholdTeamTokens()
PC address: 3945
Estimated Gas Usage: 7908 - 78872
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:925
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef3f3f3f3f3f3f3f3f3f3f3f3faffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: unholdTeamTokens(), txdata: 0x49c71fa8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BablosCrowdsaleWallet
Function name: unholdTeamTokens() or unholdTeamTokens()
PC address: 5239
Estimated Gas Usage: 7908 - 78872
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:925
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef3f3f3f3f3f3f3f3f3f3f3f3faffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: unholdTeamTokens(), txdata: 0x49c71fa8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BablosCrowdsaleWallet
Function name: unholdTeamTokens() or unholdTeamTokens()
PC address: 5301
Estimated Gas Usage: 7908 - 78872
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:925
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef3f3f3f3f3f3f3f3f3f3f3f3faffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: unholdTeamTokens(), txdata: 0x49c71fa8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BablosCrowdsaleWallet
Function name: unholdTeamTokens() or unholdTeamTokens()
PC address: 5467
Estimated Gas Usage: 7908 - 78872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:925
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef3f3f3f3f3f3f3f3f3f3f3f3faffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: unholdTeamTokens(), txdata: 0x49c71fa8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BablosCrowdsaleWallet
Function name: unholdTeamTokens() or unholdTeamTokens()
PC address: 5467
Estimated Gas Usage: 7908 - 78872
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:925
Initial State:

Account: [CREATOR], balance: 0x1c0040800002081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unholdTeamTokens(), txdata: 0x49c71fa8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BablosCrowdsaleWallet
Function name: unholdTeamTokens() or unholdTeamTokens()
PC address: 5467
Estimated Gas Usage: 7908 - 78872
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:925
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef3f3f3f3f3f3f3f3f3f3f3f3faffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: unholdTeamTokens(), txdata: 0x49c71fa8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BablosCrowdsaleWallet
Function name: invested(address,uint256,uint8,uint256) or invested(address,uint256,uint8,uint256)
PC address: 7771
Estimated Gas Usage: 2383 - 3138
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:783

vested[uint(_currency)] = totalInvested[uint(_currency)].add(amount);

    tokenBalances[_investor] = tokenBalances[_investor].add(_tokenAmount);



    emit Invested(_investor, _currency, amount, _tokenAmount);

  }



  function withdrawEther(uint _value)

    external

    onlyOwner

    requiresState(State.SUCCEEDED) 

  {

    require(_value > 0 && address(this).balance >= _value);

    owner.transfer(_value);

    emit EtherWithdrawan(owner, _value);

  }



  function withdrawTokens(uint _value)

    external

    onlyOwner

    requiresState(State.REFUNDING)

  {

    require(_value > 0 && token.balanceOf(address(this)) >= _value);

    token.transfer(owner, _value);

  }



  function withdrawPayments()

    external

    nonReentrant

    requiresState(State.REFUNDING)

  {

    address payee = msg.sender;

    uint payment = weiBalances[payee];

    uint tokens = tokenBalances[payee];



    // check that there is some ether to withdraw

    require(payment != 0);

    // check th

--------------------
Initial State:

Account: [CREATOR], balance: 0x100089402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: invested(address,uint256,uint8,uint256), txdata: 0x7c358070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BablosCrowdsaleWallet
Function name: invested(address,uint256,uint8,uint256) or invested(address,uint256,uint8,uint256)
PC address: 8060
Estimated Gas Usage: 3356 - 4441
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/75aec3ea4488612f0f90908079e06da9.sol:783

vested[uint(_currency)] = totalInvested[uint(_currency)].add(amount);

    tokenBalances[_investor] = tokenBalances[_investor].add(_tokenAmount);



    emit Invested(_investor, _currency, amount, _tokenAmount);

  }



  function withdrawEther(uint _value)

    external

    onlyOwner

    requiresState(State.SUCCEEDED) 

  {

    require(_value > 0 && address(this).balance >= _value);

    owner.transfer(_value);

    emit EtherWithdrawan(owner, _value);

  }



  function withdrawTokens(uint _value)

    external

    onlyOwner

    requiresState(State.REFUNDING)

  {

    require(_value > 0 && token.balanceOf(address(this)) >= _value);

    token.transfer(owner, _value);

  }



  function withdrawPayments()

    external

    nonReentrant

    requiresState(State.REFUNDING)

  {

    address payee = msg.sender;

    uint payment = weiBalances[payee];

    uint tokens = tokenBalances[payee];



    // check that there is some ether to withdraw

    require(payment != 0);

    // check th

--------------------
Initial State:

Account: [CREATOR], balance: 0x421000c0100000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4949494949494949494949494949494949494949494949494949494949494949494949494949494949494949deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: invested(address,uint256,uint8,uint256), txdata: 0x7c358070000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000101, value: 0x0