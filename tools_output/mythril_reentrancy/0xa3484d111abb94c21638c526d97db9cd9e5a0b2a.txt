==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Orchestrator
Function name: addTransaction(address,bytes)
PC address: 383
Estimated Gas Usage: 29544 - 135097
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:1196

 of transactions, both enabled and disabled, in transactions list.
     */
    function transactionsSize()
        external
        view
        returns (uint256)
    {
        return transactions.length;
    }

    /**
     * @dev wrapper to call the e

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addTransaction(address,bytes), txdata: 0x126e19be0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UFragments
Function name: initialize(string,string,uint8)
PC address: 503
Estimated Gas Usage: 32871 - 138609
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:282

  }

  /**
   * @return the symbol of the token.
   */
  function symbol() public view returns(string) {
    return _symbol;
  }

  /**
   * @return the numbe

--------------------
Initial State:

Account: [CREATOR], balance: 0xc000003007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,uint8), txdata: 0x1624f6c6800000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UFragments
Function name: initialize(string,string,uint8)
PC address: 510
Estimated Gas Usage: 32871 - 138609
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:282

  }

  /**
   * @return the symbol of the token.
   */
  function symbol() public view returns(string) {
    return _symbol;
  }

  /**
   * @return the numbe

--------------------
Initial State:

Account: [CREATOR], balance: 0x4004000010000030a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,uint8), txdata: 0x1624f6c6800000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UFragments
Function name: initialize(string,string,uint8)
PC address: 532
Estimated Gas Usage: 32871 - 138609
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:282

  }

  /**
   * @return the symbol of the token.
   */
  function symbol() public view returns(string) {
    return _symbol;
  }

  /**
   * @return the numbe

--------------------
Initial State:

Account: [CREATOR], balance: 0x6001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,uint8), txdata: 0x1624f6c6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UFragments
Function name: initialize(string,string,uint8)
PC address: 563
Estimated Gas Usage: 32871 - 138609
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:282

  }

  /**
   * @return the symbol of the token.
   */
  function symbol() public view returns(string) {
    return _symbol;
  }

  /**
   * @return the numbe

--------------------
Initial State:

Account: [CREATOR], balance: 0x42000000000000100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,uint8), txdata: 0x1624f6c6000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UFragments
Function name: initialize(string,string,uint8)
PC address: 570
Estimated Gas Usage: 32871 - 138609
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:282

  }

  /**
   * @return the symbol of the token.
   */
  function symbol() public view returns(string) {
    return _symbol;
  }

  /**
   * @return the numbe

--------------------
Initial State:

Account: [CREATOR], balance: 0x100028008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,string,uint8), txdata: 0x1624f6c6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UFragments
Function name: initialize(string,string,uint8)
PC address: 572
Estimated Gas Usage: 32871 - 138609
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:282

  }

  /**
   * @return the symbol of the token.
   */
  function symbol() public view returns(string) {
    return _symbol;
  }

  /**
   * @return the numbe

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000012010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,uint8), txdata: 0x1624f6c6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UFragments
Function name: fallback
PC address: 1220
Estimated Gas Usage: 1342 - 2282
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:296

 }

  uint25

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000008000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: calculateRebaseDelta(bool)
PC address: 2688
Estimated Gas Usage: 12335 - 87260
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:1106

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateRebaseDelta(bool), txdata: 0x73904c4201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: calculateRebaseDelta(bool)
PC address: 2691
Estimated Gas Usage: 12335 - 87260
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:1106

(int256(2)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateRebaseDelta(bool), txdata: 0x73904c4201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: calculateRebaseDelta(bool)
PC address: 2694
Estimated Gas Usage: 12335 - 87260
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:1107

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateRebaseDelta(bool), txdata: 0x73904c4201, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Orchestrator
Function name: calculateRebaseDelta(bool)
PC address: 2896
Estimated Gas Usage: 12335 - 87260
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:1106

      if (-delta < supply5p.mul(int256(2))) {
                return (-supply5p).div(int256(5)); // -1% rebase
            }
        } else {
            if (delta < supply5p) {

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateRebaseDelta(bool), txdata: 0x73904c4201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Orchestrator
Function name: calculateRebaseDelta(bool)
PC address: 2896
Estimated Gas Usage: 12335 - 87260
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:1106

      if (-delta < supply5p.mul(int256(2))) {
                return (-supply5p).div(int256(5)); // -1% rebase
            }
        } else {
            if (delta < supply5p) {

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateRebaseDelta(bool), txdata: 0x73904c4201, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UFragments
Function name: symbol()
PC address: 2938
Estimated Gas Usage: 1650 - 2590
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:307

ight (c) 2018 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Orchestrator
Function name: calculateRebaseDelta(bool)
PC address: 2940
Estimated Gas Usage: 12312 - 87237
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:1106

        if (-delta < supply5p.mul(int256(2))) {
                return (-supply5p).div(int256(5)); // -1% rebase
            }
        } else {
            if (delta < supply5p) {

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calculateRebaseDelta(bool), txdata: 0x73904c42, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Orchestrator
Function name: transactions(uint256)
PC address: 3677
Estimated Gas Usage: 1367 - 1792
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:968

s function is just a little
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000040002004420, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transactions(uint256), txdata: 0x9ace38c2, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Orchestrator
Function name: rebase()
PC address: 3954
Estimated Gas Usage: 2279 - 3364
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/00c25c16f37ccb8ca5632b2be81a331a.sol:1034

 *         and tokenPairY is the uniswap pair for PAXG/WETH.
     *         These addresses can

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: UFragments
Function name: initialize(string,string,uint8)
PC address: 4788
Estimated Gas Usage: 32871 - 138609
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40202040228c248, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(string,string,uint8), txdata: 0x1624f6c67ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc10, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: UFragments
Function name: initialize(string,string,uint8)
PC address: 4802
Estimated Gas Usage: 32871 - 138609
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(string,string,uint8), txdata: 0x1624f6c6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Orchestrator
Function name: addTransaction(address,bytes)
PC address: 5949
Estimated Gas Usage: 19404 - 84771
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addTransaction(address,bytes), txdata: 0x126e19beffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: Orchestrator
Function name: addTransaction(address,bytes)
PC address: 5963
Estimated Gas Usage: 19404 - 84771
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x20004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addTransaction(address,bytes), txdata: 0x126e19beffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0


