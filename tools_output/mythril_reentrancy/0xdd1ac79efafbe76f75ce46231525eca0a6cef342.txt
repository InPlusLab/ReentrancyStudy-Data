==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 2501
Estimated Gas Usage: 3618 - 4373
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:182

 = weiAmount.mul(decimal

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000004000000000000000000000000000000020000008, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: totalSupply() or totalSupply()
PC address: 3225
Estimated Gas Usage: 2660 - 38021
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:248

ublic constant returns (

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000100000000000040400000000000000000200000000200100000040, value: 0x0
Caller: [SOMEGUY], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: enableMasterTransfers()
PC address: 3517
Estimated Gas Usage: 3526 - 38657
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:285

inalized {
    require(!proofTokensAll

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000040004020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000120400100000000000000000000000200000001010000010000802001, value: 0x0
Caller: [CREATOR], function: enableMasterTransfers(), txdata: 0x24fad665, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: lockMasterTransfers()
PC address: 3781
Estimated Gas Usage: 3548 - 38679
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:287

OF);
    proofTokensAllocated = true;
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x180080000000120, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000100000000010000800200000000000000000800000000200000000010, value: 0x0
Caller: [CREATOR], function: lockMasterTransfers(), txdata: 0x2bb70e54, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: changeController(address)
PC address: 4011
Estimated Gas Usage: 2801 - 37602
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:269

now < endTime);
    proofToken.enableTrans

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000010000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: changeController(address), txdata: 0x3cebb823, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: balanceOf(address) or balanceOf(address)
PC address: 5062
Estimated Gas Usage: 3141 - 38597
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:257

oller);
  }


  function ena

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000008000000004000000000020, value: 0x0
Caller: [SOMEGUY], function: balanceOf(address), txdata: 0x70a08231, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: lockTransfers()
PC address: 5232
Estimated Gas Usage: 2359 - 2784
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:279

  }

  function forceS

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000401011040011008010101014001010101010101000000000000000000000000000020000000000000000000000000000000000008, value: 0x0
Caller: [CREATOR], function: lockTransfers(), txdata: 0x82b74b89, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: lockTransfers()
PC address: 5392
Estimated Gas Usage: 4794 - 39925
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:281

public onlyOwner {
    started = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000100000000002000020120000100000000000000000800000004000001, value: 0x0
Caller: [CREATOR], function: lockTransfers(), txdata: 0x82b74b89, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: enableTransfers()
PC address: 5703
Estimated Gas Usage: 1590 - 1685
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:273

blic onlyOwner {
    proofToken.enableMasterTransfers(true);
  }

--------------------
Initial State:

Account: [CREATOR], balance: 0x100001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010201010801010101010101080101012001000000000000800000000000000000000000000000000000000000000000000004, value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: enableTransfers()
PC address: 5950
Estimated Gas Usage: 4900 - 40031
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:277

nction lockMasterTransfers() pub

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000004000000004000000180000000400000000000000001, value: 0x0
Caller: [CREATOR], function: enableTransfers(), txdata: 0xaf35c6c7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: allocateProofTokens()
PC address: 6400
Estimated Gas Usage: 12652 - 69572
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:299

 finalized = true;
  }


  function isContract(address _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000010008001, value: 0x0
Caller: [CREATOR], function: allocateProofTokens(), txdata: 0xbf2860a4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenSale
Function name: allocateProofTokens()
PC address: 6434
Estimated Gas Usage: 12652 - 69572
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:303

nstant internal returns(boo

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000100000000000000000000000000000000000000000000000000008080, value: 0x0
Caller: [CREATOR], function: allocateProofTokens(), txdata: 0xbf2860a4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenSale
Function name: allocateProofTokens()
PC address: 6448
Estimated Gas Usage: 12652 - 69572
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:303

nstant internal returns(boo

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000100000000000000000000000000000000000000000000000000008080, value: 0x0
Caller: [CREATOR], function: allocateProofTokens(), txdata: 0xbf2860a4, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 6936
Estimated Gas Usage: 2681 - 3436
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:236

token supply
  * @return totalS

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010108010101010101048001010104010101000000000000000000000000000000000000000000000000000000000000800002, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 6987
Estimated Gas Usage: 3567 - 4322
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/8edd35507e08401ddd050f3581ff3160.sol:240

    return proofToken.totalSupply();
  }

  /**
  * 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000002000000000000000000000000000000008000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1