==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AssetManagerEscrow
Function name: constructor
PC address: 551
Estimated Gas Usage: 22907 - 125322
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c78d25fef180655c9260fb71b8fbce01.sol:290

 public
    returns (bool) {
      require(lockEscrowInternal(_assetManager, _ass

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AssetManagerEscrow
Function name: constructor
PC address: 619
Estimated Gas Usage: 22907 - 125322
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c78d25fef180655c9260fb71b8fbce01.sol:289

 _assetManager, uint _amount)
    public
    returns (bool) {
      require(lockEscrowInternal(_assetManager, _asse

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AssetManagerEscrow
Function name: constructor
PC address: 672
Estimated Gas Usage: 22907 - 125322
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c78d25fef180655c9260fb71b8fbce01.sol:289

 _assetManager, uint _amount)
    public
    returns (bool) {
      require(lockEscrowInternal(_assetManager, _asse

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AssetManagerEscrow
Function name: destroy()
PC address: 6634
Estimated Gas Usage: 6375 - 78094
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c78d25fef180655c9260fb71b8fbce01.sol:464

ndexed _assetManagerEscrowID, address indexed _assetManager, uint _amo

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AssetManagerEscrow
Function name: destroy()
PC address: 6710
Estimated Gas Usage: 6375 - 78094
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c78d25fef180655c9260fb71b8fbce01.sol:408

//////

--------------------
Initial State:

Account: [CREATOR], balance: 0x20080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3b3b3b3b3b3b3b3b3b3b3b3bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AssetManagerEscrow
Function name: destroy()
PC address: 7089
Estimated Gas Usage: 6375 - 78094
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c78d25fef180655c9260fb71b8fbce01.sol:408

///////////////////////////////////////////////////////////////////

    function processEscrow(address _assetAd

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000000023, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AssetManagerEscrow
Function name: destroy()
PC address: 7089
Estimated Gas Usage: 6375 - 78094
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c78d25fef180655c9260fb71b8fbce01.sol:408

///////////////////////////////////////////////////////////////////

    function processEscrow(address _assetAd

--------------------
Initial State:

Account: [CREATOR], balance: 0x20080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3b3b3b3b3b3b3b3b3b3b3b3bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== Unprotected Selfdestruct ====
SWC ID: 106
Severity: High
Contract: AssetManagerEscrow
Function name: destroy()
PC address: 7134
Estimated Gas Usage: 6375 - 78094
Any sender can cause the contract to self-destruct.
Any sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account and withdraw its balance to an arbitrary address. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.
--------------------
In file: /tmp/c78d25fef180655c9260fb71b8fbce01.sol:410

dress _oldAssetManager)


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AssetManagerEscrow
Function name: unlockEscrow(address)
PC address: 18078
Estimated Gas Usage: 18910 - 271980
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c78d25fef180655c9260fb71b8fbce01.sol:325

f(roiCheckpoints <= 4){
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unlockEscrow(address), txdata: 0xbce12724, value: 0x0