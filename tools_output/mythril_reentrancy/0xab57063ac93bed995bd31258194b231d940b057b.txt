==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DEFISocialLockTeam
Function name: withdraw1()
PC address: 399
Estimated Gas Usage: 3483 - 3578
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:121


        require(Token(tokenAddress).transfer(

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: withdraw1(), txdata: 0x0079efb0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DEFISocialLockTeam
Function name: deposit(uint256)
PC address: 1283
Estimated Gas Usage: 19397 - 114244
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:118

ic onlyOwner{
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DEFISocialLockTeam
Function name: deposit(uint256)
PC address: 1287
Estimated Gas Usage: 19397 - 114244
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:119

rstWith, "Alread

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DEFISocialLockTeam
Function name: deposit(uint256)
PC address: 1296
Estimated Gas Usage: 19397 - 114244
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:119

rstWith, "Alread

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DEFISocialLockTeam
Function name: deposit(uint256)
PC address: 1300
Estimated Gas Usage: 19397 - 114244
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:120

       requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DEFISocialLockTeam
Function name: withdraw2()
PC address: 1347
Estimated Gas Usage: 2703 - 2798
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:131

 tokens.");
        tokens = tokens.sub(tokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw2(), txdata: 0xea98847b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DEFISocialLockTeam
Function name: withdraw2()
PC address: 1639
Estimated Gas Usage: 13542 - 68926
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:139
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw2(), txdata: 0xea98847b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DEFISocialLockTeam
Function name: withdraw2()
PC address: 1654
Estimated Gas Usage: 13542 - 68926
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:139

    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw2(), txdata: 0xea98847b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DEFISocialLockTeam
Function name: withdraw2()
PC address: 1657
Estimated Gas Usage: 13542 - 68926
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:139
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw2(), txdata: 0xea98847b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DEFISocialLockTeam
Function name: getTiming()
PC address: 1872
Estimated Gas Usage: 1014 - 1109
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:33

b;
  }

  func

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getTiming(), txdata: 0x630e799f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DEFISocialLockTeam
Function name: getTiming()
PC address: 1873
Estimated Gas Usage: 1024 - 1119
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:33

b;
  }

  func

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: getTiming(), txdata: 0x630e799f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DEFISocialLockTeam
Function name: withdraw1()
PC address: 1873
Estimated Gas Usage: 3456 - 3551
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:33

b;
  }

  func

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: withdraw1(), txdata: 0x0079efb0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DEFISocialLockTeam
Function name: withdraw2()
PC address: 1873
Estimated Gas Usage: 2676 - 2771
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/20ffac0f24acce931c7d2a5d7f60764c.sol:33

b;
  }

  func

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: withdraw2(), txdata: 0xea98847b, value: 0x0


