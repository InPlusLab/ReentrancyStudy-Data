==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenRegistry
Function name: deploy(uint256,bytes)
PC address: 1534
Estimated Gas Usage: 16024 - 95718
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x54000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deploy(uint256,bytes), txdata: 0x61ff715f0000000000000000000000000000000000000000000000000000000000000022, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenRegistry
Function name: deploy(uint256,bytes)
PC address: 1538
Estimated Gas Usage: 16024 - 95718
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x54000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deploy(uint256,bytes), txdata: 0x61ff715f0000000000000000000000000000000000000000000000000000000000000022, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenRegistry
Function name: deploy(uint256,bytes)
PC address: 1572
Estimated Gas Usage: 16024 - 95718
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/52dc3472855dd5362c647d657a116308.sol:267
Initial State:

Account: [CREATOR], balance: 0x54000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deploy(uint256,bytes), txdata: 0x61ff715f0000000000000000000000000000000000000000000000000000000000000022, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenRegistry
Function name: deploy(uint256,bytes)
PC address: 1625
Estimated Gas Usage: 16024 - 95718
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/52dc3472855dd5362c647d657a116308.sol:267
Initial State:

Account: [CREATOR], balance: 0x54000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deploy(uint256,bytes), txdata: 0x61ff715f0000000000000000000000000000000000000000000000000000000000000022, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenRegistry
Function name: multitokens(uint256)
PC address: 2183
Estimated Gas Usage: 1168 - 1263
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/52dc3472855dd5362c647d657a116308.sol:245

lic view returns(address[]) 

--------------------
Initial State:

Account: [CREATOR], balance: 0x44102001000082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multitokens(uint256), txdata: 0xaa974eff, value: 0x0