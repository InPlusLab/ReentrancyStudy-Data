==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MerkleDrop
Function name: burnUnusableTokens()
PC address: 1121
Estimated Gas Usage: 2665 - 2760
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:91

StartTime + decayDurationInSeconds) {
            return 0;
        } else {
            uint timeDecayed = time - decayStartTime;
            uint valueDecay = decay(value, timeDecayed, decayDurationInSeconds, !roundUp);
            assert(valueDecay <= value);
            return value - valueDecay;
        }
    }

    function burnUnusableTokens() public {
        if (now <= decayStartTime) {
         

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burnUnusableTokens(), txdata: 0xc3c7e336, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MerkleDrop
Function name: decayedEntitlementAtTime(uint256,uint256,bool)
PC address: 1136
Estimated Gas Usage: 2828 - 3204
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:94

    uint timeDecayed = time - decayStar

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212d0003b912883151eada59d8be548855291c302c05895b432f618b35caebab70940, value: 0x0
Caller: [ATTACKER], function: decayedEntitlementAtTime(uint256,uint256,bool), txdata: 0x102aa42f0000000000000000000000000401001000008008101008081010100000801000d9003ac86086854f5ac6db877161057642e11242011b6a12f688675436daeb120000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MerkleDrop
Function name: burnUnusableTokens()
PC address: 1136
Estimated Gas Usage: 15126 - 70464
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:94

    uint timeDecayed = time - decayStar

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c10c0000000801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 606060606060606060606060606060606060606060606060606060606060606001010101010101010101010101010101010101010101010101010101010101016060606060606060606060606060606060606060606060606060606060606060400000000000000000000000b09ad1657200da60c8dd1b184e5926d2f664b806c0, value: 0x0
Caller: [ATTACKER], function: burnUnusableTokens(), txdata: 0xc3c7e336, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MerkleDrop
Function name: burnUnusableTokens()
PC address: 1142
Estimated Gas Usage: 4294 - 4389
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:93

e {
            uint timeDecayed = time - decayStartTime;
            uint valueDecay = decay(value, timeDecayed, decayDurationInSeconds, !roundUp);
            assert(valueDecay <= value);
            return value - valueDecay;
        }
    }

    function burnUnusableTokens() public {
        if (now <= decayStartTime) {
         

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burnUnusableTokens(), txdata: 0xc3c7e336, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MerkleDrop
Function name: deleteContract()
PC address: 2425
Estimated Gas Usage: 1844 - 1939
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:119

op.");
        burnUnusableTokens();

        selfdestruct(address(0));
    }

    function verifyProof(bytes32 leaf, bytes

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deleteContract(), txdata: 0x5a58cd4c, value: 0x0

==== Unprotected Selfdestruct ====
SWC ID: 106
Severity: High
Contract: MerkleDrop
Function name: deleteContract()
PC address: 2539
Estimated Gas Usage: 2721 - 2816
Any sender can cause the contract to self-destruct.
Any sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:125

ol) {
        bytes32 cu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deleteContract(), txdata: 0x5a58cd4c, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MerkleDrop
Function name: burnUnusableTokens()
PC address: 2706
Estimated Gas Usage: 1013 - 1108
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:106

ld be held within the contract after burning
        uint ta

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burnUnusableTokens(), txdata: 0xc3c7e336, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MerkleDrop
Function name: burnUnusableTokens()
PC address: 2900
Estimated Gas Usage: 6038 - 6133
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:161
Initial State:

Account: [CREATOR], balance: 0x1040100015882, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060214b012101140010692281001144180240a2040202400460181595a9a5a1322301, value: 0x0
Caller: [SOMEGUY], function: burnUnusableTokens(), txdata: 0xc3c7e336, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MerkleDrop
Function name: burnUnusableTokens()
PC address: 3186
Estimated Gas Usage: 15126 - 70464
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:151


        uint decay;

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: afafafafafafafafafafafafdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0
Caller: [ATTACKER], function: burnUnusableTokens(), txdata: 0xc3c7e336, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MerkleDrop
Function name: deleteContract()
PC address: 3186
Estimated Gas Usage: 16803 - 72141
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/5ef9210c4d30c1aec51836b0b0578dbf.sol:151


        uint decay;

  

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9a9a9a9a9a9a9a9a9a9a9a9adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0
Caller: [ATTACKER], function: deleteContract(), txdata: 0x5a58cd4c, value: 0x0