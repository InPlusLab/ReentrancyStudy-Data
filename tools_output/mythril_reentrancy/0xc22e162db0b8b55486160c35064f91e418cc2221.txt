==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LockUtils
Function name: getLockWFee()
PC address: 325
Estimated Gas Usage: 6111 - 7477
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:370

         return 7500000

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LockUtils
Function name: getLockWFee()
PC address: 332
Estimated Gas Usage: 1818 - 2243
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:369

ars) {
            return 750000000 * 10 ** uint256(decimals);
        } else if (now < createTime + 3 years + 6 * 30 days) {
            return 375000000 * 10 ** uint256(decimals);
        } else {
            return 0;
        }
    }

}

contract WFee is BaseERC20, BaseSafeMath {
    string public name = "WFee";
    string public symbol = "WFEE";
    uint8 public decimals = 18;// 精度为18
    uint256 public totalSupply;// 100亿 构造方法初始化
    LockUtils lockUtils;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LockUtils
Function name: getLockWFee()
PC address: 376
Estimated Gas Usage: 6111 - 7477
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:371

s) {
            ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LockUtils
Function name: getLockWFee()
PC address: 383
Estimated Gas Usage: 2649 - 3074
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:371

6 * 30 days) {
            return 375000000 * 10 ** uint256(decimals);
        } else {
            return 0;
        }
    }

}

contract WFee is BaseERC20, BaseSafeMath {
    string public name = "WFee";
    string public symbol = "WFEE";
    uint8 public decimals = 18;// 精度为18
    uint256 public totalSupply;// 100亿 构造方法初始化
    LockUtils lockUtils;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance

--------------------
Initial State:

Account: [CREATOR], balance: 0x104000000000d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LockUtils
Function name: getLockWFee()
PC address: 431
Estimated Gas Usage: 6111 - 7477
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:375

}
    }

}

contract

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LockUtils
Function name: getLockWFee()
PC address: 432
Estimated Gas Usage: 5238 - 5944
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:375

}
    }

}

contract WFee is BaseE

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LockUtils
Function name: getLockWFee()
PC address: 439
Estimated Gas Usage: 3486 - 3911
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:374

;
        }
    }

}

contract WFee is BaseERC20, BaseSafeMath {
    string public name = "WFee";
    string public symbol = "WFEE";
    uint8 public decimals = 18;// 精度为18
    uint256 public totalSupply;// 100亿 构造方法初始化
    LockUtils lockUtils;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance

--------------------
Initial State:

Account: [CREATOR], balance: 0x4d01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LockUtils
Function name: getLockWFee()
PC address: 483
Estimated Gas Usage: 6111 - 7477
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:382


    uint8 public de

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LockUtils
Function name: getLockWFee()
PC address: 490
Estimated Gas Usage: 4317 - 4742
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:382

 = "WFEE";
    uint8 public decimals = 18;// 精度为18
    uint256 public totalSupply;// 100亿 构造方法初始化
    LockUtils lockUtils;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080000020003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LockUtils
Function name: getLockWFee()
PC address: 538
Estimated Gas Usage: 6111 - 7477
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:384


    LockUtils loc

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LockUtils
Function name: getLockWFee()
PC address: 539
Estimated Gas Usage: 5238 - 5944
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:384


    LockUtils lockUtils;
    ma

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LockUtils
Function name: getLockWFee()
PC address: 546
Estimated Gas Usage: 5154 - 5579
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:384

法初始化
    LockUtils lockUtils;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getLockWFee(), txdata: 0x2dde9f81, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WFee
Function name: approveAndCall(address,uint256,bytes) or approveAndCall(address,uint256,bytes)
PC address: 3301
Estimated Gas Usage: 7995 - 67174
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f6fee42b0acaab2a41736113d579011a.sol:462

rn true;
    }

    function burnFrom(address _from, uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffeff, value: 0x0