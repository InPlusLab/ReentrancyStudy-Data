==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 1183
Estimated Gas Usage: 883 - 978
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:301

sg.value <= maxSpend);
    
    // stop

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 1197
Estimated Gas Usage: 1705 - 1800
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:303

of tokens if token balance is 0
    re

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 1255
Estimated Gas Usage: 23553 - 183948
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:317

/ does not exceed

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 1315
Estimated Gas Usage: 23553 - 183948
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:338

// Intern

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 1334
Estimated Gas Usage: 23553 - 183948
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:337

---------
  // Internal interface (e

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 1901
Estimated Gas Usage: 23553 - 183948
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:191

    r

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 1904
Estimated Gas Usage: 23553 - 183948
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:191

.balanceOf(_address

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 2007
Estimated Gas Usage: 23553 - 183948
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:191

    return token.balanceOf(_address)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800420210a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 2007
Estimated Gas Usage: 23553 - 183948
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:191

    return token.balanceOf(_address)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: burnUnsoldTokens()
PC address: 2092
Estimated Gas Usage: 2215 - 2310
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:210

rarily pause token sale if needed
  fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: burnUnsoldTokens(), txdata: 0x940bb344, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenSale
Function name: account_info_rotate_tine(uint256)
PC address: 2240
Estimated Gas Usage: 9654 - 81019
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:211

seTokenSale() onlyAdmin public {
      // confirm the tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: burnUnsoldTokens(), txdata: 0x940bb344, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenSale
Function name: pauseTokenSale()
PC address: 2637
Estimated Gas Usage: 2447 - 2872
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:219

 tokenSaleIsPaused = true;
      tokenSa

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pauseTokenSale(), txdata: 0xf20f24ec, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 2856
Estimated Gas Usage: 23553 - 183948
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:426

mumR

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenSale
Function name: delayOpeningTime(uint256)
PC address: 2889
Estimated Gas Usage: 6352 - 26777
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:65

--------------

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: delayOpeningTime(uint256), txdata: 0x7a38417bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 2903
Estimated Gas Usage: 23553 - 183948
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:438

he token sale if

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 2935
Estimated Gas Usage: 23553 - 183948
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:438

he token sale if necessary
    funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 3003
Estimated Gas Usage: 23553 - 183948
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:384

nt
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenSale
Function name: fallback
PC address: 3109
Estimated Gas Usage: 23553 - 183948
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/db19a1234f83118aad90c115e25a45b0.sol:384

nt
  )
    internal
  {
    delive

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000100020004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x16345785d8a0000