==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MultiTranser
Function name: transfer(address[],uint256[])
PC address: 266
Estimated Gas Usage: 8353 - 85985
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3142ab02f9b79178f127ac1c04355f65.sol:101

.length);

        for (uint i = 0; i < to.length; i++) {
            tkcAddress.transferFrom(owner, to[i], value[i]);
        }
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000002001001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address[],uint256[]), txdata: 0xffc3a769ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTranser
Function name: transfer(address[],uint256[])
PC address: 725
Estimated Gas Usage: 8353 - 85985
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3142ab02f9b79178f127ac1c04355f65.sol:107
Initial State:

Account: [CREATOR], balance: 0x100040010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000000000000000000000000000000000000000010000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTranser
Function name: transfer(address[],uint256[])
PC address: 728
Estimated Gas Usage: 8353 - 85985
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3142ab02f9b79178f127ac1c04355f65.sol:107
Initial State:

Account: [CREATOR], balance: 0x100040010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000000000000000000000000000000000000000010000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MultiTranser
Function name: transfer(address[],uint256[])
PC address: 897
Estimated Gas Usage: 8353 - 85985
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3142ab02f9b79178f127ac1c04355f65.sol:107
Initial State:

Account: [CREATOR], balance: 0x2020010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000000000880000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTranser
Function name: transfer(address[],uint256[])
PC address: 897
Estimated Gas Usage: 8353 - 85985
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3142ab02f9b79178f127ac1c04355f65.sol:107
Initial State:

Account: [CREATOR], balance: 0x100040010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000000000000000000000000000000000000000010000000080, value: 0x0


