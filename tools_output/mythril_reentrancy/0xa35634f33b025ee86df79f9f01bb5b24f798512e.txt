==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Register
Function name: fallback
PC address: 192
Estimated Gas Usage: 19300 - 84565
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ee9e0ce1aa7207018c0ff4a93d781516.sol:49

lue) public {
        require(msg.sender == owner);
        convertedRecords[_zilaccount]+=_value;
        totalConverted+=_value;
        claimRecords[_zilaccount]-=_value;
    }

    function getClaimedByAddr(string _zilaccount) p

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: convert(string,uint256), txdata: 0x1181dfc5ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Register
Function name: claim(string,uint256)
PC address: 538
Estimated Gas Usage: 3260 - 41732
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ee9e0ce1aa7207018c0ff4a93d781516.sol:26

laccount,uint256 _value) public returns (bool sucess) {
        require(_value>minClaimedValue);
        bytes4 transferFromMethodId = bytes4(keccak256("transferFrom(address,address,uint256)"));
        if(zyroAddr.call(transferFromMethodId, msg.sender, address(this), _value)){
             claimRecords[_zilaccount]+=_value;
             totalClaimed+=_value;
             emit Claim(msg.sender,_zilaccount,_value);
             return true;
        }
        return false;
    }
    
    function burn() public re

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(string,uint256), txdata: 0xe64d2fb4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Register
Function name: fallback
PC address: 643
Estimated Gas Usage: 19300 - 84565
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: convert(string,uint256), txdata: 0x1181dfc580, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Register
Function name: fallback
PC address: 757
Estimated Gas Usage: 19300 - 84565
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: convert(string,uint256), txdata: 0x1181dfc580, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Register
Function name: burn()
PC address: 989
Estimated Gas Usage: 10998 - 67042
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ee9e0ce1aa7207018c0ff4a93d781516.sol:43

rnToken(msg.sender,

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burn(), txdata: 0x44df8e70, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Register
Function name: burn()
PC address: 993
Estimated Gas Usage: 10998 - 67042
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ee9e0ce1aa7207018c0ff4a93d781516.sol:43

rnToken(msg.sender,

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burn(), txdata: 0x44df8e70, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Register
Function name: getClaimedByAddr(string)
PC address: 1096
Estimated Gas Usage: 1574 - 6040
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getClaimedByAddr(string), txdata: 0x48f1ce4680, value: 0x0