==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Potions
Function name: start(uint256)
PC address: 510
Estimated Gas Usage: 1052 - 1477
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30f51b00f5bfd157cd40b7738ae301aa.sol:33

);
        _;
    }
    
    
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: openToThePublic(), txdata: 0x246d4098, value: 0x0
Caller: [ATTACKER], function: start(uint256), txdata: 0x95805dad, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Potions
Function name: start(uint256)
PC address: 641
Estimated Gas Usage: 14752 - 91015
A control flow decision is made based on The block hash of a previous block.
The block hash of a previous block is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30f51b00f5bfd157cd40b7738ae301aa.sol:98

ress(this)) / 2);
           //payout winner
           BITcontract.transfer(msg.sender, tokensToWinner);
           emit WinnerPaid(tokensToWinner, msg.sender);
           didYouWin = true;
        }
        
        emit TransactionDetails(choice, winningNumber);
        return didYouWin;
        
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: openToThePublic(), txdata: 0x246d4098, value: 0x0
Caller: [SOMEGUY], function: start(uint256), txdata: 0x95805dad, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Potions
Function name: start(uint256)
PC address: 641
Estimated Gas Usage: 14752 - 91015
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30f51b00f5bfd157cd40b7738ae301aa.sol:98

ress(this)) / 2);
           //payout winner
           BITcontract.transfer(msg.sender, tokensToWinner);
           emit WinnerPaid(tokensToWinner, msg.sender);
           didYouWin = true;
        }
        
        emit TransactionDetails(choice, winningNumber);
        return didYouWin;
        
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: openToThePublic(), txdata: 0x246d4098, value: 0x0
Caller: [SOMEGUY], function: start(uint256), txdata: 0x95805dad, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Potions
Function name: returnAnyERC20Token(address,address,uint256)
PC address: 1012
Estimated Gas Usage: 1103 - 1858
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30f51b00f5bfd157cd40b7738ae301aa.sol:14

ender == owner);
        _;


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: openToThePublic(), txdata: 0x246d4098, value: 0x0
Caller: [ATTACKER], function: returnAnyERC20Token(address,address,uint256), txdata: 0x9fc9278e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Potions
Function name: returnAnyERC20Token(address,address,uint256)
PC address: 1173
Estimated Gas Usage: 3756 - 40769
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30f51b00f5bfd157cd40b7738ae301aa.sol:161

 returns (bool success);
}  

//Need to ensure the Lotter

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: returnAnyERC20Token(address,address,uint256), txdata: 0x9fc9278e, value: 0x0
Caller: [CREATOR], function: returnAnyERC20Token(address,address,uint256), txdata: 0x9fc9278e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0


