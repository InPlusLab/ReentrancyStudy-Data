==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: transferFrom(address,address[],uint256[])
PC address: 229
Estimated Gas Usage: 3937 - 41991
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:157

        for (uint i = 0; i < _addresses.length; i ++) {
            token.transferFrom(_from, _addresses[i], _amounts[i]);
        }
    }

    function tokenFallback(address, uint, bytes) public pure {
        // receive tokens
    }

    function withdraw(uint _value) public onlyOwner {
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x2008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address[],uint256[]), txdata: 0x4609149900000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000040ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: transferToken(address,address[],uint256[])
PC address: 392
Estimated Gas Usage: 3152 - 40451
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:147

length);

        for (uint i = 0; i < _addresses.length; i ++) {
            ERC20(_token).transfer(_addresses[i], _amounts[i]);
        }
    }

    function transferFrom(address _from, address[] _addresses, uint[] _amounts) external onlyOwner {
        require(_addresses.length == _amounts.le

--------------------
Initial State:

Account: [CREATOR], balance: 0x42000000000000805, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: transferToken(address,address[],uint256[]), txdata: 0xa62ceef500000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000046ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 623
Estimated Gas Usage: 4026 - 40995
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:141

     for (uint i = 0; i < _addresses.length; i ++) {
            token.transfer(_addresses[i], _amounts[i]);
        }
    }

    function transferToken(address _token, address[] _addresses, uint[] _amounts) external onlyOwner {
        require(_addresses.length == _

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: transfer(address[],uint256[]), txdata: 0xffc3a769ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 634
Estimated Gas Usage: 4026 - 40995
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:141

     for (uint i = 0; i < _addresses.length; i ++) {
            token.transfer(_addresses[i], _amounts[i]);
        }
    }

    function transferToken(address _token, address[] _addresses, uint[] _amounts) external onlyOwner {
        require(_addresses.length == _

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: transfer(address[],uint256[]), txdata: 0xffc3a7698000000000000000000000000000000000000000000000000000000000000060ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: fallback
PC address: 786
Estimated Gas Usage: 4284 - 39933
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:173

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x8c60, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirDrop
Function name: transferFrom(address,address[],uint256[])
PC address: 881
Estimated Gas Usage: 3937 - 41991
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:163

ens
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address[],uint256[]), txdata: 0x460914990000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: transferFrom(address,address[],uint256[])
PC address: 1055
Estimated Gas Usage: 3937 - 41991
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:163

ens
    }

    function withdraw(uint _value) public 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address[],uint256[]), txdata: 0x460914990000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: withdrawToken(address,uint256)
PC address: 1373
Estimated Gas Usage: 3593 - 39572
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:173
Initial State:

Account: [CREATOR], balance: 0x40080000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawToken(address,uint256), txdata: 0x9e281a98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: transferToken(address,address[],uint256[])
PC address: 1615
Estimated Gas Usage: 3152 - 40451
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:154

external onlyOwner {
        require(_addresses.le

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: transferToken(address,address[],uint256[]), txdata: 0xa62ceef5000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef800000000000000000000000000000000000000000000000000000000000002080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 1771
Estimated Gas Usage: 4026 - 40995
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:146

) ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000001fffffffffffffffffffffffffffffffffffffffffe080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AirDrop
Function name: transfer(address[],uint256[])
PC address: 1919
Estimated Gas Usage: 4026 - 40995
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/226474d55e3427ce5b2be74227b0ac95.sol:146

) external onlyOwner {
        require(_ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x2008200020000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transfer(address[],uint256[]), txdata: 0xffc3a769800000000000000000000000000000000000000000000000000000000000000080, value: 0x0


