with mythril_dir
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenHolder
Function name: fallback
PC address: 304
Estimated Gas Usage: 1031 - 1786
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:727

 on construction and cannot be changed afterwards.

    Wrappers are provided (as opposed to a single 'execute' function) for each of the token's functions, for easier access.



    Note that the controller can transfer token ownership to a new controller that

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x3f8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address)
PC address: 421
Estimated Gas Usage: 1076 - 1831
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:489

utilities for contract management

    Note that a managed contract must also have an owner

*/

contract Managed is Owned {

    address public m

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SmartTokenController
Function name: fallback
PC address: 477
Estimated Gas Usage: 1023 - 2108
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:853

ner



        @param _token   ERC20 token contract address

        @param _to      account to receive the new amount

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: transferTokenOwnership(address), txdata: 0x21e6b53d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenHolder
Function name: fallback
PC address: 510
Estimated Gas Usage: 2962 - 40684
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:733

n ownership to a new controll

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SmartTokenController
Function name: acceptTokenOwnership()
PC address: 631
Estimated Gas Usage: 1014 - 1769
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:873

    ) 

        public

        ownerOnly

    {

        ITokenHolder(token).withdrawTokens(_t

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, value: 0x0
Caller: [ATTACKER], function: acceptTokenOwnership(), txdata: 0x38a5e016, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SmartTokenController
Function name: acceptTokenOwnership()
PC address: 718
Estimated Gas Usage: 3452 - 39808
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:881

enHolder(token).withdra

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: acceptTokenOwnership(), txdata: 0x38a5e016, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenHolder
Function name: transferOwnership(address)
PC address: 760
Estimated Gas Usage: 1098 - 1853
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:489

utilities for contract management

    Note that a managed contract must also have an owner

*/

contract Managed is Owned {

    address public m

--------------------
Initial State:

Account: [CREATOR], balance: 0x601, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SmartTokenController
Function name: withdrawFromToken(address,address,uint256)
PC address: 764
Estimated Gas Usage: 1088 - 2173
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:909

s that have less than 8 decimal digits

             or with very small numbers because of precision loss



    Open issues:

    - Front-running attacks are currently mitigated by the following mechanisms:

        - minimum return argument for 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: withdrawFromToken(address,address,uint256), txdata: 0x41a5b33d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Managed
Function name: transferOwnership(address)
PC address: 861
Estimated Gas Usage: 1164 - 1919
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:489

utilities for contract management

    Note that a managed contract must also have an owner

*/

contract Managed is Owned {

    address public m

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SmartTokenController
Function name: withdrawTokens(address,address,uint256)
PC address: 935
Estimated Gas Usage: 1110 - 2195
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:727

 on construction and cannot be changed afterwards.

    Wrappers are provided (as opposed to a single 'execute' function) for each of the token's functions, for easier access.



    Note that the controller can transfer token ownership to a new controller that

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SmartTokenController
Function name: disableTokenTransfers(bool)
PC address: 1336
Estimated Gas Usage: 1114 - 1869
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:895

 themselves.



    ERC20 connector balance can be virtual, meaning that the calculations are based on the virtual bal

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: disableTokenTransfers(bool), txdata: 0x85d5e631, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SmartTokenController
Function name: transferOwnership(address)
PC address: 1493
Estimated Gas Usage: 1199 - 2284
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/16e8505e7bb4582c02a8624b764ddb6e.sol:489

utilities for contract management

    Note that a managed contract must also have an owner

*/

contract Managed is Owned {

    address public m

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0


