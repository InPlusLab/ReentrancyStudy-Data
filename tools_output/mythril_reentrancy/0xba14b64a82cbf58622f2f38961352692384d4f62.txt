==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorBuyer
Function name: deposit(address,address[],uint256[])
PC address: 3741
Estimated Gas Usage: 588 - 683
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e734a72c5cfe882d062eb1947dcba50d.sol:271

ength; i++) {

            ERC20 token = ERC20(_tokens[i]);

            uint256 tokenValue = _tokenValues[i];



            uint256 balance = token.balanceOf(this);

            token.transferFrom(msg.sender, this, tokenValue);

            require(token.balanceOf(this) == balance.add(tokenValue));

            tokenBalances[_beneficiary][token] = tokenBalances[_beneficiary][token].add(tokenValue);

        }

    }

    

    function withdrawInternal(address _to, uint256 _value, address[] _tokens, uint256[] _tokenValues) internal {

        if (_value > 0) {

            _to.transfer(_value);

            balances[msg.sender] = balances[msg.sender].sub(_value);

        }



        for (uint i =

--------------------
Initial State:

Account: [CREATOR], balance: 0x281809851030e0921, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(address,address[],uint256[]), txdata: 0x562fa0df000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorBuyer
Function name: sumWeightOfMultiToken(address)
PC address: 6296
Estimated Gas Usage: 2094 - 36937
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/e734a72c5cfe882d062eb1947dcba50d.sol:247

emory tokenValues 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10fb3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sumWeightOfMultiToken(address), txdata: 0xbd440ffb000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorBuyer
Function name: buyOne(address,address,uint256,bytes)
PC address: 6972
Estimated Gas Usage: 6619 - 29774
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e734a72c5cfe882d062eb1947dcba50d.sol:707
Initial State:

Account: [CREATOR], balance: 0xc10000020e97bf, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyOne(address,address,uint256,bytes), txdata: 0x18c1fc68, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorBuyer
Function name: buyOne(address,address,uint256,bytes)
PC address: 7140
Estimated Gas Usage: 6735 - 30076
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e734a72c5cfe882d062eb1947dcba50d.sol:707
Initial State:

Account: [CREATOR], balance: 0x40080000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyOne(address,address,uint256,bytes), txdata: 0x18c1fc680000000000000000000000000000000000000000000000000000000000000001a9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorBuyer
Function name: buyOne(address,address,uint256,bytes)
PC address: 7309
Estimated Gas Usage: 6852 - 30379
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/e734a72c5cfe882d062eb1947dcba50d.sol:707
Initial State:

Account: [CREATOR], balance: 0x200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: buyOne(address,address,uint256,bytes), txdata: 0x18c1fc680000000000000000000000000000000000000000000000000000000000000002a905, value: 0x0