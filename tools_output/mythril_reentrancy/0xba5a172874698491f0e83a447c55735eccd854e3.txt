==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 733
Estimated Gas Usage: 5481 - 75972
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:525

 203;

    string pub

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e9e9e9e9e9e9e9e9e9e9e9e9edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef9e9e9e9e9e9e9e9e9e9e9e9e01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 818
Estimated Gas Usage: 5481 - 75972
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:527

c constant VERSION_

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 1073
Estimated Gas Usage: 5481 - 75972
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:533

g(address => uint256) priv

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e9e9e9e9e9e9e9e9e9e9e9e9edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef9e9e9e9e9e9e9e9e9e9e9e9e01, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 1073
Estimated Gas Usage: 5481 - 75972
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:533

g(address => uint256) priv

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000041, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000000000000000000000000000000000202080800000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLockable
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 1073
Estimated Gas Usage: 5481 - 75972
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:533

g(address => uint256) priv

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getApproved(uint256) or getApproved(uint256)
PC address: 5618
Estimated Gas Usage: 1012 - 1107
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:1017

       @param index Index of the loan



        @return true if the loan has been approved by the borr

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getApproved(uint256), txdata: 0x081812fc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: approve(address,uint256) or approve(address,uint256) or approve(address,uint256)
PC address: 5693
Estimated Gas Usage: 1067 - 1162
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:1451

rn getRawPendingAmount(index);

    }



    /**

        @notice Returns the pending amount up to the last time of the interest update. This is not the real pending amount



        @dev This method is exact only if "addInterest(loan)" was before and in the same bloc

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getInterestRate(uint256)
PC address: 5999
Estimated Gas Usage: 1056 - 1151
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:993

uint256) { return loans[index].cancelableAt; }

    function getApprobation(uint index, address _address

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getInterestRate(uint256), txdata: 0x0c196a74, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getOracle(uint256) or getOracle(uint256)
PC address: 6060
Estimated Gas Usage: 1100 - 1195
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:977

amount; }

    function getPunitoryInterest(uint index) public view returns (uint256) { ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getOracle(uint256), txdata: 0x10a9de60, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 8918
Estimated Gas Usage: 1279 - 1374
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:1407

       @return true if the approve was done successfully

    */

    function approve(address to, uint256 index) public returns (bool) {

        Loan storage loan = loans[index];

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getInterestTimestamp(uint256)
PC address: 9536
Estimated Gas Usage: 1254 - 1349
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:989

iew returns (uint256) { return loans[index].dueTime; }

    function getDuesIn(uint index) public view returns (ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getInterestTimestamp(uint256), txdata: 0x2924e254, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getPaid(uint256) or getPaid(uint256)
PC address: 9578
Estimated Gas Usage: 1276 - 1371
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:991

{ return loans[index].duesIn; }

    function getCancelableAt(uint index) public view re

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPaid(uint256), txdata: 0x2a92362c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: addInterest(uint256)
PC address: 9941
Estimated Gas Usage: 1323 - 1418
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:1683

h RCN are going to be spent on the

        transaction*, we recommend performing the "approve" using an amount 5% superior to the wallet estimated

        spending. If the RCN spent results to be less, the e

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addInterest(uint256), txdata: 0x3290f515, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getDuesIn(uint256)
PC address: 11989
Estimated Gas Usage: 1364 - 1459
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:999

s (uint256) { return loans[index].lenderBalance; }

    function getApproved(uint index) pub

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getDuesIn(uint256), txdata: 0x4a8e4d78, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getInterestRatePunitory(uint256)
PC address: 13517
Estimated Gas Usage: 1408 - 1503
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:995

c view returns (bool) { return loans[index].approbations[_address]; }

    function getStatus(uint index) public view re

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getInterestRatePunitory(uint256), txdata: 0x4d5e9a2a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getLenderBalance(uint256)
PC address: 13559
Estimated Gas Usage: 1430 - 1525
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:1007

nt256) { return loans[index].interest; }



    /**

        @notice Used to know if a loan is ready to le

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getLenderBalance(uint256), txdata: 0x55121498, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: NanoLoanEngine
Function name: getDueTime(uint256) or getDueTime(uint256)
PC address: 13601
Estimated Gas Usage: 1452 - 1547
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/502073681fbfd14388ed3fc1d4c148d8.sol:997

Status) { return loans[index].status; }

    function getLenderBalance(uint index) public view

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getDueTime(uint256), txdata: 0x59357045, value: 0x0