==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 552
Estimated Gas Usage: 37936 - 197296
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/462613ac102358e5bd51bf3cedf3e86a.sol:679

       Migration storage migration = migrations[i];

            if (migration.data.length > 0) {

                CvcProxy(migration.proxy).upgradeToAndCall(migration.implementation, migration.data);

            } else {

                CvcProxy(migration.proxy).upgradeTo(migration.implementation);

            }

        }

        delete migrations;

    }



    /**

    * @dev Flushes the migration list without applying them. Can be used

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002004010808021002080808010104100102040180ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CvcMigrator
Function name: migrations(uint256)
PC address: 1305
Estimated Gas Usage: 1014 - 1109
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/462613ac102358e5bd51bf3cedf3e86a.sol:663

tions.push(Migration(_proxy, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: migrations(uint256), txdata: 0x1e5cb9be, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 1944
Estimated Gas Usage: 37936 - 197296
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/462613ac102358e5bd51bf3cedf3e86a.sol:687

cProxy(migration.proxy).upgradeTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x8001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000010101010101010101010101010101010101010180, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 2346
Estimated Gas Usage: 37936 - 197296
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 2350
Estimated Gas Usage: 37936 - 197296
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 2400
Estimated Gas Usage: 37936 - 197296
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/462613ac102358e5bd51bf3cedf3e86a.sol:701

* @dev Flushes the migration list without applying them. C

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 2453
Estimated Gas Usage: 37936 - 197296
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/462613ac102358e5bd51bf3cedf3e86a.sol:701

* @dev Flushes the migration list without applying them. C

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 2471
Estimated Gas Usage: 37936 - 197296
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/462613ac102358e5bd51bf3cedf3e86a.sol:701

* @dev Flushes the migration list without applying them. C

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 2524
Estimated Gas Usage: 37936 - 197296
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/462613ac102358e5bd51bf3cedf3e86a.sol:701

* @dev Flushes the migration list without applying them. C

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CvcMigrator
Function name: changeProxyAdmin(address,address)
PC address: 3276
Estimated Gas Usage: 2780 - 37581
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/462613ac102358e5bd51bf3cedf3e86a.sol:767

ation(uint256 _index) external view retu

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeProxyAdmin(address,address), txdata: 0x7eff275e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CvcMigrator
Function name: getMigration(uint256)
PC address: 3320
Estimated Gas Usage: 1133 - 1228
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/462613ac102358e5bd51bf3cedf3e86a.sol:791
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getMigration(uint256), txdata: 0x80c7507a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 5025
Estimated Gas Usage: 37936 - 197296
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 5082
Estimated Gas Usage: 37936 - 197296
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 5090
Estimated Gas Usage: 27796 - 146970
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608beffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 5095
Estimated Gas Usage: 37936 - 197296
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 5104
Estimated Gas Usage: 27796 - 146970
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608beffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CvcMigrator
Function name: addUpgrade(address,address,bytes)
PC address: 5117
Estimated Gas Usage: 37936 - 197296
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addUpgrade(address,address,bytes), txdata: 0x35e608be000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000004008100801801080041020200240048001010202ff, value: 0x0