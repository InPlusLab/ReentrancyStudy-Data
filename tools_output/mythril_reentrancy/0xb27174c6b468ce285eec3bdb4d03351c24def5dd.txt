==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DaiSwap
Function name: deposit(uint256)
PC address: 3756
Estimated Gas Usage: 18414 - 129053
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/43bebf17fcf196ca88dc1df4822ad252.sol:94

ion withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x42000000000018414, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f250d00047a9c998689c51a200041521443019b402369360012600c0c102a000093, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DaiSwap
Function name: deposit(uint256)
PC address: 3974
Estimated Gas Usage: 18414 - 129053
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/43bebf17fcf196ca88dc1df4822ad252.sol:94

ion withdraw() public {
        uint dai  = safeMul(daipos

--------------------
Initial State:

Account: [CREATOR], balance: 0x401060000020888, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f254043589020415c8a94102510011f80340a22100a108410294d20d423a062c7e4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DaiSwap
Function name: deposit(uint256)
PC address: 3974
Estimated Gas Usage: 18414 - 129053
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/43bebf17fcf196ca88dc1df4822ad252.sol:94

ion withdraw() public {
        uint dai  = safeMul(daipos

--------------------
Initial State:

Account: [CREATOR], balance: 0x42000000000018414, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f250d00047a9c998689c51a200041521443019b402369360012600c0c102a000093, value: 0x0