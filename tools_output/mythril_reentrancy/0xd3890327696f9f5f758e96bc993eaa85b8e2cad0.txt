==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Rewarder_Presale
Function name: constructor
PC address: 412
Estimated Gas Usage: 52073 - 234808
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:307

     * - Subtraction cannot overflow.
     */


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: fallback
PC address: 1770
Estimated Gas Usage: 5932 - 26027
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:212

sStopped, "Presale stopped by co

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: startPresale()
PC address: 3746
Estimated Gas Usage: 1040 - 1465
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:141

liquidityUnlock = block.timestamp.add(180 days);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startPresale(), txdata: 0x04c98b2b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: pausePresale()
PC address: 3975
Estimated Gas Usage: 1084 - 1509
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:141

liquidityUnlock = block.timestamp.add(180 days);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pausePresale(), txdata: 0x070f5c09, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: allowRefunds()
PC address: 4381
Estimated Gas Usage: 1105 - 1530
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:141

liquidityUnlock = block.timestamp.add(180 days);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: allowRefunds(), txdata: 0x59c656df, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: lockWithUnicrypt()
PC address: 4769
Estimated Gas Usage: 1017 - 1442
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:141

liquidityUnlock = block.timestamp.add(180 days);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: withdrawTeamTokens()
PC address: 5856
Estimated Gas Usage: 1083 - 1508
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:141

liquidityUnlock = block.timestamp.add(180 days);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTeamTokens(), txdata: 0x953b7ef8, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: withdrawFromUnicrypt(uint256)
PC address: 7085
Estimated Gas Usage: 1187 - 1612
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:141

liquidityUnlock = block.timestamp.add(180 days);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFromUnicrypt(uint256), txdata: 0x9876fdfa0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: getRefund()
PC address: 7575
Estimated Gas Usage: 6042 - 26137
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:160

quire(isRefundEnabled || block.t

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRefund(), txdata: 0xb2d5ae44, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Rewarder_Presale
Function name: getRefund()
PC address: 7639
Estimated Gas Usage: 8581 - 29336
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:163

        ethSpent[user] = 0;
        user.transfer(amount);
    }
    
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRefund(), txdata: 0xb2d5ae44, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: claimTeamFeeAndAddLiquidityLETSFUCKINGGOOOO()
PC address: 8059
Estimated Gas Usage: 1061 - 1486
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:141

liquidityUnlock = block.timestamp.add(180 days);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidityLETSFUCKINGGOOOO(), txdata: 0xbc9f28bc, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: unlockTokensAfterSixMonhts(address,uint256)
PC address: 8795
Estimated Gas Usage: 1175 - 1600
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:141

liquidityUnlock = block.timestamp.add(180 days);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unlockTokensAfterSixMonhts(address,uint256), txdata: 0xdcd7dd2300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Rewarder_Presale
Function name: unlockTokensAfterSixMonhts(address,uint256)
PC address: 8915
Estimated Gas Usage: 2000 - 2425
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:286

ounterpart to Solidity's `+` operator.
     *
     * Requirements:
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unlockTokensAfterSixMonhts(address,uint256), txdata: 0xdcd7dd2300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Rewarder_Presale
Function name: unlockTokensAfterSixMonhts(address,uint256)
PC address: 9175
Estimated Gas Usage: 4540 - 39952
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:290

- Addition cannot overflow.
     */
    function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unlockTokensAfterSixMonhts(address,uint256), txdata: 0xdcd7dd23000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: Rewarder_Presale
Function name: setRWD(address)
PC address: 9321
Estimated Gas Usage: 1170 - 1595
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/8f5ce0f6618697a4fff57aabe63f591e.sol:141

liquidityUnlock = block.timestamp.add(180 days);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000020002001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setRWD(address), txdata: 0xeb5ddb300000000000000000000000000000000000000000000000000000000000000000, value: 0x0