==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: payBond(uint64)
PC address: 1918
Estimated Gas Usage: 18179 - 94116
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:327

er, amount, payments[paymentId].isE

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payBond(uint64), txdata: 0x6ad6d578, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: payBond(uint64)
PC address: 1924
Estimated Gas Usage: 18179 - 94116
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:327

(this), payments[paymentId

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payBond(uint64), txdata: 0x6ad6d578, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: payBond(uint64)
PC address: 1973
Estimated Gas Usage: 18179 - 94116
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:327

       transferTokens(address(this), payments[paymentId].payer, amount, payments[paymentId].isEt

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payBond(uint64), txdata: 0x6ad6d578, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: payBond(uint64)
PC address: 1978
Estimated Gas Usage: 18179 - 94116
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:329

       if (amount == payments[paymentId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payBond(uint64), txdata: 0x6ad6d578, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: payBond(uint64)
PC address: 1987
Estimated Gas Usage: 18179 - 94116
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:329

       if (amount == payments[paymentId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payBond(uint64), txdata: 0x6ad6d578, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: topUp(uint64,uint256)
PC address: 2245
Estimated Gas Usage: 9870 - 65617
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:361

 payments[paymentId].isEth

--------------------
Initial State:

Account: [CREATOR], balance: 0x140100022040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: topUp(uint64,uint256), txdata: 0x8ce5ae91, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: topUp(uint64,uint256)
PC address: 2294
Estimated Gas Usage: 9870 - 65617
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:361

nts[paymentId].payee, amount, payments[paymentId].isEthPayment);

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x140100022040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: topUp(uint64,uint256), txdata: 0x8ce5ae91, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ScorchablePayments
Function name: paymentIds(uint256)
PC address: 2325
Estimated Gas Usage: 1156 - 1251
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:197

aymentId) {

        requi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: paymentIds(uint256), txdata: 0x9ba6737c, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3303
Estimated Gas Usage: 650 - 1405
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:253

  paymentIds.push(currentId).sub(1),

           

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3362
Estimated Gas Usage: 61378 - 299852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:269

d].payeeB

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3366
Estimated Gas Usage: 61378 - 299852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3374
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3420
Estimated Gas Usage: 61378 - 299852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:269

ayments[paymentId].payeeBo

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3460
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:269

ayments[paymentId].payeeBo

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3508
Estimated Gas Usage: 61378 - 299852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255



       

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3538
Estimated Gas Usage: 61378 - 299852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3577
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3588
Estimated Gas Usage: 61378 - 299852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3599
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3608
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3617
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3626
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3636
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3648
Estimated Gas Usage: 61378 - 299852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3688
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:255

unt == 0,

            isEthPayment

        );

        currentId = currentId.add(1);

    }



    function cancelPayment(uint64 paymentId) external onlyPayer(paymentId) {

        require(payments[paymentId].payeeBondPaid == false);

        transferTokens(

            address(this),

            ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3690
Estimated Gas Usage: 61378 - 299852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:277

yments[pa

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3711
Estimated Gas Usage: 61378 - 299852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:277

          payments[paymentId

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 3741
Estimated Gas Usage: 61378 - 299852
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:277

          payments[paymentId

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ScorchablePayments
Function name: createPayment(address,uint256,uint256,uint256,bool)
PC address: 4555
Estimated Gas Usage: 609 - 1364
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9c7297ea308598ee3b64b681b4e0f902.sol:105

v + and - opera

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createPayment(address,uint256,uint256,uint256,bool), txdata: 0xaf43fda1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0