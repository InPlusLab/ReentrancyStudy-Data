==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: casinoRoyale
Function name: withdraw(uint256)
PC address: 214
Estimated Gas Usage: 966 - 1061
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1737ef728738f04aedf05f00550306b3.sol:109

fer(value);

        

  }



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: casinoRoyale
Function name: flipCoin()
PC address: 297
Estimated Gas Usage: 190 - 285
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1737ef728738f04aedf05f00550306b3.sol:43

500 szabo && tx.origin == msg.sender);

    uint value = m

--------------------
Initial State:

Account: [CREATOR], balance: 0x804080500011c14, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: flipCoin(), txdata: 0x799ae223, value: 0x5543df729c001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: casinoRoyale
Function name: flipCoin()
PC address: 508
Estimated Gas Usage: 3513 - 38897
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1737ef728738f04aedf05f00550306b3.sol:49

value * 2);

    }

    FlipCoinEv

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100120000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: flipCoin(), txdata: 0x799ae223, value: 0x5543df729c001

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: casinoRoyale
Function name: playSlot()
PC address: 622
Estimated Gas Usage: 212 - 307
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1737ef728738f04aedf05f00550306b3.sol:61

 && tx.origin == msg.sender);

    uint r = m_RandomGen.ra

--------------------
Initial State:

Account: [CREATOR], balance: 0x2081400461000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: playSlot(), txdata: 0xfca5d21f, value: 0x5543df729c001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: casinoRoyale
Function name: playSlot()
PC address: 886
Estimated Gas Usage: 3710 - 41679
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1737ef728738f04aedf05f00550306b3.sol:69

);

       }else if(r >3 && r<6){ /

--------------------
Initial State:

Account: [CREATOR], balance: 0x40200040862000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: playSlot(), txdata: 0xfca5d21f, value: 0x5543df729c001

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: casinoRoyale
Function name: playSlot()
PC address: 1001
Estimated Gas Usage: 3710 - 41679
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1737ef728738f04aedf05f00550306b3.sol:77

       }else if(r >6 && r<9){ // 7

--------------------
Initial State:

Account: [CREATOR], balance: 0x40200040862000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: playSlot(), txdata: 0xfca5d21f, value: 0x5543df729c001


