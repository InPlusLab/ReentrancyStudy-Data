==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ManagerLock
Function name: release()
PC address: 1171
Estimated Gas Usage: 12069 - 118887
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:156

y.
    * @param _amount the nu

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: release()
PC address: 1252
Estimated Gas Usage: 12069 - 118887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:150

e() ex

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: release()
PC address: 1282
Estimated Gas Usage: 12069 - 118887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:167

en.transfer

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: release()
PC address: 1374
Estimated Gas Usage: 12069 - 118887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:168

 emit

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ManagerLock
Function name: partialRelease(uint256)
PC address: 1560
Estimated Gas Usage: 9621 - 81547
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:168

 emit Release(beneficiary, _am

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef121212121212121212121212affeaffeaffeaffeaffeaffeaffeaffeaffeaffe121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [ATTACKER], function: partialRelease(uint256), txdata: 0x8ce9489601, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ManagerLock
Function name: release()
PC address: 1560
Estimated Gas Usage: 12069 - 118887
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:168

 emit Release(beneficiary, _am

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ManagerLock
Function name: release()
PC address: 1560
Estimated Gas Usage: 12069 - 118887
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:168

 emit Release(beneficiary, _am

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: release()
PC address: 1560
Estimated Gas Usage: 12069 - 118887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:168

 emit Release(beneficiary, _am

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: partialRelease(uint256)
PC address: 1654
Estimated Gas Usage: 9621 - 81547
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:173

t Unl

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef121212121212121212121212affeaffeaffeaffeaffeaffeaffeaffeaffeaffe121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [ATTACKER], function: partialRelease(uint256), txdata: 0x8ce9489601, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: release()
PC address: 1654
Estimated Gas Usage: 12069 - 118887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:173

t Unl

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: partialRelease(uint256)
PC address: 1716
Estimated Gas Usage: 9621 - 81547
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:174

 }

    fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef121212121212121212121212affeaffeaffeaffeaffeaffeaffeaffeaffeaffe121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [ATTACKER], function: partialRelease(uint256), txdata: 0x8ce9489601, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: release()
PC address: 1716
Estimated Gas Usage: 12069 - 118887
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:174

 }

    fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ManagerLock
Function name: partialRelease(uint256)
PC address: 1882
Estimated Gas Usage: 9621 - 81547
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:173

t Unlock();
    }

    function lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef121212121212121212121212affeaffeaffeaffeaffeaffeaffeaffeaffeaffe121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [ATTACKER], function: partialRelease(uint256), txdata: 0x8ce9489601, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ManagerLock
Function name: release()
PC address: 1882
Estimated Gas Usage: 12069 - 118887
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:173

t Unlock();
    }

    function lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ManagerLock
Function name: partialRelease(uint256)
PC address: 1882
Estimated Gas Usage: 9621 - 81547
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:173

t Unlock();
    }

    function lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [ATTACKER], function: partialRelease(uint256), txdata: 0x8ce9489601, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: partialRelease(uint256)
PC address: 1882
Estimated Gas Usage: 9621 - 81547
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:173

t Unlock();
    }

    function lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef121212121212121212121212affeaffeaffeaffeaffeaffeaffeaffeaffeaffe121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [ATTACKER], function: partialRelease(uint256), txdata: 0x8ce9489601, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: release()
PC address: 1882
Estimated Gas Usage: 12069 - 118887
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:173

t Unlock();
    }

    function lock

--------------------
Initial State:

Account: [CREATOR], balance: 0x2f000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ManagerLock
Function name: partialRelease(uint256)
PC address: 1988
Estimated Gas Usage: 9621 - 81547
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe50054082d73aa3a6190132ab63cb2c.sol:177

     locked

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef121212121212121212121212affeaffeaffeaffeaffeaffeaffeaffeaffeaffe121212121212121212121212deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unLock(), txdata: 0xed10e33c, value: 0x0
Caller: [ATTACKER], function: partialRelease(uint256), txdata: 0x8ce9489601, value: 0x0