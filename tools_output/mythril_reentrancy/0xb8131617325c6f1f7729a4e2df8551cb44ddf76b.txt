==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Maths
Function name: plus(uint256,uint256)
PC address: 538
Estimated Gas Usage: 288 - 664
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7228b64232a95e6a4608923e7ee1601a.sol:18

;
    assert(sum 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824112c6, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: plus(uint256,uint256), txdata: 0x66098d4fb201003061100801040682010002480c7070c8080110414003040a2143403810c0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Maths
Function name: plus(uint256,uint256)
PC address: 541
Estimated Gas Usage: 288 - 664
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7228b64232a95e6a4608923e7ee1601a.sol:19

ddendA);
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000003c238, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: plus(uint256,uint256), txdata: 0x66098d4fd0d520c9684c6614d97a5a8000102165cb21105001188001000003407354050130, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Maths
Function name: divideSafely(uint256,uint256)
PC address: 600
Estimated Gas Usage: 219 - 314
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7228b64232a95e6a4608923e7ee1601a.sol:79

uotient;
  }

  /*

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: divideSafely(uint256,uint256), txdata: 0x5d63b77c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Maths
Function name: div(uint256,uint256)
PC address: 600
Estimated Gas Usage: 280 - 375
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7228b64232a95e6a4608923e7ee1601a.sol:79

uotient;
  }

  /*

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: div(uint256,uint256), txdata: 0xa391c15b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Maths
Function name: dividedBy(uint256,uint256)
PC address: 600
Estimated Gas Usage: 392 - 487
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7228b64232a95e6a4608923e7ee1601a.sol:79

uotient;
  }

  /*

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: dividedBy(uint256,uint256), txdata: 0xe39bbf68, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Maths
Function name: divideSafely(uint256,uint256)
PC address: 614
Estimated Gas Usage: 260 - 355
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7228b64232a95e6a4608923e7ee1601a.sol:83

@dev Divides the dividend by divisor, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: divideSafely(uint256,uint256), txdata: 0x5d63b77c000000003000000000000000c00100000000001000005000001000000000000402, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Maths
Function name: minus(uint256,uint256)
PC address: 701
Estimated Gas Usage: 409 - 504
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7228b64232a95e6a4608923e7ee1601a.sol:34

   difference = minuend - sub

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: minus(uint256,uint256), txdata: 0xf4f3bdc1000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Mythereum
Function name: editions(uint8)
PC address: 4525
Estimated Gas Usage: 5982 - 7917
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7228b64232a95e6a4608923e7ee1601a.sol:285

 => uint256) public cardDamageUpgradeLevel

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: editions(uint8), txdata: 0x4c303276, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Mythereum
Function name: transferAbnormalERC20Tokens(address,address,uint256)
PC address: 7623
Estimated Gas Usage: 3518 - 40394
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7228b64232a95e6a4608923e7ee1601a.sol:512

tions[_editionNumber].sales = _numSales;
  }

  fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAbnormalERC20Tokens(address,address,uint256), txdata: 0x97cbdfc9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0