==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CoTraderDAOWallet
Function name: addStakeReserveFromSender(uint256)
PC address: 2087
Estimated Gas Usage: 8535 - 113735
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:378


    require(!votersMap[msg.sender], "not allowed re

--------------------
Initial State:

Account: [CREATOR], balance: 0x411c000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addStakeReserveFromSender(uint256), txdata: 0x2fcafe95, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CoTraderDAOWallet
Function name: addStakeReserveFromSender(uint256)
PC address: 2160
Estimated Gas Usage: 8535 - 113735
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:379

he 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addStakeReserveFromSender(uint256), txdata: 0x2fcafe95, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CoTraderDAOWallet
Function name: addStakeReserveFromSender(uint256)
PC address: 2222
Estimated Gas Usage: 8535 - 113735
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:379

");
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addStakeReserveFromSender(uint256), txdata: 0x2fcafe95, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CoTraderDAOWallet
Function name: addStakeReserveFromSender(uint256)
PC address: 2388
Estimated Gas Usage: 8535 - 113735
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:379

he same wallet twice");
    // regis

--------------------
Initial State:

Account: [CREATOR], balance: 0x411c000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addStakeReserveFromSender(uint256), txdata: 0x2fcafe95, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CoTraderDAOWallet
Function name: addStakeReserveFromSender(uint256)
PC address: 2388
Estimated Gas Usage: 8535 - 113735
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:379

he same wallet twice");
    // regis

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000040009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addStakeReserveFromSender(uint256), txdata: 0x2fcafe95, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CoTraderDAOWallet
Function name: addStakeReserveFromSender(uint256)
PC address: 2388
Estimated Gas Usage: 8535 - 113735
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:379

he same wallet twice");
    // regis

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addStakeReserveFromSender(uint256), txdata: 0x2fcafe95, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CoTraderDAOWallet
Function name: addStakeReserveFromSender(uint256)
PC address: 2451
Estimated Gas Usage: 8535 - 113735
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:380

ew wa

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addStakeReserveFromSender(uint256), txdata: 0x2fcafe95, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CoTraderDAOWallet
Function name: addStakeReserveFromSender(uint256)
PC address: 2593
Estimated Gas Usage: 8535 - 113735
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:380

ew wallet
    voters.push

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addStakeReserveFromSender(uint256), txdata: 0x2fcafe95, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CoTraderDAOWallet
Function name: addStakeReserveFromSender(uint256)
PC address: 2593
Estimated Gas Usage: 8535 - 113735
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:380

ew wallet
    voters.push

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addStakeReserveFromSender(uint256), txdata: 0x2fcafe95, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CoTraderDAOWallet
Function name: getTokenBalance(address)
PC address: 2918
Estimated Gas Usage: 2027 - 36965
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:300

 of token
  */
  function withd

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getTokenBalance(address), txdata: 0x3aecd0e3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CoTraderDAOWallet
Function name: voters(uint256)
PC address: 6555
Estimated Gas Usage: 1366 - 1461
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:212

TH by this address
  ER

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000100050004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: voters(uint256), txdata: 0xda58c7d9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CoTraderDAOWallet
Function name: calculateCOTHalfSupply()
PC address: 9047
Estimated Gas Usage: 6290 - 76404
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:406

    if(_candidate 

--------------------
Initial State:

Account: [CREATOR], balance: 0x71eb3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateCOTHalfSupply(), txdata: 0xad0996d1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CoTraderDAOWallet
Function name: changeOwner(address)
PC address: 9047
Estimated Gas Usage: 7255 - 77369
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:406

    if(_candidate 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000010000028b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: changeOwner(address), txdata: 0xa6f9dae1, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CoTraderDAOWallet
Function name: destribute(address[])
PC address: 9264
Estimated Gas Usage: 3848 - 8120
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:336

l.convertTokentoCOT(_token, _amount);
      }
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x100022024, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: destribute(address[]), txdata: 0x7a9d6c2e80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CoTraderDAOWallet
Function name: destribute(address[])
PC address: 9409
Estimated Gas Usage: 3848 - 8120
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48f5e5747d2b9f905b96c16fcd33df9.sol:341

Portal.isConv

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destribute(address[]), txdata: 0x7a9d6c2e80, value: 0x0