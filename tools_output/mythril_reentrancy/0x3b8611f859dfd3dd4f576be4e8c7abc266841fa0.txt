==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC721Proxy
Function name: fallback
PC address: 475
Estimated Gas Usage: 2054 - 41135
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:657

      mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)

                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)

                mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)

                mstore(96, 0)

                revert(0, 100)

            }



            // Revert if undefined function is called

            revert(0, 0)

        }

    }



    /// @dev G

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: transferFrom(bytes,address,address,uint256), txdata: 0xa85e59e400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MixinAuthorizable
Function name: authorities(uint256)
PC address: 871
Estimated Gas Usage: 980 - 1075
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:263

horized[target],

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: authorities(uint256), txdata: 0x494503d4, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MixinAuthorizable
Function name: removeAuthorizedAddress(address)
PC address: 1198
Estimated Gas Usage: 32431 - 116605
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:329

ram index Index of tar

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddress(address), txdata: 0x70712939, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MixinAuthorizable
Function name: removeAuthorizedAddress(address)
PC address: 1307
Estimated Gas Usage: 32431 - 116605
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:329

ay.

    function remov

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddress(address), txdata: 0x70712939, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC721Proxy
Function name: authorities(uint256)
PC address: 1349
Estimated Gas Usage: 980 - 1075
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:263

horized[target],

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: authorities(uint256), txdata: 0x494503d4, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC721Proxy
Function name: removeAuthorizedAddress(address)
PC address: 1676
Estimated Gas Usage: 32431 - 116605
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:329

ram index Index of tar

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddress(address), txdata: 0x70712939, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC721Proxy
Function name: removeAuthorizedAddress(address)
PC address: 1785
Estimated Gas Usage: 32431 - 116605
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:329

ay.

    function remov

--------------------
Initial State:

Account: [CREATOR], balance: 0x83040000710, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddress(address), txdata: 0x70712939, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MixinAuthorizable
Function name: removeAuthorizedAddressAtIndex(address,uint256)
PC address: 1860
Estimated Gas Usage: 32459 - 116633
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:401

}



contract ERC721Pr

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000002011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddressAtIndex(address,uint256), txdata: 0x9ad26744, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MixinAuthorizable
Function name: removeAuthorizedAddressAtIndex(address,uint256)
PC address: 1969
Estimated Gas Usage: 32459 - 116633
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:407

xinAuthorizable

{

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x108200000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddressAtIndex(address,uint256), txdata: 0x9ad26744, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC721Proxy
Function name: removeAuthorizedAddressAtIndex(address,uint256)
PC address: 2338
Estimated Gas Usage: 32459 - 116633
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:401

}



contract ERC721Pr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddressAtIndex(address,uint256), txdata: 0x9ad26744, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC721Proxy
Function name: removeAuthorizedAddressAtIndex(address,uint256)
PC address: 2447
Estimated Gas Usage: 32459 - 116633
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/30e92ed5858cd27d49ef2f4a46e78854.sol:407

xinAuthorizable

{

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAuthorizedAddress(address), txdata: 0x42f1181e, value: 0x0
Caller: [CREATOR], function: removeAuthorizedAddressAtIndex(address,uint256), txdata: 0x9ad26744, value: 0x0


