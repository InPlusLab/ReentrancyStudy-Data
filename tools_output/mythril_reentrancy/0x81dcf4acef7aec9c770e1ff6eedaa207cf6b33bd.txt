==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 2459
Estimated Gas Usage: 41347 - 203096
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:263

ken.balanceOf(this);
  }

  /**
   * 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BasicStakingContract
Function name: totalStaked() or totalStaked() or totalStaked()
PC address: 2726
Estimated Gas Usage: 2867 - 38135
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:272

  }

  /**
   * @notice MUST

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e7deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: totalStaked(), txdata: 0x817b1cd2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC900BasicStakeContract
Function name: totalStaked() or totalStaked() or totalStaked()
PC address: 2726
Estimated Gas Usage: 2867 - 38135
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:272

  }

  /**
   * @notice MUST

--------------------
Initial State:

Account: [CREATOR], balance: 0x400004020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 969696969696969696969696deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: totalStaked(), txdata: 0x817b1cd2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 3156
Estimated Gas Usage: 41347 - 203096
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:160

n ERC20 The address of the token contract used for

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000b3610, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b20901a20011022048280080240041010800424581020101008881002010c1080e0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC900BasicStakeContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 3156
Estimated Gas Usage: 41347 - 203096
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:160

n ERC20 The address of the token contract used for

--------------------
Initial State:

Account: [CREATOR], balance: 0x10810000000000024, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x5020000000000004, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 212121212121212121212121deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b8240160420042110028040b8100280404020400404040201010202102002010420, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC900BasicStakeContract
Function name: stakeFor(address,uint256,bytes) or stakeFor(address,uint256,bytes) or stakeFor(address,uint256,bytes)
PC address: 3156
Estimated Gas Usage: 41405 - 203154
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:160

n ERC20 The address of the token contract used for

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c0040002020008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f8f8f8f8f8f8f8f8f8f8f8f8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stakeFor(address,uint256,bytes), txdata: 0x0ef9635600000000000000000000000000000000000000000000000000000000000000000d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 3556
Estimated Gas Usage: 41347 - 203096
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:346

;

    emit Staked(
      _addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 3648
Estimated Gas Usage: 41347 - 203096
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:350

_amount,
      totalStakedFor(_address

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 3662
Estimated Gas Usage: 41347 - 203096
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:350

_amount,
      totalStakedFor(_address

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 3735
Estimated Gas Usage: 41347 - 203096
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:356

 withdraw stakes for the msg.sender
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 3818
Estimated Gas Usage: 41347 - 203096
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:352


  }

  /**
   * @dev Helper function to withdraw stakes for the msg.sender
   * @param _a

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 3959
Estimated Gas Usage: 41347 - 203096
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 3963
Estimated Gas Usage: 41347 - 203096
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 4006
Estimated Gas Usage: 41347 - 203096
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:357

int256 The amount to withdraw. MUST match the stake amount for the
   *  stake at personalStakeIndex.
   * @param _data bytes optional data to include i

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 4016
Estimated Gas Usage: 41347 - 203096
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:357

int256 The amount to withdraw. MUST match the stake amount for the
   *  stake at personalStakeIndex.
   * @param _data bytes optional data to include i

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 4033
Estimated Gas Usage: 41347 - 203096
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:357

int256 The amount to withdraw. MUST match the stake amount for the
   *  stake at personalStakeIndex.
   * @param _data bytes optional data to include i

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 4086
Estimated Gas Usage: 41347 - 203096
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:357

int256 The amount to withdraw. MUST match the stake amount for the
   *  stake at personalStakeIndex.
   * @param _data bytes optional data to include i

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 888888888888888888888888deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2120088084080510d80c2a0180208002801c880112821a0180808001c4028010ff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicStakingContract
Function name: unstake(uint256,bytes) or unstake(uint256,bytes) or unstake(uint256,bytes)
PC address: 4447
Estimated Gas Usage: 2445 - 5507
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:252

ess
   */
  function totalStakedFor(address 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000502, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unstake(uint256,bytes), txdata: 0xc8fd6ed0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 5778
Estimated Gas Usage: 17049 - 96611
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:84

 indexed user,

--------------------
Initial State:

Account: [CREATOR], balance: 0x1400012c017003003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256,bytes), txdata: 0x0e89439b89, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicStakingContract
Function name: stake(uint256,bytes) or stake(uint256,bytes) or stake(uint256,bytes)
PC address: 5779
Estimated Gas Usage: 17059 - 96621
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:358

 *  stake at personalStakeIndex.
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 20202020202020202020202000000000000000000000000000000000000000809a, value: 0x0
Caller: [ATTACKER], function: stake(uint256,bytes), txdata: 0x0e89439b2c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicStakingContract
Function name: stakeFor(address,uint256,bytes) or stakeFor(address,uint256,bytes) or stakeFor(address,uint256,bytes)
PC address: 5779
Estimated Gas Usage: 17115 - 96677
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/bb52971d42b889b2746e3ca3788db051.sol:358

 *  stake at personalStakeIndex.
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 636363636363636363636363800800200000040200100800010080080020408088, value: 0x0
Caller: [ATTACKER], function: stakeFor(address,uint256,bytes), txdata: 0x0ef963560000000000000000000000000180400801000408042000000000200408800010c6, value: 0x0