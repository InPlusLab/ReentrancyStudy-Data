==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FDCStimulus
Function name: getStimulusVersion()
PC address: 318
Estimated Gas Usage: 2342 - 4083
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/41a9fbc758059285e3191a5c89bb143b.sol:45
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getStimulusVersion(), txdata: 0x3bec9d8e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FDCStimulus
Function name: stimulus(address)
PC address: 791
Estimated Gas Usage: 13229 - 107250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stimulus(address), txdata: 0x6c95f7e20000000000000000000000000000000000000000000000000080000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FDCStimulus
Function name: stimulus(address)
PC address: 1000
Estimated Gas Usage: 13229 - 107250
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/41a9fbc758059285e3191a5c89bb143b.sol:27

ol success

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: stimulus(address), txdata: 0x6c95f7e20000000000000000000000000000000004800000000000008000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FDCStimulus
Function name: stimulus(address)
PC address: 1012
Estimated Gas Usage: 13229 - 107250
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/41a9fbc758059285e3191a5c89bb143b.sol:27

eWithSelect

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: stimulus(address), txdata: 0x6c95f7e20000000000000000000000000000000004800000000000008000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FDCStimulus
Function name: stimulus(address)
PC address: 1067
Estimated Gas Usage: 13229 - 107250
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/41a9fbc758059285e3191a5c89bb143b.sol:28

ire(succes

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: stimulus(address), txdata: 0x6c95f7e20000000000000000000000000000000004800000000000008000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FDCStimulus
Function name: stimulus(address)
PC address: 1173
Estimated Gas Usage: 13229 - 107250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stimulus(address), txdata: 0x6c95f7e20000000000000000000000000000000000000000000001000100008040004020, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FDCStimulus
Function name: stimulus(address)
PC address: 1237
Estimated Gas Usage: 13229 - 107250
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/41a9fbc758059285e3191a5c89bb143b.sol:27

eWithSelector(bytes4(keccak256(bytes('transfer(address,uint256)'))), Address, DappReward));
        require(successT

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stimulus(address), txdata: 0x6c95f7e20000000000000000000000000000000000800002000000008000008000800000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FDCStimulus
Function name: stimulus(address)
PC address: 1237
Estimated Gas Usage: 13229 - 107250
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/41a9fbc758059285e3191a5c89bb143b.sol:27

eWithSelector(bytes4(keccak256(bytes('transfer(address,uint256)'))), Address, DappReward));
        require(successT

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: stimulus(address), txdata: 0x6c95f7e20000000000000000000000000000000004800000000000008000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FDCStimulus
Function name: stimulus(address)
PC address: 1383
Estimated Gas Usage: 13229 - 107250
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/41a9fbc758059285e3191a5c89bb143b.sol:29

 true;
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: stimulus(address), txdata: 0x6c95f7e20000000000000000000000000000000004800000000000008000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: FDCStimulus
Function name: stimulus(address)
PC address: 1395
Estimated Gas Usage: 13229 - 107250
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/41a9fbc758059285e3191a5c89bb143b.sol:29

 true;
        return true;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: stimulus(address), txdata: 0x6c95f7e20000000000000000000000000000000004800000000000008000000000000000, value: 0x0