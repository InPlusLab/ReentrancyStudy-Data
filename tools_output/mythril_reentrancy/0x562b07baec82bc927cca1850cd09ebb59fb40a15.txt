==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AtomicSwap
Function name: fallback
PC address: 1442
Estimated Gas Usage: 42228 - 203738
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:330

 _price, uint256 _amount, Direction _direction) public {
        require(_price > minimumPrice, "Pri

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: forceCloseSwap(uint256), txdata: 0x0045c08e0000000000000000000000000000000000000001000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 5472
Estimated Gas Usage: 2153 - 2578
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:337

unt <= awxContract.allowanc

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb84010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6241
Estimated Gas Usage: 47765 - 262050
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:349

aps[swapId] = swap;
        emit Open(swapId);
        swapI

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000080000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010101010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6241
Estimated Gas Usage: 47765 - 262050
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:349

aps[swapId] = swap;
        emit Open(swapId);
        swapI

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010101010101010101010101010101010101010101011d62ed3e00000000000000000000000101000000000055505100000002adbefe0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6361
Estimated Gas Usage: 47765 - 262050
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

msg.se

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6383
Estimated Gas Usage: 47765 - 262050
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

nsfer(msg.sender,(sw

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6391
Estimated Gas Usage: 47765 - 262050
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

nsfer(msg.sender,(sw

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6400
Estimated Gas Usage: 47765 - 262050
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

nsfer(msg.sender,(sw

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6411
Estimated Gas Usage: 47765 - 262050
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

nsfer(msg.sender,(sw

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6440
Estimated Gas Usage: 47765 - 262050
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

nsfer(msg.sender,(sw

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6453
Estimated Gas Usage: 47765 - 262050
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

nsfer(msg.sender,(sw

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6501
Estimated Gas Usage: 47765 - 262050
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

nsfer(msg.sender,(sw

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6557
Estimated Gas Usage: 47765 - 262050
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

nsfer(msg.sender,(sw

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6562
Estimated Gas Usage: 47765 - 262050
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

ul(swa

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6620
Estimated Gas Usage: 47765 - 262050
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

(priceMu

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: AtomicSwap
Function name: openSwap(uint256,uint256,uint8)
PC address: 6625
Estimated Gas Usage: 47765 - 262050
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dbebfe0dec39ef2ed4ceac521694e00e.sol:360

(priceMu

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: openSwap(uint256,uint256,uint8), txdata: 0xf854bb8401010101010101010101010102010101010101010101010101010101010101011d62ed3e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab0000000000000000000000000000000000000000000000000000000000000001, value: 0x0