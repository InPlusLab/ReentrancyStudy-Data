==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ReInsuranceVault
Function name: constructor
PC address: 748
Estimated Gas Usage: 61123 - 320288
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:543

   }

    function depositAave(uint _amoun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReInsuranceVault
Function name: withdrawInterest(uint256)
PC address: 1756
Estimated Gas Usage: 12539 - 153436
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:593

sitor
    **/
    function getLifetimeProfit() external view returns

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0004000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6666666666666666666666660000000000000000000000000000000000000000666666666666666666666666deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawInterest(uint256), txdata: 0x08669aab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReInsuranceVault
Function name: withdrawInterest(uint256)
PC address: 2645
Estimated Gas Usage: 12539 - 153436
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:582

t256) {
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6666666666666666666666660000000000000000000000000000000000000000666666666666666666666666deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawInterest(uint256), txdata: 0x08669aab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ReInsuranceVault
Function name: withdrawInterest(uint256)
PC address: 2809
Estimated Gas Usage: 12539 - 153436
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:582

rns (uint256) {
        return IAToken(ADAI_ADDRESS).balanceOf(

--------------------
Initial State:

Account: [CREATOR], balance: 0x181040000001400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawInterest(uint256), txdata: 0x08669aab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReInsuranceVault
Function name: withdrawInterest(uint256)
PC address: 2880
Estimated Gas Usage: 12539 - 153436
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:584

}

    funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6666666666666666666666660000000000000000000000000000000000000000666666666666666666666666deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawInterest(uint256), txdata: 0x08669aab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReInsuranceVault
Function name: withdraw(uint256)
PC address: 2994
Estimated Gas Usage: 8849 - 114144
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:583

));
    }

    function getLendingAPY

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7d7d7d7d7d7d7d7d7d7d7d7d00048000000208000100010000000000000000007d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReInsuranceVault
Function name: withdrawInterest(uint256)
PC address: 2994
Estimated Gas Usage: 12539 - 153436
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:583

));
    }

    function getLendingAPY

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0004000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6666666666666666666666660000000000000000000000000000000000000000666666666666666666666666deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawInterest(uint256), txdata: 0x08669aab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ReInsuranceVault
Function name: withdraw(uint256)
PC address: 2994
Estimated Gas Usage: 8849 - 114144
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:583

));
    }

    function getLendingAPY

--------------------
Initial State:

Account: [CREATOR], balance: 0x80001000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReInsuranceVault
Function name: withdrawInterest(uint256)
PC address: 2994
Estimated Gas Usage: 12539 - 153436
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:583

));
    }

    function getLendingAPY

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6666666666666666666666660000000000000000000000000000000000000000666666666666666666666666deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawInterest(uint256), txdata: 0x08669aab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReInsuranceVault
Function name: withdraw(uint256)
PC address: 3021
Estimated Gas Usage: 8849 - 114144
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:587

liquidityRa

--------------------
Initial State:

Account: [CREATOR], balance: 0x2180200000000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7d7d7d7d7d7d7d7d7d7d7d7d00000000000000000000000000000000000000007d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReInsuranceVault
Function name: withdraw(uint256)
PC address: 3187
Estimated Gas Usage: 8849 - 114144
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:587

nt256 liquidityRate,,,,,,,,) = ILendingPool

--------------------
Initial State:

Account: [CREATOR], balance: 0x3bfa470000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7d7d7d7d7d7d7d7d7d7d7d7d00000000100080800000800002020204008000017d7d7d7d7d7d7d7d7d7d7d7d00010000000000000000010000000000000000007d7d7d7d7d7d7d7d7d7d7d7d02010101010408102010800080040800800080107d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReInsuranceVault
Function name: withdrawInterest(uint256)
PC address: 3187
Estimated Gas Usage: 12539 - 153436
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:587

nt256 liquidityRate,,,,,,,,) = ILendingPool

--------------------
Initial State:

Account: [CREATOR], balance: 0xffffc000080000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 666666666666666666666666020000000100808000004000800002008000000066666666666666666666666600000000000001000000020002000000000000006666666666666666666666660204002008800002000420020000000001010104666666666666666666666666deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawInterest(uint256), txdata: 0x08669aab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReInsuranceVault
Function name: withdraw(uint256)
PC address: 3187
Estimated Gas Usage: 8849 - 114144
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:587

nt256 liquidityRate,,,,,,,,) = ILendingPool

--------------------
Initial State:

Account: [CREATOR], balance: 0x2180200000000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7d7d7d7d7d7d7d7d7d7d7d7d00000000000000000000000000000000000000007d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReInsuranceVault
Function name: withdrawInterest(uint256)
PC address: 5515
Estimated Gas Usage: 12539 - 153436
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9d1eead9cf2ace0f81a1e51714f3ecf8.sol:74

ts/access/roles/Whit

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6666666666666666666666660000000000000000000000000000000000000000666666666666666666666666deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawInterest(uint256), txdata: 0x08669aab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0