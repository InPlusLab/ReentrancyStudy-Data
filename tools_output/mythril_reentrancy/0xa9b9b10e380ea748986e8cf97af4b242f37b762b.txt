==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LogicContract
Function name: buyShip(uint256,address)
PC address: 2663
Estimated Gas Usage: 6480 - 78836
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/11ed28642f9ddf82c3217e0a6447bb40.sol:397

 function withdrawRefu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyShip(uint256,address), txdata: 0x8b3ac630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LogicContract
Function name: buyShip(uint256,address)
PC address: 2773
Estimated Gas Usage: 6480 - 78836
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/11ed28642f9ddf82c3217e0a6447bb40.sol:397

 function withdrawRefund(address _owner) public addressIsNotNull(_owner) 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyShip(uint256,address), txdata: 0x8b3ac630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LogicContract
Function name: getShipById(uint256)
PC address: 3464
Estimated Gas Usage: 3488 - 40637
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getShipById(uint256), txdata: 0xe9559803, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LogicContract
Function name: buyShip(uint256,address)
PC address: 3754
Estimated Gas Usage: 6480 - 78836
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/11ed28642f9ddf82c3217e0a6447bb40.sol:401

nce, curRefVal) > 0) {

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyShip(uint256,address), txdata: 0x8b3ac630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LogicContract
Function name: buyShip(uint256,address)
PC address: 3975
Estimated Gas Usage: 6480 - 78836
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/11ed28642f9ddf82c3217e0a6447bb40.sol:401

nce, curRefVal) > 0) {

            uint256 refund = eternalStorageContr

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyShip(uint256,address), txdata: 0x8b3ac630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LogicContract
Function name: buyShip(uint256,address)
PC address: 3975
Estimated Gas Usage: 6480 - 78836
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/11ed28642f9ddf82c3217e0a6447bb40.sol:401

nce, curRefVal) > 0) {

            uint256 refund = eternalStorageContr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyShip(uint256,address), txdata: 0x8b3ac630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x0


