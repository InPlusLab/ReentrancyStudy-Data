==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PromTokenVault
Function name: getCommunityReleasable()
PC address: 4877
Estimated Gas Usage: 2260 - 2355
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:345

lock.timestamp >= TGE_timestamp){
            uint256 totalReleasable = token.totalSupply().div(100).mul(5);
            uint256 firstPar

--------------------
Initial State:

Account: [CREATOR], balance: 0x800c0000081713, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCommunityReleasable(), txdata: 0x540cf01a, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PromTokenVault
Function name: getTeamAvailable()
PC address: 5499
Estimated Gas Usage: 3826 - 4441
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:300

     return 0;
        }
    }

    // TODO: unlocks after 13 month, not 12
    // COMPANY; 15% for company reserve; 100% are locked for 12 month, then vesting 3% per month
    function getCompanyReleasable() public view returns(uint256){
        uint256 unlockDate = TGE_timestamp.add(MONTH.mul(12));
        if(now >= unlo

--------------------
Initial State:

Account: [CREATOR], balance: 0x40181080110088289, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getTeamAvailable(), txdata: 0x08a749ff, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PromTokenVault
Function name: getEcosystemReleasable()
PC address: 6833
Estimated Gas Usage: 1322 - 1417
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:350

e.div(100).mul(getPercentReleasable(releases.mul(25),75));
            currentlyReleasable = firstPart.add(secondPart);
        }
        return currentlyReleasable;
    }
    function incrementReleased(bytes4 _key, uint256 _amount) internal{
        alreadyWithdrawn[_key]=alreadyWithdrawn[_key].add(_amount);
    }
    /**
     * @dev Transfer all tokens intended for respective part of crowdsale to the wallet which will be distribute these tokens
     */ 
    function release

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getEcosystemReleasable(), txdata: 0x82b8969b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PromTokenVault
Function name: getLiquidityAvailable()
PC address: 7496
Estimated Gas Usage: 2834 - 3449
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:292

per month
    function getTeamReleasable() public view returns(uint256){
        uint256 unlockDate = TGE_timestamp.add(MONTH.mul(12));
        if(block.timestamp >= unlockDate){
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getLiquidityAvailable(), txdata: 0x4696e5f3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PromTokenVault
Function name: getLiquidityAvailable()
PC address: 7655
Estimated Gas Usage: 3033 - 3929
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:293

urns(uint256){
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 303030303030303030303030deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getLiquidityAvailable(), txdata: 0x4696e5f3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PromTokenVault
Function name: getTeamAvailable()
PC address: 12726
Estimated Gas Usage: 3774 - 4389
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:298

assed.mul(3)),100));
        }el

--------------------
Initial State:

Account: [CREATOR], balance: 0x21410c0042000082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getTeamAvailable(), txdata: 0x08a749ff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PromTokenVault
Function name: getCommunityReleasable()
PC address: 12726
Estimated Gas Usage: 2208 - 2303
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:344

t256 currentlyReleasable = 0;
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1241010000144003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getCommunityReleasable(), txdata: 0x540cf01a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PromTokenVault
Function name: releaseCommunity()
PC address: 12726
Estimated Gas Usage: 3830 - 4445
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:344

t256 currentlyReleasable = 0;
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c10c014008d519, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: releaseCommunity(), txdata: 0x28f92c34, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PromTokenVault
Function name: getTeamReleasable()
PC address: 12726
Estimated Gas Usage: 2280 - 2375
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:298

assed.mul(3)),100));
        }el

--------------------
Initial State:

Account: [CREATOR], balance: 0x441c001811884d403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getTeamReleasable(), txdata: 0x6c011d82, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PromTokenVault
Function name: releaseTeam()
PC address: 12726
Estimated Gas Usage: 3924 - 4539
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/3f9b7e2544c42db1f1101bd8d40a1f4e.sol:298

assed.mul(3)),100));
        }el

--------------------
Initial State:

Account: [CREATOR], balance: 0x205, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: releaseTeam(), txdata: 0x4dbc355a, value: 0x0