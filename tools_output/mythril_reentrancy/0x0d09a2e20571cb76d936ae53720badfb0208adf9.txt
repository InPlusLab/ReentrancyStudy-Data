==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenTrader
Function name: takerBuyAsset()
PC address: 749
Estimated Gas Usage: 1763 - 2188
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:575

urn u

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 880
Estimated Gas Usage: 96832 - 380218
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:947

ns from this contract

    //

    // Th

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000010010101010101010101010101010101010101010101010101010101010101021101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenTrader
Function name: takerBuyAsset()
PC address: 916
Estimated Gas Usage: 5061 - 40378
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:571

der * units);

        }

        // Return u

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffff8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffff2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 1052
Estimated Gas Usage: 96832 - 380218
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:963

thdrawn by the maker

    //

    function ownerWithdrawERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool) {

        emit OwnerWithdrew

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 1100
Estimated Gas Usage: 96832 - 380218
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:971

ransfer(owner, tokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 1109
Estimated Gas Usage: 96832 - 380218
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:971

ransfer(owner, tokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 1219
Estimated Gas Usage: 96832 - 380218
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:981

    revert();

    }



    /**

     * @notice A

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd00000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000008000020301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 1219
Estimated Gas Usage: 96832 - 380218
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:981

    revert();

    }



    /**

     * @notice A

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: TokenTrader
Function name: fallback
PC address: 1394
Estimated Gas Usage: 4194 - 40190
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: makerWithdrawEther(uint256), txdata: 0x2170ebf7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenTraderFactory
Function name: sellPrice()
PC address: 1550
Estimated Gas Usage: 4803 - 41693
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:1030


            if (addressLinkedList[current]

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ownerWithdrawERC20Token(address,uint256), txdata: 0x5de01497000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 2805
Estimated Gas Usage: 96832 - 380218
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:1061



    }



    /**

  

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 2827
Estimated Gas Usage: 96832 - 380218
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:1058




        accountCount--;

    }



    /**

  

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 2860
Estimated Gas Usage: 96832 - 380218
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:1058




        accountCount--;

    }



    /**

  

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 2865
Estimated Gas Usage: 96832 - 380218
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:1069

Make sure that this address e

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 2873
Estimated Gas Usage: 96832 - 380218
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:1069

Make sure that this address e

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 2877
Estimated Gas Usage: 96832 - 380218
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:1069

linked list

 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenTraderFactory
Function name: createTradeContract(address,uint256,uint256,uint256,bool,bool)
PC address: 2882
Estimated Gas Usage: 96832 - 380218
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:1069

linked list

 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe808400800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createTradeContract(address,uint256,uint256,uint256,bool,bool), txdata: 0x3d6a32bd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000002808080808080808080021001400101010101010201010101010101010101010301, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenTrader
Function name: takerSellAsset(uint256)
PC address: 3261
Estimated Gas Usage: 2865 - 3290
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/be4931f3b1d10505caf18ddd023bbf58.sol:663

t();

    }

}



// This co

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: takerSellAsset(uint256), txdata: 0xeff883bd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenTrader
Function name: takerSellAsset(uint256)
PC address: 3277
Estimated Gas Usage: 3704 - 4129
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: takerSellAsset(uint256), txdata: 0xeff883bd, value: 0x0