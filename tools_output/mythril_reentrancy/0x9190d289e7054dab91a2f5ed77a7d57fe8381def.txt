==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KOLWithDraw
Function name: fallback
PC address: 1117
Estimated Gas Usage: 2343 - 4414
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:253

05 ether;
  uint8 public fee = 5;



--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: KOLWithDraw
Function name: draw()
PC address: 1313
Estimated Gas Usage: 3342 - 38520
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:481
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(), txdata: 0x0eecae21, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KOLWithDraw
Function name: queryInviteBonus(address)
PC address: 5296
Estimated Gas Usage: 8283 - 115556
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:325

;
    }else
      return 0;
  }
  function queryTeamBonus(address _addr) public view returns(uint256){
    uint256 last = kolp.getLockTeamBonusLen(_addr);
    if(last>0){
      uint256 yestodayLastSecond = kolp.getYestodayLastSecond(now);
      uint256 lastingDays;
      uint256 newDayTeamTotalBonu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c0000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: queryInviteBonus(address), txdata: 0xd461d2f0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KOLWithDraw
Function name: calcuAllBonus(bool)
PC address: 6386
Estimated Gas Usage: 18033 - 232994
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:303

    }
    }
    return (selfBonus);

  }

  function queryInviteBonus(address _addr) public view returns(uint256){
    uint256 last = kolp.getLockInviteBonusLen(_addr);
    if(last>0){
      uint25

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calcuAllBonus(bool), txdata: 0x2e6d7c9e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 6999
Estimated Gas Usage: 9543 - 117847
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:337

.totalTeamBonus,theDayTB.theDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x620, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7054
Estimated Gas Usage: 9543 - 117847
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:338

-;
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7134
Estimated Gas Usage: 9543 - 117847
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:338

-;
        if (theDayTB.theDayL

--------------------
Initial State:

Account: [CREATOR], balance: 0x620, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7134
Estimated Gas Usage: 9543 - 117847
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:338

-;
        if (theDayTB.theDayL

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7134
Estimated Gas Usage: 9543 - 117847
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:338

-;
        if (theDayTB.theDayL

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7228
Estimated Gas Usage: 9543 - 117847
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:342

turn

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7288
Estimated Gas Usage: 9543 - 117847
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:342

s);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7342
Estimated Gas Usage: 9543 - 117847
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:342

turn (newDayTeamTotalBonus);
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x620, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7342
Estimated Gas Usage: 9543 - 117847
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:342

turn (newDayTeamTotalBonus);
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7440
Estimated Gas Usage: 8502 - 116153
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:345

0;
    }else
      return 0;

  }
  function afterWithdraw(address _addr,uint256 _amount) private {
    address father;
    uint256 fathersLen = kolp.getFathersLength(_addr);
    for (uint i = 0; i<fathersLen; i++){
      father = kolp.InviteList(_addr,i);
      kolp.subTotalUsers(father);
      kolp.subTotalLockingAmo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7443
Estimated Gas Usage: 9543 - 117847
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:352

6 fat

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KOLWithDraw
Function name: queryTeamBonus(address)
PC address: 7481
Estimated Gas Usage: 9543 - 117847
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/7a0354cf5e5ba4cb08b651d02e3749ab.sol:352

);
    for (uint i = 0; i<fathersLen; 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000040001108, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: queryTeamBonus(address), txdata: 0xf88c6c03, value: 0x0