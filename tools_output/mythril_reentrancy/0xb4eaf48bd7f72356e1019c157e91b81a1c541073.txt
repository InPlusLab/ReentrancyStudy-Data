==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ApeBullInu
Function name: setWebThree(address)
PC address: 3803
Estimated Gas Usage: 3048 - 38035
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/71b6f6c7f7fe09143f2e324a527e4bbd.sol:236

AntiBot = FTPAntiBot(m_AntibotSvcAddress);
        initTax();


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setWebThree(address), txdata: 0xf37c4bce0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ApeBullInu
Function name: setWebThree(address)
PC address: 3807
Estimated Gas Usage: 8951 - 63938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/71b6f6c7f7fe09143f2e324a527e4bbd.sol:237

nitTax();


--------------------
Initial State:

Account: [CREATOR], balance: 0x2000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setWebThree(address), txdata: 0xf37c4bce0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ApeBullInu
Function name: setWebThree(address)
PC address: 3832
Estimated Gas Usage: 3062 - 38049
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/71b6f6c7f7fe09143f2e324a527e4bbd.sol:235


        AntiBot = FTPAntiBot(m_AntibotSvcAddress);
        initTax();

        m_Balanc

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setWebThree(address), txdata: 0xf37c4bce0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ApeBullInu
Function name: setWebThree(address)
PC address: 3891
Estimated Gas Usage: 8951 - 63938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/71b6f6c7f7fe09143f2e324a527e4bbd.sol:444
Initial State:

Account: [CREATOR], balance: 0x2000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setWebThree(address), txdata: 0xf37c4bce0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ApeBullInu
Function name: setWebThree(address)
PC address: 3919
Estimated Gas Usage: 8951 - 63938
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/71b6f6c7f7fe09143f2e324a527e4bbd.sol:444
Initial State:

Account: [CREATOR], balance: 0x2000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setWebThree(address), txdata: 0xf37c4bce0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ApeBullInu
Function name: updateDevWallet(address,uint256)
PC address: 4615
Estimated Gas Usage: 30700 - 111931
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/71b6f6c7f7fe09143f2e324a527e4bbd.sol:86

  }                                                                 

--------------------
Initial State:

Account: [CREATOR], balance: 0x4200008050209a65c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateDevWallet(address,uint256), txdata: 0xab9562fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ApeBullInu
Function name: transfer(address,uint256)
PC address: 6191
Estimated Gas Usage: 4154 - 4819
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/71b6f6c7f7fe09143f2e324a527e4bbd.sol:289

    }
    function _walletCapped(address _recipient) privat

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101, value: 0x0