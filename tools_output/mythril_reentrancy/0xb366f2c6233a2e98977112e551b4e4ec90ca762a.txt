==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenPool
Function name: getContractBalance()
PC address: 417
Estimated Gas Usage: 4649 - 76174
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:266

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0
Caller: [ATTACKER], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenPool
Function name: getContractBalance()
PC address: 417
Estimated Gas Usage: 4649 - 76174
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:266

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 835
Estimated Gas Usage: 15083 - 237282
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:359

Y_STORAGE_CONTRACT.get

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 929
Estimated Gas Usage: 15083 - 237282
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:359

Y_STORAGE_CONTRACT.getBool(keyHash);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 929
Estimated Gas Usage: 15083 - 237282
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:359

Y_STORAGE_CONTRACT.getBool(keyHash);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: addWhitelistedAddress(address)
PC address: 1229
Estimated Gas Usage: 5860 - 81858
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:328

Y_STORAGE_CONTRACT.set

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addWhitelistedAddress(address), txdata: 0x29975b43, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: addWhitelistedAddress(address)
PC address: 1327
Estimated Gas Usage: 5860 - 81858
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:328

Y_STORAGE_CONTRACT.setBool(keyHash, true);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addWhitelistedAddress(address), txdata: 0x29975b43, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: removeWhitelistedAddress(address)
PC address: 1327
Estimated Gas Usage: 5900 - 81898
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:328

Y_STORAGE_CONTRACT.setBool(keyHash, true);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeWhitelistedAddress(address), txdata: 0x530cd5ab, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: addWhitelistedAddress(address)
PC address: 1327
Estimated Gas Usage: 5860 - 81858
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:328

Y_STORAGE_CONTRACT.setBool(keyHash, true);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addWhitelistedAddress(address), txdata: 0x29975b43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: removeWhitelistedAddress(address)
PC address: 1327
Estimated Gas Usage: 5900 - 81898
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:328

Y_STORAGE_CONTRACT.setBool(keyHash, true);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeWhitelistedAddress(address), txdata: 0x530cd5ab, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: removeWhitelistedAddress(address)
PC address: 1605
Estimated Gas Usage: 5900 - 81898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:343

Y_STORAGE_CONTRACT.set

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removeWhitelistedAddress(address), txdata: 0x530cd5ab, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: getContractBalance()
PC address: 1889
Estimated Gas Usage: 4771 - 76626
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:266

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: getContractBalance()
PC address: 1889
Estimated Gas Usage: 4771 - 76626
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:266

20(twoKeyEconomy).balanceOf(address(this));
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 2176
Estimated Gas Usage: 15083 - 237282
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:377

KeyAdmin(twoKeyAdmin).getTwoKeyRewardsReleaseDate() <= 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 2176
Estimated Gas Usage: 15083 - 237282
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:377

KeyAdmin(twoKeyAdmin).getTwoKeyRewardsReleaseDate() <= 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 2223
Estimated Gas Usage: 7725 - 121621
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:377

ire(ITwoKeyAdmin(twoKeyAdmin).getTwoKeyRewardsReleaseDate() <= block.timestamp);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 2247
Estimated Gas Usage: 15083 - 237282
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:202

KEY_SINGLETON_REGISTRY)
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 2442
Estimated Gas Usage: 12289 - 198326
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:202

KeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)
            .getContractProxyAddress(contractName);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 2442
Estimated Gas Usage: 15083 - 237282
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:202

KeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)
            .getContractProxyAddress(contractName);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 2492
Estimated Gas Usage: 15083 - 237282
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:213

KEY_SINGLETON_REGISTRY)
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 2775
Estimated Gas Usage: 15083 - 237282
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:279

20(twoKeyEconomy).transfer(receiver,amount);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoKeyMPSNMiningPool
Function name: transferTokensFromContract(address,uint256)
PC address: 2775
Estimated Gas Usage: 15083 - 237282
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b05d352918f3c1c8dcc90f1b39981ce3.sol:279

20(twoKeyEconomy).transfer(receiver,amount);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokensFromContract(address,uint256), txdata: 0xd0973af8, value: 0x0