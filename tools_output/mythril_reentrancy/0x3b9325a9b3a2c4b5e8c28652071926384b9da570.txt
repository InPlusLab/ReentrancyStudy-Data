==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ICOStartReservation
Function name: destroy()
PC address: 1894
Estimated Gas Usage: 11211 - 152666
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6bd459f7235f005e48feb65738e09cc4.sol:286

posi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101000101000101010001010100000000000101080101080110010202080101100101020108010101010801020101100801000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001, value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ICOStartReservation
Function name: getToken()
PC address: 1989
Estimated Gas Usage: 2664 - 38497
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/6bd459f7235f005e48feb65738e09cc4.sol:286

posit() and 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getToken(), txdata: 0x21df0da7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ICOStartReservation
Function name: destroy()
PC address: 1989
Estimated Gas Usage: 11211 - 152666
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/6bd459f7235f005e48feb65738e09cc4.sol:286

posit() and 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101020101010101000101010000010101000201010120000101000101010100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ICOStartReservation
Function name: destroy()
PC address: 1989
Estimated Gas Usage: 11211 - 152666
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6bd459f7235f005e48feb65738e09cc4.sol:286

posit() and 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101000101000101010001010100000000000101080101080110010202080101100101020108010101010801020101100801000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001, value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ICOStartReservation
Function name: destroy()
PC address: 2748
Estimated Gas Usage: 11211 - 152666
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6bd459f7235f005e48feb65738e09cc4.sol:390
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010001010001010400000101010010010101010001010101010100010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ICOStartReservation
Function name: destroy()
PC address: 2861
Estimated Gas Usage: 11211 - 152666
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6bd459f7235f005e48feb65738e09cc4.sol:388


   }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0101010001010001010400000101010010010101010001010101010100010101000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ICOStartReservation
Function name: destroy()
PC address: 2906
Estimated Gas Usage: 11211 - 152666
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6bd459f7235f005e48feb65738e09cc4.sol:390
Initial State:

Account: [CREATOR], balance: 0x1000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010101000101000101010001010100000000000101080101080110010202080101100101020108010101010801020101100801000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001, value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0