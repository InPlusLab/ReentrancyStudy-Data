==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: constructor
PC address: 632
Estimated Gas Usage: 57333 - 279914
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:128

andom number using a specified block num

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000044, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 3526
Estimated Gas Usage: 13098 - 104157
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:378

HTKN.transfer(owner, contractBal

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 3594
Estimated Gas Usage: 13098 - 104157
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:379

    selfdestruct(owner);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 3647
Estimated Gas Usage: 13098 - 104157
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:379

    selfdestruct(owner);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 3654
Estimated Gas Usage: 13098 - 104157
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:382

functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 3880
Estimated Gas Usage: 13098 - 104157
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:382

function dumpdivs() public{
      Ze

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 3880
Estimated Gas Usage: 13098 - 104157
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:382

function dumpdivs() public{
      Ze

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080080000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerSetBankroll(address)
PC address: 3880
Estimated Gas Usage: 13098 - 104157
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:382

function dumpdivs() public{
      Ze

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetBankroll(address), txdata: 0x7c67ffe7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Zethroll
Function name: tokenFallback(address,uint256,bytes) or tokenFallback(address,uint256,bytes)
PC address: 4475
Estimated Gas Usage: 2844 - 6847
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1eaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a0000000000000000000000004040080140080404200404400802108010401010000000000000000000000000000004000808008008001020400200008000000240, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: ownerTransferZTH(address,uint256)
PC address: 4961
Estimated Gas Usage: 19886 - 96277
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:360

r
  {
    ZTHTKN.approve(ZethrB

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerTransferZTH(address,uint256), txdata: 0xca9defb7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Zethroll
Function name: ownerkill()
PC address: 5538
Estimated Gas Usage: 6555 - 42627
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:394

fety checks that throw on error
 */
lib

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerkill(), txdata: 0xd263b7eb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Zethroll
Function name: ownerkill()
PC address: 5601
Estimated Gas Usage: 6555 - 42627
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:398

**
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerkill(), txdata: 0xd263b7eb, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Zethroll
Function name: tokenFallback(address,uint256,bytes) or tokenFallback(address,uint256,bytes)
PC address: 5772
Estimated Gas Usage: 19489 - 64659
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:321

n set maxProfitAsPercentOfHouse
  function 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a000000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Zethroll
Function name: ownerTransferZTH(address,uint256)
PC address: 8253
Estimated Gas Usage: 2465 - 2890
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:358

can set bankroll address
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ownerTransferZTH(address,uint256), txdata: 0xca9defb7000000000000000000000000000000000000000000000000000000000000000401, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Zethroll
Function name: tokenFallback(address,uint256,bytes) or tokenFallback(address,uint256,bytes)
PC address: 8253
Estimated Gas Usage: 5636 - 10628
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:154

  uint200 to

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1eaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a01010101010101010101010180, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Zethroll
Function name: tokenFallback(address,uint256,bytes) or tokenFallback(address,uint256,bytes)
PC address: 8360
Estimated Gas Usage: 5810 - 10802
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c499f7acda29adb5b19b5b45110aa033.sol:436
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 1e1e1e1e1e1e1e1e1e1e1e1eaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: tokenFallback(address,uint256,bytes), txdata: 0xc0ee0b8a010101010101010101010101000000000000000000000000000000000000000101, value: 0x0