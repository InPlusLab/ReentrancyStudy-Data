==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 2373
Estimated Gas Usage: 36816 - 195338
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:271

wner = erc721Addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 2470
Estimated Gas Usage: 36816 - 195338
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:275

ice(tokenId);

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 2964
Estimated Gas Usage: 35025 - 192886
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:237

ss.ownerOf(_tokenId) == msg.sender && prices[_toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3003
Estimated Gas Usage: 35025 - 192886
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:237

ss.ownerOf(_tokenId) == msg.sender && prices[_toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3014
Estimated Gas Usage: 35025 - 192886
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:237

ss.ownerOf(_tokenId) == msg.sender && prices[_toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3022
Estimated Gas Usage: 35025 - 192886
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:237

ss.ownerOf(_tokenId) == msg.sender && prices[_toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3060
Estimated Gas Usage: 35025 - 192886
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:237

!= _ethPrice);

      uint256 ethfee;

      if(prices[

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3070
Estimated Gas Usage: 35025 - 192886
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:237

!= _ethPrice);

      uint256 ethfee;

      if(prices[

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3076
Estimated Gas Usage: 35025 - 192886
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:237

!= _ethPrice);

      uint256 ethfee;

      if(prices[

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: setPrice(uint256,uint256,uint256)
PC address: 3081
Estimated Gas Usage: 35025 - 192886
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:237

!= _ethPrice);

      uint256 ethfee;

      if(prices[

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setPrice(uint256,uint256,uint256), txdata: 0xaa585d56, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3341
Estimated Gas Usage: 38809 - 198701
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:287

ew onlyOwner returns (uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3390
Estimated Gas Usage: 38809 - 198701
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:291

ETHFee = _ethFee;

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3396
Estimated Gas Usage: 38809 - 198701
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:293

HBWALLETFee = _hbWall

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3409
Estimated Gas Usage: 38809 - 198701
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:293

Fee;

        return (_ET

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3798
Estimated Gas Usage: 38809 - 198701
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3798
Estimated Gas Usage: 36816 - 195338
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3837
Estimated Gas Usage: 38809 - 198701
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3837
Estimated Gas Usage: 36816 - 195338
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3848
Estimated Gas Usage: 38809 - 198701
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3848
Estimated Gas Usage: 36816 - 195338
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3856
Estimated Gas Usage: 38809 - 198701
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3856
Estimated Gas Usage: 36816 - 195338
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3894
Estimated Gas Usage: 36816 - 195338
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3894
Estimated Gas Usage: 38809 - 198701
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3904
Estimated Gas Usage: 36816 - 195338
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3904
Estimated Gas Usage: 38809 - 198701
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3913
Estimated Gas Usage: 36816 - 195338
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3913
Estimated Gas Usage: 38809 - 198701
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: removePrice(uint256)
PC address: 3918
Estimated Gas Usage: 36816 - 195338
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: removePrice(uint256), txdata: 0x9cd0726a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Bussiness
Function name: getPrice(uint256)
PC address: 3918
Estimated Gas Usage: 38809 - 198701
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f99406c15f19323a8b95c99b6ae501e9.sol:367
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint256), txdata: 0xe7572230, value: 0x0