==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Reward
Function name: constructor
PC address: 142
Estimated Gas Usage: 12026 - 91623
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:171

itelistAddress];

    function joinNetwork(address[6] _con

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Helper
Function name: stringToUint(string)
PC address: 477
Estimated Gas Usage: 561 - 3710
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:737

g _username)

        public

        pure

        returns(bool)

    {

        uint256 len = bytes(_username).length;

        // Im Raum [4, 18]

        if ((len < 4) || (len > 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x804020fb7bd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stringToUint(string), txdata: 0x1bd95155fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Helper
Function name: stringToUint(string)
PC address: 482
Estimated Gas Usage: 561 - 3710
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:737

g _username)

        public

        pure

        returns(bool)

    {

        uint256 len = bytes(_username).length;

        // Im Raum [4, 18]

        if ((len < 4) || (len > 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stringToUint(string), txdata: 0x1bd9515580, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Helper
Function name: stringToUint(string)
PC address: 511
Estimated Gas Usage: 561 - 3710
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:737

g _username)

        public

        pure

        returns(bool)

    {

        uint256 len = bytes(_username).length;

        // Im Raum [4, 18]

        if ((len < 4) || (len > 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x404020bbfbd, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stringToUint(string), txdata: 0x1bd95155ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Reward
Function name: fallback
PC address: 1048
Estimated Gas Usage: 1055 - 1670
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:109

nt256) public pRewardedSum;

    // reward su

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: pReward(address,uint256), txdata: 0x0a1871f9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Reward
Function name: rewardList(uint256)
PC address: 1083
Estimated Gas Usage: 980 - 1075
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:105

lic pReward;

    // reward

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rewardList(uint256), txdata: 0x10d66677, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Helper
Function name: isGoldenMin(uint256)
PC address: 1176
Estimated Gas Usage: 352 - 447
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:967

t256 _timer2 = _fixedEndTime.sub(block

--------------------
Initial State:

Account: [CREATOR], balance: 0x4020fbffc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: isGoldenMin(uint256), txdata: 0x479a345d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Reward
Function name: getRewardInfo(uint256)
PC address: 1338
Estimated Gas Usage: 1228 - 2411
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:563

nstant public S

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRewardInfo(uint256), txdata: 0x243d3827, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Helper
Function name: isJackpot(uint256,uint256,uint256,uint256)
PC address: 1397
Estimated Gas Usage: 411 - 506
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:1133

n buy(string _sSa

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: isJackpot(uint256,uint256,uint256,uint256), txdata: 0x6504f38d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Reward
Function name: getPRewardId(address,uint256)
PC address: 2131
Estimated Gas Usage: 1369 - 2314
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:505

eturns(

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPRewardId(address,uint256), txdata: 0xad6dfe5c, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Reward
Function name: getWinNumberBySlot(uint256,uint256)
PC address: 2552
Estimated Gas Usage: 3067 - 38100
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:455

        view

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getWinNumberBySlot(uint256,uint256), txdata: 0xbfbbfb1d20, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Reward
Function name: getWinNumberBySlot(uint256,uint256)
PC address: 2556
Estimated Gas Usage: 3067 - 38100
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:455

        view

        ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getWinNumberBySlot(uint256,uint256), txdata: 0xbfbbfb1d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Helper
Function name: isGoldenMin(uint256)
PC address: 2617
Estimated Gas Usage: 299 - 394
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a4b96d1d82db58d548b772cc9b487edb.sol:1405
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: isGoldenMin(uint256), txdata: 0x479a345d, value: 0x0