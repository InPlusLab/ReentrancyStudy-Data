==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelistMulti(address[],bool[])
PC address: 1924
Estimated Gas Usage: 6884 - 82641
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1027

(bool) {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelistMulti(address[],bool[]), txdata: 0xa5891bb0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PercentageTransferManager
Function name: modifyWhitelist(address,bool)
PC address: 2055
Estimated Gas Usage: 13073 - 104719
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1027

 returns(bool) {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 060606060606060606060606deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelist(address,bool), txdata: 0x060d206e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PercentageTransferManager
Function name: modifyWhitelistMulti(address[],bool[])
PC address: 2055
Estimated Gas Usage: 6884 - 82641
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1027

 returns(bool) {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x26bc75e2d630ffbfc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelistMulti(address[],bool[]), txdata: 0xa5891bb0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelistMulti(address[],bool[])
PC address: 2055
Estimated Gas Usage: 6884 - 82641
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1027

 returns(bool) {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelistMulti(address[],bool[]), txdata: 0xa5891bb0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelist(address,bool)
PC address: 2164
Estimated Gas Usage: 13073 - 104719
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

nable(f

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 060606060606060606060606deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelist(address,bool), txdata: 0x060d206e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelist(address,bool)
PC address: 2262
Estimated Gas Usage: 13073 - 104719
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1031

   return tru

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 060606060606060606060606deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelist(address,bool), txdata: 0x060d206e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PercentageTransferManager
Function name: modifyWhitelist(address,bool)
PC address: 2516
Estimated Gas Usage: 13073 - 104719
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 060606060606060606060606deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelist(address,bool), txdata: 0x060d206e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PercentageTransferManager
Function name: modifyWhitelist(address,bool)
PC address: 2516
Estimated Gas Usage: 13073 - 104719
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: modifyWhitelist(address,bool), txdata: 0x060d206e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelist(address,bool)
PC address: 2516
Estimated Gas Usage: 13073 - 104719
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 060606060606060606060606deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelist(address,bool), txdata: 0x060d206e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelist(address,bool)
PC address: 2761
Estimated Gas Usage: 13073 - 104719
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1455

 transfer Manager

     */

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 060606060606060606060606deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelist(address,bool), txdata: 0x060d206e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelist(address,bool)
PC address: 2775
Estimated Gas Usage: 13073 - 104719
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1455

 transfer Manager

     */

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 060606060606060606060606deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelist(address,bool), txdata: 0x060d206e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PercentageTransferManager
Function name: changeHolderPercentage(uint256)
PC address: 5139
Estimated Gas Usage: 13013 - 103949
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1027

 returns(bool) {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: changeHolderPercentage(uint256), txdata: 0x66ffebb8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: changeHolderPercentage(uint256)
PC address: 5248
Estimated Gas Usage: 13013 - 103949
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

nable(f

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: changeHolderPercentage(uint256), txdata: 0x66ffebb8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: changeHolderPercentage(uint256)
PC address: 5346
Estimated Gas Usage: 13013 - 103949
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1031

   return tru

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: changeHolderPercentage(uint256), txdata: 0x66ffebb8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PercentageTransferManager
Function name: changeHolderPercentage(uint256)
PC address: 5600
Estimated Gas Usage: 13013 - 103949
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: changeHolderPercentage(uint256), txdata: 0x66ffebb8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PercentageTransferManager
Function name: changeHolderPercentage(uint256)
PC address: 5600
Estimated Gas Usage: 13013 - 103949
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: changeHolderPercentage(uint256), txdata: 0x66ffebb8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: changeHolderPercentage(uint256)
PC address: 5600
Estimated Gas Usage: 13013 - 103949
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: changeHolderPercentage(uint256), txdata: 0x66ffebb8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: changeHolderPercentage(uint256)
PC address: 5809
Estimated Gas Usage: 13013 - 103949
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1439

 setAllowPrimaryIss

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: changeHolderPercentage(uint256), txdata: 0x66ffebb8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: changeHolderPercentage(uint256)
PC address: 5844
Estimated Gas Usage: 13013 - 103949
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1439

blic withPerm(ADMIN) {

        require(_a

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: changeHolderPercentage(uint256), txdata: 0x66ffebb8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PercentageTransferManager
Function name: modifyWhitelistMulti(address[],bool[])
PC address: 6461
Estimated Gas Usage: 6884 - 82641
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1027

 returns(bool) {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x26bc75e2d630ffbfc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelistMulti(address[],bool[]), txdata: 0xa5891bb0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelistMulti(address[],bool[])
PC address: 6570
Estimated Gas Usage: 6884 - 82641
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

nable(f

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelistMulti(address[],bool[]), txdata: 0xa5891bb0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelistMulti(address[],bool[])
PC address: 6668
Estimated Gas Usage: 6884 - 82641
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1031

   return tru

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelistMulti(address[],bool[]), txdata: 0xa5891bb0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PercentageTransferManager
Function name: modifyWhitelistMulti(address[],bool[])
PC address: 6922
Estimated Gas Usage: 6884 - 82641
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x26bc75e2d630ffbfc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelistMulti(address[],bool[]), txdata: 0xa5891bb0, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PercentageTransferManager
Function name: modifyWhitelistMulti(address[],bool[])
PC address: 6922
Estimated Gas Usage: 6884 - 82641
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: modifyWhitelistMulti(address[],bool[]), txdata: 0xa5891bb0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: modifyWhitelistMulti(address[],bool[])
PC address: 6922
Estimated Gas Usage: 6884 - 82641
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: modifyWhitelistMulti(address[],bool[]), txdata: 0xa5891bb0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PercentageTransferManager
Function name: setAllowPrimaryIssuance(bool)
PC address: 8541
Estimated Gas Usage: 14183 - 105779
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1027

 returns(bool) {

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAllowPrimaryIssuance(bool), txdata: 0xe4d5a491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: setAllowPrimaryIssuance(bool)
PC address: 8650
Estimated Gas Usage: 14183 - 105779
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

nable(f

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAllowPrimaryIssuance(bool), txdata: 0xe4d5a491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: setAllowPrimaryIssuance(bool)
PC address: 8748
Estimated Gas Usage: 14183 - 105779
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1031

   return tru

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAllowPrimaryIssuance(bool), txdata: 0xe4d5a491, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PercentageTransferManager
Function name: setAllowPrimaryIssuance(bool)
PC address: 9002
Estimated Gas Usage: 14183 - 105779
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAllowPrimaryIssuance(bool), txdata: 0xe4d5a491, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PercentageTransferManager
Function name: setAllowPrimaryIssuance(bool)
PC address: 9002
Estimated Gas Usage: 14183 - 105779
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x56bc75bfffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x29438a40000000003, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setAllowPrimaryIssuance(bool), txdata: 0xe4d5a491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: setAllowPrimaryIssuance(bool)
PC address: 9002
Estimated Gas Usage: 14183 - 105779
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1029

e fee");

        return true;

    }

}



/**

 * @title Interface to be impl

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAllowPrimaryIssuance(bool), txdata: 0xe4d5a491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: setAllowPrimaryIssuance(bool)
PC address: 9181
Estimated Gas Usage: 14183 - 105779
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1513

row

    function de

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAllowPrimaryIssuance(bool), txdata: 0xe4d5a491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: setAllowPrimaryIssuance(bool)
PC address: 9325
Estimated Gas Usage: 14183 - 105779
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1515

dress);



    /**

     * @notice Type of t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAllowPrimaryIssuance(bool), txdata: 0xe4d5a491, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PercentageTransferManager
Function name: setAllowPrimaryIssuance(bool)
PC address: 9339
Estimated Gas Usage: 14183 - 105779
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1515

dress);



    /**

     * @notice Type of t

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setAllowPrimaryIssuance(bool), txdata: 0xe4d5a491, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PercentageTransferManager
Function name: verifyTransfer(address,address,uint256,bytes,bool) or verifyTransfer(address,address,uint256,bytes,bool)
PC address: 10097
Estimated Gas Usage: 5333 - 43757
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/9a84236ed79b4cf9081ee8930c9f0b9a.sol:1379

lderPercentage = _maxHolderPercentage;

    }



    /**


--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: verifyTransfer(address,address,uint256,bytes,bool), txdata: 0xde6ee1bc0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ad7984e9d3c725b600b8fea743936baf02100080c6, value: 0x0