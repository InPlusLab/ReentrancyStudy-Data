==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Reward
Function name: constructor
PC address: 219
Estimated Gas Usage: 12302 - 91662
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/50ddeab13e319b6be72d43a313c5a755.sol:995

 

        onlyOwner() 

    {

        rest = 8;

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Helper
Function name: stringToUint(string)
PC address: 564
Estimated Gas Usage: 670 - 3819
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/50ddeab13e319b6be72d43a313c5a755.sol:423

begin, uint256 end, string text) public pure returns (string) {

        bytes memory a = new bytes(end-begin+1);

        for(uint i = 0; i <= end - begin; i++){

            a[i] = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stringToUint(string), txdata: 0x1bd95155fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Helper
Function name: stringToUint(string)
PC address: 570
Estimated Gas Usage: 670 - 3819
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/50ddeab13e319b6be72d43a313c5a755.sol:423

begin, uint256 end, string text) public pure returns (string) {

        bytes memory a = new bytes(end-begin+1);

        for(uint i = 0; i <= end - begin; i++){

            a[i] = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40084203f8fbdf7, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stringToUint(string), txdata: 0x1bd95155ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Reward
Function name: pReward(address,uint256)
PC address: 1897
Estimated Gas Usage: 1110 - 1395
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/50ddeab13e319b6be72d43a313c5a755.sol:917

in same block

    uint256 public lastBlock =

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: pReward(address,uint256), txdata: 0x0a1871f9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Reward
Function name: rewardList(uint256)
PC address: 1933
Estimated Gas Usage: 1036 - 1131
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/50ddeab13e319b6be72d43a313c5a755.sol:915

0;

    // last block that 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rewardList(uint256), txdata: 0x10d66677, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: Reward
Function name: getRewardInfo(uint256)
PC address: 2057
Estimated Gas Usage: 1243 - 2096
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getRewardInfo(uint256), txdata: 0x243d3827, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Reward
Function name: getPRewardId(address,uint256)
PC address: 3611
Estimated Gas Usage: 1404 - 1689
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/50ddeab13e319b6be72d43a313c5a755.sol:1309
Initial State:

Account: [CREATOR], balance: 0x49008000100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPRewardId(address,uint256), txdata: 0xad6dfe5c, value: 0x0