==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 5353
Estimated Gas Usage: 57290 - 330938
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:566

Status.Ok,
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b6900000000000000000000000000000000000000000000000000000000000000000000000000780000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 5785
Estimated Gas Usage: 57290 - 330938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:571

        tokenFreezerAddr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 5833
Estimated Gas Usage: 57290 - 330938
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:570

tamp: block.timestamp,
            tokenFreezerAddress: msg.se

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 5842
Estimated Gas Usage: 57290 - 330938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

r(uint32 bridgeTransfer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 5870
Estimated Gas Usage: 57290 - 330938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

r(uint32 bridgeTransfer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 5891
Estimated Gas Usage: 57290 - 330938
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

r(uint32 bridgeTransfer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6010
Estimated Gas Usage: 57290 - 330938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579


        uint _timest

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6059
Estimated Gas Usage: 57290 - 330938
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6069
Estimated Gas Usage: 57290 - 330938
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6086
Estimated Gas Usage: 57290 - 330938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6139
Estimated Gas Usage: 57290 - 330938
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6157
Estimated Gas Usage: 57290 - 330938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6210
Estimated Gas Usage: 57290 - 330938
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6228
Estimated Gas Usage: 57290 - 330938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6249
Estimated Gas Usage: 57290 - 330938
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6267
Estimated Gas Usage: 57290 - 330938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6290
Estimated Gas Usage: 57290 - 330938
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:579

l view returns (
        uint _timestamp,
        uint _value,
        address _erc20ContractAddress,
        address _tokenFreezerAddress,
        uint32 _assetGUID,
        BridgeTransferStatus _status
    ) {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        return (
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SyscoinERC20Manager
Function name: freezeBurnERC20(uint256,uint32,address,uint8,bytes)
PC address: 6335
Estimated Gas Usage: 57290 - 330938
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:590

eTransfer.value,
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: freezeBurnERC20(uint256,uint32,address,uint8,bytes), txdata: 0x5f959b690000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SyscoinERC20Manager
Function name: init(uint8,address)
PC address: 8800
Estimated Gas Usage: 16310 - 58385
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/92909e1b0dc1e9f973c7f0759c7e9012.sol:305

ng it an effective way to detect if a contract is
    // under construction or not.
    uint256 cs;
    assembly { cs := extcodesize(address) }
    return cs == 0;
  }

  // Reserved storage space to allow for layout changes in the future.
  uint256[50] private ______gap;
}

// File: contracts/token/SyscoinERC20Manager.sol

pragma solidity ^0.5.13;




contract SyscoinERC20Manager is Initializable {

    using SafeMath for uint;
    using SafeMath for uint8;

    // Lock 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: init(uint8,address), txdata: 0xf7daeb8500000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000, value: 0x0