==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TorrentShares
Function name: rise() or rise()
PC address: 2270
Estimated Gas Usage: 1871 - 2626
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a2f4a31a422e247c9ea2855fedc5255d.sol:217

s (bool success) {

        return ERC20Interface(tokenAddress).transfer(owner, tokens);

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: rise(), txdata: 0x00e6f349, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TorrentShares
Function name: emitApprove(address,address,uint256) or emitApprove(address,address,uint256)
PC address: 3374
Estimated Gas Usage: 2104 - 2859
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a2f4a31a422e247c9ea2855fedc5255d.sol:191

ess _from, address[] memory dests, uint256[] memory values) public onlyMaster() {

        for (uint i = 0; i < values.length; i++)

            emit T

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: emitApprove(address,address,uint256), txdata: 0x23385089000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TorrentShares
Function name: emitTransfer(address,address,uint256) or emitTransfer(address,address,uint256)
PC address: 4028
Estimated Gas Usage: 2148 - 2903
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a2f4a31a422e247c9ea2855fedc5255d.sol:113

(_from, _to, _value);

    }



    function transfer(address _to, uint256 _tokens) public returns (bool success) {

        return master.tra

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: emitTransfer(address,address,uint256), txdata: 0x23de6651000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TorrentShares
Function name: emitTransfers(address,address[],uint256[]) or emitTransfers(address,address[],uint256[])
PC address: 5305
Estimated Gas Usage: 2922 - 9041
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a2f4a31a422e247c9ea2855fedc5255d.sol:195

m, dests[i], values[i]);

    }



    function () external payable {

        revert();

    }



    function rise() public onlyMaster() returns (bool success) {

        return master.rise(msg.sender);

    }



    function

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000a003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: emitTransfers(address,address[],uint256[]), txdata: 0xd2751bd7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TorrentShares
Function name: emitTransfers(address,address[],uint256[]) or emitTransfers(address,address[],uint256[])
PC address: 5334
Estimated Gas Usage: 3000 - 9305
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a2f4a31a422e247c9ea2855fedc5255d.sol:195

m, dests[i], values[i]);

    }



    function () external payable {

        revert();

    }



    function rise() public onlyMaster() returns (bool success) {

        return master.rise(msg.sender);

    }



    function

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emitTransfers(address,address[],uint256[]), txdata: 0xd2751bd7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TorrentShares
Function name: transferAnyERC20Token(address,uint256)
PC address: 5665
Estimated Gas Usage: 2272 - 3027
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a2f4a31a422e247c9ea2855fedc5255d.sol:223
Initial State:

Account: [CREATOR], balance: 0x1000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferAnyERC20Token(address,uint256), txdata: 0xdc39d06d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TorrentShares
Function name: transferAnyERC20Token(address,uint256)
PC address: 5866
Estimated Gas Usage: 4880 - 40903
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a2f4a31a422e247c9ea2855fedc5255d.sol:223
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,uint256), txdata: 0xdc39d06d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0