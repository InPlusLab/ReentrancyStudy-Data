==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: games(uint256)
PC address: 3069
Estimated Gas Usage: 1036 - 1131
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:195

int256) {

        return

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: games(uint256), txdata: 0x117a5b9080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: gameBars(uint256)
PC address: 3126
Estimated Gas Usage: 1080 - 1175
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:195

getWinnersLen() public view 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: gameBars(uint256), txdata: 0x31cf433480, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Win1Million
Function name: player_withdrawPendingTransactions()
PC address: 4099
Estimated Gas Usage: 12227 - 87359
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:633

te_AddGameBar(uint256 _limit, 

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x23, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_withdrawPendingTransactions(), txdata: 0x7955dd45, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Win1Million
Function name: player_withdrawPendingTransactions()
PC address: 4184
Estimated Gas Usage: 12227 - 87359
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:645

ction private_DelGameBar(uint256 barId) public onlyOw

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000020a1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_withdrawPendingTransactions(), txdata: 0x7955dd45, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: getGamesPlayers(uint256)
PC address: 4239
Estimated Gas Usage: 1237 - 1332
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:213

   function getGamesPlayerBids(uint256 gameId, address playerAddress) public view returns(uint256){

        return games[gameId].Pl

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getGamesPlayers(uint256), txdata: 0x93c0771c02, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: winners(uint256)
PC address: 4935
Estimated Gas Usage: 1300 - 1395
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:197

length;

    }

    

    /

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: winners(uint256), txdata: 0xa2fb1175, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: private_DelGameBar(uint256)
PC address: 5129
Estimated Gas Usage: 2201 - 2626
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:675

nt = _minGamePlayAmount;

    }

    function private_setBankAddress(address _bankAddress) public onlyOwner {

        bankAddress = _bankAddress;

    }

    function private_withdrawBankFunds(address _whereTo) public onlyBanke

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: private_DelGameBar(uint256), txdata: 0xb7e0527704, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: completeGame(uint256,uint256,string,address)
PC address: 5481
Estimated Gas Usage: 2511 - 5523
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:471

     now,

                games[gameId].BarId,

                gameId

            ));

        

        emit completeGameResult(

                gameId,

                games[gameId].BarId,

                _winningNumber,

                _proof,

                winner,

                games[gameId].CurrentTotal,

                now

            );

        

        // reset the bar state...

        gameBars[games[gameId].BarId].CurrentGameId = 0;

        



        

    }

    

    event cancelGame(

            uint256 indexed gameId,

            uint256 indexed barId,

            uint256 amountReturned,

            address playerAddress

            

        );

    // players can cancel their participation in a game as long as it hasn't completed

    // they lose their houseEdge fee (And pay any gas of course)

    function player_cancelGame(uint256 barId) public {

        address _playerAddr = msg.sender;

        uint256 _gameId = gameBars[barId].CurrentGameId

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: completeGame(uint256,uint256,string,address), txdata: 0xd1976a6f32, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: private_UpdateGameBarLimit(uint256,uint256)
PC address: 6485
Estimated Gas Usage: 2294 - 2719
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:691

        }

    }

    function private_withdrawBankFunds(address _whereTo, uint256 _amount) public onlyBanker {

        if(_whereTo.send

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: private_UpdateGameBarLimit(uint256,uint256), txdata: 0xe059c86880, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: getGamesPlayerBids(uint256,address)
PC address: 6527
Estimated Gas Usage: 1446 - 1541
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:223

= msg.sender;

        bankAddress = owner;

        

        // ensure we are above gameBars[0] 

        gameBars.push(Bar(0,0,"","",""));

        

        // an

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getGamesPlayerBids(uint256,address), txdata: 0xe1e7c32080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: player_cancelGame(uint256)
PC address: 6637
Estimated Gas Usage: 1448 - 1543
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:553

layerBalance)){

                // need to add to a retry list...

                playerPendingWithdrawals[_playerAddr] = playerPendingWithdrawals[_playerAddr].add(_gamePlayerBalance);

            } 

        } 

        

        emit cancelGame(

            _gameId,

            barId,

            _gamePlayerBalance,

            _playerAddr

            );

    }

    

    

    function player_withdrawPendingTransactions() public

        returns (bool)

     {

        uint withdrawAmount = playerPendingWithdrawals[msg.sender];

        playerPendingWithdrawals[msg.sender] = 0;



        if (msg.sender.call.value(withdrawAmount)()) {

            return true;

        } else {

            /* if send failed revert playerPendingWithdrawals[msg.sender] = 0; */

            /* player can try to withdraw again later */

            playerPendingWithdrawals[msg.sender] = withdrawAmount;

            return false;

        }

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: player_cancelGame(uint256), txdata: 0xea7858f510, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Win1Million
Function name: playGame(uint256,string,string,string)
PC address: 7497
Estimated Gas Usage: 2963 - 11149
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64a39dac8bd578da9217dbe83fbb7e30.sol:327

 in play for this bar...

        uint256 houseAmt = (msg.value.div(100)).mul(houseEdge);

        uint256 gameAmt = (msg.value.div(100)).mul(100-houseEdge);

        uint256 currentGameId = 0;

        

        

        if(gameBars[barId].CurrentGameId == 0) {

            

            if(gameAmt > gameBars[barId].Limit) {

                require(msg.value == minGamePlayAmount);

            }

            

            address[] memory _addressList;

            games.push(Game(barId, gameAmt, _addressList));

            currentGameId = games.length-1;

            

            gameBars[barId].CurrentGameId = currentGameId;

            

        } else {

            currentGameId = gameBars[barId].CurrentGameId;

            require(games[currentGameId].BarId > 0); // Ensure it hasn't been closed already

            if(games[currentGameId].CurrentTotal.add(gameAmt) > gameBars[barId].Limit) {

                require(msg.value == minGamePlayAmount);

            }

            

            games[currentGameId].CurrentTotal = games[currentGameId].CurrentTotal.add(gameAmt);    

        }

        

        

        

        if(games[currentGameId].PlayerBidMap[msg.sender] == 0) {

            games[currentGameId].PlayerAddressList.push(msg.sender);

        }

        

        games[currentGameId].PlayerBidMap[msg.sender] = games[currentGameId].PlayerBidMap[msg.sender].add(gameAmt);

        

        bankBalance+=houseAmt;

        

        if(games[currentGameId].CurrentTotal >= gameBars[barId].Limit) {



            emit gameComplete(gameBars[barId].CurrentGameId);

            gameBars[barId].CurrentGameId = 0;

        }

        

        

    }

    event completeGameResult(

            uint256 indexed gameId,

            uint256 indexed barId,

            uint256 winningNumber,

            string  proof,

            address winnersAddress,

            uint256 winningAmount,

            uint256 timestamp

        );

    

    // using NotaryProxy to generate random numbers with proofs stored in logs so they can be traced back

    // publish li

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: playGame(uint256,string,string,string), txdata: 0xf2b265ca82, value: 0x0