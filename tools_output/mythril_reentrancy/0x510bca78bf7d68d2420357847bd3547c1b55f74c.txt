==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ConstantReturnStaking
Function name: withdraw(uint256)
PC address: 2451
Estimated Gas Usage: 1103 - 1198
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:568

(address account) private {
        uint pendingDivs = getPendingDivs(account);
        if (pend

--------------------
Initial State:

Account: [CREATOR], balance: 0x6242, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ConstantReturnStaking
Function name: withdraw(uint256)
PC address: 2833
Estimated Gas Usage: 3024 - 3499
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:656

= totalTokens.sub(amountToWithdraw);
        
        if (holders.contains(msg.sender) && depositedTokens[msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000080040008843, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ConstantReturnStaking
Function name: claim()
PC address: 5041
Estimated Gas Usage: 998 - 1093
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:568

(address account) private {
        uint pendingDivs = getPendingDivs(account);
        if (pend

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ConstantReturnStaking
Function name: reInvest()
PC address: 5778
Estimated Gas Usage: 1020 - 1115
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:568

(address account) private {
        uint pendingDivs = getPendingDivs(account);
        if (pend

--------------------
Initial State:

Account: [CREATOR], balance: 0x4843, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: reInvest(), txdata: 0x50be99ad, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ConstantReturnStaking
Function name: emergencyWithdraw(uint256)
PC address: 6433
Estimated Gas Usage: 1124 - 1219
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:568

(address account) private {
        uint pendingDivs = getPendingDivs(account);
        if (pend

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyWithdraw(uint256), txdata: 0x5312ea8e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ConstantReturnStaking
Function name: emergencyWithdraw(uint256)
PC address: 6815
Estimated Gas Usage: 3045 - 3520
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:679

draw);
        totalTokens = totalTokens.sub(amountToWithdraw);
        
        if (holders.contains(msg.sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: emergencyWithdraw(uint256), txdata: 0x5312ea8e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ConstantReturnStaking
Function name: deposit(uint256)
PC address: 8742
Estimated Gas Usage: 1079 - 1174
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:568

(address account) private {
        uint pendingDivs = getPendingDivs(account);
        if (pend

--------------------
Initial State:

Account: [CREATOR], balance: 0x142080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f250000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ConstantReturnStaking
Function name: transferAnyERC20Token(address,address,uint256)
PC address: 10170
Estimated Gas Usage: 1253 - 1678
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:507

ansfer(address, uint) extern

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferAnyERC20Token(address,address,uint256), txdata: 0xd493b9ac000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ConstantReturnStaking
Function name: transferAnyERC20Token(address,address,uint256)
PC address: 10311
Estimated Gas Usage: 1426 - 1851
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:752
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,address,uint256), txdata: 0xd493b9ac000000000000000000000000e14e06671702f0db50055388c29adc66821d933b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConstantReturnStaking
Function name: transferAnyERC20Token(address,address,uint256)
PC address: 10559
Estimated Gas Usage: 3032 - 38114
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:752
Initial State:

Account: [CREATOR], balance: 0x41000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,address,uint256), txdata: 0xd493b9ac000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ConstantReturnStaking
Function name: transferAnyLegacyERC20Token(address,address,uint256)
PC address: 10830
Estimated Gas Usage: 1231 - 1656
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:507

ansfer(address, uint) extern

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000213, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferAnyLegacyERC20Token(address,address,uint256), txdata: 0xf25b8364000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ConstantReturnStaking
Function name: transferAnyLegacyERC20Token(address,address,uint256)
PC address: 10971
Estimated Gas Usage: 1404 - 1829
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:752
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyLegacyERC20Token(address,address,uint256), txdata: 0xf25b8364000000000000000000000000e14e06671702f0db50055388c29adc66821d933b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ConstantReturnStaking
Function name: transferAnyLegacyERC20Token(address,address,uint256)
PC address: 11219
Estimated Gas Usage: 2917 - 37813
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:752
Initial State:

Account: [CREATOR], balance: 0x4040000007d00016, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyLegacyERC20Token(address,address,uint256), txdata: 0xf25b8364000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: ConstantReturnStaking
Function name: transferOwnership(address) or transferOwnership(address)
PC address: 11329
Estimated Gas Usage: 1126 - 1551
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:507

ansfer(address, uint) extern

--------------------
Initial State:

Account: [CREATOR], balance: 0x939080008380803, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ConstantReturnStaking
Function name: withdraw(uint256)
PC address: 11650
Estimated Gas Usage: 2974 - 3449
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:28

 a - b;
  }

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ConstantReturnStaking
Function name: transferAnyLegacyERC20Token(address,address,uint256)
PC address: 12294
Estimated Gas Usage: 1355 - 1780
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:35

}
}

/**
 * @d

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyLegacyERC20Token(address,address,uint256), txdata: 0xf25b8364000000000000000000000000e14e06671702f0db50055388c29adc66821d933b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ConstantReturnStaking
Function name: transferAnyLegacyERC20Token(address,address,uint256)
PC address: 12295
Estimated Gas Usage: 1365 - 1790
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:752
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyLegacyERC20Token(address,address,uint256), txdata: 0xf25b8364000000000000000000000000e14e06671702f0db50055388c29adc66821d933b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ConstantReturnStaking
Function name: transferAnyERC20Token(address,address,uint256)
PC address: 12295
Estimated Gas Usage: 1387 - 1812
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/7f5d87911284806aacccb5a1e5110e60.sol:752
Initial State:

Account: [CREATOR], balance: 0x800003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,address,uint256), txdata: 0xd493b9ac000000000000000000000000e14e06671702f0db50055388c29adc66821d933b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0