==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MassSenderForFork
Function name: fallback
PC address: 94
Estimated Gas Usage: 12281 - 68978
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/582ed7f1f10cf083369623b44380cf50.sol:67

     address[] receivers,

        uint256[] transfers

    ) external {

        require(payment_ids.length == receivers.length);

        require(payment_ids.length == transfers.length);



        for (uint i = 0; i < receivers.length; i++) {

            if (!processedTransactions[msg.sender][payment_ids[i]]) {

                require(fork.transferFrom(msg.sender, receivers[i], transfers[i]));



                processedTransactions[msg.sender][payment_ids[i]] = true;

            }

        }

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bulkTransferFrom(uint32[],address[],uint256[]), txdata: 0x26f3ac13ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc800000000000000000000000000000000000007ffffffffffffffffffffffff380000000000000000000000000001fffffffffffffffffffffffffff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: MassSenderForFork
Function name: fallback
PC address: 117
Estimated Gas Usage: 12281 - 68978
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/582ed7f1f10cf083369623b44380cf50.sol:67

     address[] receivers,

        uint256[] transfers

    ) external {

        require(payment_ids.length == receivers.length);

        require(payment_ids.length == transfers.length);



        for (uint i = 0; i < receivers.length; i++) {

            if (!processedTransactions[msg.sender][payment_ids[i]]) {

                require(fork.transferFrom(msg.sender, receivers[i], transfers[i]));



                processedTransactions[msg.sender][payment_ids[i]] = true;

            }

        }

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000020a02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bulkTransferFrom(uint32[],address[],uint256[]), txdata: 0x26f3ac1380fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff88000000000000000000000000000000000000000000000000000000000000014ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MassSenderForFork
Function name: fallback
PC address: 225
Estimated Gas Usage: 11191 - 67508
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/582ed7f1f10cf083369623b44380cf50.sol:83

rk.transferFrom(msg.sender, receivers[i], transfe

--------------------
Initial State:

Account: [CREATOR], balance: 0xe47408401ea92ca1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bulkTransferFrom(uint32[],address[],uint256[]), txdata: 0x26f3ac138000000000000000000000000000000000000000000000000000000000080040800000000000000000000000000000000000000000000000000000000000003280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MassSenderForFork
Function name: fallback
PC address: 237
Estimated Gas Usage: 11191 - 67508
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/582ed7f1f10cf083369623b44380cf50.sol:87

cess

--------------------
Initial State:

Account: [CREATOR], balance: 0xe47408401ea92ca1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bulkTransferFrom(uint32[],address[],uint256[]), txdata: 0x26f3ac138000000000000000000000000000000000000000000000000000000000080040800000000000000000000000000000000000000000000000000000000000003280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MassSenderForFork
Function name: fallback
PC address: 643
Estimated Gas Usage: 11191 - 67508
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/582ed7f1f10cf083369623b44380cf50.sol:93

   }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0xe47408401ea92ca1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bulkTransferFrom(uint32[],address[],uint256[]), txdata: 0x26f3ac138000000000000000000000000000000000000000000000000000000000080040800000000000000000000000000000000000000000000000000000000000003280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MassSenderForFork
Function name: fallback
PC address: 657
Estimated Gas Usage: 11191 - 67508
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/582ed7f1f10cf083369623b44380cf50.sol:93

   }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0xe47408401ea92ca1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bulkTransferFrom(uint32[],address[],uint256[]), txdata: 0x26f3ac138000000000000000000000000000000000000000000000000000000000080040800000000000000000000000000000000000000000000000000000000000003280, value: 0x0