==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1015
Estimated Gas Usage: 22374 - 265419
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:408

issue in transferrin

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1015
Estimated Gas Usage: 21538 - 264583
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:408

issue in transferrin

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1090
Estimated Gas Usage: 22374 - 265419
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:408

issue in transferring cDAI");
        require

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x40000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1090
Estimated Gas Usage: 21538 - 264583
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:408

issue in transferring cDAI");
        require

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1134
Estimated Gas Usage: 22374 - 265419
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:409

SS.approve(address(C

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1134
Estimated Gas Usage: 21538 - 264583
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:409

SS.approve(address(C

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1137
Estimated Gas Usage: 22374 - 265419
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:409

RESS), 0), "Resettig a

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1137
Estimated Gas Usage: 21538 - 264583
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:409

RESS), 0), "Resettig a

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1225
Estimated Gas Usage: 22374 - 265419
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:409

SS.approve(address(COMPOUND_TOKEN_ADDRESS), 0), "Resettig approval value to 0

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1225
Estimated Gas Usage: 21538 - 264583
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:409

SS.approve(address(COMPOUND_TOKEN_ADDRESS), 0), "Resettig approval value to 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1328
Estimated Gas Usage: 22374 - 265419
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:410

eceived, _toWhomToIssu

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1328
Estimated Gas Usage: 21538 - 264583
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:410

eceived, _toWhomToIssu

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1406
Estimated Gas Usage: 22374 - 265419
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:410

eceived, _toWhomToIssue);
    }

    // fx,

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1406
Estimated Gas Usage: 21538 - 264583
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:410

eceived, _toWhomToIssue);
    }

    // fx,

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1450
Estimated Gas Usage: 22374 - 265419
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:414

 function inCaseTokeng

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1450
Estimated Gas Usage: 21538 - 264583
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:414

 function inCaseTokeng

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1569
Estimated Gas Usage: 22374 - 265419
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:414

lic {
        uint qty

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1569
Estimated Gas Usage: 21538 - 264583
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:414

lic {
        uint qty

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1657
Estimated Gas Usage: 22374 - 265419
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:414

lic {
        uint qty = _TokenAddress.balanceOf(address(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1657
Estimated Gas Usage: 21538 - 264583
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:414

lic {
        uint qty = _TokenAddress.balanceOf(address(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1782
Estimated Gas Usage: 22374 - 265419
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:418

  
    // - fallback

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1782
Estimated Gas Usage: 21538 - 264583
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:418

  
    // - fallback

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1785
Estimated Gas Usage: 22374 - 265419
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:419

 / anyone send ETH to 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1785
Estimated Gas Usage: 21538 - 264583
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:419

 / anyone send ETH to 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: fallback
PC address: 1873
Estimated Gas Usage: 22374 - 265419
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:418

  
    // - fallback function let you / anyone send ETH to this 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x40000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invest2cDAI_NEW
Function name: LetsInvest(address,uint256)
PC address: 1873
Estimated Gas Usage: 21538 - 264583
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0f55574b24fcc7e95ee2a8b3ec7e93b0.sol:418

  
    // - fallback function let you / anyone send ETH to this 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LetsInvest(address,uint256), txdata: 0xe8c949c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0


