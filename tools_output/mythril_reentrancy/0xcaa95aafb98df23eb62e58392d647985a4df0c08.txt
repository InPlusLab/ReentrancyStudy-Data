==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenHolder
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 538
Estimated Gas Usage: 1067 - 1492
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:587

s

    uint256 constant public maxPresaleSupply = 600 * 10**6 * tSLD_UNIT;           // Total presale supply at max bonus

    uint256 constant public minCrowdsaleAllocation = 200 * 10**6 * tSLD_UNIT;     // Min amount for crowdsale

    uint256 constant public inc

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenHolder
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 854
Estimated Gas Usage: 2877 - 38147
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:591

owdsale

    uint256 constant

--------------------
Initial State:

Account: [CREATOR], balance: 0x41400000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359ed1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeefd1d1d1d1d1d1d1d1d1d1d1d101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 982
Estimated Gas Usage: 1079 - 1504
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:497

ITokenHolder is IOwned {

    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;

}



/*

    We consider every co

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenHolder
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 1535
Estimated Gas Usage: 1101 - 1526
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:497

ITokenHolder is IOwned {

    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;

}



/*

    We consider every co

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000003fb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: tSLDToken
Function name: releaseAdvisorTokens()
PC address: 3333
Estimated Gas Usage: 189 - 284
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:691

", 18)

     {

        crowdFundAddr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: releaseAdvisorTokens(), txdata: 0x1367641e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: tSLDToken
Function name: releaseAdvisorTokens()
PC address: 3425
Estimated Gas Usage: 1075 - 1500
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:915

ceOf[crowdFundAddress] = 0;

        balanceOf[incentivisationFundAddress] = safeAdd(balanceOf[incentivisationFundAddress], amountOfTokens);

        totalAllocated = safeAdd(totalAllocated, amountOfTokens);

        Transfer(crowdFundAddress, incentivisationFundAddress, amountOfTokens);

        return true;

    }



    /**

        @dev Keep track of token allocations

        can only be called by the crowdfund contract

    */

    functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: releaseAdvisorTokens(), txdata: 0x1367641e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: tSLDToken
Function name: releasesollidaTeamTokens()
PC address: 3887
Estimated Gas Usage: 242 - 337
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:689

 _crowdFundAddress, address _advisorA

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: releasesollidaTeamTokens(), txdata: 0x186415c0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: tSLDToken
Function name: releasesollidaTeamTokens()
PC address: 3979
Estimated Gas Usage: 1128 - 1553
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:851

nt);

            return true;

        }

        revert();

    }



    /**

        @dev release Advisors Token allocation

        throws if before timelock (2 months) ends or if no initiated by the advisors address

        or if there is no more allocation to give out

        returns true if valid



        @return true if successful, throws if not

    */

    function releaseAdvisorTokens() advisorTimelock ownerOnly returns(bool success) {

        require(totalAllocatedToAdvisors == 0);

        balanceOf[advisorAddress] = safeAdd(balanceOf[advisorAddress], storageAllocation);

        totalAllocated = safeAdd(totalAllocated, storageAllocation);

        totalAllocatedToAdvisors = storageAllocation;

        Transfer(0x0, advisorAddress, storageAllocation);

        return true;

    }



    /**

        @dev Retrieve unsold tokens from the crowdfund

        throws if before timelock (6 months from

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: releasesollidaTeamTokens(), txdata: 0x186415c0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: tSLDToken
Function name: releasesollidaTeamTokens()
PC address: 4088
Estimated Gas Usage: 4503 - 4928
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:877



    function releaseAdvisorTokens() advisorTimelock ownerOnly returns(bool success) {

        require(totalAllocatedToAdvisors == 0);

        balanceOf[advisorAddress] = safeAdd(balanceOf[advisorAddress], storageAllocation);

        totalAllocated = safeAdd(totalAllocated, storageAllocation);

        totalAllocatedToAdvisors = storageAllocation;

        Transfer(0x0, advisorAddress, storageAllocation);

        return true;

    }



    /**

        @dev Retrieve unsold tokens from the crowdfund

        throws if 

--------------------
Initial State:

Account: [CREATOR], balance: 0x400010006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: releasesollidaTeamTokens(), txdata: 0x186415c0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: tSLDToken
Function name: allowTransfers()
PC address: 4624
Estimated Gas Usage: 1123 - 1548
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:983
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: allowTransfers(), txdata: 0x2185810b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: tSLDToken
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 5246
Estimated Gas Usage: 1415 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:587

s

    uint256 constant public maxPresaleSupply = 600 * 10**6 * tSLD_UNIT;           // Total presale supply at max bonus

    uint256 constant public minCrowdsaleAllocation = 200 * 10**6 * tSLD_UNIT;     // Min amount for crowdsale

    uint256 constant public inc

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: tSLDToken
Function name: retrieveUnsoldTokens()
PC address: 5668
Estimated Gas Usage: 544 - 639
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:689

 _crowdFundAddress, address _advisorA

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: retrieveUnsoldTokens(), txdata: 0x74151a2a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: tSLDToken
Function name: retrieveUnsoldTokens()
PC address: 5760
Estimated Gas Usage: 1430 - 1855
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:953

    */

    function allowTransfers() ownerOnly {

        isReleasedToPublic = true;

    } 



    /**

        @dev User transfers are allowed/rejected

        Transfers are forbidden before the end of the crowdfund

    */

    function isTransferAllowed() internal constant returns(bool) {

        if (now > endTime || isReleasedToPublic == true) {

            return true;

        }

        return false;

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2002040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: retrieveUnsoldTokens(), txdata: 0x74151a2a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: tSLDToken
Function name: addToAllocation(uint256)
PC address: 7873
Estimated Gas Usage: 2426 - 2851
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:983
Initial State:

Account: [CREATOR], balance: 0x41008004882a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 606060606060606060606060affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addToAllocation(uint256), txdata: 0x98c20c00ffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: tSLDToken
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 7951
Estimated Gas Usage: 430 - 525
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:983
Initial State:

Account: [CREATOR], balance: 0x50000400000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: tSLDToken
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 7981
Estimated Gas Usage: 447 - 542
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/63c09c1fc7603a166c0f774c1d44cd07.sol:983
Initial State:

Account: [CREATOR], balance: 0x203, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0