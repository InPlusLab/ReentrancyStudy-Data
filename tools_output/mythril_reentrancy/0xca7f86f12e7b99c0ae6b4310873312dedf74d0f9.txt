==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BatchSetModelDataSource
Function name: fallback
PC address: 729
Estimated Gas Usage: 3418 - 39774
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:281

modelDataSource.renounceOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: renounceOwnershipModelDataSource(), txdata: 0x0bb6d248, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BatchSetModelDataSource
Function name: claimOwnershipModelDataSource()
PC address: 729
Estimated Gas Usage: 3506 - 39862
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:281

modelDataSource.renounceOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: claimOwnershipModelDataSource(), txdata: 0x78dad502, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BatchSetModelDataSource
Function name: lockModelDataSource()
PC address: 729
Estimated Gas Usage: 3572 - 39928
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:281

modelDataSource.renounceOwnership()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: lockModelDataSource(), txdata: 0x8cb5c484, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: fallback
PC address: 808
Estimated Gas Usage: 164 - 259
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:220

intervalLists[_rowNum + 0]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getRequiredMintAmount(uint256), txdata: 0x2c67295e80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: fallback
PC address: 842
Estimated Gas Usage: 1041 - 1136
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:221

intervalLists[_rowNum + 1]

--------------------
Initial State:

Account: [CREATOR], balance: 0xa420c0000010000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getRequiredMintAmount(uint256), txdata: 0x2c67295e000000000000000000000000000000000000000000000000000000000000005e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: fallback
PC address: 859
Estimated Gas Usage: 1883 - 1978
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:222

assert(nextMinN >= currMaxN)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setInterval(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256), txdata: 0x7453e8bf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100008408000010801014002800100808040010120040001000040001080804001, value: 0x0
Caller: [SOMEGUY], function: getRequiredMintAmount(uint256), txdata: 0x2c67295e, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: getInterval(uint256,uint256)
PC address: 887
Estimated Gas Usage: 204 - 299
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:198

intervalLists[_rowNum]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getInterval(uint256,uint256), txdata: 0x3488ecb380, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: getInterval(uint256,uint256)
PC address: 902
Estimated Gas Usage: 241 - 336
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:198

intervalLists[_rowNum][_colNum]

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000802200e0500, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getInterval(uint256,uint256), txdata: 0x3488ecb3000000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: intervalLists(uint256,uint256)
PC address: 969
Estimated Gas Usage: 205 - 300
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:161

Interval[11][95] public intervalLists

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: intervalLists(uint256,uint256), txdata: 0x3a68bb3980, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: intervalLists(uint256,uint256)
PC address: 984
Estimated Gas Usage: 242 - 337
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:161

Interval[11][95] public intervalLists

--------------------
Initial State:

Account: [CREATOR], balance: 0x14146422d01601241, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: intervalLists(uint256,uint256), txdata: 0x3a68bb39000000000000000000000000000000000000000000000000000000000000000280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BatchSetModelDataSource
Function name: setIntervals(uint256,uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32])
PC address: 1295
Estimated Gas Usage: 7142 - 79299
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:266

modelDataSource

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setIntervals(uint256,uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32]), txdata: 0x7e067e0f0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: setInterval(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 1532
Estimated Gas Usage: 2131 - 3314
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:183

intervalLists[_rowNum]

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0632232200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setInterval(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256), txdata: 0x7453e8bf80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: setInterval(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 1547
Estimated Gas Usage: 2168 - 3351
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:183

intervalLists[_rowNum][_colNum]

--------------------
Initial State:

Account: [CREATOR], balance: 0x82084000400e038, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setInterval(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256), txdata: 0x7453e8bf000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BatchSetModelDataSource
Function name: setIntervals(uint256,uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32])
PC address: 1568
Estimated Gas Usage: 7142 - 79299
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:266

modelDataSource.setInterval(_rowNum[i], _colNum[i], _minN[i], _maxN[i], _minR[i], _maxR[i], _alpha[i], _beta[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setIntervals(uint256,uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32]), txdata: 0x7e067e0f0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BatchSetModelDataSource
Function name: setIntervals(uint256,uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32])
PC address: 1568
Estimated Gas Usage: 7142 - 79299
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:266

modelDataSource.setInterval(_rowNum[i], _colNum[i], _minN[i], _maxN[i], _minR[i], _maxR[i], _alpha[i], _beta[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: setIntervals(uint256,uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32]), txdata: 0x7e067e0f0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BatchSetModelDataSource
Function name: setIntervals(uint256,uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32])
PC address: 1568
Estimated Gas Usage: 7142 - 79299
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:266

modelDataSource.setInterval(_rowNum[i], _colNum[i], _minN[i], _maxN[i], _minR[i], _maxR[i], _alpha[i], _beta[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setIntervals(uint256,uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32],uint256[32]), txdata: 0x7e067e0f0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: getIntervalCoefs(uint256,uint256)
PC address: 1852
Estimated Gas Usage: 412 - 507
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:210

intervalLists[_rowNum]

--------------------
Initial State:

Account: [CREATOR], balance: 0x480050000060006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getIntervalCoefs(uint256,uint256), txdata: 0xfbfe579080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModelDataSource
Function name: getIntervalCoefs(uint256,uint256)
PC address: 1867
Estimated Gas Usage: 449 - 544
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/34ba9e3062db64781daa8923cc9ca956.sol:210

intervalLists[_rowNum][_colNum]

--------------------
Initial State:

Account: [CREATOR], balance: 0x40043070016204011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getIntervalCoefs(uint256,uint256), txdata: 0xfbfe5790000000000000000000000000000000000000000000000000000000000000000008, value: 0x0


