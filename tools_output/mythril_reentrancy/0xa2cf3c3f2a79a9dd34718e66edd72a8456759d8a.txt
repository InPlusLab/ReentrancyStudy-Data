==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Purchase
Function name: purchaseFor(address[],uint256)
PC address: 390
Estimated Gas Usage: 7381 - 80034
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e314b69f00a46906740d958add34f85e.sol:21

lue(p

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000021c16, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: purchaseFor(address[],uint256), txdata: 0x98d5a9710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Purchase
Function name: purchaseFor(address[],uint256)
PC address: 393
Estimated Gas Usage: 7381 - 80034
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e314b69f00a46906740d958add34f85e.sol:21

[i], 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000021c16, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: purchaseFor(address[],uint256), txdata: 0x98d5a9710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Purchase
Function name: purchaseFor(address[],uint256)
PC address: 415
Estimated Gas Usage: 7381 - 80034
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/e314b69f00a46906740d958add34f85e.sol:21

[i], count, a

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000102051a12, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: purchaseFor(address[],uint256), txdata: 0x98d5a971000000000000000000000000000000000000000000000000000000000000002102000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Purchase
Function name: purchaseFor(address[],uint256)
PC address: 524
Estimated Gas Usage: 7381 - 80034
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/e314b69f00a46906740d958add34f85e.sol:21

lue(price * count)(users[i], count, address(0));
        }
    }
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x20a0009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: purchaseFor(address[],uint256), txdata: 0x98d5a9710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Purchase
Function name: purchaseFor(address[],uint256)
PC address: 524
Estimated Gas Usage: 7381 - 80034
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e314b69f00a46906740d958add34f85e.sol:21

lue(price * count)(users[i], count, address(0));
        }
    }
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000021c16, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: purchaseFor(address[],uint256), txdata: 0x98d5a9710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0