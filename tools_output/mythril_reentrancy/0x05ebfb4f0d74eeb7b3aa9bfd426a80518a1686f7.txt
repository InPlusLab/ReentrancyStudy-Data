==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DecentraList
Function name: postText(string,string,uint8,string)
PC address: 1235
Estimated Gas Usage: 1695 - 9737
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c4ac73303e6325664086501bd5436d89.sol:175

le {



    uint256 fee = bytes(_txt).length * textFee_;

    require( msg.value >= fee );

    emit TextPosted( _locale, _category, _ptype, _txt, fee );

  }



  function retrieve( uint _amount ) isOwner public {

    owner.transfer( _amount );

  }



  function fwdTokens( address _toksca,

                      address _to,

           

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: postText(string,string,uint8,string), txdata: 0x2a87ad9c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DecentraList
Function name: postImage(string,string,uint8,string)
PC address: 2062
Estimated Gas Usage: 1782 - 9731
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/c4ac73303e6325664086501bd5436d89.sol:157

   _url ) public payable {



    require( msg.value >= imageFee_ );

    emit ImagePosted( _locale, _category, _ptype, _url, msg.value );

  }



  function postText( string   _locale,

                     string   _category,

                     PostType _ptype,

                     string   _txt ) pu

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c2120000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: postImage(string,string,uint8,string), txdata: 0xb04761f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006, value: 0x38d7ea4c68000

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DecentraList
Function name: fwdTokens(address,address,uint256)
PC address: 2870
Estimated Gas Usage: 2942 - 37838
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/c4ac73303e6325664086501bd5436d89.sol:217

 - Consider the strengths and weaknesses of IPF

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: fwdTokens(address,address,uint256), txdata: 0xf50f90f0000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0