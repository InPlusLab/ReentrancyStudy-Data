==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RatingStore
Function name: add(address,int256)
PC address: 1153
Estimated Gas Usage: 1961 - 2716
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:46

 || msg.sender == controller);
        _; 
    }

    /**
     * Only a c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: add(address,int256), txdata: 0x5cd60dad, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RatingStore
Function name: add(address,int256)
PC address: 1242
Estimated Gas Usage: 2839 - 3924
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:46

 manager || msg.sender == controller);
        _; 
    }

    /**
     * Only a ce

--------------------
Initial State:

Account: [CREATOR], balance: 0x243, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: add(address,int256), txdata: 0x5cd60dad, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Etherep
Function name: getScoreAndCount(address)
PC address: 1551
Estimated Gas Usage: 2854 - 38498
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:449
Initial State:

Account: [CREATOR], balance: 0x400008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getScoreAndCount(address), txdata: 0xab413a7e0000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Etherep
Function name: getScoreAndCount(address)
PC address: 1596
Estimated Gas Usage: 2756 - 38024
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:444

       // single count
        score = cumulative / int(ratings);

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getScoreAndCount(address), txdata: 0xab413a7e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Etherep
Function name: getScore(address)
PC address: 2022
Estimated Gas Usage: 3010 - 38559
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:427

  /**
     * R

--------------------
Initial State:

Account: [CREATOR], balance: 0x1a810080040008561, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getScore(address), txdata: 0xd47875d0000000000000000000000000200080082000802000401020000008100008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Etherep
Function name: getScore(address)
PC address: 2067
Estimated Gas Usage: 2866 - 38134
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:414

s an average of all ratings
        score = cumulative / int(ratings);

        // We only want to display a maximum of 500 or minimum of -500, even 
        // if it&#39;s weighted outside of that range
        if (score > 500) {
            score = 500;
        } else if (score < -500) {
            score = -500;
        }

    }

    /**
     * Returns the cumulative score and count of ratings for an address
     * @param who The address to lookup
     * @return score The cumulative score
     * @return count How many ratings have been made
     */
    function getScoreAndCount(address who) external constant returns (int score, uint ratings) {

        // Get an instance of our storage contract: RatingStore
        RatingStore store = RatingSto

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getScore(address), txdata: 0xd47875d0, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RatingStore
Function name: set(address,int256,uint256)
PC address: 2071
Estimated Gas Usage: 2029 - 2784
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:46

 || msg.sender == controller);
        _; 
    }

    /**
     * Only a c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: set(address,int256,uint256), txdata: 0x7223cd19, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RatingStore
Function name: set(address,int256,uint256)
PC address: 2160
Estimated Gas Usage: 2907 - 3992
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:46

 manager || msg.sender == controller);
        _; 
    }

    /**
     * Only a ce

--------------------
Initial State:

Account: [CREATOR], balance: 0x2c40000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: set(address,int256,uint256), txdata: 0x7223cd19, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherep
Function name: rate(address,int256)
PC address: 2422
Estimated Gas Usage: 14282 - 105458
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:237

 Constructor
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x100001030, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x208, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e7e7e7e7e7e7e7e7e7e7e7e704000000100404004000000408000000400010200000000000000000000000000000000000000000000000000000000000000000e7e7e7e7e7e7e7e7e7e7e7e7000110000201042020802004102000800120400101, value: 0x0
Caller: [ATTACKER], function: rate(address,int256), txdata: 0xe7e3e167, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Etherep
Function name: rate(address,int256)
PC address: 2493
Estimated Gas Usage: 3012 - 3627
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:232

alue >= fee);
        _;
    }

    /** 
     * Constructor
     * @param _manager The key that ca

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rate(address,int256), txdata: 0xe7e3e167, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherep
Function name: rate(address,int256)
PC address: 2679
Estimated Gas Usage: 14264 - 105440
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:360

(senderScore

--------------------
Initial State:

Account: [CREATOR], balance: 0x220100000000108d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: rate(address,int256), txdata: 0xe7e3e1670000000000000000000000000402010110400101010801020110018080012010fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Etherep
Function name: rate(address,int256)
PC address: 2878
Estimated Gas Usage: 14282 - 105458
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:368

ing
        if (sende

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x30000a40223000c01, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dbdbdbdbdbdbdbdbdbdbdbdb00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dbdbdbdbdbdbdbdbdbdbdbdbdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rate(address,int256), txdata: 0xe7e3e167, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Etherep
Function name: rate(address,int256)
PC address: 2928
Estimated Gas Usage: 14282 - 105458
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:373

t should be between 40 a

--------------------
Initial State:

Account: [CREATOR], balance: 0x2140080000000902, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rate(address,int256), txdata: 0xe7e3e167, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Etherep
Function name: rate(address,int256)
PC address: 3071
Estimated Gas Usage: 14282 - 105458
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:403

xternal constant returns (in

--------------------
Initial State:

Account: [CREATOR], balance: 0x9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x44000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dbdbdbdbdbdbdbdbdbdbdbdb00010000010000010404000100020401000480080000000000000000000000000000000000000000000000000000000000000000dbdbdbdbdbdbdbdbdbdbdbdbdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rate(address,int256), txdata: 0xe7e3e167, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Etherep
Function name: rate(address,int256)
PC address: 3399
Estimated Gas Usage: 14282 - 105458
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:408

      int cumulative;
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x30000a40223000c01, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dbdbdbdbdbdbdbdbdbdbdbdb00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dbdbdbdbdbdbdbdbdbdbdbdbdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rate(address,int256), txdata: 0xe7e3e167, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Etherep
Function name: rate(address,int256)
PC address: 3399
Estimated Gas Usage: 14282 - 105458
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:408

      int cumulative;
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000c0402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000080, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rate(address,int256), txdata: 0xe7e3e167, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Etherep
Function name: rate(address,int256)
PC address: 3399
Estimated Gas Usage: 14282 - 105458
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/594d92372be8dfa9d5b0559687545ae0.sol:408

      int cumulative;
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x44000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dbdbdbdbdbdbdbdbdbdbdbdb00010000010000010404000100020401000480080000000000000000000000000000000000000000000000000000000000000000dbdbdbdbdbdbdbdbdbdbdbdbdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rate(address,int256), txdata: 0xe7e3e167, value: 0x0