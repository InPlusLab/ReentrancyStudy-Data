==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TransactionRecorder
Function name: lastCallData()
PC address: 705
Estimated Gas Usage: 1387 - 2327
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/419df02cf381fcfaa9ceb8400d264f2e.sol:605

public {

        require(msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lastCallData(), txdata: 0x72a853b1, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TransactionRequestCore
Function name: callData()
PC address: 1277
Estimated Gas Usage: 1398 - 2668
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/419df02cf381fcfaa9ceb8400d264f2e.sol:443

ould become the owner of the token

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: callData(), txdata: 0x4e417a98, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BaseScheduler
Function name: computeEndowment(uint256,uint256,uint256,uint256,uint256)
PC address: 1590
Estimated Gas Usage: 3626 - 74496
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/419df02cf381fcfaa9ceb8400d264f2e.sol:1151

@dev Top-level contract that exposes the API to the Ethereum Alarm Clock service and passes in timestamp as temporal unit.

 */

contract TimestampScheduler is BaseScheduler {



    /**

     * @dev Constructor

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: computeEndowment(uint256,uint256,uint256,uint256,uint256), txdata: 0x63b6240d, value: 0x0