==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Bounty0xStaking
Function name: withdraw(uint256)
PC address: 1937
Estimated Gas Usage: 12360 - 69259
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a113476dcffab5059a6e21c0538aaade.sol:157

missionId, uint _amount) public whenNotPaused {
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000088eab, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bounty0xStaking
Function name: withdraw(uint256)
PC address: 2103
Estimated Gas Usage: 12360 - 69259
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a113476dcffab5059a6e21c0538aaade.sol:158


        balances[ms

--------------------
Initial State:

Account: [CREATOR], balance: 0xee9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Bounty0xStaking
Function name: stakeToMany(uint256[],uint256[])
PC address: 3612
Estimated Gas Usage: 9715 - 36729
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a113476dcffab5059a6e21c0538aaade.sol:74

 assert(b <= a);
    return a - b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(u

--------------------
Initial State:

Account: [CREATOR], balance: 0x401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stakeToMany(uint256[],uint256[]), txdata: 0x97e8e520ffffffffffffffffffffffff00ff0000ffffffffffffffffffffdf007c0000007f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Bounty0xStaking
Function name: deposit(uint256)
PC address: 4233
Estimated Gas Usage: 11657 - 68461
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a113476dcffab5059a6e21c0538aaade.sol:149

 emit Deposit(msg.sender, _amount, balances[msg.sender]);
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x42000000000820001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f25, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bounty0xStaking
Function name: deposit(uint256)
PC address: 4367
Estimated Gas Usage: 11657 - 68461
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a113476dcffab5059a6e21c0538aaade.sol:151

henNotPaused {
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1f03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f25, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bounty0xStaking
Function name: deposit(uint256)
PC address: 4439
Estimated Gas Usage: 11657 - 68461
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a113476dcffab5059a6e21c0538aaade.sol:151

tion withdraw(uint _amount) public whenNotPaused {
        require

--------------------
Initial State:

Account: [CREATOR], balance: 0x1f03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f25, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Bounty0xStaking
Function name: deposit(uint256)
PC address: 4539
Estimated Gas Usage: 11657 - 68461
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a113476dcffab5059a6e21c0538aaade.sol:153

lances[msg.sender] =

--------------------
Initial State:

Account: [CREATOR], balance: 0x1f03, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f25, value: 0x0