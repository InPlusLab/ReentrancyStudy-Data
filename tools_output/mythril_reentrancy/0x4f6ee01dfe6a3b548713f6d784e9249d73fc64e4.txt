==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ERC20_ICO
Function name: fallback
PC address: 1097
Estimated Gas Usage: 1742 - 2167
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:671

nsfer Fund to owner's address



--------------------
Initial State:

Account: [CREATOR], balance: 0x30000000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ERC20_ICO
Function name: fallback
PC address: 1110
Estimated Gas Usage: 1762 - 2187
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:671

  // Transfer Fund to owner's address

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC20_ICO
Function name: fallback
PC address: 1637
Estimated Gas Usage: 33770 - 184619
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:715

);

        emit RateChanged(TokenPerE

--------------------
Initial State:

Account: [CREATOR], balance: 0x340000001010021, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x08408080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20_ICO
Function name: fallback
PC address: 1663
Estimated Gas Usage: 33395 - 184244
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:725

 fina

--------------------
Initial State:

Account: [CREATOR], balance: 0x2a000c4017120804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ERC20_ICO
Function name: fallback
PC address: 1762
Estimated Gas Usage: 33395 - 184244
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:725

 finalize() public onlyOwner {

     

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0c0000001b60462, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20_ICO
Function name: fallback
PC address: 1762
Estimated Gas Usage: 33395 - 184244
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:725

 finalize() public onlyOwner {

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x2a000c4017120804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC20_ICO
Function name: finalize()
PC address: 2501
Estimated Gas Usage: 12786 - 103564
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:739
Initial State:

Account: [CREATOR], balance: 0x50a02102000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 606060606060606060606060deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20_ICO
Function name: finalize()
PC address: 2565
Estimated Gas Usage: 12786 - 103564
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:739
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20_ICO
Function name: finalize()
PC address: 2626
Estimated Gas Usage: 12786 - 103564
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:739
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC20_ICO
Function name: finalize()
PC address: 2792
Estimated Gas Usage: 12786 - 103564
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:739
Initial State:

Account: [CREATOR], balance: 0x50a02102000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 606060606060606060606060deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ERC20_ICO
Function name: finalize()
PC address: 2792
Estimated Gas Usage: 12786 - 103564
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:739
Initial State:

Account: [CREATOR], balance: 0x402c3a10402142000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ERC20_ICO
Function name: finalize()
PC address: 2792
Estimated Gas Usage: 12786 - 103564
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:739
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20
Function name: mintToken(address,uint256)
PC address: 3169
Estimated Gas Usage: 14612 - 55764
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:473

nough

        balanceOf[msg.send

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(address,uint256), txdata: 0x79c65068000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffefffffffffffffffffffffffffffffffffffffffffd, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ERC20
Function name: mintToken(address,uint256)
PC address: 3185
Estimated Gas Usage: 14612 - 55764
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:475

;            // Subtract fr

--------------------
Initial State:

Account: [CREATOR], balance: 0x352, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(address,uint256), txdata: 0x79c650680000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ERC20
Function name: approveAndCall(address,uint256,bytes)
PC address: 4425
Estimated Gas Usage: 8129 - 67308
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fcfd6aa564cda930ff0c65851219377a.sol:435

mit FrozenFunds(target, freeze);

    }

    

    /// @notic

--------------------
Initial State:

Account: [CREATOR], balance: 0x1002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000020eff60000007e0080af00007ea700003004009c, value: 0x0