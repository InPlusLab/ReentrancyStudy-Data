==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: constructor
PC address: 77
Estimated Gas Usage: 205 - 3350
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:1755

   }



    // @return tru

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CompliantCrowdsale
Function name: constructor
PC address: 137
Estimated Gas Usage: 11952 - 55943
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:1755

   }



    // @return tru

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Whitelist
Function name: disapproveInvestorsInBulk(address[])
PC address: 194
Estimated Gas Usage: 15627 - 59296
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:327

dator contract has a validator address, and provides basic authorization control

 * functions, this simplifies the implementation of "user permissions".

 */

contract Validator {

    address public validator;



    event NewValidatorSet(address indexed previo

--------------------
Initial State:

Account: [CREATOR], balance: 0xc10c0100012007, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: disapproveInvestorsInBulk(address[]), txdata: 0x6deb515dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DetailedERC20
Function name: fallback
PC address: 318
Estimated Gas Usage: 1321 - 2261
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:895

s _account) {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatavalue: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Whitelist
Function name: approveInvestorsInBulk(address[])
PC address: 394
Estimated Gas Usage: 15785 - 59454
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:283

vestor

      * @param toDisapprove investor to be disapproved

      */

    function disapproveInvestor(address toDisapprove) external onlyOwner {

        delete investorMap[toDisapprove];

        emit Disapproved(toDisapprove);

    }



  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000094002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: approveInvestorsInBulk(address[]), txdata: 0xf79acad3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DetailedERC20
Function name: symbol()
PC address: 468
Estimated Gas Usage: 1365 - 2305
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:897

quire(whiteListingCo

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldatavalue: 0x0
Caller: [ATTACKER], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CompliantCrowdsale
Function name: bulkRejectMints(uint256[],uint256[])
PC address: 477
Estimated Gas Usage: 1164 - 1919
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:2413
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001010108010101010101040808010102100801010001010102010080100000000000800100001000000000000000000000000001000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102020101020402020404020101020201020402040202020202020202010280000000000000000000000000040102010102020102010101040102010180040100000000000000000000000002, value: 0x0
Caller: [CREATOR], function: bulkRejectMints(uint256[],uint256[]), txdata: 0x1d7c194effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 487
Estimated Gas Usage: 3675 - 4100
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:1807

   constructor(address _

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b000000100000000000000000000000000000000000000000000010400000001b400000100000000000000000000000000000000000000000000000000000000b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b00101010101010101010101010101010101010101010101010101010101010101b0b0b0b0b0b0b0b0b0b0b0b00101010101010101010101010101010101010101b0b0b0b0b0b0b0b0b0b0b0b001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CompliantCrowdsale
Function name: bulkApproveMints(uint256[])
PC address: 644
Estimated Gas Usage: 1309 - 2345
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:2337

 0;



        msg.sender.transfer(value);



        emit Claimed(msg.sender, value);

    }



    function finalization() internal {

        token.finishMinting();

        transferTokenOwnership(owner);

        super.finalization();

    }



    /** @dev Updates token contract address

      * @param newToken New token contract address

      */

    function setTokenContract(address newToken)

        external 

        onlyOwner

        checkIsAddressValid(newToken)

    {

        token = CompliantToken(newToken);

    }



    /** @dev transfers ownership of the token contract

      * @param newOwner New owner of the token contract

      */

    function transferTokenOwnership(address newOwner)

        public 

        onlyOwner

        checkIsAddressValid(newOwner)

    {

        token.transferOwnership(newOwner);

    }



    function forwardFunds(uint256 amount) internal {

        wallet.transfer(amount);

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 08080808080808080808080801010101010101010101010101010101010101010800000000000000000000000000000000000000000000000020200001000000100000000000000000000000000000000000000000000000000120000000000008080808080808080808080808080808080808080808080808080808080808080101010402010102010102010102020102020204200201020201020101010201080808080808080808080808010101800101010101018001010101010101010108080808080808080808080801, value: 0x0
Caller: [CREATOR], function: bulkApproveMints(uint256[]), txdata: 0x3b59cb24ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 944
Estimated Gas Usage: 3594 - 4019
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:1901

   }



    /**

    * event for r

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000080808080808080808080808080808080808080808080808080808080808080800101010101010101010101010101010101010101010101010101010101010101808080808080808080808080010101010101010101010101010101010101010180808080808080808080808001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: fallback
PC address: 965
Estimated Gas Usage: 3632 - 4057
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:1909

 rejected

    * @param value n

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8000000100000201008010010110800202404080000000000000020200000001a00000010000020001011001011080020240408000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CompliantCrowdsale
Function name: transferTokenOwnership(address)
PC address: 2746
Estimated Gas Usage: 3573 - 39694
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:2413
Initial State:

Account: [CREATOR], balance: 0x40000000040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080011008040101808001400101010101010104010180000500010101010000000000000000000000000000000000010830000000008001011001010101000000000000000000000000000000000001082000000000808080808080808080808080808080808080808080808080808080808080808001010101010101010110100101010102010110041001011002010201010101018080808080808080808080800101010101010101010101010101010101010101808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: transferTokenOwnership(address), txdata: 0x21e6b53d80808080808080808080808001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CompliantCrowdsale
Function name: finalize()
PC address: 3834
Estimated Gas Usage: 2882 - 3637
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/36d2b33da98b07a7f6aa892ace80882c.sol:1951

ed(

        addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80808080808080808080808001010180014001011001400102201001011001018000000000000000000000040000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000008080808080808080808080808080808080808080808080808080808080808080010201010102010101020101010101010104020101800101010802100101010180808080808080808080808002020201020802010204020202010204010101018080808080808080808080800101010202020101010101020101020101010201808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: finalize(), txdata: 0x4bb278f3, value: 0x0


