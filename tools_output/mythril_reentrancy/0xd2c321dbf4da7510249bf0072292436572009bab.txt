==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 247
Estimated Gas Usage: 1687 - 1782
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:204


    }

    /// @return Current LRC balance.
    

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000800000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 260
Estimated Gas Usage: 1704 - 1799
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:204

   }
    }

    /// @return Current LRC balance.
    function lrcBalance() public constant returns (uint) {
        return Token(lrcTokenAddress).balanceOf(address(this));
    }

    /// @dev Deposit LRC.
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000008000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 283
Estimated Gas Usage: 2529 - 2624
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:208

uint) {
        return Token(lrcTokenAddress).balanceOf(address(this));
    }

    /// @dev Deposit LRC.
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 988
Estimated Gas Usage: 4228 - 4323
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:221

(msg.sender, address(this)));

        require(lr

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000045009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000800000000000000000000000000000020000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1002
Estimated Gas Usage: 5061 - 5156
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:221

llowance(msg.sender, address(this)));

        require(lrc

--------------------
Initial State:

Account: [CREATOR], balance: 0x208, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000008000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1267
Estimated Gas Usage: 46912 - 272884
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:228

r] = record;

        lrcDeposited += lrcAmou

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001000000010080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x00, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1267
Estimated Gas Usage: 44387 - 270359
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:228

r] = record;

        lrcDeposited += lrcAmou

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1457
Estimated Gas Usage: 46912 - 272884
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:226

cAmount;
        record.timestamp = now;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001000000010080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x00, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1457
Estimated Gas Usage: 44387 - 270359
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:226

cAmount;
        record.timestamp = now;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1457
Estimated Gas Usage: 46912 - 272884
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:226

cAmount;
        record.timestamp = now;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000800000000000000000800000000001000400000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1457
Estimated Gas Usage: 44387 - 270359
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:226

cAmount;
        record.timestamp = now;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000108010000000008800100020002010201024000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1584
Estimated Gas Usage: 46912 - 272884
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:233

rom(msg.sender, address(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1584
Estimated Gas Usage: 44387 - 270359
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:233

rom(msg.sender, address(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1591
Estimated Gas Usage: 46912 - 272884
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:233

rom(msg.sender, address(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1591
Estimated Gas Usage: 44387 - 270359
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:233

rom(msg.sender, address(this)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1600
Estimated Gas Usage: 46912 - 272884
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:233

));
    }

    /// @de

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1600
Estimated Gas Usage: 44387 - 270359
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:233

));
    }

    /// @de

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1670
Estimated Gas Usage: 46912 - 272884
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:236

l LRC.
    function withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1670
Estimated Gas Usage: 44387 - 270359
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:236

l LRC.
    function withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1675
Estimated Gas Usage: 46912 - 272884
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:236

l LRC.
    function withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1675
Estimated Gas Usage: 44387 - 270359
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:236

l LRC.
    function withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1680
Estimated Gas Usage: 46912 - 272884
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:236

l LRC.
    function withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1680
Estimated Gas Usage: 44387 - 270359
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:236

l LRC.
    function withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1685
Estimated Gas Usage: 46912 - 272884
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:236

l LRC.
    function withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1685
Estimated Gas Usage: 44387 - 270359
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:236

l LRC.
    function withdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1696
Estimated Gas Usage: 46912 - 272884
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:237

 {
        require(deposi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1696
Estimated Gas Usage: 44387 - 270359
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:237

 {
        require(deposi

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1703
Estimated Gas Usage: 46912 - 272884
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:237

 {
        require(deposi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1703
Estimated Gas Usage: 44387 - 270359
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:237

 {
        require(deposi

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1766
Estimated Gas Usage: 46912 - 272884
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:239

    require

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1766
Estimated Gas Usage: 44387 - 270359
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:239

    require

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 1777
Estimated Gas Usage: 46912 - 272884
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:239

    require

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeeffefefefefefefefefefefefeaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 1777
Estimated Gas Usage: 44387 - 270359
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:239

    require

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 2035
Estimated Gas Usage: 46912 - 272884
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:241

ecords[msg.sender];
        require(now >= record.timestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x51001000000010080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x00, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: depositLRC()
PC address: 2035
Estimated Gas Usage: 44387 - 270359
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:241

ecords[msg.sender];
        require(now >= record.timestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [CREATOR], function: depositLRC(), txdata: 0xd678ba48, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LRCLongTermHoldingContract
Function name: fallback
PC address: 2035
Estimated Gas Usage: 46559 - 272531
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:241

ecords[msg.sender];
        require(now >= record.timestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x21000840000609, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LRCLongTermHoldingContract
Function name: lrcBalance()
PC address: 3112
Estimated Gas Usage: 2655 - 38111
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:216

w >= depositStartTime && now <= depositStopTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: start(), txdata: 0xbe9a6555, value: 0x0
Caller: [SOMEGUY], function: lrcBalance(), txdata: 0x0fc33bb7, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LRCLongTermHoldingContract
Function name: start()
PC address: 3409
Estimated Gas Usage: 14536 - 55498
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/da8676013a1ae361fcee8fdcd79ebdb9.sol:198

 depositStopTime) {
            d

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000803, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101014020408000100001010008010101014000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: start(), txdata: 0xbe9a6555, value: 0x0