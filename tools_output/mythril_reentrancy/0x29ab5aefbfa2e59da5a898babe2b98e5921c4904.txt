==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RBAC
Function name: hasRole(address,string)
PC address: 487
Estimated Gas Usage: 1688 - 6014
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000080000009001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x37, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: hasRole(address,string), txdata: 0x217fe6c60000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PixieCrowdsale
Function name: addManyToWhitelist(address[])
PC address: 1106
Estimated Gas Usage: 13648 - 55443
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dca21d0e8d743aa8c15c8653ab955a0.sol:2307

 management, use sparingly as no restrictions are set

   *

   * @param _openingTime the epoch time to set

   */

  function updateOpeningTime(uint256 _openingTime) external onlyManagement {

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010201010180010201020101010101010100000000000000000000000001, value: 0x0
Caller: [CREATOR], function: addManyToWhitelist(address[]), txdata: 0x8c10671cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Whitelist
Function name: hasRole(address,string)
PC address: 1107
Estimated Gas Usage: 1748 - 6734
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x8900000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: hasRole(address,string), txdata: 0x217fe6c60000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PixieToken
Function name: checkRole(address,string)
PC address: 2092
Estimated Gas Usage: 1765 - 6470
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: checkRole(address,string), txdata: 0x0988ca8c000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PixieToken
Function name: hasRole(address,string)
PC address: 2247
Estimated Gas Usage: 1836 - 6822
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: hasRole(address,string), txdata: 0x217fe6c60000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PixieCrowdsale
Function name: finalize()
PC address: 2626
Estimated Gas Usage: 12736 - 69441
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dca21d0e8d743aa8c15c8653ab955a0.sol:2279

external onlyManag

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000200101014001010104100820010402080402010200000000000000000000000001, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PixieCrowdsale
Function name: finalize()
PC address: 2635
Estimated Gas Usage: 12736 - 69441
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dca21d0e8d743aa8c15c8653ab955a0.sol:2279

external onlyManag

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000200101014001010104100820010402080402010200000000000000000000000001, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PixieCrowdsale
Function name: fallback
PC address: 2666
Estimated Gas Usage: 1026 - 1451
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dca21d0e8d743aa8c15c8653ab955a0.sol:2611
Initial State:

Account: [CREATOR], balance: 0x1010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010201020101010202020101010201020100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PixieCrowdsale
Function name: fallback
PC address: 4949
Estimated Gas Usage: 1063 - 1488
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dca21d0e8d743aa8c15c8653ab955a0.sol:2611
Initial State:

Account: [CREATOR], balance: 0x1010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101020201010201010201010101020201010200000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PixieCrowdsale
Function name: transfer(address,uint256)
PC address: 6350
Estimated Gas Usage: 6128 - 42974
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dca21d0e8d743aa8c15c8653ab955a0.sol:1723

/ optional override

  }



  /**

   * @d

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0


