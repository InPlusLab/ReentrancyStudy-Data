==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetVault
Function name: unlock()
PC address: 225
Estimated Gas Usage: 988 - 1083
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:495

 flag to determine if address is for 

--------------------
Initial State:

Account: [CREATOR], balance: 0x5000c0003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unlock(), txdata: 0xa69df4b5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: 0x72c68108a82e82617b93d1be0d7975d762035015
Function name: constructor
PC address: 364
Estimated Gas Usage: 23753 - 107753
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:604


        f

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101100101010102018001010108010101010401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101200000000000000000020000000000000000000000000000000000000000000082, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: 0x72c68108a82e82617b93d1be0d7975d762035015
Function name: constructor
PC address: 412
Estimated Gas Usage: 23813 - 107813
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:606

  fun

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010110010101100401080110080202400101040201010101010101010101010101010801020180200101018001100110010101010801010101010101010101010100010001012008020404200010010210801001010101010104010101020101010101010101010101010101010101040001010001001000000000000000000000000000000000000000800000008000800080004001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: constructor
PC address: 467
Estimated Gas Usage: 33734 - 158433
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:611

 = 45000000 ether;

        balances[pre

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DecentBetToken
Function name: constructor
PC address: 656
Estimated Gas Usage: 175262 - 743624
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:619

ltisig;
        if (!Multi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101014010200101800101010101010101010101010101010101010120018040082010012004800208040201040001010101010101010101010101202001800001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000004001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DecentBetToken
Function name: constructor
PC address: 1271
Estimated Gas Usage: 175262 - 743624
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:634

ransfer(address to, uint256 value) ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102040810010102040101010101010101010101010101010101010101010101010101010101010101010101010201010801100101042001010840020102010101010202010101010401010801010102008000000000000000000000000000000000000000000000000000000000008001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DecentBetToken
Function name: constructor
PC address: 1324
Estimated Gas Usage: 175262 - 743624
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:634

ransfer(address to, uint256 value) ret

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102040810010102040101010101010101010101010101010101010101010101010101010101010101010101010201010801100101042001010840020102010101010202010101010401010801010102008000000000000000000000000000000000000000000000000000000000008001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DecentBetToken
Function name: constructor
PC address: 1331
Estimated Gas Usage: 175262 - 743624
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:635

tState() != State

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102040810010102040101010101010101010101010101010101010101010101010101010101010101010101010201010801100101042001010840020102010101010202010101010401010801010102008000000000000000000000000000000000000000000000000000000000008001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DecentBetToken
Function name: constructor
PC address: 1474
Estimated Gas Usage: 175262 - 743624
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:634


        if (getState() != State.Success) throw;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000080000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DecentBetToken
Function name: constructor
PC address: 1474
Estimated Gas Usage: 175262 - 743624
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:634


        if (getState() != State.Success) throw;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010120010410408001000000000000000000000000040204012010048010102002040280001004010100000000000000000000000001010101010101020101010101010120040440010101040101010101010101010401010104010101010401010401040104040102000000800000000000008000000000080000040808000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DecentBetToken
Function name: constructor
PC address: 1474
Estimated Gas Usage: 175262 - 743624
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:634


        if (getState() != State.Success) throw;
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102040810010102040101010101010101010101010101010101010101010101010101010101010101010101010201010801100101042001010840020102010101010202010101010401010801010102008000000000000000000000000000000000000000000000000000000000008001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: getTokensAtCurrentRate(uint256)
PC address: 4379
Estimated Gas Usage: 1097 - 1192
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:796

eMul(baseTokensPerEther, 110)), 100); // 10% bonus
        } 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000201012002080101010101010101010101010101000000000000000000000000020202010120010001010108020402010101100100000000000000000000000001010101010101010101010101010101010101010102010401014001010101010140010101000401800101010101010101040101000000000000000040000000000000000000000000000000000000000000000201, value: 0x0
Caller: [SOMEGUY], function: getTokensAtCurrentRate(uint256), txdata: 0x0fb9dcd5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: getTokensAtCurrentRate(uint256)
PC address: 4398
Estimated Gas Usage: 1114 - 1209
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:796

safeMul(baseTokensPerEther, 110)), 100); // 10% bonus
        } else if(getTime() >= fundingStartTime + 1 weeks && getTime() < fundingStartTime + 2 weeks) {
            return safeDiv(safeMul(weiValue, safeMul(baseTokensPerEther, 105)), 100); // 5% bonus
        } else if(getTime() >= fundingStartTime + 2 weeks && getTime() < fundingEndTime) {
            return safeMul(weiValue, baseTokensPerEther); // 0% bonus
        }
    }

    // Allows the owner to add an address to the pre-sale whitelist.
    function addToPreSaleWhitelist(address _address) onlyTeam {

        // Add to pre-sale whitelist only if state is Waiting right now.
        if(getState() != State.Waiting) throw;

        // Address already added to whitelist.
        if (preSaleAllowed[_address]) throw;

        preSaleWhitelist.push(_address);
        preSaleAllowed[_address] = true;
    }

    // Allows the owner to add an address to the community whitelist.
    function addToCommunitySaleWhitelist(address[] addresses) onlyTeam {

        // Add to community sale whitelist only if state is Waiting or Presale right now.
        if(getState() != State.Waiting &&
        getState() != State.PreSale) throw;

        for(uint i = 0; i < addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000004002010101010101044001010108014001000101000000000000000000000000014001100201040180010140014001010101010100000000000000000000000080010102010101020202000201028001010402020201020101800001080140100101020120100104100102080201010201014002000000000000000000000000000000000000000000000000000000000000008101, value: 0x0
Caller: [SOMEGUY], function: getTokensAtCurrentRate(uint256), txdata: 0x0fb9dcd5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: getTokensAtCurrentRate(uint256)
PC address: 4456
Estimated Gas Usage: 1981 - 2076
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:798

, 105)), 100); // 5% bonus
        } else if(getTime() >= fundingStart

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1040000002403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000401010101040101010101040804010101010101000000000000000000000000808080010101081001010120200110010401020100000000000000000000000010041040000101100140010180084000020101020210010101010101020101040101021004400102014001082010100104400102800100100000000000000000000000000000000000000000000000000080000182, value: 0x0
Caller: [SOMEGUY], function: getTokensAtCurrentRate(uint256), txdata: 0x0fb9dcd5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: getTokensAtCurrentRate(uint256)
PC address: 4480
Estimated Gas Usage: 1998 - 2093
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:798

her, 105)), 100); // 5% bonus
        } else if(getTime() >= fundingStartTime + 2 weeks && getTime() < fundingEndTime) {
            return safeMul(weiValue, baseTokensPerEther); // 0% bonus
        }
    }

    // Allows the owner to add an address to the pre-sale whitelist.
    function addToPreSaleWhitelist(address _address) onlyTeam {

        // Add to pre-sale whitelist only if state is Waiting right now.
        if(getState() != State.Waiting) throw;

        // Address already added to whitelist.
        if (preSaleAllowed[_address]) throw;

        preSaleWhitelist.push(_address);
        preSaleAllowed[_address] = true;
    }

    // Allows the owner to add an address to the community whitelist.
    function addToCommunitySaleWhitelist(address[] addresses) onlyTeam {

        // Add to community sale whitelist only if state is Waiting or Presale right now.
        if(getState() != State.Waiting &&
        getState() != State.PreSale) throw;

        for(uint i = 0; i < addres

--------------------
Initial State:

Account: [CREATOR], balance: 0xfff002ef83e30, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080004001022008080002028001000101000401400000000000000000000000000202040101080101020201010001020404010101000000000000000000000000024002101040100204100110080202020280020001010101010101010180010101010101020108010101010101010101010108018000000000000200000010010000000100054b0400081002040402804008000482, value: 0x0
Caller: [ATTACKER], function: getTokensAtCurrentRate(uint256), txdata: 0x0fb9dcd5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: getTokensAtCurrentRate(uint256)
PC address: 4543
Estimated Gas Usage: 2871 - 2966
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:801

   }
    }

    // Allows the owner to add an address to the pre-sale whitelist.


--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000011002011002010401010104010201010108010100000000000000000000000001010101010101010101010101010101010101018001020401100001800108800120010101010101010101200101010101021008000000000000000000000000400000000000000000000000000000000000000101, value: 0x0
Caller: [SOMEGUY], function: getTokensAtCurrentRate(uint256), txdata: 0x0fb9dcd5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: fallback
PC address: 4908
Estimated Gas Usage: 1809 - 2234
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:971
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000801010101012001010101010101010101010101000000000000000000000000080101010101010101010110010401010201020800000000000000000000000001020101010101010101010101010101010101010401028001010101010101020401800101012002080101010204800201404008004000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: fallback
PC address: 4936
Estimated Gas Usage: 2676 - 3101
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:971
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000040101011001010801010201010101010104040100000000000000000000000001010201010101010101010101010101010101010820010104200102010101028001010101010100010104010102010140010104000000800000000000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: fallback
PC address: 4956
Estimated Gas Usage: 3542 - 3967
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:971
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010201040401010801010101100101020100000000000000000000000001010101010101010101010101010201010101010240080104000208020401010202010101012002010001102001041004010120000000000000000000000000000000000000000000000000000000010000800101, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: fallback
PC address: 4970
Estimated Gas Usage: 3559 - 3984
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:971
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101800101010201010101010101010101010001000000000000000000000000010201010108010104040102010201010101010100000000000000000000000001010101010101010101020101010101010101010801404004010020400800010210020801800101008001100801010120010108000000400000000000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DecentBetToken
Function name: fallback
PC address: 4998
Estimated Gas Usage: 4426 - 4851
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:971
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010401010101010101010101000000000000000000000000010101020801011001010101040104010102010100000000000000000000000001010102010101010101010101010101010101010120020401020101010401028008010120020408010101014040010101080140000000000040000000000000000000000000000000000000000000000000000101, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DecentBetToken
Function name: communitySaleWhitelist(uint256)
PC address: 8455
Estimated Gas Usage: 1336 - 1431
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/dd1c140efda1375958b71d5cfea42f16.sol:551

le: If ETH/USD = 300, it would be 2400 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000020101010102080401020101010104010101100100000000000000000000000001010101010101010101010101010101010102010101021040400108011004010102011004040102010101400101014001041001000100000000000000000000000000000000000000000000000000000000004001, value: 0x0
Caller: [SOMEGUY], function: communitySaleWhitelist(uint256), txdata: 0x4eb12d7f, value: 0x0