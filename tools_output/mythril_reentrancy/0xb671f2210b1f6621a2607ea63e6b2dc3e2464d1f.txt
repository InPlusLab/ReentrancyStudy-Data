==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RewardEscrow
Function name: vestingSchedules(address,uint256,uint256)
PC address: 4635
Estimated Gas Usage: 1335 - 1620
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b471f7ef96683dba7cbcd1aa6e1bbe64.sol:588

1;

    /* Limit vesting entries to disallow unbounde

--------------------
Initial State:

Account: [CREATOR], balance: 0x400412c0000010612, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: vestingSchedules(address,uint256,uint256), txdata: 0x45e5441f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RewardEscrow
Function name: appendVestingEntry(address,uint256) or appendVestingEntry(address,uint256)
PC address: 6221
Estimated Gas Usage: 34595 - 171773
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b471f7ef96683dba7cbcd1aa6e1bbe64.sol:797

1) < time, "Cannot add ne

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000100000100000400010101000101000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: appendVestingEntry(address,uint256), txdata: 0xb5ddb9c7000000000000000000000000000000000000000000000000000000000000001008, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RewardEscrow
Function name: appendVestingEntry(address,uint256) or appendVestingEntry(address,uint256)
PC address: 6280
Estimated Gas Usage: 34595 - 171773
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b471f7ef96683dba7cbcd1aa6e1bbe64.sol:797

stingEntries(account

--------------------
Initial State:

Account: [CREATOR], balance: 0x14200010000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000201000000000000010000000102020000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: appendVestingEntry(address,uint256), txdata: 0xb5ddb9c7000000000000000000000000000000000000000000000000000000000000000202, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RewardEscrow
Function name: appendVestingEntry(address,uint256) or appendVestingEntry(address,uint256)
PC address: 6539
Estimated Gas Usage: 34595 - 171773
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b471f7ef96683dba7cbcd1aa6e1bbe64.sol:801

h([time, quantity]);

        em

--------------------
Initial State:

Account: [CREATOR], balance: 0x14200010000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000201000000000000010000000102020000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: appendVestingEntry(address,uint256), txdata: 0xb5ddb9c7000000000000000000000000000000000000000000000000000000000000000202, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RewardEscrow
Function name: appendVestingEntry(address,uint256) or appendVestingEntry(address,uint256)
PC address: 6672
Estimated Gas Usage: 34595 - 171773
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b471f7ef96683dba7cbcd1aa6e1bbe64.sol:809

function vest(

--------------------
Initial State:

Account: [CREATOR], balance: 0x1301, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000010000000000010000000000000000000000000000000000000000000000000000000000000000000100000001800008000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: appendVestingEntry(address,uint256), txdata: 0xb5ddb9c7000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RewardEscrow
Function name: appendVestingEntry(address,uint256) or appendVestingEntry(address,uint256)
PC address: 6750
Estimated Gas Usage: 34595 - 171773
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b471f7ef96683dba7cbcd1aa6e1bbe64.sol:812

tingEntries(msg.sender);
        uint total;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x14200010000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000201000000000000010000000102020000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: appendVestingEntry(address,uint256), txdata: 0xb5ddb9c7000000000000000000000000000000000000000000000000000000000000000202, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RewardEscrow
Function name: appendVestingEntry(address,uint256) or appendVestingEntry(address,uint256)
PC address: 7173
Estimated Gas Usage: 34595 - 171773
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x14200010000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000201000000000000010000000102020000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: appendVestingEntry(address,uint256), txdata: 0xb5ddb9c7000000000000000000000000000000000000000000000000000000000000000202, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: RewardEscrow
Function name: appendVestingEntry(address,uint256) or appendVestingEntry(address,uint256)
PC address: 7177
Estimated Gas Usage: 34595 - 171773
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x14200010000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000201000000000000010000000102020000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: appendVestingEntry(address,uint256), txdata: 0xb5ddb9c7000000000000000000000000000000000000000000000000000000000000000202, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: RewardEscrow
Function name: getVestingTime(address,uint256)
PC address: 7408
Estimated Gas Usage: 1670 - 4447
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1111102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000004, value: 0x0
Caller: [CREATOR], function: getVestingTime(address,uint256), txdata: 0x9b217f90, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: RewardEscrow
Function name: getVestingScheduleEntry(address,uint256)
PC address: 7408
Estimated Gas Usage: 1734 - 4511
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x102080000012002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [ATTACKER], function: getVestingScheduleEntry(address,uint256), txdata: 0xda7bd3e9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: RewardEscrow
Function name: getVestingQuantity(address,uint256)
PC address: 7408
Estimated Gas Usage: 1780 - 4557
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2002000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: getVestingQuantity(address,uint256), txdata: 0xee1d036c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: RewardEscrow
Function name: appendVestingEntry(address,uint256) or appendVestingEntry(address,uint256)
PC address: 8168
Estimated Gas Usage: 34595 - 171773
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x14200010000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000201000000000000010000000102020000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: appendVestingEntry(address,uint256), txdata: 0xb5ddb9c7000000000000000000000000000000000000000000000000000000000000000202, value: 0x0