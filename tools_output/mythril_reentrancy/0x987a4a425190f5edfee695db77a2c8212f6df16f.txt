==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Allocation
Function name: addShare(address,uint256,uint256)
PC address: 563
Estimated Gas Usage: 19788 - 116804
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:451

        require(now >= unlockPart1);


--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256)
PC address: 649
Estimated Gas Usage: 19788 - 116804
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:453

portion;

        if (now < unl

--------------------
Initial State:

Account: [CREATOR], balance: 0x84180000a09802a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256)
PC address: 704
Estimated Gas Usage: 19788 - 116804
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:453

56 share = shares[_owner].proportion;

        if (now < unlockPart2) {

            share = share

--------------------
Initial State:

Account: [CREATOR], balance: 0x84180000a09802a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256)
PC address: 713
Estimated Gas Usage: 19788 - 116804
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:457

t)/100;

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x84180000a09802a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256)
PC address: 716
Estimated Gas Usage: 19788 - 116804
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:457

t)/100;

            shares

--------------------
Initial State:

Account: [CREATOR], balance: 0x84180000a09802a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Allocation
Function name: addShare(address,uint256,uint256)
PC address: 735
Estimated Gas Usage: 19788 - 116804
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:447

/ If the time of freezing expired will return the funds to the owner.

    function unlockFor(address _owner) public {

        require(now >= unlockPart1);

        uint256 share = shares[_owner].proportion;

        if (now < unlockPart2) {

            share = share.mul(shares[_owner].forPart)/100;

            shares[_owner].f

--------------------
Initial State:

Account: [CREATOR], balance: 0x84180000a09802a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addShare(address,uint256,uint256), txdata: 0xae7d0cac, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Allocation
Function name: unlockFor(address)
PC address: 786
Estimated Gas Usage: 1088 - 1513
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:469

Share.sub(share);

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unlockFor(address), txdata: 0xdde49979, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Allocation
Function name: unlockFor(address)
PC address: 829
Estimated Gas Usage: 2818 - 3763
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlockFor(address), txdata: 0xdde49979, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 904
Estimated Gas Usage: 5115 - 41140
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:717

thing;

        

            require(state == State.Active);

            //internalCalc(_arg1);

            state = State.Closed;

            emit Closed();

        

        }

        else if (_state == 2) {

            require(_params.length == 0);

            // Call from Crowdsale.initialization()

            // arg1 = weiTotalRaised();

            // arg2 = nothing;

            require(state == State.Closed);

            require(address(this).balance == 0);

            state = State.Active;

            step++;

            emit Started();

        

        }

        else if (_state == 3 ) {

            require(_params.length == 0);

            require(state == State.Active);

            state = State.Refunding;

            emit RefundsEnabled();

        }

        else if (_state == 4) {

            require(_params.length == 2);

            //onlyPartnersOrAdmin(address(_params[1]));

            internalCalc(uint256(_params[0]));

        }

        else if (_state == 5) {

            // arg1 = old ETH/USD (exchange)

            // arg2 = new ETH/USD (_ETHUSD)

            require(_params.length == 2);

            for (uint8 user=0; user<cap.length; user++) cap[user]=cap[user].mul(uint256(_params[0])).div(uint256(_params[1]));

        }



    }



    function freeCash() view public returns(uint256){

        return newCash+benReady;

    }



    function internalCalc(uint256 _allValue) internal {



        uint256 free=newCash+benReady;

        uint256 common=0;

        uint256 prcSum=0;

        uint256 plan=0;

        uint8[] memory indexes = new uint8[](percent.length);

        uint8 count = 0;



        if (free==0) return;



        uint8 i;



        for (i =0; i <percent.length; i++) {

            plan=_allValue*percent[i]/100;



            if(cap[i] != 0 && plan > cap[i]) plan = cap[i];



            if (total[i] >= plan) {

                debt[i]=0;

                continue;

            }



            plan -= total[i];

            debt[i] = plan;

            common += plan;

            inde

--------------------
Initial State:

Account: [CREATOR], balance: 0x402004041, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setup(uint8,bytes32[]), txdata: 0xed4f2b330000000000000000000000000000000000000000000000000000000000000004ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: fallback
PC address: 1046
Estimated Gas Usage: 168 - 593
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:641

function balance() ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: debt(uint256), txdata: 0x1e0029c8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: took(uint256)
PC address: 1127
Estimated Gas Usage: 278 - 703
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:857

 = i;

            prcSum += percent[i];

        }

        if(common > free){

            b

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: took(uint256), txdata: 0x69dadecd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: percent(uint256)
PC address: 1150
Estimated Gas Usage: 322 - 747
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:653

ire(rightAndRoles.onlyRol

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: percent(uint256), txdata: 0x7532b4ac, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: wallets(uint256)
PC address: 1163
Estimated Gas Usage: 344 - 769
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:1025
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: wallets(uint256), txdata: 0x7ad71f72, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FinancialStrategy
Function name: transferTokens(address,address,uint256)
PC address: 1714
Estimated Gas Usage: 4692 - 77022
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FinancialStrategy
Function name: transferTokens(address,address,uint256)
PC address: 1868
Estimated Gas Usage: 4692 - 77022
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FinancialStrategy
Function name: transferTokens(address,address,uint256)
PC address: 1868
Estimated Gas Usage: 4692 - 77022
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: total(uint256)
PC address: 1929
Estimated Gas Usage: 410 - 835
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:681

                               

    function setup(uint8 _state, bytes32[] _params) external {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: total(uint256), txdata: 0xb119ebfe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 2596
Estimated Gas Usage: 5115 - 41140
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:723

nternalCalc(_arg1);

            stat

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== Unprotected Selfdestruct ====
SWC ID: 106
Severity: High
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 2709
Estimated Gas Usage: 3233 - 39305
Any sender can cause the contract to self-destruct.
Any sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account and withdraw its balance to an arbitrary address. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:765

emit RefundsEnabled()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000082, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 2737
Estimated Gas Usage: 5115 - 41140
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:771

   require(_params.l

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 2765
Estimated Gas Usage: 5115 - 41140
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:775

          internalCalc(uint256(_params[0]));

        }

        else if (_state == 5) {

            // arg1 = old ETH/USD (exchange)

            // arg2 = new ETH/USD (_ETHUSD)

            require(_params.length == 2);

            for (uint8 user=0; user<cap.length; user++) cap[user]=cap[user].mul(uint256(_params[0])).div(uint256(_params[1]));

        }



    }



    function freeCash() view public returns(uint256){

        return newCash+benReady;

    }



    function internalCalc(uint256 _allValue) internal {



        uint256 free=newCash+benReady;

        uint256 common=0;

        uint256 prcSum=0;

        uint256 plan=0;

        uint8[] memory indexes = new uint8[](percent.length);

        uint8 count = 0;



        if (free==0) return;



        uint8 i;



        for (i =0; i <percent.length; i++) {

            plan=_allValue*percent[i]/100;



            if(cap[i] != 0 && plan > cap[i]) plan = cap[i];



            if (total[i] >= plan) {

                debt[i]=0;

                continue;

            }



            plan -= total[i];

            debt[i] = plan;

            common += plan;

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 2774
Estimated Gas Usage: 5115 - 41140
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:775

rams[0]));

        }

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 2846
Estimated Gas Usage: 5115 - 41140
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:787

r<cap.length; user++) cap[user]=cap

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 3012
Estimated Gas Usage: 5115 - 41140
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:809

nReady;

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 3040
Estimated Gas Usage: 5115 - 41140
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:815

0;

        uint8[] memory indexes = new uint8[](percent.length);

        uint8 count = 0;



        if (free==0) return;



        uint8 i;



        for (i =0; i <percent.length; i++) {

            plan=_allValue*percent[i]/100;



            if(cap[i] != 0 && plan > cap[i]) plan = cap[i];



            if (total[i] >= plan) {

                debt[i]=0;

                continue;

            }



            plan -= total[i];

            debt[i] = plan;

            common += plan;

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 3049
Estimated Gas Usage: 5115 - 41140
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:817

 = new uint8[](percent.lengt

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: ready(uint256)
PC address: 3327
Estimated Gas Usage: 586 - 1011
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:685

dRoles.onlyRoles(msg.sender,1));



        if (_state == 0)  {

            require(_params.length == 1);

            // call from Crowdsale.distructVault(true) for exit

            // arg1 - nothing

            // arg2 - nothing

            selfdestruct(address(_params[0]));



        }

        else if (_state == 1 ) {

            require(_params.length == 0);

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: ready(uint256), txdata: 0xf0bd2b9e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3423
Estimated Gas Usage: 24762 - 123781
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
Initial State:

Account: [CREATOR], balance: 0x103221922508824, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3479
Estimated Gas Usage: 24762 - 123781
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:697

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x26458494200018659, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x542800011e0000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3507
Estimated Gas Usage: 24762 - 123781
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:695

thing

            // arg2

--------------------
Initial State:

Account: [CREATOR], balance: 0x26458494200018659, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x542800011e0000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3549
Estimated Gas Usage: 24762 - 123781
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:693

xit

          

--------------------
Initial State:

Account: [CREATOR], balance: 0x26458494200018659, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x542800011e0000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3563
Estimated Gas Usage: 24762 - 123781
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:693

xit

            // arg1 -

--------------------
Initial State:

Account: [CREATOR], balance: 0x26458494200018659, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x542800011e0000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3605
Estimated Gas Usage: 24762 - 123781
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:707

    require(_params.length == 

--------------------
Initial State:

Account: [CREATOR], balance: 0x26458494200018659, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x542800011e0000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3608
Estimated Gas Usage: 24762 - 123781
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:707

    require(_params.length == 

--------------------
Initial State:

Account: [CREATOR], balance: 0x26458494200018659, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x542800011e0000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3621
Estimated Gas Usage: 24762 - 123781
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:707

    require(_params.length == 

--------------------
Initial State:

Account: [CREATOR], balance: 0x26458494200018659, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x542800011e0000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3625
Estimated Gas Usage: 24762 - 123781
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:707

    require(_params.length == 

--------------------
Initial State:

Account: [CREATOR], balance: 0x26458494200018659, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x542800011e0000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address)
PC address: 3632
Estimated Gas Usage: 24762 - 123781
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:707

    require(_params.length == 

--------------------
Initial State:

Account: [CREATOR], balance: 0x26458494200018659, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x542800011e0000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: cap(uint256)
PC address: 3963
Estimated Gas Usage: 674 - 1099
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:641

function balance() ext

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cap(uint256), txdata: 0xff2ad8e4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 4201
Estimated Gas Usage: 5115 - 41140
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:871

         i =

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[])
PC address: 4204
Estimated Gas Usage: 5115 - 41140
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3145b21028ccc316d92d902594be593c.sol:871

         i =

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000480, value: 0x0


