==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5546
Estimated Gas Usage: 27026 - 274666
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5623
Estimated Gas Usage: 27026 - 274666
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/4eeb7137d3ade7a95635bf8dd4e01401.sol:348

= spot.ilk

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5623
Estimated Gas Usage: 27026 - 274666
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4eeb7137d3ade7a95635bf8dd4e01401.sol:348

= spot.ilk

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5650
Estimated Gas Usage: 27026 - 274666
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4eeb7137d3ade7a95635bf8dd4e01401.sol:349

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5727
Estimated Gas Usage: 27026 - 274666
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4eeb7137d3ade7a95635bf8dd4e01401.sol:349

     // pa

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5750
Estimated Gas Usage: 27026 - 274666
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4eeb7137d3ade7a95635bf8dd4e01401.sol:349

 pi

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5818
Estimated Gas Usage: 27026 - 274666
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4eeb7137d3ade7a95635bf8dd4e01401.sol:349

 pip retur

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5845
Estimated Gas Usage: 27026 - 274666
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4eeb7137d3ade7a95635bf8dd4e01401.sol:350

      tag[i

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5922
Estimated Gas Usage: 27026 - 274666
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4eeb7137d3ade7a95635bf8dd4e01401.sol:350

      tag[i

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 5949
Estimated Gas Usage: 27026 - 274666
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: End
Function name: account_info_rotate_tine(uint256)
PC address: 6026
Estimated Gas Usage: 27026 - 274666
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/4eeb7137d3ade7a95635bf8dd4e01401.sol:350

spot.par()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0