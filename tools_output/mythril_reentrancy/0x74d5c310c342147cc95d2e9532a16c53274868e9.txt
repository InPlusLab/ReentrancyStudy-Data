==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1197
Estimated Gas Usage: 27728 - 178691
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:633

a7cC9f2C

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1220
Estimated Gas Usage: 27728 - 178691
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:635

Nam

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1300
Estimated Gas Usage: 27728 - 178691
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:635

Name("eth_mainne

--------------------
Initial State:

Account: [CREATOR], balance: 0x3220000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1300
Estimated Gas Usage: 27728 - 178691
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:635

Name("eth_mainne

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1345
Estimated Gas Usage: 27728 - 178691
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:635

  oraclize_setNetworkName("eth_mainnet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1372
Estimated Gas Usage: 27728 - 178691
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:635

  oraclize_setNetworkName("eth_mainnet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1376
Estimated Gas Usage: 27728 - 178691
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:755

+ tx.gas

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1573
Estimated Gas Usage: 24843 - 140018
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:755

+ tx.gasprice*200000) return 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000102000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1573
Estimated Gas Usage: 23337 - 138512
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:755

+ tx.gasprice*200000) return 

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1573
Estimated Gas Usage: 27728 - 178691
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:755

+ tx.gasprice*200000) return 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1624
Estimated Gas Usage: 27728 - 178691
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:631

etC

--------------------
Initial State:

Account: [CREATOR], balance: 0x4100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1645
Estimated Gas Usage: 27728 - 178691
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:631

D29

--------------------
Initial State:

Account: [CREATOR], balance: 0x4100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DrawContract
Function name: draw(string,string,string)
PC address: 1687
Estimated Gas Usage: 27728 - 178691
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fe31658a6cf6dd3b5d2883e9d087214e.sol:633

8A3

--------------------
Initial State:

Account: [CREATOR], balance: 0x4100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: draw(string,string,string), txdata: 0xc8962de7, value: 0x0