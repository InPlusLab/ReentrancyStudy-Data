with mythril_dir
==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GasRefundToken
Function name: setMinimumGasPriceForFutureRefunds(uint256)
PC address: 696
Estimated Gas Usage: 7627 - 62379
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1787

alue, msg.sender);

        }

        return true;

    }



    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setMinimumGasPriceForFutureRefunds(uint256), txdata: 0x1e1256c3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReclaimerToken
Function name: reclaimContract(address)
PC address: 703
Estimated Gas Usage: 3441 - 38902
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1045

priorBalance) {

        bytes32 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address,address), txdata: 0x88ee39cc, value: 0x0
Caller: [CREATOR], function: reclaimContract(address), txdata: 0x2aed7f3f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BalanceSheet
Function name: fallback
PC address: 928
Estimated Gas Usage: 1975 - 3250
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:725

kenHolder][_spender] = allow

--------------------
Initial State:

Account: [CREATOR], balance: 0x200408355c18ff009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setBalance(address,uint256), txdata: 0xe30443bc000000000000000000000000008080402010020480200840208010000000000005, value: 0x0
Caller: [CREATOR], function: addBalance(address,uint256), txdata: 0x21e5383a1010101010101010101010100080804020100204802008402080100000000000fb, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BalanceSheet
Function name: subBalance(address,uint256)
PC address: 946
Estimated Gas Usage: 2057 - 3332
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:731

nt256 _value) public onlyOwn

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: subBalance(address,uint256), txdata: 0xcf8eeb7e000000000000000000000000000200000180012000020804000020400220048001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AllowanceSheet
Function name: addAllowance(address,address,uint256)
PC address: 1022
Estimated Gas Usage: 2112 - 3577
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:765

ic owner;

    address public pendingOwner;





--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAllowance(address,address,uint256), txdata: 0xda46098c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010, value: 0x0
Caller: [CREATOR], function: addAllowance(address,address,uint256), txdata: 0x5fd72d1600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AllowanceSheet
Function name: subAllowance(address,address,uint256)
PC address: 1040
Estimated Gas Usage: 2150 - 3615
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:785

d_Deprecated = false;

    address private glob

--------------------
Initial State:

Account: [CREATOR], balance: 0x1100000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: subAllowance(address,address,uint256), txdata: 0x97d88cd20000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReclaimerToken
Function name: reclaimToken(address,address)
PC address: 1098
Estimated Gas Usage: 4519 - 75720
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1033

etBalance(address _wh

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address,address), txdata: 0x88ee39cc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReclaimerToken
Function name: reclaimToken(address,address)
PC address: 1253
Estimated Gas Usage: 4519 - 75720
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1033

iew returns (uint256 outBala

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address,address), txdata: 0x88ee39cc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ReclaimerToken
Function name: reclaimToken(address,address)
PC address: 1253
Estimated Gas Usage: 4519 - 75720
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1033

iew returns (uint256 outBala

--------------------
Initial State:

Account: [CREATOR], balance: 0x8a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address,address), txdata: 0x88ee39cc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TrueGBP
Function name: setMinimumGasPriceForFutureRefunds(uint256)
PC address: 1886
Estimated Gas Usage: 7725 - 63137
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1787

alue, msg.sender);

        }

        return true;

    }



    

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setMinimumGasPriceForFutureRefunds(uint256), txdata: 0x1e1256c3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ModularBurnableToken
Function name: burn(uint256)
PC address: 1921
Estimated Gas Usage: 1257 - 1963
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1139

the new allowance by unf

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080201298a013, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burn(uint256), txdata: 0x42966c6897, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TrueGBP
Function name: reclaimContract(address)
PC address: 2256
Estimated Gas Usage: 3586 - 39377
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1045

priorBalance) {

        bytes32 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimContract(address), txdata: 0x2aed7f3f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TrueGBP
Function name: reclaimToken(address,address)
PC address: 3667
Estimated Gas Usage: 4897 - 76758
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1033

etBalance(address _wh

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address,address), txdata: 0x88ee39cc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TrueGBP
Function name: reclaimToken(address,address)
PC address: 3822
Estimated Gas Usage: 4897 - 76758
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1033

iew returns (uint256 outBala

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address,address), txdata: 0x88ee39cc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TrueGBP
Function name: reclaimToken(address,address)
PC address: 3822
Estimated Gas Usage: 4897 - 76758
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1033

iew returns (uint256 outBala

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000130000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address,address), txdata: 0x88ee39cc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TrueGBP
Function name: transfer(address,uint256)
PC address: 7509
Estimated Gas Usage: 5891 - 17231
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1139

the new allowance by unf

--------------------
Initial State:

Account: [CREATOR], balance: 0xc3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000010000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TrueGBP
Function name: transferFrom(address,address,uint256)
PC address: 7509
Estimated Gas Usage: 12588 - 48585
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/04e08472345f04fc9fbe657169d35338.sol:1397

nWithBounds.sol



--------------------
Initial State:

Account: [CREATOR], balance: 0x4390010450000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000004002, value: 0x0


