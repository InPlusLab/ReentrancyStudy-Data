==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FoamTokenController
Function name: constructor
PC address: 774
Estimated Gas Usage: 12095 - 57127
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5a6186450cfaadd38741234121c4d7f.sol:407

sPerUnit = sale.saleTokensPerUnit();

        extraTokensPerUnit = sale.extraTokensPerUnit();


--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 010101010101010101010101010101010101010101010101014008010180011001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FoamTokenController
Function name: constructor
PC address: 1127
Estimated Gas Usage: 68779 - 366324
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d5a6186450cfaadd38741234121c4d7f.sol:423

;



        require(sal

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000202000002020002040400000002000180040001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FoamTokenController
Function name: constructor
PC address: 1173
Estimated Gas Usage: 68779 - 366324
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d5a6186450cfaadd38741234121c4d7f.sol:423

 not be paired yet");



        require(sal

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000020000000000000000000000000000101800101010101010100000000000020000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000020010100200020002000200040102000200020081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FoamTokenController
Function name: constructor
PC address: 1176
Estimated Gas Usage: 68779 - 366324
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d5a6186450cfaadd38741234121c4d7f.sol:427

 0, 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000020000000000000000000000000000101800101010101010100000000000020000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000020010100200020002000200040102000200020081, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FoamTokenController
Function name: constructor
PC address: 1273
Estimated Gas Usage: 68779 - 366324
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d5a6186450cfaadd38741234121c4d7f.sol:427

 0, "sender must have pur

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000202000002020002040400000002000180040001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FoamTokenController
Function name: constructor
PC address: 1273
Estimated Gas Usage: 68779 - 366324
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/d5a6186450cfaadd38741234121c4d7f.sol:427

 0, "sender must have pur

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000001020000000000000000000000000000000000000000000000000000000002100000000400000810200002040000200200000000000000000000000000000202000002020000020200000202000002020001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FoamTokenController
Function name: constructor
PC address: 1273
Estimated Gas Usage: 68779 - 366324
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d5a6186450cfaadd38741234121c4d7f.sol:427

 0, "sender must have pur

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000020000000000000000000000000000101800101010101010100000000000020000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000020010100200020002000200040102000200020081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FoamTokenController
Function name: constructor
PC address: 1319
Estimated Gas Usage: 68779 - 366324
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d5a6186450cfaadd38741234121c4d7f.sol:427

utions(msg.sender) != 0, "sender must have pur

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000020000000000000000000000000000101800101010101010100000000000020000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000020010100200020002000200040102000200020081, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FoamTokenController
Function name: setPlatformLaunchDate(uint256)
PC address: 5883
Estimated Gas Usage: 1201 - 1626
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d5a6186450cfaadd38741234121c4d7f.sol:561

;

      }

    }



    function setSaleContract(SaleInterface _sale) public onlyOwner {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000108000800000004000000400000200011000000000000000000000000000000002000201010100000000000000000000000000010000000000000000000000000000010001000000000202000000000000020200000000000000000000000000000004000002020000000200000202000002020001, value: 0x0
Caller: [CREATOR], function: setPlatformLaunchDate(uint256), txdata: 0x3ddc5b3b01, value: 0x0