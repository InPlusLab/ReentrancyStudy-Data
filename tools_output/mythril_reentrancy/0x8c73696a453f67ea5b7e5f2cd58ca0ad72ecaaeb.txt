==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLock
Function name: fallback
PC address: 159
Estimated Gas Usage: 1640 - 36158
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:517
Initial State:

Account: [CREATOR], balance: 0x10000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x44000000000000004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLock
Function name: fallback
PC address: 665
Estimated Gas Usage: 26894 - 145438
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:415

nt) public ownerOnly {

        require(

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x204100000002a401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenLock
Function name: fallback
PC address: 756
Estimated Gas Usage: 26894 - 145438
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:421

lready release

--------------------
Initial State:

Account: [CREATOR], balance: 0x180080402000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b0000000000000000000000000000000000000000000000000000000000000000010201040202020101010102040101010101010804012020010280018001010105, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenLock
Function name: fallback
PC address: 758
Estimated Gas Usage: 26894 - 145438
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:419

e,

            "Already release

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b0000000000000000000000000000000000000000000000000000000000000000022002028040084001400220012080208040080008400202200804100210402001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLock
Function name: fallback
PC address: 768
Estimated Gas Usage: 26894 - 145438
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000078c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLock
Function name: fallback
PC address: 776
Estimated Gas Usage: 26894 - 145438
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000078c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLock
Function name: fallback
PC address: 827
Estimated Gas Usage: 26894 - 145438
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:431



            r.rel

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000078c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLock
Function name: fallback
PC address: 858
Estimated Gas Usage: 26894 - 145438
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:431



            r.rel

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000078c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLock
Function name: fallback
PC address: 896
Estimated Gas Usage: 26894 - 145438
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:431



            r.rel

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000078c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLock
Function name: fallback
PC address: 938
Estimated Gas Usage: 26894 - 145438
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:431



            r.rel

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000078c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address,uint256,uint256), txdata: 0x0efe6a8b000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenLock
Function name: release(uint256,address,uint256)
PC address: 1230
Estimated Gas Usage: 2765 - 3710
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:441

   require(

            _merchantAmount <= r.amount,

            "Merchant amount larger than locked amount."

        );



        

        if (_merchantAmount > 0) {

            require(md.transfer(_merchantAddress, _merchantAmount));

        }

        

        uint256 remainingAmount = r.amount.sub(_merchantAmount);

        if (remainingAmount > 0){

            require(md.transfer(r.userAddress, remainingAmount));

        }



        lockStatus[_index] = true;

        emit Release(r.userAddress, _merchantAddress, _merchantAmount, r.releaseTime, _index);

    }

    

    /**

     * Change owner address (where ICO ETH is being forwarded).

     */

    function changeOwner(address _newowner) public ownerOnly returns (bool success) {

        owner = _newowner;

        return true;

    }

    

    // forward all eth to owner

    function() payable public {

        if (!owner.call.value(msg.value)()) revert();

    }



    // only owner can kill

    function kill() public ownerOnly {

        md.transfer(owner, getContr

--------------------
Initial State:

Account: [CREATOR], balance: 0xb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: release(uint256,address,uint256), txdata: 0x229c9f6c, value: 0x0

==== Unprotected Selfdestruct ====
SWC ID: 106
Severity: High
Contract: MD
Function name: kill()
PC address: 1425
Estimated Gas Usage: 1906 - 2661
Any sender can cause the contract to self-destruct.
Any sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account and withdraw its balance to an arbitrary address. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:345

    mapping(uint256

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: adadadadadadadadadadadaddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: kill(), txdata: 0x41c0e1b5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLock
Function name: kill()
PC address: 2190
Estimated Gas Usage: 7630 - 78831
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:517
Initial State:

Account: [CREATOR], balance: 0x2000000500000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: kill(), txdata: 0x41c0e1b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenLock
Function name: kill()
PC address: 2234
Estimated Gas Usage: 7630 - 78831
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:517
Initial State:

Account: [CREATOR], balance: 0x500000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: kill(), txdata: 0x41c0e1b5, value: 0x0

==== Unprotected Selfdestruct ====
SWC ID: 106
Severity: High
Contract: TokenLock
Function name: kill()
PC address: 2244
Estimated Gas Usage: 7630 - 78831
Any sender can cause the contract to self-destruct.
Any sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account and withdraw its balance to an arbitrary address. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:517
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: kill(), txdata: 0x41c0e1b5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLock
Function name: getContractBalance()
PC address: 2353
Estimated Gas Usage: 2699 - 37967
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:407

ckRecords.push(r);

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: getContractBalance(), txdata: 0x6f9fb98a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenLock
Function name: kill()
PC address: 2353
Estimated Gas Usage: 7630 - 78831
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0295c3d5009f3b04e7667496ec7e0e63.sol:407

ckRecords.push(r);

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000500000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: kill(), txdata: 0x41c0e1b5, value: 0x0


