==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 1028
Estimated Gas Usage: 49145 - 242660
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:170

Storage[INITIALIZED];
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BaseBridgeValidators
Function name: getNextValidator(address)
PC address: 1510
Estimated Gas Usage: 1762 - 5622
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getNextValidator(address), txdata: 0x8d37052c, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BaseBridgeValidators
Function name: isValidator(address)
PC address: 1510
Estimated Gas Usage: 2005 - 6195
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0xfbfba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: isValidator(address), txdata: 0xfacd743b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 2149
Estimated Gas Usage: 49145 - 242660
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:350

Storage[REQUIRED_SIGNATURES] = _requiredSignatures;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 2219
Estimated Gas Usage: 49145 - 242660
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:351

Storage[DEPLOYED_AT_BLOCK] = block.number;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BridgeValidators
Function name: getNextValidator(address)
PC address: 2919
Estimated Gas Usage: 1828 - 5688
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getNextValidator(address), txdata: 0x8d37052c, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BridgeValidators
Function name: isValidator(address)
PC address: 2919
Estimated Gas Usage: 2071 - 6261
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: isValidator(address), txdata: 0xfacd743b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 2988
Estimated Gas Usage: 49145 - 242660
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:278

essStorage[keccak256(abi.encodePacked("validatorsList", _address))];
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 3081
Estimated Gas Usage: 49145 - 242660
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:81

essStorage[OWNER];
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 4074
Estimated Gas Usage: 49145 - 242660
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:98

essStorage[OWNER] = newOwner;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 4115
Estimated Gas Usage: 49145 - 242660
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:98

essStorage[OWNER] = newOwner;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 4261
Estimated Gas Usage: 49145 - 242660
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x945000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000003800000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 4331
Estimated Gas Usage: 49145 - 242660
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:291

essStorage[keccak256(abi.encodePacked("validatorsList", _prevValidator))] = _validator;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 4373
Estimated Gas Usage: 49145 - 242660
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:291

essStorage[keccak256(abi.encodePacked("validatorsList", _prevValidator))] = _validator;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 4469
Estimated Gas Usage: 49145 - 242660
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:287

Storage[VALIDATOR_COUNT] = _validatorCount;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 4547
Estimated Gas Usage: 49145 - 242660
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:166

Storage[INITIALIZED] = true;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BridgeValidators
Function name: initialize(uint256,address[],address)
PC address: 4556
Estimated Gas Usage: 49145 - 242660
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/e9d2ca11117e57a539810638ad54563a.sol:166

Storage[INITIALIZED] = true;
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080080100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,address[],address), txdata: 0x52af719f0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0