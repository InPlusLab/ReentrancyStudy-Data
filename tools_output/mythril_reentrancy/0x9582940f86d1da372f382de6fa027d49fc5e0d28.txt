==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: fallback
PC address: 1151
Estimated Gas Usage: 11430 - 119473
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:395

sed (set

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ABERoll
Function name: fallback
PC address: 1231
Estimated Gas Usage: 11430 - 119473
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:395

sed (settled or refunded

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: fallback
PC address: 1231
Estimated Gas Usage: 11430 - 119473
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:395

sed (settled or refunded

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: fallback
PC address: 1275
Estimated Gas Usage: 11430 - 119473
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:395

 == 0, "All 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: fallback
PC address: 1392
Estimated Gas Usage: 11430 - 119473
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:397

BEToken.tran

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: kill()
PC address: 4319
Estimated Gas Usage: 7697 - 79981
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:421

     with th

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kill(), txdata: 0x41c0e1b5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: increaseJackpot(uint256)
PC address: 6250
Estimated Gas Usage: 13019 - 105208
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:381

Size + l

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: increaseJackpot(uint256), txdata: 0xd6d30a51, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ABERoll
Function name: increaseJackpot(uint256)
PC address: 6330
Estimated Gas Usage: 13019 - 105208
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:381

Size + lockedInBets + wi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: increaseJackpot(uint256), txdata: 0xd6d30a51, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: increaseJackpot(uint256)
PC address: 6330
Estimated Gas Usage: 13019 - 105208
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:381

Size + lockedInBets + wi

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: increaseJackpot(uint256), txdata: 0xd6d30a51, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: increaseJackpot(uint256)
PC address: 6374
Estimated Gas Usage: 13019 - 105208
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:379

nce.");

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: increaseJackpot(uint256), txdata: 0xd6d30a51, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: increaseJackpot(uint256)
PC address: 6492
Estimated Gas Usage: 13019 - 105208
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:381

this), "Not enough funds.");

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: increaseJackpot(uint256), txdata: 0xd6d30a51, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: increaseJackpot(uint256)
PC address: 6534
Estimated Gas Usage: 13019 - 105208
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:381

this), "Not enough funds.");

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: increaseJackpot(uint256), txdata: 0xd6d30a51, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ABERoll
Function name: setMaxProfit(uint256)
PC address: 7513
Estimated Gas Usage: 8903 - 65775
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:47

// ABEToken.decimals() * 

--------------------
Initial State:

Account: [CREATOR], balance: 0x430000000800ae96c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setMaxProfit(uint256), txdata: 0xfbd668a9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ABERoll
Function name: setMaxProfit(uint256)
PC address: 7519
Estimated Gas Usage: 8903 - 65775
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:85

ble outcomes in a 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setMaxProfit(uint256), txdata: 0xfbd668a9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: setMaxProfit(uint256)
PC address: 7646
Estimated Gas Usage: 8903 - 65775
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:367

nt <= ABEToken.balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setMaxProfit(uint256), txdata: 0xfbd668a9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: fallback
PC address: 7652
Estimated Gas Usage: 11430 - 119473
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:951

 data

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ABERoll
Function name: fallback
PC address: 7765
Estimated Gas Usage: 11430 - 119473
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/cd871bfe89c891cf2bb5ddf907b8d662.sol:951

 data

    // in a simple prefix leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0