==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MultiVesting
Function name: vestedAmount(address)
PC address: 2312
Estimated Gas Usage: 1988 - 2273
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:284

.duration);
        }
    }

    /**
     * @notice Allows the owner to flush the eth.
     */
    function flushEth() public onlyOwner {
        owner.transfer(this.balance);
    }

    /**
     * @notice Allows the owner to destroy the contract and return the tokens to the owner.
     */
    function d

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MultiVesting
Function name: vestedAmount(address)
PC address: 2356
Estimated Gas Usage: 3742 - 4027
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:289

ush the eth.
     */
    function flushEth() public onlyOwner {
        o

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MultiVesting
Function name: vestedAmount(address)
PC address: 2381
Estimated Gas Usage: 3759 - 4044
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:289

o flush the eth.
     */
    function flushEth() public onlyOwner {
        owner.transfer(this.balance);
    }

    /**
     * @notice Allows the owner to destroy the contract and return the tokens to the owner.
     */
    function d

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000018e1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiVesting
Function name: destroy() or destroy()
PC address: 3576
Estimated Gas Usage: 7682 - 78648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:302
Initial State:

Account: [CREATOR], balance: 0x800000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiVesting
Function name: destroy() or destroy()
PC address: 3735
Estimated Gas Usage: 7682 - 78648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:302
Initial State:

Account: [CREATOR], balance: 0x800000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: destroy() or destroy()
PC address: 3754
Estimated Gas Usage: 7682 - 78648
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:302
Initial State:

Account: [CREATOR], balance: 0x200000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiVesting
Function name: destroyBeneficiary(address)
PC address: 4278
Estimated Gas Usage: 24903 - 121516
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:263

**
     * @dev Calculates the 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroyBeneficiary(address), txdata: 0x9742d64a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: destroyBeneficiary(address)
PC address: 4299
Estimated Gas Usage: 24903 - 121516
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:264

d but hasn&#3

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroyBeneficiary(address), txdata: 0x9742d64a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: destroyBeneficiary(address)
PC address: 4318
Estimated Gas Usage: 24903 - 121516
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:264

as already vested but hasn&#39;t been rele

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroyBeneficiary(address), txdata: 0x9742d64a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: destroyBeneficiary(address)
PC address: 4333
Estimated Gas Usage: 24903 - 121516
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:265

  * @param _beneficiary Beneficia

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroyBeneficiary(address), txdata: 0x9742d64a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: destroyBeneficiary(address)
PC address: 4347
Estimated Gas Usage: 24903 - 121516
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:265

  * @param _beneficiary Beneficia

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroyBeneficiary(address), txdata: 0x9742d64a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: destroyBeneficiary(address)
PC address: 4357
Estimated Gas Usage: 24903 - 121516
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:267

leasableAmount(addre

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroyBeneficiary(address), txdata: 0x9742d64a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: destroyBeneficiary(address)
PC address: 4378
Estimated Gas Usage: 24903 - 121516
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:266

     */
    function releasableAmount(address _beneficia

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: destroyBeneficiary(address), txdata: 0x9742d64a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 4986
Estimated Gas Usage: 56510 - 275944
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:208

rt,
            cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5161
Estimated Gas Usage: 56510 - 275944
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5171
Estimated Gas Usage: 56510 - 275944
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5181
Estimated Gas Usage: 56510 - 275944
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5191
Estimated Gas Usage: 56510 - 275944
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5201
Estimated Gas Usage: 56510 - 275944
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5218
Estimated Gas Usage: 56510 - 275944
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5232
Estimated Gas Usage: 56510 - 275944
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5250
Estimated Gas Usage: 56510 - 275944
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5264
Estimated Gas Usage: 56510 - 275944
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5282
Estimated Gas Usage: 56510 - 275944
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5296
Estimated Gas Usage: 56510 - 275944
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:211

voked : false,
            revocable : _revocable,
            isBeneficiary : true
            });
        totalVested = totalVested.add(_vested);
        NewBeneficiary(_beneficiary);
    }

    /**
     * @notice Allows the owner to revoke the vesting. Tokens already vested
     * remain in the contract, th

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5307
Estimated Gas Usage: 56510 - 275944
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:221

e owner.
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MultiVesting
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256,bool)
PC address: 5326
Estimated Gas Usage: 56510 - 275944
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/9fa394595d72ad783d4ed55ed4258641.sol:221

returned to the owner.
     * @param _

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b9b9b9b9b9b9b9b9b9b9b9b9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256,bool), txdata: 0xbdcab79500000000000000000000000001, value: 0x0