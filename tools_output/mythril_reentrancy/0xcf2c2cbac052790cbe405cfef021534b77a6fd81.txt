==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1622
Estimated Gas Usage: 69089 - 330412
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:729

equire(student != 0);

        requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x40940041160000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002008004004000200000000001000002200000000080002008000200000000000000000000000000000000000000000020108001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000010101011080200104108000001002000000808001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1720
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:765

tCertified(student, now, msg.sender, doc

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1787
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:783

(studentCertifications[s

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1816
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:773

ify(address student) 

        fromCertifier public

        returns (bool success) {

        require(studentCertifications[student].certified);

        // You need to uncertify all documents first

        require(studentCertifications[student].docume

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1826
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:773

ify(address student) 

        fromCertifier public

        returns (bool success) {

        require(studentCertifications[student].certified);

        // You need to uncertify all documents first

        require(studentCertifications[student].docume

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1835
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:773

ify(address student) 

        fromCertifier public

        returns (bool success) {

        require(studentCertifications[student].certified);

        // You need to uncertify all documents first

        require(studentCertifications[student].docume

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1842
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:773

ify(address student) 

        fromCertifier public

        returns (bool success) {

        require(studentCertifications[student].certified);

        // You need to uncertify all documents first

        require(studentCertifications[student].docume

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1873
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:773

ify(address student) 

        fromCertifier public

        returns (bool success) {

        require(studentCertifications[student].certified);

        // You need to uncertify all documents first

        require(studentCertifications[student].docume

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1909
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:773

ify(address student) 

        fromCertifier public

        returns (bool success) {

        require(studentCertifications[student].certified);

        // You need to uncertify all documents first

        require(studentCertifications[student].docume

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1963
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:791

certifiedStudents[index] = certifiedStudents[ce

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1986
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:785

Certifications[student].index;

        delete studentCertifications[student];

        if (certifiedStudents.length > 1) {

            certifiedStudents[index] = certifiedStudents[certifiedStudents.le

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 1996
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:785

Certifications[student].index;

        delete studentCertifications[student];

        if (certifiedStudents.length > 1) {

            certifiedStudents[index] = certifiedStudents[certifiedStudents.le

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 2004
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:785

Certifications[student].index;

        delete studentCertifications[student];

        if (certifiedStudents.length > 1) {

            certifiedStudents[index] = certifiedStudents[certifiedStudents.le

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 2008
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 2013
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 2022
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:793

       studentCertifications[certifiedStudents[index]].

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 2027
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 2033
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 2075
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:796


        certifiedStudents.leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 2115
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:796


        certifiedStudents.leng

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: withdrawPayments()
PC address: 2326
Estimated Gas Usage: 12872 - 87531
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:383

Balance;

            payments[d

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000001000000000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: withdrawPayments(), txdata: 0x6103d70b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CertificationDb
Function name: getCertifiedStudentAtIndex(uint256)
PC address: 3408
Estimated Gas Usage: 3053 - 3478
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:1005

     */

    function ge

--------------------
Initial State:

Account: [CREATOR], balance: 0x240000020000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000001200101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getCertifiedStudentAtIndex(uint256), txdata: 0xd5582205, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CertificationDb
Function name: getCertificationDocumentAtIndex(address,uint256)
PC address: 3581
Estimated Gas Usage: 3228 - 4503
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1494ae0a17d2068470e4fb0d166b4692.sol:1051
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004, value: 0x0
Caller: [CREATOR], function: getCertificationDocumentAtIndex(address,uint256), txdata: 0xde629235, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 4668
Estimated Gas Usage: 69089 - 330412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CertificationDb
Function name: certify(address,bytes32)
PC address: 4671
Estimated Gas Usage: 69089 - 330412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000404800000000000000000000000000201002000404040010000000000000000000000000000000000000004000020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: certify(address,bytes32), txdata: 0x5103a5a3000000000000000000000000020002000000000200000000000000000000002001, value: 0x0


