==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ImmAirDropA
Function name: signupUserWhitelist(address[],uint256)
PC address: 209
Estimated Gas Usage: 5155 - 44604
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f4a2f29e4daf80a0a34a4aece28e2965.sol:91

 	require(_userlist.length > 0);
    	uint256 useamt = _amttype * (10 ** uint256(decimals));
    	for (uint256 i = 0; i < _userlist.length; i++) {
    		if(_userlist[i] != address(0)){
    			token.transfer(_userlist[i], useamt);
    		}
    	}
    }
	
	function () external payable {
		revert();
	}
	
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [CREATOR], function: signupUserWhitelist(address[],uint256), txdata: 0x17158228ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ImmAirDropA
Function name: signupUserWhitelist(address[],uint256)
PC address: 1114
Estimated Gas Usage: 5155 - 44604
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f4a2f29e4daf80a0a34a4aece28e2965.sol:101

	reve

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 828282828282828282828282deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: signupUserWhitelist(address[],uint256), txdata: 0x1715822880, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ImmAirDropA
Function name: signupUserWhitelist(address[],uint256)
PC address: 1331
Estimated Gas Usage: 5155 - 44604
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f4a2f29e4daf80a0a34a4aece28e2965.sol:101

	revert();
	}
	
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 828282828282828282828282deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: signupUserWhitelist(address[],uint256), txdata: 0x1715822880, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ImmAirDropA
Function name: reClaimBalance()
PC address: 2240
Estimated Gas Usage: 7094 - 77918
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f4a2f29e4daf80a0a34a4aece28e2965.sol:80

nUpdateWallet(address

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: reClaimBalance(), txdata: 0xc721cfe2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ImmAirDropA
Function name: reClaimBalance()
PC address: 2304
Estimated Gas Usage: 7094 - 77918
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f4a2f29e4daf80a0a34a4aece28e2965.sol:80

let) 

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: reClaimBalance(), txdata: 0xc721cfe2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ImmAirDropA
Function name: reClaimBalance()
PC address: 2366
Estimated Gas Usage: 7094 - 77918
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f4a2f29e4daf80a0a34a4aece28e2965.sol:80

yAdmin

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: reClaimBalance(), txdata: 0xc721cfe2, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ImmAirDropA
Function name: reClaimBalance()
PC address: 2532
Estimated Gas Usage: 7094 - 77918
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/f4a2f29e4daf80a0a34a4aece28e2965.sol:80

let) public onlyAdmin{
		requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: reClaimBalance(), txdata: 0xc721cfe2, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ImmAirDropA
Function name: reClaimBalance()
PC address: 2532
Estimated Gas Usage: 7094 - 77918
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/f4a2f29e4daf80a0a34a4aece28e2965.sol:80

let) public onlyAdmin{
		requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000004, value: 0x0
Caller: [CREATOR], function: reClaimBalance(), txdata: 0xc721cfe2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ImmAirDropA
Function name: reClaimBalance()
PC address: 2532
Estimated Gas Usage: 7094 - 77918
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f4a2f29e4daf80a0a34a4aece28e2965.sol:80

let) public onlyAdmin{
		requ

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: reClaimBalance(), txdata: 0xc721cfe2, value: 0x0