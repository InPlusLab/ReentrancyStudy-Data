==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SelfDropLMA
Function name: fallback
PC address: 342
Estimated Gas Usage: 8394 - 97336
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/f5a56b3cfef4f1e1b400ef59462069ec.sol:145

(owner, _value);

    }

    

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x1

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SelfDropLMA
Function name: fallback
PC address: 441
Estimated Gas Usage: 15146 - 131325
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/f5a56b3cfef4f1e1b400ef59462069ec.sol:107

) {

            balances[_addrs[i]] = LMDA.balanceOf(_addrs[i]);

        }

    }

    

    function getBalanceOf(address _owner) public view returns(uint256) {

        return balances[_owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initBalances(address[]), txdata: 0x0520b81fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SelfDropLMA
Function name: fallback
PC address: 904
Estimated Gas Usage: 15146 - 131325
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/f5a56b3cfef4f1e1b400ef59462069ec.sol:117

turns(uint256) {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initBalances(address[]), txdata: 0x0520b81f80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SelfDropLMA
Function name: fallback
PC address: 904
Estimated Gas Usage: 15146 - 131325
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5a56b3cfef4f1e1b400ef59462069ec.sol:117

turns(uint256) {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initBalances(address[]), txdata: 0x0520b81f80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SelfDropLMA
Function name: fallback
PC address: 1000
Estimated Gas Usage: 15146 - 131325
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f5a56b3cfef4f1e1b400ef59462069ec.sol:117

_owner) public view returns(uint256) {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initBalances(address[]), txdata: 0x0520b81f80, value: 0x0