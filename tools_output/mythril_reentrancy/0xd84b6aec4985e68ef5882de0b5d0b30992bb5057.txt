==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3248
Estimated Gas Usage: 37209 - 196134
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:195

h,

      now,

      _value

    );



    CreateSw

--------------------
Initial State:

Account: [CREATOR], balance: 0x2583, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3569
Estimated Gas Usage: 37209 - 196134
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:205

rticipantAddress, msg.sender, _value, _secretHash, now);

  }

  function getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010202020401010102040204010104010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3622
Estimated Gas Usage: 37209 - 196134
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:205

rticipantAddress, msg.sender, _value, _secretHash, now);

  }

  function getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010202020401010102040204010104010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3640
Estimated Gas Usage: 37209 - 196134
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:205

rticipantAddress, msg.sender, _value, _secretHash, now);

  }

  function getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010202020401010102040204010104010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3693
Estimated Gas Usage: 37209 - 196134
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:205

rticipantAddress, msg.sender, _value, _secretHash, now);

  }

  function getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010202020401010102040204010104010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3710
Estimated Gas Usage: 37209 - 196134
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:205

rticipantAddress, msg.sender, _value, _secretHash, now);

  }

  function getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010202020401010102040204010104010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3727
Estimated Gas Usage: 37209 - 196134
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:205

rticipantAddress, msg.sender, _value, _secretHash, now);

  }

  function getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010202020401010102040204010104010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3774
Estimated Gas Usage: 37209 - 196134
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:205

rticipantAddress, msg.sender, _value, _secretHash, now);

  }

  function getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010202020401010102040204010104010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3785
Estimated Gas Usage: 37209 - 196134
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:205

rticipantAddress, msg.sender, _value, _secretHash, now);

  }

  function getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010202020401010102040204010104010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwapTarget(bytes20,address,address,uint256,address)
PC address: 3795
Estimated Gas Usage: 37209 - 196134
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:205

rticipantAddress, msg.sender, _value, _secretHash, now);

  }

  function getBalance(address _ownerAddress) public view returns (uint256) {

    return swaps[_ownerAddre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createSwapTarget(bytes20,address,address,uint256,address), txdata: 0x4b1a57730000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102010202020401010102040204010104010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 5870
Estimated Gas Usage: 37262 - 196187
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:155

ress,

      bytes32(0),

      _secretHash,

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x5815480100000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010104010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6191
Estimated Gas Usage: 37262 - 196187
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:163

alue

    );



    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH

--------------------
Initial State:

Account: [CREATOR], balance: 0xc07280080040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6244
Estimated Gas Usage: 37262 - 196187
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:163

alue

    );



    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH

--------------------
Initial State:

Account: [CREATOR], balance: 0xc07280080040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6262
Estimated Gas Usage: 37262 - 196187
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:163

alue

    );



    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH

--------------------
Initial State:

Account: [CREATOR], balance: 0xc07280080040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6315
Estimated Gas Usage: 37262 - 196187
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:163

alue

    );



    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH

--------------------
Initial State:

Account: [CREATOR], balance: 0xc07280080040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6332
Estimated Gas Usage: 37262 - 196187
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:163

alue

    );



    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH

--------------------
Initial State:

Account: [CREATOR], balance: 0xc07280080040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6349
Estimated Gas Usage: 37262 - 196187
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:163

alue

    );



    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH

--------------------
Initial State:

Account: [CREATOR], balance: 0xc07280080040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6396
Estimated Gas Usage: 37262 - 196187
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:163

alue

    );



    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH

--------------------
Initial State:

Account: [CREATOR], balance: 0xc07280080040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6407
Estimated Gas Usage: 37262 - 196187
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:163

alue

    );



    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH

--------------------
Initial State:

Account: [CREATOR], balance: 0xc07280080040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: EthTokenToSmthSwaps
Function name: createSwap(bytes20,address,uint256,address)
PC address: 6417
Estimated Gas Usage: 37262 - 196187
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/418c98e14a6031d0f359652224d9d3b9.sol:163

alue

    );



    CreateSwap(_token, _participantAddress, msg.sender, _value, _secretHash, now);

  }

  // ETH Owner creates Swap with secretHash and targetWallet

  // ETH

--------------------
Initial State:

Account: [CREATOR], balance: 0xc07280080040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: createSwap(bytes20,address,uint256,address), txdata: 0xaa2e7ea0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000101010101010101010101010000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0