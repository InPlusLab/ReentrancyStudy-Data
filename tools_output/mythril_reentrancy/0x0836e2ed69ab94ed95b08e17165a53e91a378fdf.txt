==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KYCVerification
Function name: updateVerifcationBatch(address[],bool)
PC address: 232
Estimated Gas Usage: 15320 - 62600
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b609c7959c55aa32005b4e7add2f9a04.sol:489

bool)

    {

        kycAddress[_kycAddress] = _status;

        

        emit LogKYCVerification(_kycAddress,_status);

        

        return true;

    }

    

    function isVerified(address _user) view public returns(bool)

    {

        return kycAddress[_user] == true; 

    }

}





contract SAVERToken is Owned, BurnableToken {



    string public name = "SureSAVER PR

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateVerifcationBatch(address[],bool), txdata: 0x6aa0f48fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SAVERToken
Function name: multiTransfer(address[],uint256[])
PC address: 786
Estimated Gas Usage: 6788 - 48549
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b609c7959c55aa32005b4e7add2f9a04.sol:1071

ected");

        

        /* Check if Already lockedIn */

        require(now < lockInPeriodForAccount[msg.sender],"Account Already Unlocked");

        

        /* Check Available Balance */

        require(balances[msg.sender] > 0,"Not sufficient balance available");

        

        /* Calculate Penalty */

        uint _penaltyAmt = balances[msg.sender].mul(OptOutPenaltyPercent).div(100);

        

        /* transfer penalty funds */

        _tra

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d545ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc40, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SAVERToken
Function name: multiTransfer(address[],uint256[])
PC address: 2396
Estimated Gas Usage: 6779 - 48540
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b609c7959c55aa32005b4e7add2f9a04.sol:663

aller

--------------------
Initial State:

Account: [CREATOR], balance: 0x102000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d545, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SAVERToken
Function name: multiTransfer(address[],uint256[])
PC address: 2441
Estimated Gas Usage: 6779 - 48540
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b609c7959c55aa32005b4e7add2f9a04.sol:665

    event DeAuthorized

--------------------
Initial State:

Account: [CREATOR], balance: 0x102000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d545, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SAVERToken
Function name: multiTransfer(address[],uint256[])
PC address: 2481
Estimated Gas Usage: 6779 - 48540
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b609c7959c55aa32005b4e7add2f9a04.sol:665

ress caller);

    

    /* 

--------------------
Initial State:

Account: [CREATOR], balance: 0x102000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d545, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SAVERToken
Function name: multiTransfer(address[],uint256[])
PC address: 2617
Estimated Gas Usage: 6779 - 48540
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b609c7959c55aa32005b4e7add2f9a04.sol:651

ss);



    /* This

--------------------
Initial State:

Account: [CREATOR], balance: 0x102000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d545, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SAVERToken
Function name: optOutLockinPeriod()
PC address: 3885
Estimated Gas Usage: 3023 - 3828
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/b609c7959c55aa32005b4e7add2f9a04.sol:1131

{

        OptOutPenaltyPercent = _percent;



        emit LockinOptoutPena

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: optOutLockinPeriod(), txdata: 0x4b0207a2, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SAVERToken
Function name: symbol()
PC address: 5176
Estimated Gas Usage: 2814 - 4555
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/b609c7959c55aa32005b4e7add2f9a04.sol:549

tionForAccount;



    

    K

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SAVERToken
Function name: mintToken(address,uint256)
PC address: 7008
Estimated Gas Usage: 8304 - 30099
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b609c7959c55aa32005b4e7add2f9a04.sol:177

 uint256 total

--------------------
Initial State:

Account: [CREATOR], balance: 0x9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mintToken(address,uint256), txdata: 0x79c650680000000000000000000000000000204000000000000000000000000400400404ffffffffffffffffffffffffffffffffffffffffffffffffffffffee, value: 0x0