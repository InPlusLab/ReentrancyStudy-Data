==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BasicAccessControl
Function name: RemoveModerator(address)
PC address: 875
Estimated Gas Usage: 13837 - 55632
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01bc9ad7c639c144f9e61521207c74d3.sol:107

yOwner public {

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddModerator(address), txdata: 0x6c81fd6d, value: 0x0
Caller: [CREATOR], function: RemoveModerator(address), txdata: 0xb85d6275, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EtheremonWorldNFT
Function name: getRandom(address,uint256,uint256)
PC address: 6414
Estimated Gas Usage: 1281 - 4481
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRandom(address,uint256,uint256), txdata: 0xc8660a32, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EtheremonWorldNFT
Function name: getRandom(address,uint256,uint256)
PC address: 6444
Estimated Gas Usage: 1281 - 4481
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getRandom(address,uint256,uint256), txdata: 0xc8660a32, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: EtheremonWorldNFT
Function name: getPrice(uint32)
PC address: 6780
Estimated Gas Usage: 4507 - 42323
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/01bc9ad7c639c144f9e61521207c74d3.sol:441

d);

        if (class.c

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getPrice(uint32), txdata: 0xda26663a, value: 0x0


