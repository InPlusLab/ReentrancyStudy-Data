==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorKillerContract
Function name: get_amount_buy(uint256)
PC address: 1981
Estimated Gas Usage: 2042 - 2137
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/aa67e1407e2353410bfd3179390b771f.sol:469

nce_ + _amount;

    

    return (_amount*traded_token_balance_*(eth_balance_plus_amount_ + eth_balance_))/(2*eth_balance_plus_amount_*eth_balance_);

   

  }

  

  function get_amount_minus_commission(uint256 _amount) private view returns(uint256) {

      

    return (_amount*(1 ether - commission_ratio))/(1 ether);  

    

  }



  function complete_sell_exchange(uint256 _amount_give) pr

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: get_amount_buy(uint256), txdata: 0x7b5825d5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorKillerContract
Function name: get_amount_sell(uint256)
PC address: 2262
Estimated Gas Usage: 2136 - 2231
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/aa67e1407e2353410bfd3179390b771f.sol:445

lus_amount_ = traded_token_balance_ + _amount;

    

    return (2*eth_balance_*_amount)/(traded_token_balance_ + traded_token_balance_plus_amount_);

    

  }



  function get_amount_buy(uint256 _amount) public view returns(uint256) {

 

    uint256 eth_balance_ = eth_balance; 



    uint256 traded_token_balance_ = traded_token_balance;



    uint256 eth_balance_plus_amount_ = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000010c3f8b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: get_amount_sell(uint256), txdata: 0xa45230ec, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorKillerContract
Function name: withdraw_token(uint256)
PC address: 2979
Estimated Gas Usage: 10438 - 66180
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/aa67e1407e2353410bfd3179390b771f.sol:213

{



    eth_balance = eth_balance.add(ms

--------------------
Initial State:

Account: [CREATOR], balance: 0x10c0000040001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a4a4a4a4a4a4a4a4a4a4a4a4deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorKillerContract
Function name: withdraw_token(uint256)
PC address: 3421
Estimated Gas Usage: 2827 - 3582
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/aa67e1407e2353410bfd3179390b771f.sol:207



  }



  function transferETHTo

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_token(uint256), txdata: 0x164fa4ef01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BancorKillerContract
Function name: withdraw_eth(uint256)
PC address: 3421
Estimated Gas Usage: 2849 - 3604
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/aa67e1407e2353410bfd3179390b771f.sol:241

amount) private { 



  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw_eth(uint256), txdata: 0x30a95e6701, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BancorKillerContract
Function name: seed_traded_token()
PC address: 3712
Estimated Gas Usage: 17524 - 93691
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/aa67e1407e2353410bfd3179390b771f.sol:197

nsFromContract(address _to, uint256 _amount) privat

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d5d5d5d5d5d5d5d5d5d5d5d5deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: seed_traded_token(), txdata: 0xf9b35ca3, value: 0x0