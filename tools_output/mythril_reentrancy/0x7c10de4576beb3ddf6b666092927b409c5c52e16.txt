==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: disableBundlingMultitoken(uint256)
PC address: 1313
Estimated Gas Usage: 1827 - 2252
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/768135f3193eaffe41674b19f84d64fd.sol:477

er() == address(th

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disableBundlingMultitoken(uint256), txdata: 0x13f9cf76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 1854
Estimated Gas Usage: 17003 - 97046
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x14009080c00120000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deploy(uint256,bytes), txdata: 0x61ff715f000000000000000000000000000000000000000000000000000000000000003f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 1859
Estimated Gas Usage: 17003 - 97046
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x14009080c00120000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deploy(uint256,bytes), txdata: 0x61ff715f000000000000000000000000000000000000000000000000000000000000003f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 1900
Estimated Gas Usage: 17003 - 97046
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/768135f3193eaffe41674b19f84d64fd.sol:507
Initial State:

Account: [CREATOR], balance: 0x14009080c00120000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deploy(uint256,bytes), txdata: 0x61ff715f000000000000000000000000000000000000000000000000000000000000003f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 1939
Estimated Gas Usage: 17003 - 97046
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/768135f3193eaffe41674b19f84d64fd.sol:507
Initial State:

Account: [CREATOR], balance: 0x14009080c00120000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deploy(uint256,bytes), txdata: 0x61ff715f000000000000000000000000000000000000000000000000000000000000003f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: disableChangesMultitoken(uint256)
PC address: 2138
Estimated Gas Usage: 1959 - 2384
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/768135f3193eaffe41674b19f84d64fd.sol:489

deploy(data);

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disableChangesMultitoken(uint256), txdata: 0x817725aa, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: makeCall(address,uint256,bytes)
PC address: 2498
Estimated Gas Usage: 2539 - 41384
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/768135f3193eaffe41674b19f84d64fd.sol:507
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: makeCall(address,uint256,bytes), txdata: 0x8482167e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: MultiTokenNetwork
Function name: makeCall(address,uint256,bytes)
PC address: 2498
Estimated Gas Usage: 2539 - 41384
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/768135f3193eaffe41674b19f84d64fd.sol:507
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: makeCall(address,uint256,bytes), txdata: 0x8482167e000000000000000000000000000000000000000000000000000000000000003f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: enableBundlingMultitoken(uint256)
PC address: 2585
Estimated Gas Usage: 2069 - 2494
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/768135f3193eaffe41674b19f84d64fd.sol:481

oyers[index] = dep

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000020028100871a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enableBundlingMultitoken(uint256), txdata: 0xa36b15d0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: multitokens(uint256)
PC address: 2696
Estimated Gas Usage: 1244 - 1339
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/768135f3193eaffe41674b19f84d64fd.sol:421

memory balances = new uint25

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multitokens(uint256), txdata: 0xaa974eff, value: 0x0