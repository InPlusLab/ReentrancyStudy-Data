==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenRetriever
Function name: retrieveTokens(address) or retrieveTokens(address) or retrieveTokens(address)
PC address: 456
Estimated Gas Usage: 3594 - 72908
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:245

/10/2017
 * #author Frank Bonnet
 */
contract IO

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: retrieveTokens(address), txdata: 0xac4ddd9f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: retrieveTokens(address), txdata: 0xac4ddd9f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenRetriever
Function name: retrieveTokens(address) or retrieveTokens(address) or retrieveTokens(address)
PC address: 456
Estimated Gas Usage: 3594 - 72908
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:245

/10/2017
 * #author Frank Bonnet
 */
contract IO

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: retrieveTokens(address), txdata: 0xac4ddd9f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6048
Estimated Gas Usage: 28890 - 243975
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:723

combined total supply o

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6252
Estimated Gas Usage: 28890 - 243975
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:725

al drp supply
     */
    function getTotalSupply() public vi

--------------------
Initial State:

Account: [CREATOR], balance: 0xa00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6279
Estimated Gas Usage: 28890 - 243975
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:728

t sum = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x500, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6341
Estimated Gas Usage: 28890 - 243975
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:729

Token.tot

--------------------
Initial State:

Account: [CREATOR], balance: 0x500, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6471
Estimated Gas Usage: 28890 - 243975
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:727

(uint) {
        uint sum = 0; 
        sum += drpsToken.tota

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6471
Estimated Gas Usage: 28890 - 243975
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:727

(uint) {
        uint sum = 0; 
        sum += drpsToken.tota

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6471
Estimated Gas Usage: 28890 - 243975
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:727

(uint) {
        uint sum = 0; 
        sum += drpsToken.tota

--------------------
Initial State:

Account: [CREATOR], balance: 0x500, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6498
Estimated Gas Usage: 28890 - 243975
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:733



    /**

--------------------
Initial State:

Account: [CREATOR], balance: 0x1002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6656
Estimated Gas Usage: 28890 - 243975
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:731

  return sum;
    }


    /**
     * Returns true if `_owner` h

--------------------
Initial State:

Account: [CREATOR], balance: 0xa00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6656
Estimated Gas Usage: 28890 - 243975
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:731

  return sum;
    }


    /**
     * Returns true if `_owner` h

--------------------
Initial State:

Account: [CREATOR], balance: 0x1002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6683
Estimated Gas Usage: 28890 - 243975
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:738

    * @pa

--------------------
Initial State:

Account: [CREATOR], balance: 0x500, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6841
Estimated Gas Usage: 28890 - 243975
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:736

e allocated
     *
     * @param _owner The account that the ba

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6841
Estimated Gas Usage: 28890 - 243975
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:736

e allocated
     *
     * @param _owner The account that the ba

--------------------
Initial State:

Account: [CREATOR], balance: 0x500, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 6940
Estimated Gas Usage: 28890 - 243975
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:742

dex[allocated[_o

--------------------
Initial State:

Account: [CREATOR], balance: 0x1002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DcorpDissolvementProposal
Function name: deploy()
PC address: 7016
Estimated Gas Usage: 28890 - 243975
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:742

dex[allocated[_owner].index];
    }


    /

--------------------
Initial State:

Account: [CREATOR], balance: 0x1002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DcorpDissolvementProposal
Function name: getTotalSupply()
PC address: 7976
Estimated Gas Usage: 5205 - 75175
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:753

lanceOf(address _token,

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getTotalSupply(), txdata: 0xc4e41b22, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DcorpDissolvementProposal
Function name: retrieveTokens(address) or retrieveTokens(address) or retrieveTokens(address)
PC address: 10126
Estimated Gas Usage: 6387 - 76691
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:245

/10/2017
 * #author Frank Bonnet
 */
contract IO

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: retrieveTokens(address), txdata: 0xac4ddd9f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DcorpDissolvementProposal
Function name: retrieveTokens(address) or retrieveTokens(address) or retrieveTokens(address)
PC address: 10126
Estimated Gas Usage: 6387 - 76691
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/fd14a974bc5659e15e7e878312cb36dd.sol:245

/10/2017
 * #author Frank Bonnet
 */
contract IO

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: retrieveTokens(address), txdata: 0xac4ddd9f0000000000000000000000000101010101010101010101010101010101010101, value: 0x0