==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Deal
Function name: sum(uint256[])
PC address: 286
Estimated Gas Usage: 748 - 4362
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:155

      for (uint i; i < array.length; i++) {

            summa += array[i];

        }

        return summa;

    }



    function changeFeeAddress(address newFee) onlyOwner {

        fee = newF

--------------------
Initial State:

Account: [CREATOR], balance: 0x22041010000010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sum(uint256[]), txdata: 0x0194db8effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Deal
Function name: sum(uint256[])
PC address: 1876
Estimated Gas Usage: 748 - 4362
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:167

angeFeeAddress(ad

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sum(uint256[]), txdata: 0x0194db8efe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Deal
Function name: finishCampaign(bytes32)
PC address: 2549
Estimated Gas Usage: 16681 - 93794
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:265

nction sendCoin(address[] _routerOwners, uint[] amount, bytes32 id)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef0d0d0d0d0d0d0d0d0d0d0d0daffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: finishCampaign(bytes32), txdata: 0x2a874f34, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: finishCampaign(bytes32)
PC address: 2641
Estimated Gas Usage: 16681 - 93794
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:265



        require(campaigns[id].

--------------------
Initial State:

Account: [CREATOR], balance: 0x11, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef0d0d0d0d0d0d0d0d0d0d0d0daffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: finishCampaign(bytes32), txdata: 0x2a874f34, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Deal
Function name: destroyCampaign(bytes32)
PC address: 4595
Estimated Gas Usage: 16879 - 93992
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:213

destroyed;

        campaigns[id].currentBalance = 0;

    }





--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb5b5b5b5b5b5b5b5b5b5b5b5affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: destroyCampaign(bytes32), txdata: 0xf158e478, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: destroyCampaign(bytes32)
PC address: 4692
Estimated Gas Usage: 16879 - 93992
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:221

 checkStatus(bytes32 id) public constan

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb5b5b5b5b5b5b5b5b5b5b5b5affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: destroyCampaign(bytes32), txdata: 0xf158e478, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: destroyCampaign(bytes32)
PC address: 4715
Estimated Gas Usage: 16879 - 93992
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:221

 checkStatus(bytes32 id) public constan

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb5b5b5b5b5b5b5b5b5b5b5b5affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: destroyCampaign(bytes32), txdata: 0xf158e478, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: destroyCampaign(bytes32)
PC address: 4751
Estimated Gas Usage: 16879 - 93992
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:221

tatus status) {

        return 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb5b5b5b5b5b5b5b5b5b5b5b5affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: destroyCampaign(bytes32), txdata: 0xf158e478, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Deal
Function name: addTokensToCampaign(bytes32,uint256)
PC address: 5323
Estimated Gas Usage: 16892 - 93580
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:193

+= value;

        campaigns[id].currentBalance += value;


--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb5b5b5b5b5b5b5b5b5b5b5b5affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addTokensToCampaign(bytes32,uint256), txdata: 0xf922da7e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: addTokensToCampaign(bytes32,uint256)
PC address: 5416
Estimated Gas Usage: 16892 - 93580
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:201

  function updateTokenAddress(addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb5b5b5b5b5b5b5b5b5b5b5b5affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addTokensToCampaign(bytes32,uint256), txdata: 0xf922da7e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: addTokensToCampaign(bytes32,uint256)
PC address: 5423
Estimated Gas Usage: 16892 - 93580
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:201

  function updateTokenAddress(addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb5b5b5b5b5b5b5b5b5b5b5b5affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addTokensToCampaign(bytes32,uint256), txdata: 0xf922da7e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: addTokensToCampaign(bytes32,uint256)
PC address: 5460
Estimated Gas Usage: 16892 - 93580
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:201

 onlyOwner {

        token = ERC223I

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb5b5b5b5b5b5b5b5b5b5b5b5affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addTokensToCampaign(bytes32,uint256), txdata: 0xf922da7e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: addTokensToCampaign(bytes32,uint256)
PC address: 5467
Estimated Gas Usage: 16892 - 93580
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:201

 onlyOwner {

        token = ERC223I

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: b5b5b5b5b5b5b5b5b5b5b5b5deadbeefdeadbeefdeadbeefdeadbeefdeadbeefb5b5b5b5b5b5b5b5b5b5b5b5affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: addTokensToCampaign(bytes32,uint256), txdata: 0xf922da7e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Deal
Function name: createCampaign(bytes32,uint256,address)
PC address: 5886
Estimated Gas Usage: 27981 - 146616
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:181

gnCreator, value, value, Status.created);

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000600a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createCampaign(bytes32,uint256,address), txdata: 0xfb65a3cb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: createCampaign(bytes32,uint256,address)
PC address: 6055
Estimated Gas Usage: 27981 - 146616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:183

paign(id);

    }



    function addTokensToCampaign(bytes32 id, uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe2f02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa3a3a3a3a3a3a3a3a3a3a3a3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: createCampaign(bytes32,uint256,address), txdata: 0xfb65a3cb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: createCampaign(bytes32,uint256,address)
PC address: 6108
Estimated Gas Usage: 27981 - 146616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:183

paign(id);

    }



    function addTokensToCampaign(bytes32 id, uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe2f02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa3a3a3a3a3a3a3a3a3a3a3a3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: createCampaign(bytes32,uint256,address), txdata: 0xfb65a3cb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: createCampaign(bytes32,uint256,address)
PC address: 6119
Estimated Gas Usage: 27981 - 146616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:183

paign(id);

    }



    function addTokensToCampaign(bytes32 id, uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe2f02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa3a3a3a3a3a3a3a3a3a3a3a3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: createCampaign(bytes32,uint256,address), txdata: 0xfb65a3cb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: createCampaign(bytes32,uint256,address)
PC address: 6129
Estimated Gas Usage: 27981 - 146616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:183

paign(id);

    }



    function addTokensToCampaign(bytes32 id, uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe2f02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa3a3a3a3a3a3a3a3a3a3a3a3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: createCampaign(bytes32,uint256,address), txdata: 0xfb65a3cb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: createCampaign(bytes32,uint256,address)
PC address: 6146
Estimated Gas Usage: 27981 - 146616
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:183

paign(id);

    }



    function addTokensToCampaign(bytes32 id, uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe2f02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa3a3a3a3a3a3a3a3a3a3a3a3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: createCampaign(bytes32,uint256,address), txdata: 0xfb65a3cb, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Deal
Function name: createCampaign(bytes32,uint256,address)
PC address: 6169
Estimated Gas Usage: 27981 - 146616
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/61e107d038f70028b44bb658eeace2eb.sol:183

paign(id);

    }



    function addTokensToCampaign(bytes32 id, uint 

--------------------
Initial State:

Account: [CREATOR], balance: 0xe2f02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a3a3a3a3a3a3a3a3a3a3a3a3deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa3a3a3a3a3a3a3a3a3a3a3a3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: createCampaign(bytes32,uint256,address), txdata: 0xfb65a3cb, value: 0x0