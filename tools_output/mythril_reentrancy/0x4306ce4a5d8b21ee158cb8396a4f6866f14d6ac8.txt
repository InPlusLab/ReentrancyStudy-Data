==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CoinvestToken
Function name: approve(address,uint256)
PC address: 2534
Estimated Gas Usage: 1019 - 1114
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:310
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CoinvestToken
Function name: adjust_Transfer_data(bool)
PC address: 3132
Estimated Gas Usage: 1122 - 1547
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:294

tenance of the contract to a new maintainer.
     * @param newMaintainer The address to transfer ownership to.
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: adjust_Transfer_data(bool), txdata: 0x1e6f9c1e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CoinvestToken
Function name: transferFrom(address,address,uint256)
PC address: 3182
Estimated Gas Usage: 1208 - 1586
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:310
Initial State:

Account: [CREATOR], balance: 0x80000000012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CoinvestToken
Function name: adjust_Transfer_nodata(bool)
PC address: 4243
Estimated Gas Usage: 1254 - 1679
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:289

       assert(msg.sender == maintainer);
        _;
    }
    
    /**
     * @dev Allows the current maintainer to t

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: adjust_Transfer_nodata(bool), txdata: 0x49beee4f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CoinvestToken
Function name: ERC20transfer(address,uint256,bytes)
PC address: 4366
Estimated Gas Usage: 1536 - 4501
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:310
Initial State:

Account: [CREATOR], balance: 0x208020040004a043, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: ERC20transfer(address,uint256,bytes), txdata: 0x74de8caf, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CoinvestToken
Function name: transfer(address,uint256)
PC address: 4681
Estimated Gas Usage: 1398 - 1776
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:310
Initial State:

Account: [CREATOR], balance: 0x4000000a102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CoinvestToken
Function name: transfer(address,uint256,bytes)
PC address: 4926
Estimated Gas Usage: 1559 - 4241
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:310
Initial State:

Account: [CREATOR], balance: 0x40080100000481, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256,bytes), txdata: 0xbe45fd62, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CoinvestToken
Function name: transferMaintainer(address)
PC address: 5246
Estimated Gas Usage: 1408 - 1833
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:305

msg.sender == icoContract);
        }
        _;
    }
    
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x200100000000004c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferMaintainer(address), txdata: 0xbffd952a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CoinvestToken
Function name: token_escape(address)
PC address: 5521
Estimated Gas Usage: 1480 - 1905
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:245

lostToken.transfer(maintainer, stuckTokens);
    }

    /**
     * @dev Allow maintainer to set the ico contract for transferable permissions.
    **/
    function setIcoContract(address _icoContract)
      external
      only_maintainer
    {
        require(icoContract == 0);
        icoContr

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000020003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: token_escape(address), txdata: 0xd035e45f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CoinvestToken
Function name: token_escape(address)
PC address: 5694
Estimated Gas Usage: 5587 - 75937
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:251

)
      external
      only_mainta

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: token_escape(address), txdata: 0xd035e45f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CoinvestToken
Function name: token_escape(address)
PC address: 5750
Estimated Gas Usage: 5587 - 75937
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:255

Contract =

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: token_escape(address), txdata: 0xd035e45f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CoinvestToken
Function name: token_escape(address)
PC address: 5927
Estimated Gas Usage: 5587 - 75937
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:255

        require(icoContract == 0);
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: token_escape(address), txdata: 0xd035e45f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CoinvestToken
Function name: token_escape(address)
PC address: 5927
Estimated Gas Usage: 5587 - 75937
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:255

        require(icoContract == 0);
        

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: token_escape(address), txdata: 0xd035e45f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CoinvestToken
Function name: token_escape(address)
PC address: 5927
Estimated Gas Usage: 5587 - 75937
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:255

        require(icoContract == 0);
        

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: token_escape(address), txdata: 0xd035e45f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CoinvestToken
Function name: adjust_ERC223Transfer(bool)
PC address: 6176
Estimated Gas Usage: 1518 - 1943
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:282

data(bool _value) only_maintainer
    {
        Transfer_data_enabled = _value;
    }
    
    modifier only_mainta

--------------------
Initial State:

Account: [CREATOR], balance: 0x400010400000c248b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: adjust_ERC223Transfer(bool), txdata: 0xde1f892a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CoinvestToken
Function name: setIcoContract(address)
PC address: 6293
Estimated Gas Usage: 1540 - 1965
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:261

  * @param _owner The owner of the tokens approved to spend.
     * @param _spender The address of the user allowed to spend the tokens.
    **/
    function allowance(add

--------------------
Initial State:

Account: [CREATOR], balance: 0x800001221, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setIcoContract(address), txdata: 0xe09678fd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CoinvestToken
Function name: transfer(address,uint256,bytes,string)
PC address: 6445
Estimated Gas Usage: 1909 - 7178
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/a68f4a5b1ea65e8faf1b99cfa7274b92.sol:310
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256,bytes,string), txdata: 0xf6368f8a, value: 0x0