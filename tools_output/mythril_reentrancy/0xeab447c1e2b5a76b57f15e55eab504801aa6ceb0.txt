==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Tablow
Function name: distributeAmounts(address[],uint256[])
PC address: 1631
Estimated Gas Usage: 3443 - 9414
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:509



        require(addresses.length == amounts.length);



        for (uint8 i = 0; i < addresses.length; i++) {

            _amount = amounts[i] * 1e18;

            require(_amount <= _remainingAmount);

            _CurrentDistribPublicSupply += _amount;

            balances[addresses[i]] += _amount;

            _totalSupply += _amount;

            Transfer(this, addresses[i], _amount);





            if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {

                DistribStarted = false;

                IsDistribRunning = false;

            }

        }

    }



    function BurnTokens(uint256 amount) public returns(bool success) {

        uint256 _amount = amount * 1e18;

        if (balances[msg.sender] >= _amount) {

            balances[msg.sender] -= _amount;

            _totalSupply -= _amount;

            Burn(msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x10080008002001014, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeAmounts(address[],uint256[]), txdata: 0xa8c310d5ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc08, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Tablow
Function name: distribution(address[],uint256)
PC address: 2194
Estimated Gas Usage: 11017 - 34215
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:463

uire(_amount <= _remainingAmount);

        _amount = _amount * 1e18;



        for (uint i = 0; i < addresses.length; i++) {

            require(_amount <= _remainingAmount);

            _CurrentDistribPublicSupply += _amount;

            balances[addresses[i]] += _amount;

            _totalSupply += _amount;

            Transfer(this, addresses[i], _amount);



        }



        if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {

            DistribStarted = false;

            IsDistribRunning = false;

        }

    }



    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner public {



        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;

        uint256 _amount;



        require(addresses.lengt

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distribution(address[],uint256), txdata: 0xf3e4877cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Tablow
Function name: fallback
PC address: 2250
Estimated Gas Usage: 2330 - 4071
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:167

  uint256 _totalSupply = 0;

    u

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Tablow
Function name: BurnTokens(uint256)
PC address: 3266
Estimated Gas Usage: 15762 - 60177
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:563



        }



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: BurnTokens(uint256), txdata: 0x2cd3fd7080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Tablow
Function name: symbol()
PC address: 3993
Estimated Gas Usage: 2660 - 4401
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:165

 public constant decimals =

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000040008d00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 5773
Estimated Gas Usage: 5812 - 76727
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:835
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 5817
Estimated Gas Usage: 5812 - 76727
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:835
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 5931
Estimated Gas Usage: 5812 - 76727
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:835
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 5931
Estimated Gas Usage: 5812 - 76727
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:835
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Tablow
Function name: withdrawForeignTokens(address)
PC address: 5931
Estimated Gas Usage: 5812 - 76727
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0c00512e22f03d2483bf12ca2074f7b1.sol:835
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawForeignTokens(address), txdata: 0xe58fc54c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0


