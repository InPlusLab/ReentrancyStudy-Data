==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: STQDistribution
Function name: fallback
PC address: 149
Estimated Gas Usage: 5708 - 80107
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/79e51c7f31ef02353c18a8207d72d433.sol:32

n, uint160 _lotSize, uint256[] _transfers) public {
    require(msg.sender == owner);
    MintableToken token = MintableToken(mintableTokenAddress);
    uint256 count = _transfers.length;
    for (uint256 i = 0; i < count; i++) {
      uint256 transfer = _transfers[i];
      uint256 value = (transfer >> 160) * _lotSize;
      address to = address(transfer & 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
      token.mint(to, value);
    }
  }
}

contract MintableToken {
  function m

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: batchSend(address,uint160,uint256[]), txdata: 0x2c39da9400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: STQDistribution
Function name: fallback
PC address: 584
Estimated Gas Usage: 3938 - 43020
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/79e51c7f31ef02353c18a8207d72d433.sol:45

tract MintableToken {

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: batchSend(address,uint160,uint256[]), txdata: 0x2c39da940000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [CREATOR], function: batchSend(address,uint160,uint256[]), txdata: 0x2c39da940000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: STQDistribution
Function name: fallback
PC address: 584
Estimated Gas Usage: 5708 - 80107
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/79e51c7f31ef02353c18a8207d72d433.sol:45

tract MintableToken {

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: batchSend(address,uint160,uint256[]), txdata: 0x2c39da940000000000000000000000000000000000000000000000000000000000000002, value: 0x0