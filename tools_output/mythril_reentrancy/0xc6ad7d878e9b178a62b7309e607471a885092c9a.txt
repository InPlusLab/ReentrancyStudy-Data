==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AmbrosusSale
Function name: constructor
PC address: 444
Estimated Gas Usage: 92001 - 335740
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/814fc6b1ca9ae02ae081ca415e7fb9d5.sol:222

 Can only be called by the prepurchaser.
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AmbrosusSale
Function name: constructor
PC address: 451
Estimated Gas Usage: 92001 - 335740
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/814fc6b1ca9ae02ae081ca415e7fb9d5.sol:222

 Can only be called by the prepurchaser.
 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AmbrosusSale
Function name: constructor
PC address: 471
Estimated Gas Usage: 92001 - 335740
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/814fc6b1ca9ae02ae081ca415e7fb9d5.sol:223

er only_prepurchaser { require (msg.send

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AmbrosusSale
Function name: constructor
PC address: 478
Estimated Gas Usage: 92001 - 335740
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/814fc6b1ca9ae02ae081ca415e7fb9d5.sol:223

er only_prepurchaser { require (msg.send

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AmberToken
Function name: currentPhase()
PC address: 1727
Estimated Gas Usage: 1904 - 2280
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/814fc6b1ca9ae02ae081ca415e7fb9d5.sol:102

Unlock any now f

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: finalise(), txdata: 0xa4399263, value: 0x0
Caller: [ATTACKER], function: currentPhase(), txdata: 0x055ad42e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AmberToken
Function name: currentPhase()
PC address: 1747
Estimated Gas Usage: 1807 - 1902
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/814fc6b1ca9ae02ae081ca415e7fb9d5.sol:102

p for account `_who`.
  function unlo

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: finalise(), txdata: 0xa4399263, value: 0x0
Caller: [CREATOR], function: currentPhase(), txdata: 0x055ad42e, value: 0x0