==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CanReclaimToken
Function name: reclaimToken(address)
PC address: 627
Estimated Gas Usage: 5231 - 74545
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:314

ken.approve(_spender, _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x52542fb11352569c0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc3200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc320000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CanReclaimToken
Function name: reclaimToken(address)
PC address: 627
Estimated Gas Usage: 5231 - 74545
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:314

ken.approve(_spender, _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimToken(address), txdata: 0x17ffc3200000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BasicToken
Function name: getCurrentBalance(address)
PC address: 958
Estimated Gas Usage: 2022 - 2402
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:24

    return _a - 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getCurrentBalance(address), txdata: 0x440277e8000000000000000000000000f6b8a480196363bde2395851c7764d6b5b361963, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BasicToken
Function name: getCurrentBalance(address)
PC address: 992
Estimated Gas Usage: 2156 - 2536
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:9

= 0) {
            return 0;
        }

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x140010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getCurrentBalance(address), txdata: 0x440277e8000000000000000000000000385a42aa7426ff5fe3649a2e843de6a5920f5825, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PausableToken
Function name: getCurrentBalance(address)
PC address: 2376
Estimated Gas Usage: 2067 - 2447
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:24

    return _a - 

--------------------
Initial State:

Account: [CREATOR], balance: 0x401019fe10fffff04, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getCurrentBalance(address), txdata: 0x440277e80000000000000000000000000000000000008000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PausableToken
Function name: getCurrentBalance(address)
PC address: 2410
Estimated Gas Usage: 2201 - 2581
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:9

= 0) {
            return 0;
        }

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCurrentBalance(address), txdata: 0x440277e8000000000000000000000000000000000000000c000000080000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StandardToken
Function name: getCurrentBalance(address)
PC address: 2484
Estimated Gas Usage: 2089 - 2469
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:24

    return _a - 

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCurrentBalance(address), txdata: 0x440277e80000000000000000000000002f5da0660dd59e3afc1292201c2d1c4e403b5cad, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StandardToken
Function name: getCurrentBalance(address)
PC address: 2518
Estimated Gas Usage: 2223 - 2603
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:9

= 0) {
            return 0;
        }

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCurrentBalance(address), txdata: 0x440277e80000000000000000000000002f5da0660dd59e3afc1292201c2d1c4e403b5cad, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MintableToken
Function name: mint(address,uint256)
PC address: 3259
Estimated Gas Usage: 2808 - 2903
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:228

blic onlyOwner canMint re

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(address,uint256), txdata: 0x40c10f190000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffff936ebb3e396f2b34c000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MintableToken
Function name: getCurrentBalance(address)
PC address: 3270
Estimated Gas Usage: 2089 - 2469
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:24

    return _a - 

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getCurrentBalance(address), txdata: 0x440277e80000000000000000000000000280808080000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MintableToken
Function name: getCurrentBalance(address)
PC address: 3304
Estimated Gas Usage: 2223 - 2603
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/39062a9dda8db69a44d7b3e788b45175.sol:9

= 0) {
            return 0;
        }

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x18618068a01900000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getCurrentBalance(address), txdata: 0x440277e80000000000000000000000000000000000000000000000000000000000000000, value: 0x0


