==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: syncContractLevelData(uint256)
PC address: 2396
Estimated Gas Usage: 14403 - 91275
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/25c4635170c8fcf34177f8d25a9f96eb.sol:392

bleBalance;
      uint profitSourceBa

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: syncContractLevelData(uint256), txdata: 0x097ac372, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: syncContractLevelData(uint256)
PC address: 2399
Estimated Gas Usage: 14403 - 91275
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/25c4635170c8fcf34177f8d25a9f96eb.sol:394

      uint profitBalance

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: syncContractLevelData(uint256), txdata: 0x097ac372, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: setUserProfit(address,uint256,uint256,uint256,uint256)
PC address: 8144
Estimated Gas Usage: 25175 - 142002
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/25c4635170c8fcf34177f8d25a9f96eb.sol:461

mpty");
    require(_deposited > 0, "Packa

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setUserProfit(address,uint256,uint256,uint256,uint256), txdata: 0xacfb60a2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: setUserProfit(address,uint256,uint256,uint256,uint256)
PC address: 8152
Estimated Gas Usage: 25175 - 142002
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/25c4635170c8fcf34177f8d25a9f96eb.sol:462

 must be > 0");

    Balance storage balance =

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setUserProfit(address,uint256,uint256,uint256,uint256), txdata: 0xacfb60a2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: setUserProfit(address,uint256,uint256,uint256,uint256)
PC address: 8157
Estimated Gas Usage: 25175 - 142002
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/25c4635170c8fcf34177f8d25a9f96eb.sol:464

lets[_to];
    bool firstDeposit = balanc

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setUserProfit(address,uint256,uint256,uint256,uint256), txdata: 0xacfb60a2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: setUserProfit(address,uint256,uint256,uint256,uint256)
PC address: 8161
Estimated Gas Usage: 25175 - 142002
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/25c4635170c8fcf34177f8d25a9f96eb.sol:465

eposited <= 6000000;
    balance.deposite

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setUserProfit(address,uint256,uint256,uint256,uint256), txdata: 0xacfb60a2, value: 0x0


