==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenIOStorage
Function name: setBytes(bytes32,bytes)
PC address: 453
Estimated Gas Usage: 7625 - 31156
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:529

r returns (bool success) {

        boolStorage[_key] = _value;

        return true;

    }



    /**

     * @notice Set value for Int associated with bytes3

--------------------
Initial State:

Account: [CREATOR], balance: 0x8080000002000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setBytes(bytes32,bytes), txdata: 0x2e28d084fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenIOStorage
Function name: setBytes(bytes32,bytes)
PC address: 460
Estimated Gas Usage: 7625 - 31156
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:529

r returns (bool success) {

        boolStorage[_key] = _value;

        return true;

    }



    /**

     * @notice Set value for Int associated with bytes3

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setBytes(bytes32,bytes), txdata: 0x2e28d084ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff68, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenIOStorage
Function name: setBytes(bytes32,bytes)
PC address: 485
Estimated Gas Usage: 17765 - 81482
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:529

r returns (bool success) {

        boolStorage[_key] = _value;

        return true;

    }



    /**

     * @notice Set value for Int associated with bytes3

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setBytes(bytes32,bytes), txdata: 0x2e28d0840000000000100000020001000100010201018000808008084001000008018080ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenIOStorage
Function name: setString(bytes32,string)
PC address: 697
Estimated Gas Usage: 7757 - 31288
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:507

bytes _value) public onlyOwner returns (bool success) {

        bytesStorage[_key] = _value;

        return true;

    }



    /**

     * @notice Set value for

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setString(bytes32,string), txdata: 0x6e899550fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenIOStorage
Function name: setString(bytes32,string)
PC address: 704
Estimated Gas Usage: 7757 - 31288
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:507

bytes _value) public onlyOwner returns (bool success) {

        bytesStorage[_key] = _value;

        return true;

    }



    /**

     * @notice Set value for

--------------------
Initial State:

Account: [CREATOR], balance: 0x40100010480022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setString(bytes32,string), txdata: 0x6e899550ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff68, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenIOStorage
Function name: setString(bytes32,string)
PC address: 729
Estimated Gas Usage: 12827 - 56451
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:507

bytes _value) public onlyOwner returns (bool success) {

        bytesStorage[_key] = _value;

        return true;

    }



    /**

     * @notice Set value for

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setString(bytes32,string), txdata: 0x6e8995500800010080080080000100000000400280040108040101200001040001000010ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenIOStorage
Function name: getString(bytes32)
PC address: 2657
Estimated Gas Usage: 1670 - 2800
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:785

   * @notice Get value for

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getString(bytes32), txdata: 0x986e791a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenIOMerchant
Function name: setParams(address)
PC address: 2941
Estimated Gas Usage: 4073 - 41886
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:1331

nt must be KYC'd to be able to use trans

--------------------
Initial State:

Account: [CREATOR], balance: 0x540000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setParams(address), txdata: 0x4e49acac, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenIOStorage
Function name: getBytes(bytes32)
PC address: 2981
Estimated Gas Usage: 1739 - 2869
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:811



THE SOFTWARE IS PROVIDE

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBytes(bytes32), txdata: 0xc031a180, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 3468
Estimated Gas Usage: 14843 - 200412
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:1983

TokenBalance(Data storage s

--------------------
Initial State:

Account: [CREATOR], balance: 0x40400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 3557
Estimated Gas Usage: 14843 - 200412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2163

proval(self,

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 3810
Estimated Gas Usage: 14843 - 200412
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2163

proval(self, account),

      "Error: Account does not have KYC approval."

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x40400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 3810
Estimated Gas Usage: 14843 - 200412
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2163

proval(self, account),

      "Error: Account does not have KYC approval."

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 3810
Estimated Gas Usage: 14843 - 200412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2163

proval(self, account),

      "Error: Account does not have KYC approval."

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 3853
Estimated Gas Usage: 14843 - 200412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2171

    getAccou

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: TokenIOStorage
Function name: setBytes(bytes32,bytes)
PC address: 4008
Estimated Gas Usage: 7625 - 31156
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setBytes(bytes32,bytes), txdata: 0x2e28d084ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: TokenIOStorage
Function name: setString(bytes32,string)
PC address: 4008
Estimated Gas Usage: 7757 - 31288
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000900, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setString(bytes32,string), txdata: 0x6e899550ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: TokenIOStorage
Function name: setBytes(bytes32,bytes)
PC address: 4022
Estimated Gas Usage: 7625 - 31156
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setBytes(bytes32,bytes), txdata: 0x2e28d084ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: TokenIOStorage
Function name: setString(bytes32,string)
PC address: 4022
Estimated Gas Usage: 7757 - 31288
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080000010002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setString(bytes32,string), txdata: 0x6e899550ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 4099
Estimated Gas Usage: 14843 - 200412
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2171

    getAccountStatus(self, account),

      "Error: Account status is `false`

--------------------
Initial State:

Account: [CREATOR], balance: 0x40400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 4099
Estimated Gas Usage: 14843 - 200412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2171

    getAccountStatus(self, account),

      "Error: Account status is `false`

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 4142
Estimated Gas Usage: 14843 - 200412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2173

e `true`."



--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 4388
Estimated Gas Usage: 14843 - 200412
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2173

e `true`."

    );

    return true;

  }





  /**

   * @notice Transfer a

--------------------
Initial State:

Account: [CREATOR], balance: 0x40400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 4388
Estimated Gas Usage: 14843 - 200412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2173

e `true`."

    );

    return true;

  }





  /**

   * @notice Transfer a

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 4431
Estimated Gas Usage: 14843 - 200412
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2187

en from msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 4677
Estimated Gas Usage: 14843 - 200412
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2187

en from msg.sender account to another specified account

   * @dev This functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x40400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenIOMerchant
Function name: calculateFees(uint256)
PC address: 4677
Estimated Gas Usage: 14843 - 200412
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/a704ba85d38a479859d7895d34a5721e.sol:2187

en from msg.sender account to another specified account

   * @dev This functi

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: calculateFees(uint256), txdata: 0x52238fdd, value: 0x0