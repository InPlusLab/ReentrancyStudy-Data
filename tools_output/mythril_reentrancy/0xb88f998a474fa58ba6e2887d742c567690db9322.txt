==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GGEPool
Function name: changeName(string,string)
PC address: 730
Estimated Gas Usage: 23992 - 109967
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:339

-----------

    function getGGCTokenBalance(address _tokenAddr) 

    public

    view 

    returns (uint256){



        return ERC20Interface(_tokenA

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeName(string,string), txdata: 0x86575e40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GGEPool
Function name: changeName(string,string)
PC address: 737
Estimated Gas Usage: 23992 - 109967
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:339

-----------

    function getGGCTokenBalance(address _tokenAddr) 

    public

    view 

    returns (uint256){



        return ERC20Interface(_tokenA

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeName(string,string), txdata: 0x86575e40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GGEPool
Function name: changeName(string,string)
PC address: 739
Estimated Gas Usage: 23992 - 109967
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:339

-----------

    function getGGCTokenBalance(address _tokenAddr) 

    public

    view 

    returns (uint256){



        return ERC20Interface(_tokenA

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeName(string,string), txdata: 0x86575e40800000000000000000000000000000000000000000000000000000000000000088, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GGEPool
Function name: changeName(string,string)
PC address: 759
Estimated Gas Usage: 23992 - 109967
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:339

-----------

    function getGGCTokenBalance(address _tokenAddr) 

    public

    view 

    returns (uint256){



        return ERC20Interface(_tokenA

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeName(string,string), txdata: 0x86575e40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GGEPool
Function name: changeName(string,string)
PC address: 790
Estimated Gas Usage: 24013 - 110081
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:339

-----------

    function getGGCTokenBalance(address _tokenAddr) 

    public

    view 

    returns (uint256){



        return ERC20Interface(_tokenA

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeName(string,string), txdata: 0x86575e408000000000000000000000000000000000000000000000000000000000000000c0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GGEPool
Function name: changeName(string,string)
PC address: 797
Estimated Gas Usage: 24013 - 110081
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:339

-----------

    function getGGCTokenBalance(address _tokenAddr) 

    public

    view 

    returns (uint256){



        return ERC20Interface(_tokenA

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeName(string,string), txdata: 0x86575e40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GGEPool
Function name: fallback
PC address: 1195
Estimated Gas Usage: 2330 - 4071
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:81

GGEPool";

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x2002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GGEPool
Function name: symbol()
PC address: 2160
Estimated Gas Usage: 2550 - 4291
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:79

 public {

        s

--------------------
Initial State:

Account: [CREATOR], balance: 0x2002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GGEPool
Function name: reclaimEther(address)
PC address: 2298
Estimated Gas Usage: 2759 - 37937
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:249

] = true; 

        emit ListLog(_addr, 3, true);

    }

    

    function delBlackList(address _addr) public notNull(_addr) onlyOwne

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: reclaimEther(address), txdata: 0x9a6a30a4, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GGEPool
Function name: getGGCTokenBalance(address)
PC address: 2537
Estimated Gas Usage: 2140 - 37738
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:371
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getGGCTokenBalance(address), txdata: 0xaf1cd9f6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GGEPool
Function name: transferAnyERC20Token(address,address,uint256)
PC address: 2849
Estimated Gas Usage: 7534 - 45777
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/312464caa0765726f382515aee3a674e.sol:247

dress _addr) public notNull(_addr) onlyOwner {

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,address,uint256), txdata: 0xd493b9ac000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: GGEPool
Function name: changeName(string,string)
PC address: 3051
Estimated Gas Usage: 24013 - 110081
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeName(string,string), txdata: 0x86575e40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: GGEPool
Function name: changeName(string,string)
PC address: 3065
Estimated Gas Usage: 23992 - 109967
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeName(string,string), txdata: 0x86575e40ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0, value: 0x0


