==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1853
Estimated Gas Usage: 65053 - 321030
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:289

s.

     * @return Amount 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1914
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:289

ent to withdrawalAddress.

     * @return Amount 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1920
Estimated Gas Usage: 65053 - 321030
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:291

 sent.

     */

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1944
Estimated Gas Usage: 65053 - 321030
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:295

bleTokensToWithdraw () publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1997
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:295

bleTokensToWithdraw () publ

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2004
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:295

ns (uint256) {

        uint256 tokensUnloc

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: stages(uint256)
PC address: 2030
Estimated Gas Usage: 324 - 419
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:181

kens already sent.

     */



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stages(uint256), txdata: 0x845ddcb280, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TwoYearDreamTokensVesting
Function name: getAvailableTokensToWithdraw()
PC address: 2592
Estimated Gas Usage: 1066 - 1161
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:463
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getAvailableTokensToWithdraw(), txdata: 0x045e240f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2741
Estimated Gas Usage: 65053 - 321030
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:345

ge = 50;

        stages[

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2742
Estimated Gas Usage: 65053 - 321030
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:345

ge = 50;

        stages[2].tokensUnlo

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2768
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:345

sUnlockedPercentage = 50;

        stages[2].tokensUnlo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2773
Estimated Gas Usage: 65053 - 321030
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:349

stages[3].tokensUnlockedP

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2774
Estimated Gas Usage: 65053 - 321030
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:349

stages[3].tokensUnlockedPercenta

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2800
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:347

e = 75;

        stages[3].tokensUnlockedPercenta

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2806
Estimated Gas Usage: 65053 - 321030
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:358


     * Function for toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2807
Estimated Gas Usage: 65053 - 321030
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:358


     * Function for tokens with

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2808
Estimated Gas Usage: 65053 - 321030
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:358


     * Function for tokens withdrawal from t

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2833
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:353

    }



    /**

     * Function for tokens withdrawal from t

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2841
Estimated Gas Usage: 65053 - 321030
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:359

ggered from the fallback 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2842
Estimated Gas Usage: 65053 - 321030
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:359

ggered from the fallback function.

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2868
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:359

art contract. Triggered from the fallback function.

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2897
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:363

on withdrawTokens () private whenInitia

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2926
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:365

    uint256 tokensToSend = getAvailable

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2954
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:365

raw();

        sendTokens(tokensToSend

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TwoYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2983
Estimated Gas Usage: 65053 - 321030
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/eb9f7e2c8a0f4e0e049ce74b1e8d1f5c.sol:369

f (dreamToken.balanceOf(this) == 0) { //

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0