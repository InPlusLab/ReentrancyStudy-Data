==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Wallet
Function name: bonusNewRank(address,uint256,uint256)
PC address: 2324
Estimated Gas Usage: 20163 - 132016
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3ba5d6e2a55f84b772cabab3402391c.sol:327

nt, uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x323, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5b5b5b5b5b5b5b5b5b5b5b5b00000000000000000000000000000000000000005b5b5b5b5b5b5b5b5b5b5b5bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bonusNewRank(address,uint256,uint256), txdata: 0x3164eed5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ee00000000000000000000000000000000000000000000000000000000000000f0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Wallet
Function name: bonusNewRank(address,uint256,uint256)
PC address: 2469
Estimated Gas Usage: 20163 - 132016
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d3ba5d6e2a55f84b772cabab3402391c.sol:327

nt, uint[], uint, uint,

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5b5b5b5b5b5b5b5b5b5b5b5b00000001010001010000000000000000000000005b5b5b5b5b5b5b5b5b5b5b5bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bonusNewRank(address,uint256,uint256), txdata: 0x3164eed5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000010000000000000000000000000000000000000000000000008000202082, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Wallet
Function name: bonusNewRank(address,uint256,uint256)
PC address: 2469
Estimated Gas Usage: 20163 - 132016
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/d3ba5d6e2a55f84b772cabab3402391c.sol:327

nt, uint[], uint, uint,

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5b5b5b5b5b5b5b5b5b5b5b5b01000000000000000001010101010001000000015b5b5b5b5b5b5b5b5b5b5b5baffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: bonusNewRank(address,uint256,uint256), txdata: 0x3164eed5000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000100000000000000000000000000800100010000000000000000000000000000010000000000000000008000010082, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Wallet
Function name: bonusNewRank(address,uint256,uint256)
PC address: 2469
Estimated Gas Usage: 20163 - 132016
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3ba5d6e2a55f84b772cabab3402391c.sol:327

nt, uint[], uint, uint,

--------------------
Initial State:

Account: [CREATOR], balance: 0x323, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5b5b5b5b5b5b5b5b5b5b5b5b00000000000000000000000000000000000000005b5b5b5b5b5b5b5b5b5b5b5bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bonusNewRank(address,uint256,uint256), txdata: 0x3164eed5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ee00000000000000000000000000000000000000000000000000000000000000f0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Wallet
Function name: bonusNewRank(address,uint256,uint256)
PC address: 2536
Estimated Gas Usage: 20163 - 132016
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3ba5d6e2a55f84b772cabab3402391c.sol:329

g.sender != address(r

--------------------
Initial State:

Account: [CREATOR], balance: 0x323, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5b5b5b5b5b5b5b5b5b5b5b5b00000000000000000000000000000000000000005b5b5b5b5b5b5b5b5b5b5b5bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bonusNewRank(address,uint256,uint256), txdata: 0x3164eed5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ee00000000000000000000000000000000000000000000000000000000000000f0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Wallet
Function name: bonusNewRank(address,uint256,uint256)
PC address: 2557
Estimated Gas Usage: 20163 - 132016
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d3ba5d6e2a55f84b772cabab3402391c.sol:327

nt, uint)
  {
    if (msg.sender != address(reserveFundContract) &

--------------------
Initial State:

Account: [CREATOR], balance: 0x323, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 5b5b5b5b5b5b5b5b5b5b5b5b00000000000000000000000000000000000000005b5b5b5b5b5b5b5b5b5b5b5bdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bonusNewRank(address,uint256,uint256), txdata: 0x3164eed5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ee00000000000000000000000000000000000000000000000000000000000000f0, value: 0x0