==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Helper
Function name: getKeyBlockNr(uint256) or getKeyBlockNr(uint256)
PC address: 682
Estimated Gas Usage: 225 - 320
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:293

   view

        returns (uint256)

    {

        // Key Block 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080102084cef, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getKeyBlockNr(uint256), txdata: 0x131de517, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Helper
Function name: getWinTeam(uint256,uint256,uint256) or getWinTeam(uint256,uint256,uint256)
PC address: 828
Estimated Gas Usage: 460 - 836
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:355

 }



    function getMin(

--------------------
Initial State:

Account: [CREATOR], balance: 0x10108050000033f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getWinTeam(uint256,uint256,uint256), txdata: 0x33f5908a0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000005050007c00000000000240000080080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Helper
Function name: getWinningPerWei(uint256,uint256) or getWinningPerWei(uint256,uint256)
PC address: 883
Estimated Gas Usage: 397 - 773
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:389

;



    modifie

--------------------
Initial State:

Account: [CREATOR], balance: 0x200c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getWinningPerWei(uint256,uint256), txdata: 0x433a9bb6020810100802800004100140202010010401010101800240012000020104012040, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Helper
Function name: getWinningPerWei(uint256,uint256) or getWinningPerWei(uint256,uint256)
PC address: 891
Estimated Gas Usage: 312 - 407
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:373

{

        return a < b ? a : b;

    }

}



contract SimpleDice is Helper{

    using SafeMath for uint256;



    event Payment(address indexed _winner, uint _amount, bool _success);



    modifier onlyDevTeam() {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getWinningPerWei(uint256,uint256), txdata: 0x433a9bb6, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: Helper
Function name: getSeed(uint256) or getSeed(uint256)
PC address: 936
Estimated Gas Usage: 354 - 449
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:327

int256 _sum = _trueAmount + _falseAmount;

        i

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getSeed(uint256), txdata: 0xe0d4ea37, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: SimpleDice
Function name: getKeyBlockNr(uint256) or getKeyBlockNr(uint256)
PC address: 3530
Estimated Gas Usage: 291 - 386
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:293

   view

        returns (uint256)

    {

        // Key Block 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getKeyBlockNr(uint256), txdata: 0x131de517, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SimpleDice
Function name: getWinTeam(uint256,uint256,uint256) or getWinTeam(uint256,uint256,uint256)
PC address: 3975
Estimated Gas Usage: 636 - 1012
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:355

 }



    function getMin(

--------------------
Initial State:

Account: [CREATOR], balance: 0x2202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getWinTeam(uint256,uint256,uint256), txdata: 0x33f5908a010101010101010101010101010101010101010101010101010101010101010080000000000010d000000000000000000000202020000020000000200002000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SimpleDice
Function name: getWinningPerWei(uint256,uint256) or getWinningPerWei(uint256,uint256)
PC address: 4155
Estimated Gas Usage: 595 - 971
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:389

;



    modifie

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001000000030010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getWinningPerWei(uint256,uint256), txdata: 0x433a9bb6000101000020000100000100020100000000018000000140200100080104002008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SimpleDice
Function name: getWinningPerWei(uint256,uint256) or getWinningPerWei(uint256,uint256)
PC address: 4163
Estimated Gas Usage: 510 - 605
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:373

{

        return a < b ? a : b;

    }

}



contract SimpleDice is Helper{

    using SafeMath for uint256;



    event Payment(address indexed _winner, uint _amount, bool _success);



    modifier onlyDevTeam() {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getWinningPerWei(uint256,uint256), txdata: 0x433a9bb6, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: SimpleDice
Function name: bet(bool)
PC address: 4357
Estimated Gas Usage: 2320 - 2983
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:443

) betSum;



        uint256 keyBlock;

        bo

--------------------
Initial State:

Account: [CREATOR], balance: 0x10040000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100001000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bet(bool), txdata: 0x523afb0d, value: 0xb1a2bc2ec50000

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SimpleDice
Function name: getRef(address) or getRef(address)
PC address: 5376
Estimated Gas Usage: 3136 - 38404
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:861

6, // curBlock

            uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getRef(address), txdata: 0x5a7db533, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: SimpleDice
Function name: endRound()
PC address: 5497
Estimated Gas Usage: 2254 - 2539
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:461

56 constant public TAXED_PERCENT = 95;

    uint25

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: endRound(), txdata: 0x749aa2d9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SimpleDice
Function name: getRoundBetById(uint256,bool,uint256)
PC address: 5872
Estimated Gas Usage: 1747 - 2222
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:989
Initial State:

Account: [CREATOR], balance: 0x2540000005e02232, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getRoundBetById(uint256,bool,uint256), txdata: 0xa57a1ea0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: SimpleDice
Function name: getSeed(uint256) or getSeed(uint256)
PC address: 7437
Estimated Gas Usage: 882 - 977
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/67204c1315d0fecd9015521f0f5a83b1.sol:327

int256 _sum = _trueAmount + _falseAmount;

        i

--------------------
Initial State:

Account: [CREATOR], balance: 0x240001000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getSeed(uint256), txdata: 0xe0d4ea37, value: 0x0