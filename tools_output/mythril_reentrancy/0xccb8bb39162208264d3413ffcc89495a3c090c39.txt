==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WalletV2
Function name: constructor
PC address: 184
Estimated Gas Usage: 30343 - 171114
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:381

allet, default to address

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: WalletV2
Function name: constructor
PC address: 229
Estimated Gas Usage: 30343 - 171114
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:381

to this wallet, default to address

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: WalletV2
Function name: constructor
PC address: 256
Estimated Gas Usage: 30343 - 171114
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:381

to this wallet, default to address

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: WalletV2
Function name: constructor
PC address: 262
Estimated Gas Usage: 30343 - 171114
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:381

nsistent token lookup.

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Token
Function name: fallback
PC address: 590
Estimated Gas Usage: 1321 - 2261
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:896


    uint256 offer

--------------------
Initial State:

Account: [CREATOR], balance: 0x4008000000000c020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ExchangeV2
Function name: batchExecuteOrder(address[4][],uint256[8][],uint8[2][],bytes32[4][])
PC address: 693
Estimated Gas Usage: 476 - 1182
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:1261

 which this order expires and a random number to mitigate replay.

   * [

   *   makerOffer

   *   makerWant

   *   takerOffer

   *   takerWant

   *   makerExpiry

   *   makerSalt

   *   takerExpiry

   *   takerSalt

   * ]

   * @param vSignatures ECDSA signature parameter.

   * [

   *   maker V

   *   taker V

   * ]

   * @param rAndSsignatures ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.

   * [

   *   maker R

   *   maker S

   *   taker R

   *   taker S

   * ]

   * @return Success of the transaction, false if error condition met.

   * Like types grouped to eliminate stack depth error.

   */

  function executeOrder (

    address[4] ow

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000fafee, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: batchExecuteOrder(address[4][],uint256[8][],uint8[2][],bytes32[4][]), txdata: 0x4983542efffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc40, value: 0x0

==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: WalletV2
Function name: updateBalance(address,uint256,bool)
PC address: 986
Estimated Gas Usage: 1789 - 38848
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:497

ess _exchange)

    external

    returns(bool)

  {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420fffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateLogic(uint256), txdata: 0xd767ee4defefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateBalance(address,uint256,bool), txdata: 0x41228803, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: WalletV2
Function name: updateBalance(address,uint256,bool)
PC address: 986
Estimated Gas Usage: 1789 - 38848
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:497

ess _exchange)

    external

    returns(bool)

  {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateLogic(uint256), txdata: 0xd767ee4d, value: 0x0
Caller: [SOMEGUY], function: updateBalance(address,uint256,bool), txdata: 0x41228803, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: WalletV2
Function name: verifyOrder(address,uint256,uint256,address)
PC address: 986
Estimated Gas Usage: 1826 - 38885
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:497

ess _exchange)

    external

    returns(bool)

  {

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateLogic(uint256), txdata: 0xd767ee4d, value: 0x0
Caller: [SOMEGUY], function: verifyOrder(address,uint256,uint256,address), txdata: 0x4e7343ea, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: WalletV2
Function name: updateLogic(uint256)
PC address: 1589
Estimated Gas Usage: 5053 - 43496
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:577

he amount of tokens the order

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateLogic(uint256), txdata: 0xd767ee4d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: WalletV2
Function name: updateLogic(uint256)
PC address: 1753
Estimated Gas Usage: 5053 - 43496
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:583

rified or not.

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateLogic(uint256), txdata: 0xd767ee4d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: WalletV2
Function name: updateLogic(uint256)
PC address: 1789
Estimated Gas Usage: 5053 - 43496
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:583

rified or not.

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateLogic(uint256), txdata: 0xd767ee4d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ExchangeV2
Function name: retrieveWallet(address)
PC address: 1901
Estimated Gas Usage: 10520 - 68478
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:1165



    userAccountToWallet_[userExternalOwnedAccount] = userTradingWall

--------------------
Initial State:

Account: [CREATOR], balance: 0x40002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: retrieveWallet(address), txdata: 0x2e16cf5401010101010101010101010101, value: 0x0

==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: WalletV2
Function name: withdraw(address,uint256)
PC address: 1953
Estimated Gas Usage: 2822 - 40211
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:711

uint256 b) internal constant returns (uint256) {

    ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x21c10c05420fffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateLogic(uint256), txdata: 0xd767ee4defefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdraw(address,uint256), txdata: 0xf3fef3a3, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: WalletV2
Function name: withdraw(address,uint256)
PC address: 1953
Estimated Gas Usage: 2822 - 40211
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:711

uint256 b) internal constant returns (uint256) {

    ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateLogic(uint256), txdata: 0xd767ee4d, value: 0x0
Caller: [ATTACKER], function: withdraw(address,uint256), txdata: 0xf3fef3a3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ExchangeV2
Function name: retrieveWallet(address)
PC address: 1989
Estimated Gas Usage: 10520 - 68478
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:1183

 want token amount and expiration and salt values

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000080000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: retrieveWallet(address), txdata: 0x2e16cf5400000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ExchangeV2
Function name: retrieveWallet(address)
PC address: 2022
Estimated Gas Usage: 10520 - 68478
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:1183

 want token amount and expiration and salt values

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000080000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: retrieveWallet(address), txdata: 0x2e16cf5400000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ExchangeV2
Function name: batchExecuteOrder(address[4][],uint256[8][],uint8[2][],bytes32[4][])
PC address: 2429
Estimated Gas Usage: 417 - 842
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:1261

 which this order expires and a random number to mitigate replay.

   * [

   *   makerOffer

   *   makerWant

   *   takerOffer

   *   takerWant

   *   makerExpiry

   *   makerSalt

   *   takerExpiry

   *   takerSalt

   * ]

   * @param vSignatures ECDSA signature parameter.

   * [

   *   maker V

   *   taker V

   * ]

   * @param rAndSsignatures ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.

   * [

   *   maker R

   *   maker S

   *   taker R

   *   taker S

   * ]

   * @return Success of the transaction, false if error condition met.

   * Like types grouped to eliminate stack depth error.

   */

  function executeOrder (

    address[4] ow

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: batchExecuteOrder(address[4][],uint256[8][],uint8[2][],bytes32[4][]), txdata: 0x4983542e20, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ExchangeV2
Function name: batchExecuteOrder(address[4][],uint256[8][],uint8[2][],bytes32[4][])
PC address: 2542
Estimated Gas Usage: 734 - 6143
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:1261

 which this order expires and a random number to mitigate replay.

   * [

   *   makerOffer

   *   makerWant

   *   takerOffer

   *   takerWant

   *   makerExpiry

   *   makerSalt

   *   takerExpiry

   *   takerSalt

   * ]

   * @param vSignatures ECDSA signature parameter.

   * [

   *   maker V

   *   taker V

   * ]

   * @param rAndSsignatures ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.

   * [

   *   maker R

   *   maker S

   *   taker R

   *   taker S

   * ]

   * @return Success of the transaction, false if error condition met.

   * Like types grouped to eliminate stack depth error.

   */

  function executeOrder (

    address[4] ow

--------------------
Initial State:

Account: [CREATOR], balance: 0x2a0302a0a50467cad, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020, value: 0x0
Caller: [ATTACKER], function: batchExecuteOrder(address[4][],uint256[8][],uint8[2][],bytes32[4][]), txdata: 0x4983542e80000000000000000000000000000000000000000000000000000000000000067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec08, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ExchangeV2
Function name: batchExecuteOrder(address[4][],uint256[8][],uint8[2][],bytes32[4][])
PC address: 2598
Estimated Gas Usage: 879 - 8780
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/020fe89303259557dc1d173156d4354e.sol:1261

 which this order expires and a random number to mitigate replay.

   * [

   *   makerOffer

   *   makerWant

   *   takerOffer

   *   takerWant

   *   makerExpiry

   *   makerSalt

   *   takerExpiry

   *   takerSalt

   * ]

   * @param vSignatures ECDSA signature parameter.

   * [

   *   maker V

   *   taker V

   * ]

   * @param rAndSsignatures ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.

   * [

   *   maker R

   *   maker S

   *   taker R

   *   taker S

   * ]

   * @return Success of the transaction, false if error condition met.

   * Like types grouped to eliminate stack depth error.

   */

  function executeOrder (

    address[4] ow

--------------------
Initial State:

Account: [CREATOR], balance: 0x14d86e51480027a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004, value: 0x0
Caller: [ATTACKER], function: batchExecuteOrder(address[4][],uint256[8][],uint8[2][],bytes32[4][]), txdata: 0x4983542e80000000000000000000000000000000000000000000000000000000000000028000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe040, value: 0x0


