==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Distribution
Function name: fallback
PC address: 146
Estimated Gas Usage: 17554 - 237018
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21588e2e51e5bb513d0fa1b0e83df0f2.sol:345

[msg.sender].token.allowance(msg.sender,this) >= _amounts[i]);

	    	wallets[msg.sender].token.safeTransferFrom(msg.sender, _addresses[i], _amounts[i]);

	    }

	}



	function getDistributionInfo(address _address) view public returns (ERC20, uint256) {

        return (wallets[_address].token, wallets[_address].tokenDecimal);

    }



}

--------------------
Initial State:

Account: [CREATOR], balance: 0x104000000000e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200020008880004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateDistributionInfo(address,uint256), txdata: 0x46de3412000000000000000000000000400000000000000000000000000000000000000040, value: 0x0
Caller: [ATTACKER], function: distribute(address[],uint256[]), txdata: 0x2929abe6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Distribution
Function name: fallback
PC address: 542
Estimated Gas Usage: 17554 - 237018
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21588e2e51e5bb513d0fa1b0e83df0f2.sol:355



        return (wallets[_address].token, wall

--------------------
Initial State:

Account: [CREATOR], balance: 0xb008400000000085, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateDistributionInfo(address,uint256), txdata: 0x46de3412000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef20, value: 0x0
Caller: [CREATOR], function: distribute(address[],uint256[]), txdata: 0x2929abe6800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: fallback
PC address: 634
Estimated Gas Usage: 9520 - 122286
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21588e2e51e5bb513d0fa1b0e83df0f2.sol:359





}

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000003de, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateDistributionInfo(address,uint256), txdata: 0x46de3412000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef04, value: 0x0
Caller: [ATTACKER], function: distribute(address[],uint256[]), txdata: 0x2929abe68000000003fffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Distribution
Function name: fallback
PC address: 740
Estimated Gas Usage: 17554 - 237018
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21588e2e51e5bb513d0fa1b0e83df0f2.sol:359





}

--------------------
Initial State:

Account: [CREATOR], balance: 0xb008400000000085, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateDistributionInfo(address,uint256), txdata: 0x46de3412000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef20, value: 0x0
Caller: [CREATOR], function: distribute(address[],uint256[]), txdata: 0x2929abe6800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Distribution
Function name: fallback
PC address: 740
Estimated Gas Usage: 17554 - 237018
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21588e2e51e5bb513d0fa1b0e83df0f2.sol:359





}

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateDistributionInfo(address,uint256), txdata: 0x46de3412000000000000000000000000000000000000000000040000000000000000000004, value: 0x0
Caller: [CREATOR], function: distribute(address[],uint256[]), txdata: 0x2929abe6800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: fallback
PC address: 740
Estimated Gas Usage: 9520 - 122286
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21588e2e51e5bb513d0fa1b0e83df0f2.sol:359





}

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000003de, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateDistributionInfo(address,uint256), txdata: 0x46de3412000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef04, value: 0x0
Caller: [ATTACKER], function: distribute(address[],uint256[]), txdata: 0x2929abe68000000003fffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: fallback
PC address: 861
Estimated Gas Usage: 9520 - 122286
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21588e2e51e5bb513d0fa1b0e83df0f2.sol:363
Initial State:

Account: [CREATOR], balance: 0x400000000000003de, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateDistributionInfo(address,uint256), txdata: 0x46de3412000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef04, value: 0x0
Caller: [ATTACKER], function: distribute(address[],uint256[]), txdata: 0x2929abe68000000003fffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Distribution
Function name: fallback
PC address: 1157
Estimated Gas Usage: 17554 - 237018
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21588e2e51e5bb513d0fa1b0e83df0f2.sol:139

require(token.approve(spender, valu

--------------------
Initial State:

Account: [CREATOR], balance: 0xb008400000000085, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateDistributionInfo(address,uint256), txdata: 0x46de3412000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef20, value: 0x0
Caller: [CREATOR], function: distribute(address[],uint256[]), txdata: 0x2929abe6800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Distribution
Function name: fallback
PC address: 1157
Estimated Gas Usage: 9520 - 122286
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/21588e2e51e5bb513d0fa1b0e83df0f2.sol:139

require(token.approve(spender, valu

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000003de, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateDistributionInfo(address,uint256), txdata: 0x46de3412000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef04, value: 0x0
Caller: [ATTACKER], function: distribute(address[],uint256[]), txdata: 0x2929abe68000000003fffffffffffffffffffffffffffffffffffffffffffffffffffffc80, value: 0x0


