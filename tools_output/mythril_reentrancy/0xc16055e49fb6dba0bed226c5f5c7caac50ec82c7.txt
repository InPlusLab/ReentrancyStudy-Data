==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CrypteloPublicSale
Function name: constructor
PC address: 20
Estimated Gas Usage: 134694 - 622787
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:35

7 days bonus 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrypteloPublicSale
Function name: isWhiteListed(address) or isWhiteListed(address)
PC address: 2384
Estimated Gas Usage: 3759 - 39659
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:255

Sale = CrypteloPreSale(preSaleContract);
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090000000000000000000000000000000000000000090909090909090909090909000000000000000000000000000000000000000009090909090909090909090900000000000000000000000000000000000000000909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: isWhiteListed(address), txdata: 0x6f9170f6, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: CrypteloPublicSale
Function name: withdrawAllEther()
PC address: 4318
Estimated Gas Usage: 2605 - 37406
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:300

ows on overflow.
  */
  funct

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawAllEther(), txdata: 0x31c91117, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: payContributorByAdress(address)
PC address: 4882
Estimated Gas Usage: 1243 - 1338
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:187

tor(address _addr, uint _

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: payContributorByAdress(address), txdata: 0x897c8613, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: payContributorByNumber(uint256)
PC address: 5137
Estimated Gas Usage: 2210 - 2825
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:177

orAmount[adr] = 0;
    }


--------------------
Initial State:

Account: [CREATOR], balance: 0x2000001000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: payContributorByNumber(uint256), txdata: 0x90063fd4, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: calculateBonus(uint256)
PC address: 6020
Estimated Gas Usage: 1168 - 1263
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:78

onus = 25;
        }else if(now >= secDiscountStartTime && n

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: calculateBonus(uint256), txdata: 0x6081f5cb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: calculateBonus(uint256)
PC address: 6033
Estimated Gas Usage: 1998 - 2093
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:78

   bonus = 25;
        }else if(now >= secDiscountStartTime && now <= secDiscountEndTime){
            bonus = 20;
        }else if(now >= thirdDiscountStartTime && now <= thirdDiscountEndTime){
            bonus = 15;
        }else if(now >= fourthDiscountStartTime && now <= fourthDiscountEndTime){
            bonus = 10;
        }else{
            bonus = 5;
        }
        return bonus;
    }
    
    function CrypteloPublicSale(address _ERC20Addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x400084000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateBonus(uint256), txdata: 0x6081f5cb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: calculateBonus(uint256)
PC address: 6054
Estimated Gas Usage: 2829 - 2924
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:80

 20;
        }else if(now >= thirdDiscountStartTime && n

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateBonus(uint256), txdata: 0x6081f5cb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: calculateBonus(uint256)
PC address: 6067
Estimated Gas Usage: 3659 - 3754
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:80

s = 20;
        }else if(now >= thirdDiscountStartTime && now <= thirdDiscountEndTime){
            bonus = 15;
        }else if(now >= fourthDiscountStartTime && now <= fourthDiscountEndTime){
            bonus = 10;
        }else{
            bonus = 5;
        }
        return bonus;
    }
    
    function CrypteloPublicSale(address _ERC20Addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: calculateBonus(uint256), txdata: 0x6081f5cb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: calculateBonus(uint256)
PC address: 6088
Estimated Gas Usage: 4490 - 4585
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:82

 = 15;
        }else if(now >= fourthDiscountStartTime && no

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000100000013, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateBonus(uint256), txdata: 0x6081f5cb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: calculateBonus(uint256)
PC address: 6101
Estimated Gas Usage: 5320 - 5415
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:82

nus = 15;
        }else if(now >= fourthDiscountStartTime && now <= fourthDiscountEndTime){
            bonus = 10;
        }else{
            bonus = 5;
        }
        return bonus;
    }
    
    function CrypteloPublicSale(address _ERC20Addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x600020c0423, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calculateBonus(uint256), txdata: 0x6081f5cb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: calculateBonus(uint256)
PC address: 6122
Estimated Gas Usage: 6151 - 6246
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:84

 = 10;
        }else{
            bonus = 5;
        }
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000002000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: calculateBonus(uint256), txdata: 0x6081f5cb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CrypteloPublicSale
Function name: calculateBonus(uint256)
PC address: 6135
Estimated Gas Usage: 6981 - 7076
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/ed6d03686bc628183530977b08f57115.sol:84

nus = 10;
        }else{
            bonus = 5;
        }
        return bonus;
    }
    
    function CrypteloPublicSale(address _ERC20Addres

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: calculateBonus(uint256), txdata: 0x6081f5cb, value: 0x0