==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getPaimentStatus(address,uint256)
PC address: 3757
Estimated Gas Usage: 1190 - 1475
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:687
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPaimentStatus(address,uint256), txdata: 0x2646b176, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: deposites(uint256)
PC address: 3845
Estimated Gas Usage: 1102 - 1197
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:373

torAddress!=address(0));

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposites(uint256), txdata: 0x3f66d160, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: depositors(address,uint256)
PC address: 3971
Estimated Gas Usage: 1242 - 1527
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:375

;

    }

    

    function setNewMinDeposite

--------------------
Initial State:

Account: [CREATOR], balance: 0x42000000000060123, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: depositors(address,uint256), txdata: 0x466c01b8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getUserDeposit(address,uint256)
PC address: 4075
Estimated Gas Usage: 1303 - 1588
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:673

urn deposites[depositors[depositor][depositeNumber]].paimentTime;

    }

    

    function getPaimentStatus(address depositor, uint depositeNumber) public view returns(bool) {

        if ( deposites[depositors[depositor][depositeNumber]].paimentTime == 0 ) return false;

        else return true;

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getUserDeposit(address,uint256), txdata: 0x60711058, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getPaimentTime(address,uint256)
PC address: 4447
Estimated Gas Usage: 1319 - 1604
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:687
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPaimentTime(address,uint256), txdata: 0x631b0520, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5070
Estimated Gas Usage: 49209 - 296705
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:533

 

        promoWallet.tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5070
Estimated Gas Usage: 49209 - 296705
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:533

 

        promoWallet.tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000000000000004000000000000000000000000008080fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe81, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5070
Estimated Gas Usage: 49209 - 296705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:533

 

        promoWallet.tr

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5254
Estimated Gas Usage: 49209 - 296705
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5258
Estimated Gas Usage: 49209 - 296705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5308
Estimated Gas Usage: 49209 - 296705
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:539

mul(1).div(100));

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5361
Estimated Gas Usage: 49209 - 296705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:539

mul(1).div(100));

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5372
Estimated Gas Usage: 49209 - 296705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:539

mul(1).div(100));

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5382
Estimated Gas Usage: 49209 - 296705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:539

mul(1).div(100));

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5392
Estimated Gas Usage: 49209 - 296705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:539

mul(1).div(100));

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5464
Estimated Gas Usage: 49209 - 296705
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:541

(100));

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5473
Estimated Gas Usage: 49209 - 296705
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5477
Estimated Gas Usage: 49209 - 296705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: distribution
Function name: migrateDeposite(address,uint256,uint256)
PC address: 5507
Estimated Gas Usage: 49209 - 296705
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:541

ntForDistribution.mul(1).div(100));

        wall

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000401008422, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: migrateDeposite(address,uint256,uint256), txdata: 0x78374e4f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getDeposit(uint256)
PC address: 7361
Estimated Gas Usage: 1554 - 1649
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:635

of depositor, payment time, payment amount

    function getLastPayments(uint lastIndex) public view returns (address, uint, uint) {

        uint depositeIndex = currentPaymentIndex.sub(lastIndex).sub(1);

      

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getDeposit(uint256), txdata: 0x9f9fb968, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: distribution
Function name: getDepositeTime(address,uint256)
PC address: 7615
Estimated Gas Usage: 1715 - 2000
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/b8ed9907db31e1c930a194b63c08c6d3.sol:687
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getDepositeTime(address,uint256), txdata: 0xc6837a87, value: 0x0