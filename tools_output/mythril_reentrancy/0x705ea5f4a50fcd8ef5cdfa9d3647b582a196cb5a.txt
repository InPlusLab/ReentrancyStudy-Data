==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: fallback
PC address: 1576
Estimated Gas Usage: 1051 - 1336
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:467

llow a seller to refund a 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateRefund(uint256,uint256,uint256,bytes32), txdata: 0x1d34be47, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: offers(uint256,uint256)
PC address: 2116
Estimated Gas Usage: 1096 - 1381
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:155

rigin Token address

    constructor(a

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: offers(uint256,uint256), txdata: 0x4d03a9a5, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: sendDeposit(uint256,address,uint256,bytes32)
PC address: 3403
Estimated Gas Usage: 1117 - 1542
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:542

ate to whitelist. S

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sendDeposit(uint256,address,uint256,bytes32), txdata: 0x5f0da25b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: dispute(uint256,uint256,bytes32)
PC address: 3953
Estimated Gas Usage: 1133 - 1228
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:426

(msg.sender, listin

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: dispute(uint256,uint256,bytes32), txdata: 0x70809757, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: addFunds(uint256,uint256,bytes32,uint256)
PC address: 4640
Estimated Gas Usage: 1238 - 1523
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:379

            require(msg.va

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addFunds(uint256,uint256,bytes32,uint256), txdata: 0x7d19514d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: acceptOffer(uint256,uint256,bytes32)
PC address: 5461
Estimated Gas Usage: 1309 - 1404
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:346

(offer.finalizes < 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: acceptOffer(uint256,uint256,bytes32), txdata: 0x9c3f7ca2, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: withdrawListing(uint256,address,bytes32)
PC address: 6068
Estimated Gas Usage: 1375 - 1800
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:263

/ Prevent multiple 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawListing(uint256,address,bytes32), txdata: 0xa3111d7c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: executeRuling(uint256,uint256,bytes32,uint256,uint256)
PC address: 6545
Estimated Gas Usage: 1466 - 1751
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:448

     payCommission(listing

--------------------
Initial State:

Account: [CREATOR], balance: 0x2bc75800210019b8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: executeRuling(uint256,uint256,bytes32,uint256,uint256), txdata: 0xc73111dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: listings(uint256)
PC address: 7565
Estimated Gas Usage: 1530 - 1625
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:155

    ERC20 public tokenAdd

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: listings(uint256), txdata: 0xde74e57b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: makeOffer(uint256,bytes32,uint256,address,uint256,uint256,address,address,uint256)
PC address: 7629
Estimated Gas Usage: 1526 - 1951
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:364

der, listingID, off

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000002402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: makeOffer(uint256,bytes32,uint256,address,uint256,uint256,address,address,uint256), txdata: 0xc9c8580c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: withdrawOffer(uint256,uint256,bytes32)
PC address: 7629
Estimated Gas Usage: 1573 - 1668
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:364

der, listingID, off

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdrawOffer(uint256,uint256,bytes32), txdata: 0xebe65f60, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: finalize(uint256,uint256,bytes32)
PC address: 8183
Estimated Gas Usage: 1617 - 1712
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:399

        require(
  

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: finalize(uint256,uint256,bytes32), txdata: 0xfde34dc4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: updateListing(uint256,bytes32,uint256)
PC address: 8728
Estimated Gas Usage: 1398 - 1493
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:251


        }

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateListing(uint256,bytes32,uint256), txdata: 0xbf77aa1f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: V01_Marketplace
Function name: updateListingWithSender(address,uint256,bytes32,uint256)
PC address: 8728
Estimated Gas Usage: 2393 - 3148
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:251


        }

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateListingWithSender(address,uint256,bytes32,uint256), txdata: 0xcea4b687, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: V01_Marketplace
Function name: createListing(bytes32,uint256,address)
PC address: 11075
Estimated Gas Usage: 28377 - 146495
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:219

ateListing(
        uint listingID,
        byt

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createListing(bytes32,uint256,address), txdata: 0xca27eb1c0000000000000000000000000000000000000000000000000000000000000000800401402001010101010110010101011001010101010101010101010101010100000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: V01_Marketplace
Function name: createListingWithSender(address,bytes32,uint256,address)
PC address: 11075
Estimated Gas Usage: 29379 - 148108
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:219

ateListing(
        uint listingID,
        byt

--------------------
Initial State:

Account: [CREATOR], balance: 0x2002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createListingWithSender(address,bytes32,uint256,address), txdata: 0xde40062900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101100101010402020101101001010101010100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: V01_Marketplace
Function name: createListing(bytes32,uint256,address)
PC address: 11120
Estimated Gas Usage: 28377 - 146495
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:224

teListing(msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x101080000080800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createListing(bytes32,uint256,address), txdata: 0xca27eb1c0000000000000000000000000000000000000000000000000000000000000000010101010101010110200101018001801001200101010801010102010101010100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: V01_Marketplace
Function name: createListingWithSender(address,bytes32,uint256,address)
PC address: 11120
Estimated Gas Usage: 29379 - 148108
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/71ad2232129416359b66d253397c465d.sol:224

teListing(msg.s

--------------------
Initial State:

Account: [CREATOR], balance: 0x2180000400002009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: createListingWithSender(address,bytes32,uint256,address), txdata: 0xde40062900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101100101010104010401100120040108010101010101010101010100000000000000000000000004, value: 0x0