==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: NBUNIERC20
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone() or emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 7380
Estimated Gas Usage: 2067 - 2492
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/debb82cb94ee972d018ab5a02cecfaaa.sol:2515

 added require
    // 2) Adding liquidity after generaion is over - added require
    // 3) Overflow from uint -

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NBUNIERC20
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone() or emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 7745
Estimated Gas Usage: 14018 - 89199
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/debb82cb94ee972d018ab5a02cecfaaa.sol:2519

public payable {
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NBUNIERC20
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone() or emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 7811
Estimated Gas Usage: 14018 - 89199
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/debb82cb94ee972d018ab5a02cecfaaa.sol:2519

ParticipationAgreement) public payable {
       

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NBUNIERC20
Function name: emergencyDrain24hAfterLiquidityGenerationEventIsDone() or emergencyDrain24hAfterLiquidityGenerationEventIsDone()
PC address: 7880
Estimated Gas Usage: 14018 - 89199
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/debb82cb94ee972d018ab5a02cecfaaa.sol:2520

quidityGenerationOngoing(), 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: emergencyDrain24hAfterLiquidityGenerationEventIsDone(), txdata: 0x4f1a0f7d, value: 0x0