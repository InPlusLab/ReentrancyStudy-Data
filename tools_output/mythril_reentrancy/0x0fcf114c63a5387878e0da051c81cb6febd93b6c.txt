==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Ownable
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 359
Estimated Gas Usage: 1083 - 1508
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:41

wner) public onlyOwner {

    require(_newOwner != owner, "Cannot transfer to yourself");

    owner = _newOwner;

  }

}



interface BurnableERC20 {

    function

--------------------
Initial State:

Account: [CREATOR], balance: 0x3a3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MANABurner
Function name: transferMarketplaceOwnership(address)
PC address: 754
Estimated Gas Usage: 1061 - 1486
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:107

nership(target);

    }



    function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) public onlyOwner {

        marketplace.

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferMarketplaceOwnership(address), txdata: 0x1206dc5f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MANABurner
Function name: transferMarketplaceOwnership(address)
PC address: 947
Estimated Gas Usage: 3493 - 38624
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:113

llion) public onlyOwner {

        ma

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: burn(), txdata: 0x44df8e70, value: 0x0
Caller: [CREATOR], function: transferMarketplaceOwnership(address), txdata: 0x1206dc5f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MANABurner
Function name: setOwnerCutPerMillion(uint256) or setOwnerCutPerMillion(uint256)
PC address: 1058
Estimated Gas Usage: 1077 - 1502
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:115

erMillion(_ownerCutPerMillion);

    }



    function pause() public onlyOwner {

        marketplace.pause();

    }



    function unpause() public on

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setOwnerCutPerMillion(uint256), txdata: 0x19dad16d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MANABurner
Function name: setOwnerCutPerMillion(uint256) or setOwnerCutPerMillion(uint256)
PC address: 1207
Estimated Gas Usage: 3497 - 38628
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:123

 marketplace.pause();

    }



    function unpause()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: burn(), txdata: 0x44df8e70, value: 0x0
Caller: [CREATOR], function: setOwnerCutPerMillion(uint256), txdata: 0x19dad16d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MANABurner
Function name: unpause() or unpause()
PC address: 1318
Estimated Gas Usage: 1043 - 1468
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:135
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: unpause(), txdata: 0x3f4ba83a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MANABurner
Function name: unpause() or unpause()
PC address: 1456
Estimated Gas Usage: 3430 - 38466
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:135
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: burn(), txdata: 0x44df8e70, value: 0x0
Caller: [CREATOR], function: unpause(), txdata: 0x3f4ba83a, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MANABurner
Function name: burn()
PC address: 1733
Estimated Gas Usage: 5093 - 74786
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:105

onlyOwner {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: burn(), txdata: 0x44df8e70, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MANABurner
Function name: burn()
PC address: 1874
Estimated Gas Usage: 5093 - 74786
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:105

t) public onlyOwner {

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: burn(), txdata: 0x44df8e70, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MANABurner
Function name: burn()
PC address: 1874
Estimated Gas Usage: 5093 - 74786
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:105

t) public onlyOwner {

        

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: burn(), txdata: 0x44df8e70, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MANABurner
Function name: pause() or pause()
PC address: 1984
Estimated Gas Usage: 1087 - 1512
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:131

       marketplace.unpause();

    }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: pause(), txdata: 0x8456cb59, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MANABurner
Function name: pause() or pause()
PC address: 2122
Estimated Gas Usage: 3474 - 38510
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:135
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: burn(), txdata: 0x44df8e70, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MANABurner
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 2345
Estimated Gas Usage: 1237 - 1662
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/64c36da70a56039836dcfb2f16d683c6.sol:41

wner) public onlyOwner {

    require(_newOwner != owner, "Cannot transfer to yourself");

    owner = _newOwner;

  }

}



interface BurnableERC20 {

    function

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0