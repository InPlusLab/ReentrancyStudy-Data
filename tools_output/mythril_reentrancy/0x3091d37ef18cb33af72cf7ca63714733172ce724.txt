==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Gateway
Function name: transferFee()
PC address: 2257
Estimated Gas Usage: 16375 - 125646
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:189

Token(_tokenAddress);
      retu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFee(), txdata: 0xacb2ad6f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Gateway
Function name: balanceOfToken(address,address)
PC address: 2656
Estimated Gas Usage: 2366 - 38624
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:196

er] > 0);
      uint valu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: balanceOfToken(address,address), txdata: 0xf59e38b7000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 2880
Estimated Gas Usage: 27057 - 180049
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:167

nder, _sellerAddress, _value, _to

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 3051
Estimated Gas Usage: 27057 - 180049
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:168

uccess = true;
    }
    function payEth(address _sell

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 3051
Estimated Gas Usage: 27057 - 180049
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:168

uccess = true;
    }
    function payEth(address _sell

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca600000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000801020800010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 3169
Estimated Gas Usage: 27057 - 180049
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:170

, uint _orderId, uint _value) public returns  (bool success){
      require(_sellerAddress != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000003d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 3200
Estimated Gas Usage: 27057 - 180049
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:170

, uint _orderId, uint _value) public returns  (bool success){
      require(_sellerAddress != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000003d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 3209
Estimated Gas Usage: 27057 - 180049
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:170

, uint _orderId, uint _value) public returns  (bool success){
      require(_sellerAddress != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000003d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 3222
Estimated Gas Usage: 27057 - 180049
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:170

, uint _orderId, uint _value) public returns  (bool success){
      require(_sellerAddress != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000003d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 3229
Estimated Gas Usage: 27057 - 180049
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:170

, uint _orderId, uint _value) public returns  (bool success){
      require(_sellerAddress != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000003d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 3235
Estimated Gas Usage: 27057 - 180049
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:170

, uint _orderId, uint _value) public returns  (bool success){
      require(_sellerAddress != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000003d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Gateway
Function name: payToken(address,address,uint256,uint256)
PC address: 3250
Estimated Gas Usage: 27057 - 180049
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/3dce87a7d962a74a67f834ed5ef470df.sol:170

, uint _orderId, uint _value) public returns  (bool success){
      require(_sellerAddress != 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payToken(address,address,uint256,uint256), txdata: 0xf64ccca6000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000003d, value: 0x0


