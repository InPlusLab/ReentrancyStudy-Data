==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: constructor
PC address: 401
Estimated Gas Usage: 23041 - 107083
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:535

r to revoke the ve

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 10101010101010101010101004808040202020400104012002001010100104102856f02d99a5badb4adea90ae9f356294021000001200a5d15cc24d4108a0a80d8b419e88c402280cb21a93a4906421ac0ef04040167fa451040244c10860a80e0, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1726
Estimated Gas Usage: 5625 - 40753
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:643

totalFunds;



  // Tokens alre

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [CREATOR], function: vestedAmount(address), txdata: 0x384711cc525252525252525252525252deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1726
Estimated Gas Usage: 4861 - 40179
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:643

totalFunds;



  // Tokens alre

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000080000000000108000000000000000000000014e, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1851
Estimated Gas Usage: 5625 - 40753
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:649

;



  // List o

--------------------
Initial State:

Account: [CREATOR], balance: 0x148400d1a0702a025, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1851
Estimated Gas Usage: 4861 - 40179
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:649

;



  // List o

--------------------
Initial State:

Account: [CREATOR], balance: 0x8009008020154092, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000802000004001040008000002000204020200011016, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8a2a2a2a2a2a2a2a2a2a2a2a2deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1871
Estimated Gas Usage: 5625 - 40753
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:655

 addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x148400d1a0702a025, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1871
Estimated Gas Usage: 4861 - 40179
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:655

 addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x8009008020154092, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000802000004001040008000002000204020200011016, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8a2a2a2a2a2a2a2a2a2a2a2a2deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1878
Estimated Gas Usage: 3771 - 38618
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:653

s added to the pool

  address[] public beneficiaries;



  // Mapping of beneficiary to TokenVesting contracts addresses

  mapping(address => address[]) public beneficiaryDistributionContracts;



  // Tracks the distribution contracts created by this contr

--------------------
Initial State:

Account: [CREATOR], balance: 0x900000002000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x900000002000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1893
Estimated Gas Usage: 5625 - 40753
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

ting con

--------------------
Initial State:

Account: [CREATOR], balance: 0x148400d1a0702a025, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1893
Estimated Gas Usage: 4861 - 40179
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

ting con

--------------------
Initial State:

Account: [CREATOR], balance: 0x8009008020154092, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000802000004001040008000002000204020200011016, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8a2a2a2a2a2a2a2a2a2a2a2a2deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1896
Estimated Gas Usage: 5625 - 40753
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

o Tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x148400d1a0702a025, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 1896
Estimated Gas Usage: 4861 - 40179
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

o Tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x8009008020154092, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000802000004001040008000002000204020200011016, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8a2a2a2a2a2a2a2a2a2a2a2a2deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1918
Estimated Gas Usage: 5508 - 40355
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

ng of beneficiary to TokenVesting contracts addresses

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x420400000000c2283, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1986
Estimated Gas Usage: 5625 - 40753
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

s addresses

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x148400d1a0702a025, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 2002
Estimated Gas Usage: 5525 - 40372
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

apping of beneficiary to TokenVesting contracts addresses

  mapping(address => address[]) public beneficiaryDistributionContracts;



  // Tracks the distribution contracts created by this contr

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000010202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 3313
Estimated Gas Usage: 5466 - 40313
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

o TokenVesting cont

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000010001000000000400000001000080800102886f54a42bd1304518194972dca8c52c72c0e40648b720c9425de050b35e10800410c06de0975a807108008d43575188108f240149490748c54241c08049128388, value: 0x0
Caller: [CREATOR], function: vestedAmount(address), txdata: 0x384711cc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: releasableAmount(address)
PC address: 3313
Estimated Gas Usage: 6339 - 41376
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

o TokenVesting cont

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000020000100000000040000000000000100000000c8e1928ea082263882a4c1870014524ad2c00ede8500e412c3920140c40c30002060130400c322958003408c0034466a540254908d8800f61d0109475d04200538, value: 0x0
Caller: [ATTACKER], function: releasableAmount(address), txdata: 0x1726cbc8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVesting
Function name: release(address)
PC address: 3313
Estimated Gas Usage: 6382 - 41419
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:659

o TokenVesting cont

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000104004000002000000000000000010000010013fd42608b1f4524092668c88c9db1e7e7def7bdffbfffffffffffd0ffffffa2740250010170e00efb90971222820500000108000000000200022017c10880def2, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x19165587, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVestingPool
Function name: beneficiaryDistributionContracts(address,uint256)
PC address: 3672
Estimated Gas Usage: 1264 - 1549
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:709

  ERC20Basic _token,

    uint256 _totalFunds

  ) public validAddres

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000100000100020000010000000000010001088080, value: 0x0
Caller: [CREATOR], function: beneficiaryDistributionContracts(address,uint256), txdata: 0xc1cd8233, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVestingPool
Function name: beneficiaries(uint256)
PC address: 3775
Estimated Gas Usage: 1212 - 1307
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:701

unds Maximum amount of tokens 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010201010101010101010101010101010101010102, value: 0x0
Caller: [CREATOR], function: beneficiaries(uint256), txdata: 0xefeb5e58, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenVestingPool
Function name: addBeneficiary(address,uint256,uint256,uint256,uint256)
PC address: 4317
Estimated Gas Usage: 113101 - 435709
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/528896d267ce0a7d4ade99b50726a2bf.sol:195

  require(_token.transferFro

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000001010100010000010000000000040010014040, value: 0x0
Caller: [CREATOR], function: addBeneficiary(address,uint256,uint256,uint256,uint256), txdata: 0x55119b1ad1d1d1d1d1d1d1d1d1d1d1d100000000000000000000000000000000000000013ef371318d665a4ccb93450bae620de8004300518d4eb5692ab5557e56f574208040132802a462c189320190522218180846f3cae942a52b2855540054050032c00000000200000000000000000000000000000000000000000000000000000802, value: 0x0