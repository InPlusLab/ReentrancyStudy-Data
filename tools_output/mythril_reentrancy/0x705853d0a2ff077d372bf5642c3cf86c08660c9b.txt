==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 182
Estimated Gas Usage: 80389 - 539307
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:143

turns(bool)  {
        
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x401010c7ffa0bc73a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GiftOfCompound
Function name: constructor
PC address: 207
Estimated Gas Usage: 26927 - 130453
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:61

C20 {
    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000b1cf422108080f04e8123a5361e153501112e38a140ba7df611131a9eab9880050, value: 0x1

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: GiftOfCompound
Function name: constructor
PC address: 343
Estimated Gas Usage: 80389 - 539307
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:182

eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee

--------------------
Initial State:

Account: [CREATOR], balance: 0x400dc342134bd2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 876
Estimated Gas Usage: 80389 - 539307
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:183

, PERM_HINT);
        dai.approve(address(cdai), 8000000000000000000000000000000000000000000000000000000);
        cdai.mint(daiAmount);
        
        uint256 cdaiAmount = cdai.balanceOf(this

--------------------
Initial State:

Account: [CREATOR], balance: 0x40017271fc203c014, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 923
Estimated Gas Usage: 80389 - 539307
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:188

t = 

--------------------
Initial State:

Account: [CREATOR], balance: 0x813e5fbf6bc0ac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1060
Estimated Gas Usage: 80389 - 539307
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:188

startedWithGiftAmount = cdaiAmount;
        initialDaiAmount = daiAmount;
        i

--------------------
Initial State:

Account: [CREATOR], balance: 0x813e5fbf6bc0ac, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1106
Estimated Gas Usage: 80389 - 539307
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:190

aiRa

--------------------
Initial State:

Account: [CREATOR], balance: 0x410801420cc001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1210
Estimated Gas Usage: 80389 - 539307
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:190

aiRate = cdai.exchan

--------------------
Initial State:

Account: [CREATOR], balance: 0x410801420cc001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1256
Estimated Gas Usage: 80389 - 539307
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:191


   

--------------------
Initial State:

Account: [CREATOR], balance: 0x401010c7ffa0bc73a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1359
Estimated Gas Usage: 80389 - 539307
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:191


    }
    
    func

--------------------
Initial State:

Account: [CREATOR], balance: 0x401010c7ffa0bc73a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1407
Estimated Gas Usage: 80389 - 539307
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:194

EntitledTo(address qAddress) const

--------------------
Initial State:

Account: [CREATOR], balance: 0x401010c7ffa0bc73a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1412
Estimated Gas Usage: 80389 - 539307
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:194

s (uint256){
          //uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x401010c7ffa0bc73a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1415
Estimated Gas Usage: 80389 - 539307
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:195

eRat

--------------------
Initial State:

Account: [CREATOR], balance: 0x401010c7ffa0bc73a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1515
Estimated Gas Usage: 80389 - 539307
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:195

eRateStored().sub(initial

--------------------
Initial State:

Account: [CREATOR], balance: 0x401010c7ffa0bc73a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GiftOfCompound
Function name: constructor
PC address: 1561
Estimated Gas Usage: 80389 - 539307
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/174ec891750ee5f6f57750e970ef6f89.sol:195

Growth = cdai.exchangeRateStored().sub(initial

--------------------
Initial State:

Account: [CREATOR], balance: 0x401010c7ffa0bc73a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064, value: 0x5543df729c000


