==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniversalBasicIncome
Function name: claim()
PC address: 958
Estimated Gas Usage: 14783 - 140219
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:763

ositTokens();
        // I

--------------------
Initial State:

Account: [CREATOR], balance: 0x3004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d9d9d9d9d9d9d9d9d9d9d9d90101010101000000000000000000000000000000d9d9d9d9d9d9d9d9d9d9d9d90001010101010000000000010200000000000000d9d9d9d9d9d9d9d9d9d9d9d9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: UniversalBasicIncome
Function name: claim()
PC address: 958
Estimated Gas Usage: 14783 - 140219
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:763

ositTokens();
        // I

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000072b0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 993
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x4401001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1005
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:763

ositTokens();
        // I

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000911a0f3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1038
Estimated Gas Usage: 14783 - 140219
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:769
Initial State:

Account: [CREATOR], balance: 0x1082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2d2d2d2d2d2d2d2d2d2d2d2d01010101010000000000020000000000000000002d2d2d2d2d2d2d2d2d2d2d2d00010101010100000000000102000000000000002d2d2d2d2d2d2d2d2d2d2d2ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1154
Estimated Gas Usage: 14783 - 140219
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:769
Initial State:

Account: [CREATOR], balance: 0x3004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d9d9d9d9d9d9d9d9d9d9d9d90101010101000000000000000000000000000000d9d9d9d9d9d9d9d9d9d9d9d90001010101010000000000010200000000000000d9d9d9d9d9d9d9d9d9d9d9d9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1154
Estimated Gas Usage: 14783 - 140219
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:769
Initial State:

Account: [CREATOR], balance: 0x1082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2d2d2d2d2d2d2d2d2d2d2d2d01010101010000000000020000000000000000002d2d2d2d2d2d2d2d2d2d2d2d00010101010100000000000102000000000000002d2d2d2d2d2d2d2d2d2d2d2ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1189
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x3ca100063104, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1201
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:769
Initial State:

Account: [CREATOR], balance: 0xcd3ac020020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: UniversalBasicIncome
Function name: claim()
PC address: 1275
Estimated Gas Usage: 14783 - 140219
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:769
Initial State:

Account: [CREATOR], balance: 0x1082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2d2d2d2d2d2d2d2d2d2d2d2d01010101010000000000020000000000000000002d2d2d2d2d2d2d2d2d2d2d2d00010101010100000000000102000000000000002d2d2d2d2d2d2d2d2d2d2d2ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 1795
Estimated Gas Usage: 7058 - 77503
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:769
Initial State:

Account: [CREATOR], balance: 0x4042000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 60606060606060606060606080020108400204042000800101002000080020206060606060606060606060604000200120800820002080100000000200028080606060606060606060606060deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000008202000001000100004100080000280010800, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 1795
Estimated Gas Usage: 7058 - 77503
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:769
Initial State:

Account: [CREATOR], balance: 0x815e0b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000000000000000000000000000000004000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 1830
Estimated Gas Usage: 7058 - 77503
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000237381829, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000000000000000000000000000000004000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 1842
Estimated Gas Usage: 7058 - 77503
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/608eb59f575a423e5f77eb8b9584b93a.sol:769
Initial State:

Account: [CREATOR], balance: 0x830a2008f1b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000000000000000000000000000000001000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claimableBalance(address)
PC address: 2396
Estimated Gas Usage: 7058 - 77503
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x102018, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimableBalance(address), txdata: 0x60f3309b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniversalBasicIncome
Function name: claim()
PC address: 2396
Estimated Gas Usage: 14783 - 140219
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x4a01001aa9982, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0