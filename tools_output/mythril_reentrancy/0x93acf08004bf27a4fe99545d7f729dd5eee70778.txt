==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 982
Estimated Gas Usage: 1079 - 1504
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:72

   require(_newOwner != owner);
        newOwner = _newOwner;
    }

    /**
        @dev used by a new owner to accept an ownership transfe

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ReceiptIssuer
Function name: transferPAIReceiptOwnership(address)
PC address: 1091
Estimated Gas Usage: 1053 - 1478
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:446
Initial State:

Account: [CREATOR], balance: 0x4000a0e1c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101040101010201010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: transferPAIReceiptOwnership(address), txdata: 0x27ac7934, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReceiptIssuer
Function name: transferPAIReceiptOwnership(address)
PC address: 1286
Estimated Gas Usage: 3480 - 38611
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:446
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000020, value: 0x0
Caller: [CREATOR], function: transferPAIReceiptOwnership(address), txdata: 0x27ac7934, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ReceiptIssuer
Function name: finalize()
PC address: 1398
Estimated Gas Usage: 1057 - 1482
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:423

tion issueReceipts(address _recipient, uint256 _amount) public ownerOnly {

        pair.issue(_recipient, _amount);

        TokensIssued(_recipient, _amount);
    }

    /// @dev Proposes to transfer control of the PAIReceipt contrac

--------------------
Initial State:

Account: [CREATOR], balance: 0x19ad1b, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReceiptIssuer
Function name: finalize()
PC address: 1580
Estimated Gas Usage: 10205 - 65996
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:430

    /// @dev Proposes to tra

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReceiptIssuer
Function name: finalize()
PC address: 1605
Estimated Gas Usage: 10205 - 65996
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:430

 of the PAIReceipt

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReceiptIssuer
Function name: finalize()
PC address: 1619
Estimated Gas Usage: 10205 - 65996
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:430

 of the PAIReceipt

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: finalize(), txdata: 0x4bb278f3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ReceiptIssuer
Function name: acceptPAIReceiptOwnership()
PC address: 2194
Estimated Gas Usage: 1123 - 1548
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:446
Initial State:

Account: [CREATOR], balance: 0x100820997, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010101020201010101010201010100000000000000000000000010, value: 0x0
Caller: [ATTACKER], function: acceptPAIReceiptOwnership(), txdata: 0x7ec1c1aa, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReceiptIssuer
Function name: acceptPAIReceiptOwnership()
PC address: 2334
Estimated Gas Usage: 3505 - 38541
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:446
Initial State:

Account: [CREATOR], balance: 0x5000000000000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000004, value: 0x0
Caller: [CREATOR], function: acceptPAIReceiptOwnership(), txdata: 0x7ec1c1aa, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PAIReceipt
Function name: disableTransfers(bool) or disableTransfers(bool)
PC address: 2553
Estimated Gas Usage: 1075 - 1500
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:309

nt
        @param _amount     amount to increase the supply by
    */
    function issue(address _to, uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: disableTransfers(bool), txdata: 0x1608f18f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ReceiptIssuer
Function name: issueReceipts(address,uint256)
PC address: 2571
Estimated Gas Usage: 1297 - 1722
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:434

9;s acceptOwnership directly in order to accept the ownership.
    ///   2. Calling this method during the token sale will prevent the token sale to continue, since only the o

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080100000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101000101010101010101010100020100000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: issueReceipts(address,uint256), txdata: 0xdaeab905, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReceiptIssuer
Function name: issueReceipts(address,uint256)
PC address: 2774
Estimated Gas Usage: 4938 - 40701
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:435

ethod during the token sale wil

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000008, value: 0x0
Caller: [CREATOR], function: issueReceipts(address,uint256), txdata: 0xdaeab905, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ReceiptIssuer
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 2959
Estimated Gas Usage: 1295 - 1720
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:72

   require(_newOwner != owner);
        newOwner = _newOwner;
    }

    /**
        @dev used by a new owner to accept an ownership transfe

--------------------
Initial State:

Account: [CREATOR], balance: 0x18001828183, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010101010101010801018001010101010101040100000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PAIReceipt
Function name: issue(address,uint256) or issue(address,uint256)
PC address: 3573
Estimated Gas Usage: 1275 - 1700
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:323

  }

    /**
        @dev removes tokens from an account and decreases the token supply
        can be called by the contract owner to destroy tokens from any account or by any holder to destroy tokens from his/her own account

        @param _from       account to remove the amount from
        @param _amount     amount to

--------------------
Initial State:

Account: [CREATOR], balance: 0x101040040000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: issue(address,uint256), txdata: 0x867904b4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PAIReceipt
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 4893
Estimated Gas Usage: 1427 - 1852
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:72

   require(_newOwner != owner);
        newOwner = _newOwner;
    }

    /**
        @dev used by a new owner to accept an ownership transfe

--------------------
Initial State:

Account: [CREATOR], balance: 0x2002000101000803, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PAIReceipt
Function name: destroy(address,uint256) or destroy(address,uint256)
PC address: 5839
Estimated Gas Usage: 1468 - 1753
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:346

nimize user errors
        in addi

--------------------
Initial State:

Account: [CREATOR], balance: 0x24185, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: destroy(address,uint256), txdata: 0xa24835d1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef09, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PAIReceipt
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 5839
Estimated Gas Usage: 2303 - 3108
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:230


    }

    /**
        @dev allow another ac

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000030002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PAIReceipt
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 5839
Estimated Gas Usage: 2359 - 2974
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/889b70c4d30c73ac85a4edad55b79394.sol:211

ntract attempts to get the coins
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000004000808001, value: 0x0