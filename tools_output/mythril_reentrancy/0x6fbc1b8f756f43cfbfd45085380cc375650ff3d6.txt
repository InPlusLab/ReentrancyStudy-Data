==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZethrSnap
Function name: walletWithdrawTokens(uint256)
PC address: 1103
Estimated Gas Usage: 4259 - 39485
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:333

er should use to calculate ownership

   * @para

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000800400000ed, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: walletWithdrawTokens(uint256), txdata: 0x2ffda952, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ZethrSnap
Function name: getSnap(uint256)
PC address: 1209
Estimated Gas Usage: 1061 - 1156
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:415

(uint _snapId,

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getSnap(uint256), txdata: 0x42585b34, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZethrSnap
Function name: ownerSetPaused(bool)
PC address: 2137
Estimated Gas Usage: 9520 - 64837
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:571
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetPaused(bool), txdata: 0xaefb1643, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ZethrSnap
Function name: ownerSetPaused(bool)
PC address: 2194
Estimated Gas Usage: 9520 - 64837
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:243

c

  walletOnly


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetPaused(bool), txdata: 0xaefb1643, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ZethrSnap
Function name: ownerSetPaused(bool)
PC address: 2207
Estimated Gas Usage: 9520 - 64837
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:243

c

  walletOnly


--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: ownerSetPaused(bool), txdata: 0xaefb1643, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ZethrSnap
Function name: snaps(uint256)
PC address: 2229
Estimated Gas Usage: 1222 - 1317
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:173

ps

  uint public alloca

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: snaps(uint256), txdata: 0xbf81473f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ZethrSnap
Function name: walletCreateSnap(uint256,uint256)
PC address: 2624
Estimated Gas Usage: 28952 - 145024
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:387

ic view

  returns (uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: walletCreateSnap(uint256,uint256), txdata: 0xd4dc8e83, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ZethrSnap
Function name: walletCreateSnap(uint256,uint256)
PC address: 2668
Estimated Gas Usage: 28952 - 145024
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:389

ol claimed)

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: walletCreateSnap(uint256,uint256), txdata: 0xd4dc8e83, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ZethrSnap
Function name: walletCreateSnap(uint256,uint256)
PC address: 2691
Estimated Gas Usage: 28952 - 145024
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:395

er][_snapId]);


--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: walletCreateSnap(uint256,uint256), txdata: 0xd4dc8e83, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ZethrSnap
Function name: walletCreateSnap(uint256,uint256)
PC address: 2696
Estimated Gas Usage: 28952 - 145024
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:395

laimedMap[msg.sender][_snapId]);

  }



  /**

  

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: walletCreateSnap(uint256,uint256), txdata: 0xd4dc8e83, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ZethrSnap
Function name: claim(uint256,address,uint256,bytes)
PC address: 2750
Estimated Gas Usage: 8829 - 34202
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/0b1c7e667bea659294c0293e8be8d152.sol:559

wner 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claim(uint256,address,uint256,bytes), txdata: 0x990161420000000000000000000000000000000000000000000000000000000000000040, value: 0x0


