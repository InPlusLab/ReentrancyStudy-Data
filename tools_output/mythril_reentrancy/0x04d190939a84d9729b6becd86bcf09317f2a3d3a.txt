==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: disableBundlingMultitoken(uint256)
PC address: 1380
Estimated Gas Usage: 1827 - 2252
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/06f12f9d4984757b27cf640c2d0260ed.sol:535

henNotPaused {

        require(deployer.owner() == address(this), "setDeployer: first set MultiTokenNetwork as owner");

        emit NewDepl

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disableBundlingMultitoken(uint256), txdata: 0x13f9cf76, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 1676
Estimated Gas Usage: 2123 - 5135
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/06f12f9d4984757b27cf640c2d0260ed.sol:567
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deploy(uint256,bytes), txdata: 0x61ff715f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: disableChangesMultitoken(uint256)
PC address: 2216
Estimated Gas Usage: 1959 - 2384
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/06f12f9d4984757b27cf640c2d0260ed.sol:549

      address mtkn = _deployers[index].deploy(data);

        _multitokens.push(mtkn);

        emit NewMultitoken(mtkn);

    }



   

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disableChangesMultitoken(uint256), txdata: 0x817725aa, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: makeCall(address,uint256,bytes)
PC address: 2576
Estimated Gas Usage: 2560 - 41405
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/06f12f9d4984757b27cf640c2d0260ed.sol:567
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: makeCall(address,uint256,bytes), txdata: 0x8482167e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: deployers(uint256)
PC address: 2702
Estimated Gas Usage: 1206 - 1301
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/06f12f9d4984757b27cf640c2d0260ed.sol:479

Multitoken(uint index) public onlyOwner {

        require(index < _multitokens.length, "deleteMultitoken: i

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deployers(uint256), txdata: 0x8faa77b2, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: enableBundlingMultitoken(uint256)
PC address: 3055
Estimated Gas Usage: 2091 - 2516
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/06f12f9d4984757b27cf640c2d0260ed.sol:539

_deployers[index], deployer);

        _deployers[index] = deployer;

    }



    function deploy(uint256 index, bytes data) public whenNot

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enableBundlingMultitoken(uint256), txdata: 0xa36b15d0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: multitokens(uint256)
PC address: 3175
Estimated Gas Usage: 1294 - 1389
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/06f12f9d4984757b27cf640c2d0260ed.sol:463

nction allWalletBalances(address wallet) public view returns(uint256[]) {

        uint256[] memory bal

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multitokens(uint256), txdata: 0xaa974eff, value: 0x0


