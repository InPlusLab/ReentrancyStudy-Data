==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RBAC
Function name: hasRole(address,string)
PC address: 487
Estimated Gas Usage: 1688 - 6014
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x20004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: hasRole(address,string), txdata: 0x217fe6c60000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Superuser
Function name: fallback
PC address: 722
Estimated Gas Usage: 1699 - 6404
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2001032, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: checkRole(address,string), txdata: 0x0988ca8c000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe80, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Superuser
Function name: hasRole(address,string)
PC address: 834
Estimated Gas Usage: 1726 - 6712
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: hasRole(address,string), txdata: 0x217fe6c60000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 2046
Estimated Gas Usage: 7357 - 115072
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2d95fe477653253f0ddc65c6eb8e1a40.sol:1649
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 2167
Estimated Gas Usage: 7357 - 115072
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2d95fe477653253f0ddc65c6eb8e1a40.sol:1649
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 2167
Estimated Gas Usage: 7357 - 115072
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2d95fe477653253f0ddc65c6eb8e1a40.sol:1649
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 2326
Estimated Gas Usage: 7357 - 115072
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2d95fe477653253f0ddc65c6eb8e1a40.sol:1649
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Luckyblock
Function name: withdrawToken(address,address,uint256)
PC address: 2508
Estimated Gas Usage: 7357 - 115072
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2d95fe477653253f0ddc65c6eb8e1a40.sol:1649
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawToken(address,address,uint256), txdata: 0x01e33667000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Luckyblock
Function name: checkRole(address,string)
PC address: 2850
Estimated Gas Usage: 1800 - 6835
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x40006000060000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: checkRole(address,string), txdata: 0x0988ca8c000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe80, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Luckyblock
Function name: luckyblockIds(uint256)
PC address: 3150
Estimated Gas Usage: 1103 - 1528
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2d95fe477653253f0ddc65c6eb8e1a40.sol:1269

lockEarn(

    bytes32 luckybl

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: luckyblockIds(uint256), txdata: 0x10c5a247, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Luckyblock
Function name: hasRole(address,string)
PC address: 3518
Estimated Gas Usage: 1893 - 7209
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x2b2102008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: hasRole(address,string), txdata: 0x217fe6c60000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Luckyblock
Function name: addLuckyblock(uint256)
PC address: 5218
Estimated Gas Usage: 18799 - 82142
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
Initial State:

Account: [CREATOR], balance: 0x20000082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addLuckyblock(uint256), txdata: 0xbd7173dd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Luckyblock
Function name: play(bytes32)
PC address: 5645
Estimated Gas Usage: 4183 - 5318
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/2d95fe477653253f0ddc65c6eb8e1a40.sol:1509

=

      address(0x0)) {

      for (uint8 j= 0; j < _luckyblockEarn.earnTokenAddresses.length; j++) {

        // check sender's erc20 balance 

        uint256 earnTokenCount = _luckyblockEarn.earnTokenCount[j];

        require(

          ERC20Interface(_luckyblockEarn.earnTokenAddresses[j])

          .balanceOf(address(this)) >= earnTokenCount

        );

      }

    }

    

    // check earn ether

    require(address(this).balance >= _luckyblockEarn.earnEtherCount, "contract value not enough");



    // do a random

    uint8 _random = random();



    // earn erc20

    for (uint8 k = 0; k < _luckyblockEarn.earnTokenAddresses.length; k++){

      // if win erc20

      if (_luckyblockEarn.earnTokenAddresses[0]

        != address(0x0)){

        if (_random + _luckyblockEarn.earnTokenProbability[k] >= 100) {

          ERC20Interface(_luckyblockEarn.earnTokenAddresses[k])

            .transfer(msg.sender, _luckyblockEarn.earnTokenCount[k]);

        }

      }

    }

    uint256 value = msg.value;

    uint256 payExcess = value.sub(_luckyblockSpend.spendEtherCount);

    

    // if win ether

    if (_random + _luckyblockEarn.earnEtherProbability >= 100) {

      uint256 balance = _luckyblockEarn.earnEtherCount.add(payExcess);

      if (balance > 0){

        msg.sender.transfer(balance);

      }

    } else if (payExcess > 0) {

      msg.sender.transfer(payExcess);

    }

    

    emit Play(luckyblockId, msg.sender, _random);

  }



  function withdrawToken(address contractAddress, address to, uint256 balance)

    external onlyOwnerOrSuperuser {

    ERC20Interface erc20 = ERC20Interface(contractAddress);

    if (balance == uint256(0x0)){

      erc20.transfer(to, erc20.balanceOf(address(this)));

      emit WithdrawToken(contractAddress, to, erc20.balanceOf(address(this)));

    } else {

      erc20.transfer(to, balance);

      emit WithdrawToken(contractAddress, to, balance);

    }

  }



  function withdrawEth(address to, uint256 balance) external onlySuperuser {

    if (balance == uint256(0x0)) {

      to.transfer(address(this).balance);

      emit WithdrawEth(to, address(this).balance);

    } else {

      to.transfer(balance);

      emit WithdrawEth(to, balance);

    }

  }



  function random() private view returns (uint8) {

    return Random(randomContract).getRandom(); // random 0-99

  }

}

--------------------
Initial State:

Account: [CREATOR], balance: 0x44001b85ffffbb, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: play(bytes32), txdata: 0xc7a1865b, value: 0x0


