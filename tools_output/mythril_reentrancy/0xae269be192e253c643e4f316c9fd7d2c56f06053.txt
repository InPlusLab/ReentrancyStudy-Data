==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: disableBundlingMultitoken(uint256)
PC address: 2260
Estimated Gas Usage: 1912 - 2337
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a41a15389f0994e3b5522f5aa7c5d821.sol:536


        require(deployer.owner() == address(this), "addDeployer: first set MultiTokenNetwork as owner");

        emit NewDeployer(_deployers

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disableBundlingMultitoken(uint256), txdata: 0x13f9cf76, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: deploy(uint256,bytes)
PC address: 2682
Estimated Gas Usage: 2186 - 5198
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a41a15389f0994e3b5522f5aa7c5d821.sol:579
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deploy(uint256,bytes), txdata: 0x61ff715f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: disableChangesMultitoken(uint256)
PC address: 3547
Estimated Gas Usage: 2044 - 2469
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a41a15389f0994e3b5522f5aa7c5d821.sol:547

enNotPaused {

        require(deployer.owner() == address(this), "setDeployer: first set MultiTokenNetwork as owner");

        emit N

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: disableChangesMultitoken(uint256), txdata: 0x817725aa, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MultiTokenNetwork
Function name: makeCall(address,uint256,bytes)
PC address: 4132
Estimated Gas Usage: 2639 - 40824
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/a41a15389f0994e3b5522f5aa7c5d821.sol:579
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: makeCall(address,uint256,bytes), txdata: 0x8482167e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: deployers(uint256)
PC address: 4990
Estimated Gas Usage: 1281 - 1376
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a41a15389f0994e3b5522f5aa7c5d821.sol:479

Multitoken(uint index) public onlyOwner {

        require(index < _multitokens.length, "deleteMultitoken: i

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deployers(uint256), txdata: 0x8faa77b2, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: enableBundlingMultitoken(uint256)
PC address: 5598
Estimated Gas Usage: 2198 - 2623
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a41a15389f0994e3b5522f5aa7c5d821.sol:539

ress(0), deployer);

        _deployers.push(deployer);

    }



    function setDeployer(uint256 index, AbstractDeployer deployer) public 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enableBundlingMultitoken(uint256), txdata: 0xa36b15d0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MultiTokenNetwork
Function name: multitokens(uint256)
PC address: 5797
Estimated Gas Usage: 1369 - 1464
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/a41a15389f0994e3b5522f5aa7c5d821.sol:463

nction allWalletBalances(address wallet) public view returns(uint256[]) {

        uint256[] memory bal

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multitokens(uint256), txdata: 0xaa974eff, value: 0x0