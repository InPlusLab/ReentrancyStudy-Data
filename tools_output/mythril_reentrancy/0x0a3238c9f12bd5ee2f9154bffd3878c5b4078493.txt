==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 847
Estimated Gas Usage: 19284 - 145442
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:373

ensToSend 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 1033
Estimated Gas Usage: 19284 - 145442
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:373

ensToSend == 0) {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x22004000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 1033
Estimated Gas Usage: 19926 - 146084
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:373

ensToSend == 0) {

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OneYearDreamTokensVesting
Function name: getAvailableTokensToWithdraw()
PC address: 1371
Estimated Gas Usage: 6446 - 41714
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:319

r = 183 days;

        uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0
Caller: [ATTACKER], function: getAvailableTokensToWithdraw(), txdata: 0x045e240f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 1371
Estimated Gas Usage: 19284 - 145442
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:319

r = 183 days;

        uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x22004000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1853
Estimated Gas Usage: 43175 - 219152
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:281

alAddress.

     * @return

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1914
Estimated Gas Usage: 43175 - 219152
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:281

hat is sent to withdrawalAddress.

     * @return

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1920
Estimated Gas Usage: 43175 - 219152
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:283

t can be sent.

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1944
Estimated Gas Usage: 43175 - 219152
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:287

etAvailableTokensToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 1997
Estimated Gas Usage: 43175 - 219152
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:287

etAvailableTokensToWithdraw

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2004
Estimated Gas Usage: 43175 - 219152
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:287

ew returns (uint256) {

        uint256 tok

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: stages(uint256)
PC address: 2030
Estimated Gas Usage: 324 - 419
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:173

nt of tokens already sent.

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stages(uint256), txdata: 0x845ddcb280, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 2160
Estimated Gas Usage: 19284 - 145442
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:393

edPercenta

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 2179
Estimated Gas Usage: 19284 - 145442
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:393

 tokensUnlockedPercentage Percent of toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 2185
Estimated Gas Usage: 19284 - 145442
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:395

n be sent 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 2247
Estimated Gas Usage: 19284 - 145442
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:395

to provided perce

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0f0f0f0f0f0f0f0f0f0f0f0fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 2413
Estimated Gas Usage: 19284 - 145442
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:395

n be sent according to provided percentage.

     */

--------------------
Initial State:

Account: [CREATOR], balance: 0x22004000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000040, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x01010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 2413
Estimated Gas Usage: 20147 - 146305
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:395

n be sent according to provided percentage.

     */

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: fallback
PC address: 2413
Estimated Gas Usage: 19926 - 146084
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:395

n be sent according to provided percentage.

     */

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: OneYearDreamTokensVesting
Function name: getAvailableTokensToWithdraw()
PC address: 2592
Estimated Gas Usage: 1066 - 1161
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:447
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getAvailableTokensToWithdraw(), txdata: 0x045e240f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2741
Estimated Gas Usage: 43175 - 219152
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:343

unction.

     */

    fu

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2742
Estimated Gas Usage: 43175 - 219152
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:343

unction.

     */

    function withdr

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2768
Estimated Gas Usage: 43175 - 219152
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:343

om the fallback function.

     */

    function withdr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2773
Estimated Gas Usage: 43175 - 219152
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:347

lized {

        uint256 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2774
Estimated Gas Usage: 43175 - 219152
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:347

lized {

        uint256 tokensT

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2800
Estimated Gas Usage: 43175 - 219152
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:347

rivate whenInitialized {

        uint256 tokensT

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2829
Estimated Gas Usage: 43175 - 219152
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:349

bleTokensToWithdraw();

        sendTok

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneYearDreamTokensVesting
Function name: initializeVestingFor(address)
PC address: 2858
Estimated Gas Usage: 43175 - 219152
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/d417cb31777a07c58c7594b4c1563ccf.sol:351

end);

        if (dreamToken.balanceOf(

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: initializeVestingFor(address), txdata: 0x420b5fe0, value: 0x0