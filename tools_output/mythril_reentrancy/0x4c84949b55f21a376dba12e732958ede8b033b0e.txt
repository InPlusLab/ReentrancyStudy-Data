==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 2533
Estimated Gas Usage: 70755 - 366078
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:139

  * @dev Constructor

    *


--------------------
Initial State:

Account: [CREATOR], balance: 0x1040000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000008000080000000000000000001010000000000000000000000000000000000000080000000040400002000000004100000000000000000002000000004200001014000000004000000000000000010000000000000000000000000000000202080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 2694
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:293

fys > 0));    // There must be Jiffy

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 2812
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:311

tingGrant lo

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3068
Estimated Gas Usage: 70755 - 366078
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:311

tingGrant lookup table is updated

        vestingGrants[beneficiary] = VestingG

--------------------
Initial State:

Account: [CREATOR], balance: 0x1040000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000008000080000000000000000001010000000000000000000000000000000000000080000000040400002000000004100000000000000000002000000004200001014000000004000000000000000010000000000000000000000000000000202080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3068
Estimated Gas Usage: 70755 - 366078
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:311

tingGrant lookup table is updated

        vestingGrants[beneficiary] = VestingG

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000100000002089, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x95792430000000000000000000000000080100000101000100800000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000100000000000000000000058c1100060092a004403384ca140340410a16182849a8884429250dc82007b10044000002a8001008c00001340c1020800000020097112700100838750a4c0242, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3068
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:311

tingGrant lookup table is updated

        vestingGrants[beneficiary] = VestingG

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3175
Estimated Gas Usage: 70755 - 366078
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:329

                      isRevoc

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x95792430000000000000000000000000000001010000000401000110800000000004000200000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001ae1f067881eb7f040010b160c00dbd0246083000f1a700470004098ac0e95831800900080004810800026605400243507804808220800302200c23004a00000783, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3183
Estimated Gas Usage: 70755 - 366078
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:331

releasedJiffys: 0

            

--------------------
Initial State:

Account: [CREATOR], balance: 0x141000000042025, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x95792430000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000001a301304002020e101ae07be209224152812008a80340302c0a0804802a010011a1200000020000100800000cd7602e800078980044e000000010000080100240c2, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3280
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3294
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3312
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3365
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3383
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3436
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3447
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3457
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3467
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3477
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3494
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3508
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3520
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:317

           issuer: msg.sender,                                                   

                                                    beneficiary: beneficiary, 

                                                    grantJiffys: unvestedJiffys,

                                                    startTimestamp: startTimestamp,

                                                    cliffTimestamp: startTimestamp + cliffSeconds,

                                                    endTimestamp: startTimestamp + vestingSeconds,

                                                    isRevocable: revocable,

                                                    releasedJiffys: 0

                                                });



        vestingGrantLookup.push(beneficiary);



        Grant(msg.sender, beneficiary, vestedJiffys, unvestedJiffys);   // Fire event



        // If the cliff

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3527
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:345

dy passed or there is no cliff, then

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3567
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:345

dy passed or there is no cliff, then

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3620
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:345

dy passed or there is no cliff, then

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3798
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:363

*

    */ 

    function getGrantBalance(

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 3805
Estimated Gas Usage: 70710 - 366033
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:363

    *

    */ 

    function getGrantBalance() 

                            external 

                  

--------------------
Initial State:

Account: [CREATOR], balance: 0x4200104000001a001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010100010001018000000000000000800200000000000000000000000000000000000000000000000000000000000000000000010020404004040000000040014000104000d55099eec20000402000000002000202000200000000010280200000000420002aab4360000000000000800800040208, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 4569
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/6652c3df0546c413fbc850582f7fea38.sol:139

  * @dev Con

--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 6526
Estimated Gas Usage: 70744 - 366067
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: grant(address,uint256,uint256,uint256,uint256,uint256,bool)
PC address: 6529
Estimated Gas Usage: 70744 - 366067
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x250a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: d1d1d1d1d1d1d1d1d1d1d1d1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: grant(address,uint256,uint256,uint256,uint256,uint256,bool), txdata: 0x957924300000000000000000000000000000000000000000000000000000000000000001080220040101000020000100000000020800011000000000000000000000010080000080008000008000000000000000000000000000000000000000000000000174200000280000088201020021dd0fc000628001800000008e237a53b4017f1e8c0000001800000400006c0002228040000d7ffe8000000001dc85ac4bfe8464, value: 0x0