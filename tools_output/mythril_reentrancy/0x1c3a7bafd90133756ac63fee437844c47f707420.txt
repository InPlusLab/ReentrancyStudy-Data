==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: ZenswapDistribution
Function name: distributeToken(address[],uint256[])
PC address: 214
Estimated Gas Usage: 6814 - 84265
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ed3747896d159748e429119bbdd8813.sol:99

  uint256 addressCount = _addresses.length;

    uint256 amountCount = _amount.length;

    require(addressCount == amountCount);

    

    for (uint256 i = 0; i < addressCount; i++) {

        uint256 _tokensAmount = _amount[i] * 10 ** uint256(18);

        tokenReward.transfer(_addresses[i], _tokensAmount);

    }

  }



    /**

     * Withdraw an "amount" of available tokens in the contract

     * 

     */

    function withd

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeToken(address[],uint256[]), txdata: 0x659de63bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc80, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZenswapDistribution
Function name: distributeToken(address[],uint256[])
PC address: 611
Estimated Gas Usage: 6814 - 84265
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ed3747896d159748e429119bbdd8813.sol:121

ilable toke

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeToken(address[],uint256[]), txdata: 0x659de63b800000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ZenswapDistribution
Function name: distributeToken(address[],uint256[])
PC address: 768
Estimated Gas Usage: 6814 - 84265
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ed3747896d159748e429119bbdd8813.sol:121

ilable tokens in the contract

     * 

     */

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeToken(address[],uint256[]), txdata: 0x659de63b800000000000000000000000000000007fffffffffffffffffffffffffffffe080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ZenswapDistribution
Function name: distributeToken(address[],uint256[])
PC address: 768
Estimated Gas Usage: 6814 - 84265
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: data/kongqp/os_smart_contract_deduplicated/1ed3747896d159748e429119bbdd8813.sol:121

ilable tokens in the contract

     * 

     */

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distributeToken(address[],uint256[]), txdata: 0x659de63b800000000000000000000000000000000000000000000000000000000000000080, value: 0x0


