==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OneInchTrade
Function name: getRateFromKyber(address,address,uint256) or getRateFromKyber(address,address,uint256)
PC address: 2305
Estimated Gas Usage: 2980 - 38626
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ef606ea18b2ecc7338a5b94ecdf3442f.sol:237

int slippageRate) {



        return bancorConverter.getReturn(

            from,

            to,

       

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: getRateFromKyber(address,address,uint256), txdata: 0x2d23102d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneInchTrade
Function name: fallback
PC address: 2392
Estimated Gas Usage: 13027 - 86800
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ef606ea18b2ecc7338a5b94ecdf3442f.sol:263

g amount not re

--------------------
Initial State:

Account: [CREATOR], balance: 0x2400900024408c000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x5af3107a4000

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OneInchTrade
Function name: getRateFromBancor(address,address,uint256) or getRateFromBancor(address,address,uint256)
PC address: 2637
Estimated Gas Usage: 2958 - 38604
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ef606ea18b2ecc7338a5b94ecdf3442f.sol:263

g amount not reached.");



        IERC20 daiToken = IERC20(daiTokenAddress);

        IERC20 daiBnt

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: getRateFromBancor(address,address,uint256), txdata: 0x25d89026, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: OneInchTrade
Function name: fallback
PC address: 2637
Estimated Gas Usage: 13027 - 86800
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/ef606ea18b2ecc7338a5b94ecdf3442f.sol:263

g amount not reached.");



        IERC20 daiToken = IERC20(daiTokenAddress);

        IERC20 daiBnt

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000a8c01, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x5af3107a4000

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: OneInchTrade
Function name: fallback
PC address: 2637
Estimated Gas Usage: 13027 - 86800
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/ef606ea18b2ecc7338a5b94ecdf3442f.sol:263

g amount not reached.");



        IERC20 daiToken = IERC20(daiTokenAddress);

        IERC20 daiBnt

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x5af3107a4000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: OneInchTrade
Function name: fallback
PC address: 2637
Estimated Gas Usage: 13027 - 86800
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/ef606ea18b2ecc7338a5b94ecdf3442f.sol:263

g amount not reached.");



        IERC20 daiToken = IERC20(daiTokenAddress);

        IERC20 daiBnt

--------------------
Initial State:

Account: [CREATOR], balance: 0x2400900024408c000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x5af3107a4000