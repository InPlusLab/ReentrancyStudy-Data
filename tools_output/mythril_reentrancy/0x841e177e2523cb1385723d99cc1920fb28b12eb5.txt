==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: debt(uint256)
PC address: 1745
Estimated Gas Usage: 187 - 282
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:101

S
    uint256[0] publi

--------------------
Initial State:

Account: [CREATOR], balance: 0x8003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: debt(uint256), txdata: 0x1e0029c8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: took(uint256)
PC address: 1858
Estimated Gas Usage: 297 - 392
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:107

lic benTook=0;
    uin

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: took(uint256), txdata: 0x69dadecd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: percent(uint256)
PC address: 1898
Estimated Gas Usage: 341 - 436
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:100


    uint256[0] public to

--------------------
Initial State:

Account: [CREATOR], balance: 0x2c000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: percent(uint256), txdata: 0x7532b4ac, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: wallets(uint256)
PC address: 1924
Estimated Gas Usage: 363 - 458
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:109

lic newCash=0;
    uint25

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c000000000000052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: wallets(uint256), txdata: 0x7ad71f72, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FinancialStrategy
Function name: transferTokens(address,address,uint256) or transferTokens(address,address,uint256)
PC address: 2825
Estimated Gas Usage: 4597 - 74617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:87

    }
}

contract FinancialStrategy i

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c008000000183a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 303030303030303030303030deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FinancialStrategy
Function name: transferTokens(address,address,uint256) or transferTokens(address,address,uint256)
PC address: 3021
Estimated Gas Usage: 4597 - 74617
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:90

y, GuidedByRoles,ERC20Provi

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FinancialStrategy
Function name: transferTokens(address,address,uint256) or transferTokens(address,address,uint256)
PC address: 3021
Estimated Gas Usage: 4597 - 74617
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:90

y, GuidedByRoles,ERC20Provi

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000001001030, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferTokens(address,address,uint256), txdata: 0xa64b6e5f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: total(uint256)
PC address: 3065
Estimated Gas Usage: 429 - 524
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:102


    uint256[0] public 

--------------------
Initial State:

Account: [CREATOR], balance: 0x38000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: total(uint256), txdata: 0xb119ebfe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4115
Estimated Gas Usage: 5286 - 40934
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:149

e.distructVault(true) for exit
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b3300000000000000000000000000400001100100000020100000028002008010048c, value: 0x0

==== Unprotected Selfdestruct ====
SWC ID: 106
Severity: High
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4230
Estimated Gas Usage: 3235 - 38317
Any sender can cause the contract to self-destruct.
Any sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account and withdraw its balance to an arbitrary address. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:157

sale.finalization()
            /

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000000000000000000000000000000000000081, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4279
Estimated Gas Usage: 5286 - 40934
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:169

 == 2

--------------------
Initial State:

Account: [CREATOR], balance: 0x2b86580021001918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000021000040000000200000080000400000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4323
Estimated Gas Usage: 5286 - 40934
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:171

om Crowdsale.initial

--------------------
Initial State:

Account: [CREATOR], balance: 0x2b86580021001918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000021000040000000200000080000400000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4346
Estimated Gas Usage: 5286 - 40934
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:171

om Crowdsale.initial

--------------------
Initial State:

Account: [CREATOR], balance: 0x2b86580021001918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000021000040000000200000080000400000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4443
Estimated Gas Usage: 5286 - 40934
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:180


    

--------------------
Initial State:

Account: [CREATOR], balance: 0x2b86580021001918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000021000040000000200000080000400000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4696
Estimated Gas Usage: 5286 - 40934
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:189

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x2b86580021001918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000021000040000000200000080000400000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4740
Estimated Gas Usage: 5286 - 40934
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:189

ss(_params[1]));
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x2b86580021001918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000021000040000000200000080000400000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 4763
Estimated Gas Usage: 5286 - 40934
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:189

ss(_params[1]));
      

--------------------
Initial State:

Account: [CREATOR], balance: 0x2b86580021001918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000021000040000000200000080000400000480, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: ready(uint256)
PC address: 5108
Estimated Gas Usage: 605 - 700
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:108

blic benReady=0;
    ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x40180000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: ready(uint256), txdata: 0xf0bd2b9e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5323
Estimated Gas Usage: 24886 - 122255
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:131

tep][_investor].add(msg.value);
     

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5373
Estimated Gas Usage: 24886 - 122255
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:132

.add(

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5419
Estimated Gas Usage: 24886 - 122255
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:134

d(_i

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5511
Estimated Gas Usage: 24886 - 122255
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:134

t Deposited(_investor,msg.

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5534
Estimated Gas Usage: 24886 - 122255
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:133

.val

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5628
Estimated Gas Usage: 24886 - 122255
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:133

ory += msg.value;
        emit Deposited(_investor,msg.value);
    }



--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5636
Estimated Gas Usage: 24886 - 122255
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:139

    // 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5655
Estimated Gas Usage: 24886 - 122255
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:138

 destruct
    // 1 - close
    /

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5664
Estimated Gas Usage: 24886 - 122255
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:140

rt
    // 3 - refund
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: deposit(address) or deposit(address)
PC address: 5671
Estimated Gas Usage: 24886 - 122255
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:140

rt
    // 3 - refund
   

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FinancialStrategy
Function name: cap(uint256)
PC address: 6196
Estimated Gas Usage: 693 - 788
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:101

                     

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cap(uint256), txdata: 0xff2ad8e4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 6623
Estimated Gas Usage: 5286 - 40934
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:216

      ui

--------------------
Initial State:

Account: [CREATOR], balance: 0x2b86580021001918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000021000040000000200000080000400000480, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: FinancialStrategy
Function name: setup(uint8,bytes32[]) or setup(uint8,bytes32[])
PC address: 6626
Estimated Gas Usage: 5286 - 40934
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/adb5d6d2e97787c7b2b88ff64dd7fef4.sol:214

urn;

 

--------------------
Initial State:

Account: [CREATOR], balance: 0x2b86580021001918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fefefefefefefefefefefefedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: setup(uint8,bytes32[]), txdata: 0xed4f2b33000000000000000000000000000000021000040000000200000080000400000480, value: 0x0