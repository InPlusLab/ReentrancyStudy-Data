==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ProfitManager
Function name: fallback
PC address: 675
Estimated Gas Usage: 10274 - 117553
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1531

ress user,

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [CREATOR], function: WithdrawProfitFunds(uint256,address), txdata: 0x0dccfde4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ProfitManager
Function name: fallback
PC address: 702
Estimated Gas Usage: 10274 - 117553
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1533

   functio

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [CREATOR], function: WithdrawProfitFunds(uint256,address), txdata: 0x0dccfde4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ProfitManager
Function name: fallback
PC address: 827
Estimated Gas Usage: 10274 - 117553
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1533

   function TransferFunds(address target, uint256 transfer_amount) public;



--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [CREATOR], function: WithdrawProfitFunds(uint256,address), txdata: 0x0dccfde4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ProfitManager
Function name: fallback
PC address: 827
Estimated Gas Usage: 10274 - 117553
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1533

   function TransferFunds(address target, uint256 transfer_amount) public;



--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [CREATOR], function: WithdrawProfitFunds(uint256,address), txdata: 0x0dccfde4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ProfitManager
Function name: fallback
PC address: 849
Estimated Gas Usage: 10274 - 117553
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1535

andom(uint

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [CREATOR], function: WithdrawProfitFunds(uint256,address), txdata: 0x0dccfde4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ProfitManager
Function name: fallback
PC address: 961
Estimated Gas Usage: 10274 - 117553
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1535

andom(uint256 upper, uint8 seed) public returns (uint2

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [CREATOR], function: WithdrawProfitFunds(uint256,address), txdata: 0x0dccfde4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ProfitManager
Function name: WithdrawWinnings(uint256)
PC address: 1439
Estimated Gas Usage: 8487 - 114116
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1537
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [ATTACKER], function: WithdrawWinnings(uint256), txdata: 0x74f760e401, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ProfitManager
Function name: WithdrawWinnings(uint256)
PC address: 1563
Estimated Gas Usage: 8487 - 114116
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1537
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [ATTACKER], function: WithdrawWinnings(uint256), txdata: 0x74f760e4c1, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ProfitManager
Function name: WithdrawWinnings(uint256)
PC address: 1563
Estimated Gas Usage: 8487 - 114116
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1537
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [ATTACKER], function: WithdrawWinnings(uint256), txdata: 0x74f760e401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ProfitManager
Function name: WithdrawWinnings(uint256)
PC address: 1585
Estimated Gas Usage: 8487 - 114116
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1537
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [ATTACKER], function: WithdrawWinnings(uint256), txdata: 0x74f760e401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ProfitManager
Function name: WithdrawWinnings(uint256)
PC address: 1695
Estimated Gas Usage: 8487 - 114116
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: /tmp/f48da799761c5c4e6404d5ef803dd566.sol:1537
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: Unpause(), txdata: 0x7805862f, value: 0x0
Caller: [ATTACKER], function: WithdrawWinnings(uint256), txdata: 0x74f760e401, value: 0x0