==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenHolder
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 574
Estimated Gas Usage: 1121 - 1546
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:417

ERC20Token is IERC20Token, Utils {

    string public standard = 'Token 0.1';

    string public name = '';

    string public symbol = '';

    uint8 public decimals = 0;

    uint256 public totalSupply = 0;

    mapping (address => uint256) public balanceOf;

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x23469f5f4e60dbfee, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenHolder
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 923
Estimated Gas Usage: 2989 - 38071
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:429

dress => uint256) public bala

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000020101020804010101010101010101080410040400000000000000000000000001, value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e8e8e8e8e8e8e8e8e8e8e8e8edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef8e8e8e8e8e8e8e8e8e8e8e8e01, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Owned
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 944
Estimated Gas Usage: 1127 - 1552
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:103

);

        newOwner = _newOwner;

    }



    /**

        @dev used by a new owner to accept an ownership transfer

    */

    function accept

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenHolder
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 1572
Estimated Gas Usage: 1149 - 1574
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:103

);

        newOwner = _newOwner;

    }



    /**

        @dev used by a new owner to accept an ownership transfer

    */

    function accept

--------------------
Initial State:

Account: [CREATOR], balance: 0x8100000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BAYToken
Function name: disableTransfers(bool) or disableTransfers(bool) or disableTransfers(bool)
PC address: 2808
Estimated Gas Usage: 1105 - 1530
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:769



    /**

        @dev removes tokens from an account and decreases the token supply

        can be called 

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: disableTransfers(bool), txdata: 0x1608f18f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BAYToken
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 3323
Estimated Gas Usage: 1297 - 1722
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:417

ERC20Token is IERC20Token, Utils {

    string public standard = 'Token 0.1';

    string public name = '';

    string public symbol = '';

    uint8 public decimals = 0;

    uint256 public totalSupply = 0;

    mapping (address => uint256) public balanceOf;

   

--------------------
Initial State:

Account: [CREATOR], balance: 0x80001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BAYToken
Function name: withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256) or withdrawTokens(address,address,uint256)
PC address: 3672
Estimated Gas Usage: 3165 - 38247
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:429

dress => uint256) public bala

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTokens(address,address,uint256), txdata: 0x5e35359e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000040, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BAYToken
Function name: issue(address,uint256) or issue(address,uint256) or issue(address,uint256)
PC address: 4270
Estimated Gas Usage: 1330 - 1755
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:785

ount) public {

        require(msg.sender == _from || msg.sender == owner); // validate input



        balanceOf[_from] = safeSub(balanceOf[_from], _amount);

        totalSupply = safeSub(totalSupply, _amount);



        emit Transfer(_from, this, _amount);

        emit Destruction(_amount);

    }



    // ERC20 standard method overrides with some

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: issue(address,uint256), txdata: 0x867904b4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BAYToken
Function name: transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address) or transferOwnership(address)
PC address: 5605
Estimated Gas Usage: 1479 - 1904
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:103

);

        newOwner = _newOwner;

    }



    /**

        @dev used by a new owner to accept an ownership transfer

    */

    function accept

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BAYToken
Function name: issue(address,uint256) or issue(address,uint256) or issue(address,uint256)
PC address: 6565
Estimated Gas Usage: 2296 - 2721
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:793

otalSupply = safeSub(totalSup

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: issue(address,uint256), txdata: 0x867904b40000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffe0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BAYToken
Function name: destroy(address,uint256) or destroy(address,uint256) or destroy(address,uint256)
PC address: 6589
Estimated Gas Usage: 1523 - 1808
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:833

urn true;

    }



    /**

     

--------------------
Initial State:

Account: [CREATOR], balance: 0x402000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: destroy(address,uint256), txdata: 0xa24835d1000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa02, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BAYToken
Function name: transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256) or transferFrom(address,address,uint256)
PC address: 6589
Estimated Gas Usage: 2351 - 3156
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:567

ent/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_j

--------------------
Initial State:

Account: [CREATOR], balance: 0x101011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000102, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BAYToken
Function name: transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256) or transfer(address,uint256)
PC address: 6589
Estimated Gas Usage: 2420 - 3035
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/74d0695042f0192d7a2d3d40b4d6cf1c.sol:527

s successful, false if it wasn't

    

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000040801042004, value: 0x0