[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Timelock
Line:        272
Source: 
> 
>     function setDelay(uint256 delay_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(this), "Timelock::setDelay: Call must come from Timelock.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Timelock
Line:        281
Source: 
> 
>     function acceptAdmin() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == pendingAdmin, "Timelock::acceptAdmin: Call must come from pendingAdmin.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Timelock
Line:        289
Source: 
> 
>     function setPendingAdmin(address pendingAdmin_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(this), "Timelock::setPendingAdmin: Call must come from Timelock.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Timelock
Line:        296
Source: 
> 
>     function queueTransaction(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address target,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Timelock
Line:        316
Source: 
> 
>     function cancelTransaction(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address target,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Timelock
Line:        331
Source: 
> 
>     function executeTransaction(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address target,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Mock
Line:        380
Source: 
> 
>     function receiveETH(string memory _message) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         message = _message;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Timelock
Line:        356
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success, bytes memory returnData) = target.call.value(value)(callData);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Timelock::executeTransaction: Transaction execution reverted.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    Mock
Line:        375
Source: 
> 
> contract Mock {
> ^^^^^^^^^^^^^^^
>     event Received(string message, uint256 ethAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Timelock
Line:        356
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success, bytes memory returnData) = target.call.value(value)(callData);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Timelock::executeTransaction: Transaction execution reverted.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Timelock
Line:        289
Source: 
> 
>     function setPendingAdmin(address pendingAdmin_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(this), "Timelock::setPendingAdmin: Call must come from Timelock.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Timelock
Line:        296
Source: 
> 
>     function queueTransaction(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address target,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Timelock
Line:        316
Source: 
> 
>     function cancelTransaction(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address target,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Mock
Line:        380
Source: 
> 
>     function receiveETH(string memory _message) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         message = _message;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        219
Source: 
> 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        373
Source: 
> 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Timelock
Line:        356
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success, bytes memory returnData) = target.call.value(value)(callData);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Timelock::executeTransaction: Transaction execution reverted.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Timelock
Line:        356
Source: 
>         // solium-disable-next-line security/no-call-value
>         (bool success, bytes memory returnData) = target.call.value(value)(callData);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Timelock::executeTransaction: Transaction execution reverted.");

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Timelock
Line:        257
Source: 
>     address public admin;
>     address public pendingAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public delay;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Mock
Line:        378
Source: 
> 
>     string public message;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Mock
Line:        381
Source: 
>     function receiveETH(string memory _message) public payable {
>         message = _message;
>         ^^^^^^^^^^^^^^^^^^
>         emit Received(_message, msg.value);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Mock
Line:        378
Source: 
> 
>     string public message;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Timelock
Line:        366
Source: 
>         // solium-disable-next-line security/no-block-members
>         return block.timestamp;
>                ^^^^^^^^^^^^^^^
>     }

[0m
