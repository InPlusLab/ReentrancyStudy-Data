Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WrappedBOMB
Line:        74
Source: 
>   
>     string public name     = "Wrapped BOMB";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol   = "WBOMB";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WrappedBOMB
Line:        75
Source: 
>     string public name     = "Wrapped BOMB";
>     string public symbol   = "WBOMB";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8  public decimals = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WrappedBOMB
Line:        76
Source: 
>     string public symbol   = "WBOMB";
>     uint8  public decimals = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WrappedBOMB
Line:        80
Source: 
>     
>     address BOMB_CONTRACT = 0x231CCdBc9ff92eb1906a58e7f326E1e3eD8e75f0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WrappedBOMB
Line:        83
Source: 
>     uint256 public _totalSupply = 0;
>     uint256 basePercent = 100;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WrappedBOMB
Line:        118
Source: 
>     
>     function deposit(uint256 amount) public returns(uint256){ //deposit burn is intrinsic to BOMB
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WrappedBOMB
Line:        135
Source: 
>     
>     function withdraw(uint256 amount) public returns(uint256){ //
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balanceOf[msg.sender] >= amount,"NotEnoughBalance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WrappedBOMB
Line:        147
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WrappedBOMB
Line:        151
Source: 
> 
>     function approve(address guy, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][guy] = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WrappedBOMB
Line:        157
Source: 
> 
>     function transfer(address to, uint256 amount) public returns (bool) { //unibombs
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, to, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    WrappedBOMB
Line:        70
Source: 
> 
> contract WrappedBOMB is Ownable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        64
Source: 
> 
>     function setOwner(address _owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TransferOwnership(owner, _owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WrappedBOMB
Line:        118
Source: 
>     
>     function deposit(uint256 amount) public returns(uint256){ //deposit burn is intrinsic to BOMB
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WrappedBOMB
Line:        157
Source: 
> 
>     function transfer(address to, uint256 amount) public returns (bool) { //unibombs
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, to, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WrappedBOMB
Line:        161
Source: 
>     
>     function findOnePercent(uint256 value) public view returns (uint256)  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 roundValue = value.ceil(basePercent);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WrappedBOMB
Line:        167
Source: 
>     
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(value <= balanceOf[from],"NotEnoughBalance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WrappedBOMB
Line:        108
Source: 
> 
>     function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit WhitelistTo(_addr, _whitelisted);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WrappedBOMB
Line:        113
Source: 
> 
>     function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit WhitelistFrom(_addr, _whitelisted);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WrappedBOMB
Line:        151
Source: 
> 
>     function approve(address guy, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][guy] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        16
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     assert(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WrappedBOMB
Line:        120
Source: 
>     
>         require(ERC20Token(BOMB_CONTRACT).transferFrom(address(msg.sender),address(this),amount),"TransferFailed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WrappedBOMB
Line:        141
Source: 
>         emit Transfer(address(msg.sender), address(this), amount);
>         ERC20Token(BOMB_CONTRACT).approve(address(this),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(msg.sender),amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WrappedBOMB
Line:        142
Source: 
>         ERC20Token(BOMB_CONTRACT).approve(address(this),amount);
>         ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(msg.sender),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WrappedBOMB
Line:        186
Source: 
>             emit Transfer(from, address(0), tokensToBurn);
>             ERC20Token(BOMB_CONTRACT).approve(address(this),value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(this),value); //burn

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WrappedBOMB
Line:        187
Source: 
>             ERC20Token(BOMB_CONTRACT).approve(address(this),value);
>             ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(this),value); //burn
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WrappedBOMB
Line:        80
Source: 
>     
>     address BOMB_CONTRACT = 0x231CCdBc9ff92eb1906a58e7f326E1e3eD8e75f0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WrappedBOMB
Line:        82
Source: 
>     
>     uint256 public _totalSupply = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 basePercent = 100;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity ^0.6.8;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WrappedBOMB
Line:        80
Source: 
>     
>     address BOMB_CONTRACT = 0x231CCdBc9ff92eb1906a58e7f326E1e3eD8e75f0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WrappedBOMB
Line:        83
Source: 
>     uint256 public _totalSupply = 0;
>     uint256 basePercent = 100;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WrappedBOMB
Line:        120
Source: 
>     
>         require(ERC20Token(BOMB_CONTRACT).transferFrom(address(msg.sender),address(this),amount),"TransferFailed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WrappedBOMB
Line:        141
Source: 
>         emit Transfer(address(msg.sender), address(this), amount);
>         ERC20Token(BOMB_CONTRACT).approve(address(this),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(msg.sender),amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WrappedBOMB
Line:        142
Source: 
>         ERC20Token(BOMB_CONTRACT).approve(address(this),amount);
>         ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(msg.sender),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WrappedBOMB
Line:        186
Source: 
>             emit Transfer(from, address(0), tokensToBurn);
>             ERC20Token(BOMB_CONTRACT).approve(address(this),value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(this),value); //burn

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WrappedBOMB
Line:        187
Source: 
>             ERC20Token(BOMB_CONTRACT).approve(address(this),value);
>             ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(this),value); //burn
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WrappedBOMB
Line:        127
Source: 
>         balanceOf[msg.sender] += actual;
>         _totalSupply += actual;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit Deposit(msg.sender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WrappedBOMB
Line:        152
Source: 
>     function approve(address guy, uint256 amount) public returns (bool) {
>         allowance[msg.sender][guy] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, guy, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMath
Line:        40
Source: 
>     uint256 d = sub(c,1);
>     return mul(div(d,m),m);
>                ^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WrappedBOMB
Line:        141
Source: 
>         emit Transfer(address(msg.sender), address(this), amount);
>         ERC20Token(BOMB_CONTRACT).approve(address(this),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(msg.sender),amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WrappedBOMB
Line:        142
Source: 
>         ERC20Token(BOMB_CONTRACT).approve(address(this),amount);
>         ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(msg.sender),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WrappedBOMB
Line:        186
Source: 
>             emit Transfer(from, address(0), tokensToBurn);
>             ERC20Token(BOMB_CONTRACT).approve(address(this),value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(this),value); //burn

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WrappedBOMB
Line:        187
Source: 
>             ERC20Token(BOMB_CONTRACT).approve(address(this),value);
>             ERC20Token(BOMB_CONTRACT).transferFrom(address(this),address(this),value); //burn
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WrappedBOMB
Line:        74
Source: 
>   
>     string public name     = "Wrapped BOMB";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol   = "WBOMB";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WrappedBOMB
Line:        75
Source: 
>     string public name     = "Wrapped BOMB";
>     string public symbol   = "WBOMB";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8  public decimals = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WrappedBOMB
Line:        76
Source: 
>     string public symbol   = "WBOMB";
>     uint8  public decimals = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
