[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Minion
Line:        50
Source: 
>     // withdraw funds from the moloch
>     function doWithdraw(address _token, uint256 _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         moloch.withdrawBalance(_token, _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Minion
Line:        54
Source: 
> 
>     function proposeAction(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address _actionTo,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Minion
Line:        91
Source: 
> 
>     function executeAction(uint256 _proposalId) public returns (bytes memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Action memory action = actions[_proposalId];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Minion
Line:        105
Source: 
>         actions[_proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Minion
Line:        105
Source: 
>         actions[_proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Minion
Line:        50
Source: 
>     // withdraw funds from the moloch
>     function doWithdraw(address _token, uint256 _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         moloch.withdrawBalance(_token, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Minion
Line:        54
Source: 
> 
>     function proposeAction(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address _actionTo,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Minion
Line:        66
Source: 
> 
>         uint256 proposalId = moloch.submitProposal(
>                              ^^^^^^^^^^^^^^^^^^^^^^
>             address(this),

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Minion
Line:        105
Source: 
>         actions[_proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Minion
Line:        105
Source: 
>         actions[_proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Minion
Line:        105
Source: 
>         actions[_proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Minion
Line:        93
Source: 
>         Action memory action = actions[_proposalId];
>         bool[6] memory flags = moloch.getProposalFlags(_proposalId);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Minion
Line:        46
Source: 
>         molochDepositToken = _molochDepositToken;
>         moloch.setMinion(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Minion
Line:        51
Source: 
>     function doWithdraw(address _token, uint256 _amount) public {
>         moloch.withdrawBalance(_token, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Minion
Line:        66
Source: 
> 
>         uint256 proposalId = moloch.submitProposal(
>                              ^^^^^^^^^^^^^^^^^^^^^^
>             address(this),

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Minion
Line:        105
Source: 
>         actions[_proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Minion
Line:        85
Source: 
> 
>         actions[proposalId] = action;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Minion
Line:        104
Source: 
>         // execute call
>         actions[_proposalId].executed = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);

[0m
