Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        64
Source: 
>   event ChangeRewarder(address _old, address _new);
>   function changeRewarder(uint64 id, address _rewarder) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "changeRewarder"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        72
Source: 
>   event TransferMultiSig(address _old, address _new);
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        64
Source: 
>   event ChangeRewarder(address _old, address _new);
>   function changeRewarder(uint64 id, address _rewarder) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "changeRewarder"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        72
Source: 
>   event TransferMultiSig(address _old, address _new);
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigBody
Line:        131
Source: 
> 
>   function call_contract(uint64 id, address _addr, bytes memory _data, uint256 _value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public only_signer is_majority_sig(id, "call_contract"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigBody
Line:        137
Source: 
> 
>   function claimStdTokens(uint64 id, address _token, address payable to)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public only_signer is_majority_sig(id, "claimStdTokens"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigBodyFactory
Line:        151
Source: 
>   event NewMultiSigBody(address addr, address _multisig);
>   function createMultiSig(address _multisig, address _reward) public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     MultiSigBody ms = new MultiSigBody(_multisig, _reward);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TokenClaimer
Line:        115
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    MultiSigBody
Line:        133
Source: 
>     public only_signer is_majority_sig(id, "call_contract"){
>     (bool success,) = _addr.call.value(_value)(_data);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(success, "MultisigBody call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        64
Source: 
>   event ChangeRewarder(address _old, address _new);
>   function changeRewarder(uint64 id, address _rewarder) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "changeRewarder"){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        72
Source: 
>   event TransferMultiSig(address _old, address _new);
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        64
Source: 
>   event ChangeRewarder(address _old, address _new);
>   function changeRewarder(uint64 id, address _rewarder) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "changeRewarder"){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        72
Source: 
>   event TransferMultiSig(address _old, address _new);
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigBody
Line:        131
Source: 
> 
>   function call_contract(uint64 id, address _addr, bytes memory _data, uint256 _value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public only_signer is_majority_sig(id, "call_contract"){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigBody
Line:        137
Source: 
> 
>   function claimStdTokens(uint64 id, address _token, address payable to)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public only_signer is_majority_sig(id, "claimStdTokens"){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigBodyFactory
Line:        151
Source: 
>   event NewMultiSigBody(address addr, address _multisig);
>   function createMultiSig(address _multisig, address _reward) public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     MultiSigBody ms = new MultiSigBody(_multisig, _reward);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        36
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        43
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        48
Source: 
>     if(reward_contract != RewardInterface(0x0)){
>       reward_contract.reward(tx.origin, gasused);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        36
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        43
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        48
Source: 
>     if(reward_contract != RewardInterface(0x0)){
>       reward_contract.reward(tx.origin, gasused);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigInterface
Line:        10
Source: 
> contract MultiSigInterface{
>   function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function is_signer(address addr) public view returns(bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigInterface
Line:        11
Source: 
>   function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool);
>   function is_signer(address addr) public view returns(bool);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        25
Source: 
> contract MultiSigToolsWithReward{
>   MultiSigInterface public multisig_contract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   RewardInterface public reward_contract;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        26
Source: 
>   MultiSigInterface public multisig_contract;
>   RewardInterface public reward_contract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        35
Source: 
> 
>   modifier only_signer{
>   ^^^^^^^^^^^^^^^^^^^^^
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        40
Source: 
> 
>   modifier is_majority_sig(uint64 id, string memory name) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 gas_start = gasleft();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        41
Source: 
>   modifier is_majority_sig(uint64 id, string memory name) {
>     uint256 gas_start = gasleft();
>     ^^^^^^^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        52
Source: 
> 
>   modifier is_majority_sig_with_hash(uint64 id, string memory name, bytes32 hash) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 gas_start = gasleft();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        53
Source: 
>   modifier is_majority_sig_with_hash(uint64 id, string memory name, bytes32 hash) {
>     uint256 gas_start = gasleft();
>     ^^^^^^^^^^^^^^^^^
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        72
Source: 
>   event TransferMultiSig(address _old, address _new);
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenClaimer
Line:        115
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>          ^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigBody
Line:        131
Source: 
> 
>   function call_contract(uint64 id, address _addr, bytes memory _data, uint256 _value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public only_signer is_majority_sig(id, "call_contract"){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigBody
Line:        133
Source: 
>     public only_signer is_majority_sig(id, "call_contract"){
>     (bool success,) = _addr.call.value(_value)(_data);
>      ^^^^^^^^^^^^
>     require(success, "MultisigBody call failed");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        16
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        83
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        98
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        123
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        40
Source: 
> 
>   modifier is_majority_sig(uint64 id, string memory name) {
>                            ^^^^^^^^^
>     uint256 gas_start = gasleft();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        40
Source: 
> 
>   modifier is_majority_sig(uint64 id, string memory name) {
>                                       ^^^^^^^^^^^^^^^^^^
>     uint256 gas_start = gasleft();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        41
Source: 
>   modifier is_majority_sig(uint64 id, string memory name) {
>     uint256 gas_start = gasleft();
>     ^^^^^^^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        42
Source: 
>     uint256 gas_start = gasleft();
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     ^^^^^^^^^^^^
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        46
Source: 
>     }
>     uint256 gasused = (gas_start - gasleft()) * tx.gasprice;
>     ^^^^^^^^^^^^^^^
>     if(reward_contract != RewardInterface(0x0)){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        52
Source: 
> 
>   modifier is_majority_sig_with_hash(uint64 id, string memory name, bytes32 hash) {
>                                      ^^^^^^^^^
>     uint256 gas_start = gasleft();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        52
Source: 
> 
>   modifier is_majority_sig_with_hash(uint64 id, string memory name, bytes32 hash) {
>                                                 ^^^^^^^^^^^^^^^^^^
>     uint256 gas_start = gasleft();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        52
Source: 
> 
>   modifier is_majority_sig_with_hash(uint64 id, string memory name, bytes32 hash) {
>                                                                     ^^^^^^^^^^^^
>     uint256 gas_start = gasleft();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        53
Source: 
>   modifier is_majority_sig_with_hash(uint64 id, string memory name, bytes32 hash) {
>     uint256 gas_start = gasleft();
>     ^^^^^^^^^^^^^^^^^
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        57
Source: 
>     }
>     uint256 gasused = (gas_start - gasleft()) * tx.gasprice;
>     ^^^^^^^^^^^^^^^
>     if(reward_contract != RewardInterface(0x0)){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    TokenClaimer
Line:        110
Source: 
>         if (_token == address(0x0)) {
>             to.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MultiSigBody
Line:        133
Source: 
>     public only_signer is_majority_sig(id, "call_contract"){
>     (bool success,) = _addr.call.value(_value)(_data);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(success, "MultisigBody call failed");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Warning
Contract:    TokenClaimer
Line:        110
Source: 
>         if (_token == address(0x0)) {
>             to.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Warning
Contract:    MultiSigBody
Line:        133
Source: 
>     public only_signer is_majority_sig(id, "call_contract"){
>     (bool success,) = _addr.call.value(_value)(_data);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(success, "MultisigBody call failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        36
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        43
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        36
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        43
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        36
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        43
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        36
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        43
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        36
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        43
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        36
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigToolsWithReward
Line:        43
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        48
Source: 
>     if(reward_contract != RewardInterface(0x0)){
>       reward_contract.reward(tx.origin, gasused);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenClaimer
Line:        113
Source: 
>         }
>         uint balance = IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        48
Source: 
>     if(reward_contract != RewardInterface(0x0)){
>       reward_contract.reward(tx.origin, gasused);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    TokenClaimer
Line:        110
Source: 
>         if (_token == address(0x0)) {
>             to.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MultiSigBody
Line:        133
Source: 
>     public only_signer is_majority_sig(id, "call_contract"){
>     (bool success,) = _addr.call.value(_value)(_data);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(success, "MultisigBody call failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        67
Source: 
>     address old = address(reward_contract);
>     reward_contract = RewardInterface(_rewarder);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit ChangeRewarder(old, _rewarder);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        76
Source: 
>     address old = address(multisig_contract);
>     multisig_contract = MultiSigInterface(_contract);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit TransferMultiSig(old, _contract);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        67
Source: 
>     address old = address(reward_contract);
>     reward_contract = RewardInterface(_rewarder);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit ChangeRewarder(old, _rewarder);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultiSigToolsWithReward
Line:        76
Source: 
>     address old = address(multisig_contract);
>     multisig_contract = MultiSigInterface(_contract);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit TransferMultiSig(old, _contract);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        113
Source: 
>         }
>         uint balance = IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        115
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
