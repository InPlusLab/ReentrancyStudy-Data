[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TrustSmartContract
Line:        334
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address  addr ) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TrustSmartContract
Line:        79
Source: 
>     mapping (uint => uint)  LEVEL_DURATION;
>     uint REFERRER_1_LEVEL_LIMIT = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint PERIOD_LENGTH = 365 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TrustSmartContract
Line:        80
Source: 
>     uint REFERRER_1_LEVEL_LIMIT = 3;
>     uint PERIOD_LENGTH = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalEth;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TrustSmartContract
Line:        82
Source: 
>     uint256 public totalEth;
>     uint[7] personsPerLevel;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) personalIncome;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
> 
>   function transferOwnership(address payable newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        63
Source: 
> 
>   function setManager(address _manager) public onlyOwnerOrManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       manager = _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
> 
>   function transferOwnership(address payable newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        63
Source: 
> 
>   function setManager(address _manager) public onlyOwnerOrManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       manager = _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustSmartContract
Line:        318
Source: 
> 
>     function viewUserReferral(address _user) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referral;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustSmartContract
Line:        322
Source: 
>     
>     function viewPersonsPerLevel() public view returns(uint[7] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return personsPerLevel;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustSmartContract
Line:        326
Source: 
> 
>     function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].levelExpired[_level];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustSmartContract
Line:        329
Source: 
>     }
>     function viewPersonalIncome(address _user) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return personalIncome[_user];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TrustSmartContract
Line:        264
Source: 
>             
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TrustSmartContract
Line:        265
Source: 
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             personalIncome[referrer] += LEVEL_PRICE[_level] - 0.01 ether;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TrustSmartContract
Line:        279
Source: 
> 
>       return this.getUserReferrer(userList[users[_user].referrerID], _level - 1);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        59
Source: 
> 
>   function transferOwnership(address payable newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        63
Source: 
> 
>   function setManager(address _manager) public onlyOwnerOrManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       manager = _manager;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        59
Source: 
> 
>   function transferOwnership(address payable newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        63
Source: 
> 
>   function setManager(address _manager) public onlyOwnerOrManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       manager = _manager;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrustSmartContract
Line:        318
Source: 
> 
>     function viewUserReferral(address _user) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referral;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrustSmartContract
Line:        326
Source: 
> 
>     function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].levelExpired[_level];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrustSmartContract
Line:        329
Source: 
>     }
>     function viewPersonalIncome(address _user) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return personalIncome[_user];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TrustSmartContract
Line:        264
Source: 
>             
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TrustSmartContract
Line:        265
Source: 
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             personalIncome[referrer] += LEVEL_PRICE[_level] - 0.01 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        70
Source: 
> 
>     event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event buyLevelEvent(address indexed _user, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        71
Source: 
>     event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>     event buyLevelEvent(address indexed _user, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event prolongateLevelEvent(address indexed _user, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        72
Source: 
>     event buyLevelEvent(address indexed _user, uint _level, uint _time);
>     event prolongateLevelEvent(address indexed _user, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        73
Source: 
>     event prolongateLevelEvent(address indexed _user, uint _level, uint _time);
>     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        74
Source: 
>     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>     event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //------------------------------

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        77
Source: 
> 
>     mapping (uint => uint) public LEVEL_PRICE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint)  LEVEL_DURATION;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        78
Source: 
>     mapping (uint => uint) public LEVEL_PRICE;
>     mapping (uint => uint)  LEVEL_DURATION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint REFERRER_1_LEVEL_LIMIT = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        79
Source: 
>     mapping (uint => uint)  LEVEL_DURATION;
>     uint REFERRER_1_LEVEL_LIMIT = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint PERIOD_LENGTH = 365 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        80
Source: 
>     uint REFERRER_1_LEVEL_LIMIT = 3;
>     uint PERIOD_LENGTH = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalEth;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustSmartContract
Line:        236
Source: 
> 
>             for(uint l =_level-1; l>0; l-- ){
>                 ^^^^^^
>                 require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrustSmartContract
Line:        78
Source: 
>     mapping (uint => uint) public LEVEL_PRICE;
>     mapping (uint => uint)  LEVEL_DURATION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint REFERRER_1_LEVEL_LIMIT = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrustSmartContract
Line:        79
Source: 
>     mapping (uint => uint)  LEVEL_DURATION;
>     uint REFERRER_1_LEVEL_LIMIT = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint PERIOD_LENGTH = 365 days;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrustSmartContract
Line:        80
Source: 
>     uint REFERRER_1_LEVEL_LIMIT = 3;
>     uint PERIOD_LENGTH = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalEth;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrustSmartContract
Line:        82
Source: 
>     uint256 public totalEth;
>     uint[7] personsPerLevel;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) personalIncome;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrustSmartContract
Line:        83
Source: 
>     uint[7] personsPerLevel;
>     mapping (address => uint256) personalIncome;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    TrustSmartContract
Line:        265
Source: 
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             personalIncome[referrer] += LEVEL_PRICE[_level] - 0.01 ether;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TrustSmartContract
Line:        264
Source: 
>             
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TrustSmartContract
Line:        265
Source: 
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             personalIncome[referrer] += LEVEL_PRICE[_level] - 0.01 ether;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TrustSmartContract
Line:        264
Source: 
>             
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TrustSmartContract
Line:        265
Source: 
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             personalIncome[referrer] += LEVEL_PRICE[_level] - 0.01 ether;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrustSmartContract
Line:        279
Source: 
> 
>       return this.getUserReferrer(userList[users[_user].referrerID], _level - 1);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrustSmartContract
Line:        81
Source: 
>     uint PERIOD_LENGTH = 365 days;
>     uint256 public totalEth;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint[7] personsPerLevel;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TrustSmartContract
Line:        82
Source: 
>     uint256 public totalEth;
>     uint[7] personsPerLevel;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) personalIncome;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TrustSmartContract
Line:        264
Source: 
>             
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TrustSmartContract
Line:        265
Source: 
>             require(ownerWallet.send(0.01 ether),"unable to transfer admin share");
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             personalIncome[referrer] += LEVEL_PRICE[_level] - 0.01 ether;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TrustSmartContract
Line:        262
Source: 
>             
>             totalEth += msg.value;
>             ^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TrustSmartContract
Line:        266
Source: 
>             require(address(uint160(referrer)).send((LEVEL_PRICE[_level] - 0.01 ether)),"unable to transfer to upline after admin");
>             personalIncome[referrer] += LEVEL_PRICE[_level] - 0.01 ether;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit getMoneyForLevelEvent(referrer, msg.sender, _level, now);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        41
Source: 
>   address public manager;
>   address payable public ownerWallet;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TrustSmartContract
Line:        80
Source: 
>     uint REFERRER_1_LEVEL_LIMIT = 3;
>     uint PERIOD_LENGTH = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalEth;

[0m
