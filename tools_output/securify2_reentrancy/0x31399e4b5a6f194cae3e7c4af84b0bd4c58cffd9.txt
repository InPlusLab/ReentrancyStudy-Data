Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ZSECStaker
Line:        106
Source: 
>     
>     address private _devWallet;                                 // dev wallet address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ZSECStaker
Line:        109
Source: 
>     uint256 private _totalStackedAmount = 0;                    // total stacked amount
>     uint256 private _minStakeAmount = 20e18;                    // min stackable amount
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ZSECStaker
Line:        114
Source: 
>     
>     uint256 private _rewardMaxDays = 60;                        // rewards max days
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _minRewardPeriod = 3600;                    // min reward period = 1 hour (3600s)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ZSECStaker
Line:        115
Source: 
>     uint256 private _rewardMaxDays = 60;                        // rewards max days
>     uint256 private _minRewardPeriod = 3600;                    // min reward period = 1 hour (3600s)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _stakerCount;                               // staker count

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        71
Source: 
>     }
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ZSECStaker
Line:        223
Source: 
>     
>     function getRewardOfAccount(address staker) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _rewardsMap[staker];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ZSECStaker
Line:        227
Source: 
>     
>     function getStakeAmountOfAccount(address staker) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _stakerMap[staker].stackedAmount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ZSECStaker
Line:        247
Source: 
>     
>     function getStartTimestamp(address staker) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _stakerMap[staker].startTimestamp;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ZSECStaker
Line:        251
Source: 
>     
>     function getLastTimestamp(address staker) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _stakerMap[staker].lastTimestamp;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ZSECStaker
Line:        186
Source: 
>         
>         _storeWalletContract.giveReward(_msgSender(), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].sub(amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ZSECStaker
Line:        97
Source: 
> 
>     struct _stakerData {
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 startTimestamp;     // When the staking started in unix time (block.timesamp)

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> 
> pragma solidity ^0.6.8;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ZSECStaker
Line:        136
Source: 
>         require(
>             _mainTokenContract.transferFrom(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _msgSender(),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ZSECStaker
Line:        163
Source: 
>         require(
>             _mainTokenContract.transfer(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _msgSender(),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ZSECStaker
Line:        186
Source: 
>         
>         _storeWalletContract.giveReward(_msgSender(), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].sub(amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ZSECStaker
Line:        95
Source: 
>     ZSecTokenContract private _mainTokenContract;           // main token contract
>     ZSECStoreContract private _storeWalletContract;         // store wallet contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ZSECStaker
Line:        116
Source: 
>     uint256 private _minRewardPeriod = 3600;                    // min reward period = 1 hour (3600s)
>     uint256 private _stakerCount;                               // staker count
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ZSECStaker
Line:        106
Source: 
>     
>     address private _devWallet;                                 // dev wallet address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ZSECStaker
Line:        151
Source: 
>         _stakerMap[_msgSender()].stackedAmount = _stakerMap[_msgSender()].stackedAmount.add(amount);
>         _totalStackedAmount = _totalStackedAmount.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ZSECStaker
Line:        150
Source: 
> 
>         _stakerMap[_msgSender()].stackedAmount = _stakerMap[_msgSender()].stackedAmount.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalStackedAmount = _totalStackedAmount.add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ZSECStaker
Line:        205
Source: 
>             
>             _stakerMap[_msgSender()].lastTimestamp = currentTimestamp.sub(offsetTimestamp);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        145
Source: 
>         if(_stakerMap[_msgSender()].stackedAmount == 0) {
>             _stakerMap[_msgSender()].startTimestamp = uint256(now);
>                        ^^^^^^^^^^^^
>             _stakerMap[_msgSender()].lastTimestamp = uint256(now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        146
Source: 
>             _stakerMap[_msgSender()].startTimestamp = uint256(now);
>             _stakerMap[_msgSender()].lastTimestamp = uint256(now);
>                        ^^^^^^^^^^^^
>             _stakerCount = _stakerCount.add(uint256(1));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        150
Source: 
> 
>         _stakerMap[_msgSender()].stackedAmount = _stakerMap[_msgSender()].stackedAmount.add(amount);
>                    ^^^^^^^^^^^^
>         _totalStackedAmount = _totalStackedAmount.add(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        153
Source: 
>         
>         emit Staked(_msgSender(), amount);
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        170
Source: 
>         
>         _stakerMap[_msgSender()].stackedAmount = _stakerMap[_msgSender()].stackedAmount.sub(amount);
>                    ^^^^^^^^^^^^
>         _totalStackedAmount = _totalStackedAmount.sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        177
Source: 
>         
>         emit Unstaked(_msgSender(), amount);
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        186
Source: 
>         
>         _storeWalletContract.giveReward(_msgSender(), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        187
Source: 
>         _storeWalletContract.giveReward(_msgSender(), amount);
>         _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].sub(amount);
>                     ^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        189
Source: 
>         
>         emit Claim(_msgSender(), amount);
>                    ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        203
Source: 
>             uint256 rewardsAmount = _stakerMap[_msgSender()].stackedAmount.div(_rewardPortion).mul(rewardDays);
>             _rewardsMap[_msgSender()] = _rewardsMap[_msgSender()].add(rewardsAmount);
>                         ^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ZSECStaker
Line:        205
Source: 
>             
>             _stakerMap[_msgSender()].lastTimestamp = currentTimestamp.sub(offsetTimestamp);
>                        ^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ZSECStaker
Line:        106
Source: 
>     
>     address private _devWallet;                                 // dev wallet address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
