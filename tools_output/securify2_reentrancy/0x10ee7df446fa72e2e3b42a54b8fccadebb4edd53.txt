Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        186
Source: 
>   using SafeMath for uint256;
>   bool public safeGuard; // To hault all non owner functions in case of imergency - by default false
>                                                                                 ^^^^^^^^^^^^^^^^^^^^
>   address public feeAccount; //the account that will receive fees

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        191
Source: 
>   //referrals
>   uint256 public refPercent = 10;  // percent to calculate referal bonous - by default 10% of trading fee
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        186
Source: 
>   using SafeMath for uint256;
>   bool public safeGuard; // To hault all non owner functions in case of imergency - by default false
>                                                                                 ^^^^^^^^^^^^^^^^^^^^
>   address public feeAccount; //the account that will receive fees

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        191
Source: 
>   //referrals
>   uint256 public refPercent = 10;  // percent to calculate referal bonous - by default 10% of trading fee
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        237
Source: 
>         uint256 c = PercentOf.mul(percentTo).div(factor);
>         return c;
>                  
>     }  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        262
Source: 
>   function availableOwnerCommissionToken(address tokenAddress) public view returns(uint256){
>       //assress 0x0 only holds ether as fee
>                                        ^^^^
>       return tokens[tokenAddress][feeAccount];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        266
Source: 
>   
>   function withdrawOwnerCommissoinEther() public  returns (string memory){
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == feeAccount, 'Invalid caller');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        277
Source: 
>   function withdrawOwnerCommissoinToken(address tokenAddress) public  returns (string memory){
>       require(msg.sender == feeAccount, 'Invalid caller');
>                                                     ^^^^^^
>       uint256 amount = availableOwnerCommissionToken(tokenAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        287
Source: 
>   function deposit() public payable {
>     tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        296
Source: 
>     msg.sender.transfer(amount);
>     emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);
>                                                                                       ^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        301
Source: 
>     //remember to call Token(address).approve(address(this), amount) or this contract will not be able to do the transfer on your behalf.
>     require(token!=address(0), 'Invalid token address');
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount), 'tokens could not be transferred');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        307
Source: 
> 	
>   function withdrawToken(address token, uint amount) public {
>                                                            ^^
>     require(!safeGuard,"System Paused by Admin");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        320
Source: 
> 
>   function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires) public {
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        331
Source: 
>         2 = tradeMaker
>         3 = referrer
>     ^^^^^^^^^^^^^^^^
>     */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        333
Source: 
>     */
>   function trade(address[4] memory addressArray, uint amountGet, uint amountGive, uint expires, uint8 v, bytes32 r, bytes32 s, uint amount, uint orderBookID) public {
>                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(!safeGuard,"System Paused by Admin");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        338
Source: 
>     require(orders[addressArray[2]][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == addressArray[2], 'Invalid trade parameters');
>     require(block.number <= expires, 'Trade is expired');
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(orderFills[addressArray[2]][hash].add(amount) <= amountGet, 'Trade order is filled');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        381
Source: 
>   function testVRS(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint8 v, bytes32 r, bytes32 s ) public view returns(address){
>       
> ^^^^^^
>       bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        388
Source: 
> 
>   function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {
>                                                                                                                                                                             ^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        409
Source: 
>     require(!safeGuard,"System Paused by Admin");
>     bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));
>                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == msg.sender, 'Invalid trade order');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        412
Source: 
>     orderFills[msg.sender][hash] = amountGet;
>     emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, msg.sender, v, r, s);
>                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        452
Source: 
>         
>         require(referralBonus > 0, 'Insufficient referrer bonus');
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         referrerBonusBalance[msgSender] = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UnityDEX
Line:        472
Source: 
> 
> }
>                            

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    owned
Line:        186
Source: 
>   using SafeMath for uint256;
>   bool public safeGuard; // To hault all non owner functions in case of imergency - by default false
>                                                                                 ^^^^^^^^^^^^^^^^^^^^
>   address public feeAccount; //the account that will receive fees

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UnityDEX
Line:        262
Source: 
>   function availableOwnerCommissionToken(address tokenAddress) public view returns(uint256){
>       //assress 0x0 only holds ether as fee
>                                        ^^^^
>       return tokens[tokenAddress][feeAccount];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UnityDEX
Line:        287
Source: 
>   function deposit() public payable {
>     tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UnityDEX
Line:        307
Source: 
> 	
>   function withdrawToken(address token, uint amount) public {
>                                                            ^^
>     require(!safeGuard,"System Paused by Admin");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UnityDEX
Line:        273
Source: 
>       emit OwnerWithdrawCommission(msg.sender, address(0), amount);
>       return "Ether withdrawn successfully";
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UnityDEX
Line:        331
Source: 
>         2 = tradeMaker
>         3 = referrer
>     ^^^^^^^^^^^^^^^^
>     */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UnityDEX
Line:        333
Source: 
>     */
>   function trade(address[4] memory addressArray, uint amountGet, uint amountGive, uint expires, uint8 v, bytes32 r, bytes32 s, uint amount, uint orderBookID) public {
>                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(!safeGuard,"System Paused by Admin");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UnityDEX
Line:        338
Source: 
>     require(orders[addressArray[2]][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == addressArray[2], 'Invalid trade parameters');
>     require(block.number <= expires, 'Trade is expired');
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(orderFills[addressArray[2]][hash].add(amount) <= amountGet, 'Trade order is filled');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UnityDEX
Line:        381
Source: 
>   function testVRS(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint8 v, bytes32 r, bytes32 s ) public view returns(address){
>       
> ^^^^^^
>       bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UnityDEX
Line:        388
Source: 
> 
>   function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {
>                                                                                                                                                                             ^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UnityDEX
Line:        409
Source: 
>     require(!safeGuard,"System Paused by Admin");
>     bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));
>                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == msg.sender, 'Invalid trade order');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UnityDEX
Line:        437
Source: 
>   
>   function changeRefPercent(uint256 newRefPercent) public onlyOwner returns (string memory){
>                                                                         ^^^^^^^^^^^^^^^^^^^^
>       require(newRefPercent <= 100, 'newRefPercent can not be more than 100');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UnityDEX
Line:        438
Source: 
>   function changeRefPercent(uint256 newRefPercent) public onlyOwner returns (string memory){
>       require(newRefPercent <= 100, 'newRefPercent can not be more than 100');
>                                                                   ^^^^^^^^^^^^
>       refPercent = newRefPercent;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UnityDEX
Line:        446
Source: 
>     */
>     function claimReferrerBonus() public returns(bool) {
>                                             ^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UnityDEX
Line:        450
Source: 
>         
>         uint256 referralBonus = referrerBonusBalance[msgSender];
>                                                  ^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    UnityDEX
Line:        282
Source: 
>       ERC20Essential(tokenAddress).transfer(msg.sender, amount);
>       emit OwnerWithdrawCommission(msg.sender, tokenAddress, amount);
>                                                     ^^^^^^^^^^^^^^^^^
>       return "Token withdrawn successfully";

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    UnityDEX
Line:        304
Source: 
>     tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);
>     emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    UnityDEX
Line:        472
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                        

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    owned
Line:        174
Source: 
>     //this flow is to prevent transferring ownership to wrong wallet by mistake
>     function acceptOwnership() public {
>                            ^^^^^^^^^^^^
>         require(msg.sender == newOwner, 'Only new owner can call this function');

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    owned
Line:        175
Source: 
>     function acceptOwnership() public {
>         require(msg.sender == newOwner, 'Only new owner can call this function');
>         ^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(now, owner, newOwner);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    owned
Line:        175
Source: 
>     function acceptOwnership() public {
>         require(msg.sender == newOwner, 'Only new owner can call this function');
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(now, owner, newOwner);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    UnityDEX
Line:        194
Source: 
>   mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>                                                                                                        ^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    UnityDEX
Line:        195
Source: 
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)
>              ^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    UnityDEX
Line:        195
Source: 
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)
>                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    UnityDEX
Line:        195
Source: 
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)
>                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    UnityDEX
Line:        197
Source: 
>   
>   /* Mapping to track referrer. The second address is the address of referrer, the Up-line/ Sponsor */
>                                                                                   ^^^^^^^^^^^^^^^^^^^^
>   mapping (address => address) public referrers;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    UnityDEX
Line:        200
Source: 
>   /* Mapping to track referrer bonus for all the referrers */
>   mapping (address => uint) public referrerBonusBalance;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    UnityDEX
Line:        203
Source: 
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    UnityDEX
Line:        204
Source: 
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);
>                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^
>   event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    UnityDEX
Line:        205
Source: 
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);
>   event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);
>                                                                                        ^^
>   event Withdraw(uint256 curTime, address token, address user, uint amount, uint balance);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    owned
Line:        175
Source: 
>     function acceptOwnership() public {
>         require(msg.sender == newOwner, 'Only new owner can call this function');
>         ^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(now, owner, newOwner);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    owned
Line:        175
Source: 
>     function acceptOwnership() public {
>         require(msg.sender == newOwner, 'Only new owner can call this function');
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(now, owner, newOwner);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UnityDEX
Line:        194
Source: 
>   mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>                                                                                                        ^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UnityDEX
Line:        195
Source: 
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)
>              ^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UnityDEX
Line:        195
Source: 
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)
>                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UnityDEX
Line:        195
Source: 
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)
>                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UnityDEX
Line:        203
Source: 
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UnityDEX
Line:        204
Source: 
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);
>                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^
>   event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UnityDEX
Line:        205
Source: 
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);
>   event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);
>                                                                                        ^^
>   event Withdraw(uint256 curTime, address token, address user, uint amount, uint balance);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UnityDEX
Line:        253
Source: 
>     require(tradingFee_ <= 10000, 'trading fee can not be more than 100%');
>     tradingFee = tradingFee_;
>       ^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    UnityDEX
Line:        304
Source: 
>     tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);
>     emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    UnityDEX
Line:        282
Source: 
>       ERC20Essential(tokenAddress).transfer(msg.sender, amount);
>       emit OwnerWithdrawCommission(msg.sender, tokenAddress, amount);
>                                                     ^^^^^^^^^^^^^^^^^
>       return "Token withdrawn successfully";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    UnityDEX
Line:        472
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                        

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UnityDEX
Line:        282
Source: 
>       ERC20Essential(tokenAddress).transfer(msg.sender, amount);
>       emit OwnerWithdrawCommission(msg.sender, tokenAddress, amount);
>                                                     ^^^^^^^^^^^^^^^^^
>       return "Token withdrawn successfully";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UnityDEX
Line:        304
Source: 
>     tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);
>     emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UnityDEX
Line:        472
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                        

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UnityDEX
Line:        312
Source: 
>     tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);
> 	  ERC20Essential(token).transfer(msg.sender, amount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UnityDEX
Line:        294
Source: 
>     require(tokens[address(0)][msg.sender] >= amount, 'Not enough balance');
>     tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     msg.sender.transfer(amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UnityDEX
Line:        323
Source: 
>     orders[msg.sender][hash] = true;
>     emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, msg.sender);
>                                                                      ^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    owned
Line:        175
Source: 
>     function acceptOwnership() public {
>         require(msg.sender == newOwner, 'Only new owner can call this function');
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(now, owner, newOwner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UnityDEX
Line:        358
Source: 
>     
>     //processing referrers bonus - which is % of the trading fee
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     processReferrerBonus(addressArray[3], tradingFeeXfer);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UnityDEX
Line:        371
Source: 
> 
>   function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {
>                                                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UnityDEX
Line:        374
Source: 
>     if (!(
>       tokens[tokenGet][sender] >= amount &&
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, user, v, r, s) >= amount

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UnityDEX
Line:        375
Source: 
>       tokens[tokenGet][sender] >= amount &&
>       availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, user, v, r, s) >= amount
>                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     )) return false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UnityDEX
Line:        336
Source: 
>     //amount is in amountGet terms
>     bytes32 hash = keccak256(abi.encodePacked(address(this), addressArray[0], amountGet, addressArray[1], amountGive, expires));
>                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(orders[addressArray[2]][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == addressArray[2], 'Invalid trade parameters');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UnityDEX
Line:        294
Source: 
>     require(tokens[address(0)][msg.sender] >= amount, 'Not enough balance');
>     tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     msg.sender.transfer(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UnityDEX
Line:        323
Source: 
>     orders[msg.sender][hash] = true;
>     emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, msg.sender);
>                                                                      ^^^^^^^^^^^^^^^^
>   }

[0m
