[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TRONPROM
Line:        213
Source: 
>         uint size;
>         assembly { size := extcodesize(addr) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        236
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        240
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        52
Source: 
> 
> 	function invest(address referrer) public payable {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.value >= MIN_INVEST);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        82
Source: 
> 
> 	function withdraw() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        124
Source: 
> 	}
> 	function getContractBalance() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        167
Source: 
> 	}
> 	function getUserCheckpoint(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].checkpoint;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        170
Source: 
> 	}
> 	function getUserReferrer(address userAddress) public view returns(address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].referrer;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        176
Source: 
> 	}
> 	function getUserAvailable(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return getUserReferralBonus(userAddress).add(getUserDividends(userAddress));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        188
Source: 
> 	}
> 	function getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    User storage user = users[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        192
Source: 
> 	}
> 	function getUserAmountOfDeposits(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].deposits.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        195
Source: 
> 	}
> 	function getUserTotalDeposits(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    User storage user = users[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONPROM
Line:        203
Source: 
> 	}
> 	function getUserTotalWithdrawn(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    User storage user = users[userAddress];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TRONPROM
Line:        132
Source: 
> 	}
> 	function getUserPercentRate(address userAddress) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[userAddress];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TRONPROM
Line:        176
Source: 
> 	}
> 	function getUserAvailable(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return getUserReferralBonus(userAddress).add(getUserDividends(userAddress));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONPROM
Line:        167
Source: 
> 	}
> 	function getUserCheckpoint(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].checkpoint;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONPROM
Line:        170
Source: 
> 	}
> 	function getUserReferrer(address userAddress) public view returns(address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].referrer;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONPROM
Line:        173
Source: 
> 	}
> 	function getUserReferralBonus(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].bonus;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONPROM
Line:        179
Source: 
> 	}
> 	function isActive(address userAddress) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[userAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONPROM
Line:        188
Source: 
> 	}
> 	function getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    User storage user = users[userAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONPROM
Line:        192
Source: 
> 	}
> 	function getUserAmountOfDeposits(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].deposits.length;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        239
Source: 
>         }
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TRONPROM
Line:        54
Source: 
> 		require(msg.value >= MIN_INVEST);
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TRONPROM
Line:        55
Source: 
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TRONPROM
Line:        120
Source: 
> 		user.checkpoint = block.timestamp;
> 		msg.sender.transfer(totalAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalWithdrawn = totalWithdrawn.add(totalAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TRONPROM
Line:        14
Source: 
> 	uint256 constant public ADMIN_FEE = 30;
> 	uint256[] public REFF_PERCENT = [50, 30, 10];
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 constant public TIMESTEP = 1 days;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TRONPROM
Line:        54
Source: 
> 		require(msg.value >= MIN_INVEST);
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TRONPROM
Line:        55
Source: 
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    TRONPROM
Line:        120
Source: 
> 		user.checkpoint = block.timestamp;
> 		msg.sender.transfer(totalAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalWithdrawn = totalWithdrawn.add(totalAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TRONPROM
Line:        54
Source: 
> 		require(msg.value >= MIN_INVEST);
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TRONPROM
Line:        55
Source: 
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TRONPROM
Line:        54
Source: 
> 		require(msg.value >= MIN_INVEST);
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TRONPROM
Line:        55
Source: 
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TRONPROM
Line:        120
Source: 
> 		user.checkpoint = block.timestamp;
> 		msg.sender.transfer(totalAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalWithdrawn = totalWithdrawn.add(totalAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    TRONPROM
Line:        214
Source: 
>         assembly { size := extcodesize(addr) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TRONPROM
Line:        19
Source: 
> 
> 	uint256 public totalInvestors;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public totalInvested;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TRONPROM
Line:        20
Source: 
> 	uint256 public totalInvestors;
> 	uint256 public totalInvested;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public totalWithdrawn;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TRONPROM
Line:        21
Source: 
> 	uint256 public totalInvested;
> 	uint256 public totalWithdrawn;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public totalDeposits;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TRONPROM
Line:        22
Source: 
> 	uint256 public totalWithdrawn;
> 	uint256 public totalDeposits;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    TRONPROM
Line:        54
Source: 
> 		require(msg.value >= MIN_INVEST);
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    TRONPROM
Line:        55
Source: 
> 		marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));
> 		projectAddress.transfer(msg.value.mul(ADMIN_FEE).div(PERCENTS_DIVIDER));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TRONPROM
Line:        75
Source: 
> 		}
> 		user.deposits.push(Deposit(msg.value, 0, block.timestamp));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalInvested = totalInvested.add(msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TRONPROM
Line:        76
Source: 
> 		user.deposits.push(Deposit(msg.value, 0, block.timestamp));
> 		totalInvested = totalInvested.add(msg.value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalDeposits = totalDeposits.add(1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TRONPROM
Line:        77
Source: 
> 		totalInvested = totalInvested.add(msg.value);
> 		totalDeposits = totalDeposits.add(1);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit NewDeposit(msg.sender, msg.value);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TRONPROM
Line:        152
Source: 
> 					dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))
> 						.mul(block.timestamp.sub(user.deposits[i].start))
>            ^^^^^^^^^^^^^^^
> 						.div(TIMESTEP);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TRONPROM
Line:        156
Source: 
> 					dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))
> 						.mul(block.timestamp.sub(user.checkpoint))
>            ^^^^^^^^^^^^^^^
> 						.div(TIMESTEP);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    TRONPROM
Line:        92
Source: 
> 					dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))
> 						.mul(block.timestamp.sub(user.deposits[i].start))
>            ^^^^^^^^^^^^^^^
> 						.div(TIMESTEP);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    TRONPROM
Line:        96
Source: 
> 					dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))
> 						.mul(block.timestamp.sub(user.checkpoint))
>            ^^^^^^^^^^^^^^^
> 						.div(TIMESTEP);

[0m
