pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Staker
Line:        257
Source: 
> 
>     string public name = "High Stakes Staking Game";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Staker
Line:        277
Source: 
> 
>     uint256 public contractLaunchTime = now + contractCoolDownTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        62
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        81
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        90
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        62
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        81
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        90
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Staker
Line:        332
Source: 
> 
>     function stake(address referral) public payable checkStart returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value >= 10000000000000000, "Cannot stake less than 0.01 ETH.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Staker
Line:        358
Source: 
> 
>     function unstakeTokens() public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // First make sure the user can withdraw his tokens and that there is ETH to withdraw.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Staker
Line:        409
Source: 
> 
>     function getUserEthStaked(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stakingBalance[user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Staker
Line:        413
Source: 
> 
>     function getCurrentPotential() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Current potential shows the potential ETH gained by staking 1 ETH NOW.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Staker
Line:        426
Source: 
> 
>     function withdrawDevFund() public payable onlyOwner returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Dev fund can be withdrawn only AFTER everyone is unlocked.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Staker
Line:        409
Source: 
> 
>     function getUserEthStaked(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stakingBalance[user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Staker
Line:        312
Source: 
> 
>         return minimalWaitTime + referralLockBonus + (seed - ((seed / maxWaitTime) * maxWaitTime)) * 1 seconds;
>                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Staker
Line:        312
Source: 
> 
>         return minimalWaitTime + referralLockBonus + (seed - ((seed / maxWaitTime) * maxWaitTime)) * 1 seconds;
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Staker
Line:        404
Source: 
>             }
>             return totalETH * stakerRisk[user] / sqrt(totalRisk);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Staker
Line:        417
Source: 
>         if (totalRisk > 0) {
>             uint256 potentialGains = totalETH * currentRisk / sqrt(totalRisk);
>                                      ^^^^^^^^^^^^^^^^^^^^^^
>             if (potentialGains > totalETH) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Staker
Line:        373
Source: 
>         totalRisk -= risk;
>         if (!msg.sender.send(exitValue)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             stakingBalance[msg.sender] = balance;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Staker
Line:        435
Source: 
> 
>         if (!msg.sender.send(balance)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>             devETH = balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staker
Line:        260
Source: 
>     // Constants determining the game timeframe.
>     uint256 public constant maxWaitTime = 6 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant minimalWaitTime = 3 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staker
Line:        261
Source: 
>     uint256 public constant maxWaitTime = 6 days;
>     uint256 public constant minimalWaitTime = 3 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant contractCoolDownTime = 1 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staker
Line:        262
Source: 
>     uint256 public constant minimalWaitTime = 3 days;
>     uint256 public constant contractCoolDownTime = 1 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant referralLockBonus = 1 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staker
Line:        263
Source: 
>     uint256 public constant contractCoolDownTime = 1 days;
>     uint256 public constant referralLockBonus = 1 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staker
Line:        283
Source: 
>     uint256 private devETH;
>     uint256 public constant devFeesPercent = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Staker
Line:        333
Source: 
>     function stake(address referral) public payable checkStart returns (bool success) {
>         require(msg.value >= 10000000000000000, "Cannot stake less than 0.01 ETH.");
>                              ^^^^^^^^^^^^^^^^^
>         require(referral != msg.sender, "You can't refer yourself.");

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Staker
Line:        390
Source: 
>         // For each 1ETH referred into the contract, the user reduces his unlock time by 1 hour.
>         senderLock -= referredETH * 36 seconds / 10000000000000000;
>                                                  ^^^^^^^^^^^^^^^^^
>         if (senderLock < minimalWaitTime) {

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Staker
Line:        415
Source: 
>         // Current potential shows the potential ETH gained by staking 1 ETH NOW.
>         uint256 currentRisk = getRisk(now - (contractLaunchTime), 1000000000000000000);
>                                                                   ^^^^^^^^^^^^^^^^^^^
>         if (totalRisk > 0) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Staker
Line:        373
Source: 
>         totalRisk -= risk;
>         if (!msg.sender.send(exitValue)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             stakingBalance[msg.sender] = balance;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Staker
Line:        435
Source: 
> 
>         if (!msg.sender.send(balance)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>             devETH = balance;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Staker
Line:        373
Source: 
>         totalRisk -= risk;
>         if (!msg.sender.send(exitValue)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             stakingBalance[msg.sender] = balance;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Staker
Line:        435
Source: 
> 
>         if (!msg.sender.send(balance)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>             devETH = balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Staker
Line:        282
Source: 
>     // After the game has ended e.g., once contractLaunchTime + maxWaitTime, then all remaining funds are considered a donation.
>     uint256 private devETH;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant devFeesPercent = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Staker
Line:        257
Source: 
> 
>     string public name = "High Stakes Staking Game";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Staker
Line:        305
Source: 
>         uint256 seed = uint256(keccak256(abi.encodePacked(
>             block.timestamp + block.difficulty +
>             ^^^^^^^^^^^^^^^
>             ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) +

[0m
