pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    OracleSimplePoolToken
Line:        210
Source: 
> abstract contract OracleSimplePoolToken is OracleSimple {
>     ChainlinkedOracleSimple public oracleMainAsset;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OracleSimple
Line:        202
Source: 
>     // returns Q112-encoded value
>     function assetToUsd(address asset, uint amount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ChainlinkedOracleSimple
Line:        220
Source: 
>     // returns ordinary value
>     function ethToUsd(uint ethAmount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ChainlinkedOracleSimple
Line:        223
Source: 
>     // returns Q112-encoded value
>     function assetToEth(address asset, uint amount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OracleSimple
Line:        202
Source: 
>     // returns Q112-encoded value
>     function assetToUsd(address asset, uint amount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        391
Source: 
>      **/
>     function assetToUsd(address asset, uint amount) public override view returns (uint) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (amount == 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        420
Source: 
>      **/
>     function assetToEth(address asset, uint amount) public view override returns (uint) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (amount == 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        444
Source: 
>      **/
>     function ethToUsd(uint ethAmount) public override view returns (uint) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[WETH]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Auth
Line:        30
Source: 
>     modifier onlyManager() {
>         require(vaultParameters.isManager(msg.sender), "Unit Protocol: AUTH_FAILED");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        403
Source: 
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[asset]);
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                                                         ^^^^^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        406
Source: 
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");
>         int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());
>                                      ^^^^^^^^^^^^^^^^^^^^^^^
>         if (decimals < 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        406
Source: 
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");
>         int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());
>                                                                     ^^^^^^^^^^^
>         if (decimals < 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        429
Source: 
>         require(address(agg) != address (0), "Unit Protocol: AGGREGATOR_DOES_NOT_EXIST");
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                                                         ^^^^^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        432
Source: 
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");
>         int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());
>                                      ^^^^^^^^^^^^^^^^^^^^^^^
>         if (decimals < 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        432
Source: 
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");
>         int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());
>                                                                     ^^^^^^^^^^^
>         if (decimals < 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        446
Source: 
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[WETH]);
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                                                         ^^^^^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 6 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        448
Source: 
>         require(updatedAt > block.timestamp - 6 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");
>         return ethAmount.mul(uint(answer)).div(10 ** agg.decimals());
>                                                           ^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        444
Source: 
>      **/
>     function ethToUsd(uint ethAmount) public override view returns (uint) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[WETH]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VaultParameters
Line:        98
Source: 
>      **/
>     function setManager(address who, bool permit) external onlyManager {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isManager[who] = permit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VaultParameters
Line:        121
Source: 
>      **/
>     function setCollateral(
>      ^^^^^^^^^^^^^^^^^^^^^^
>         address asset,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VaultParameters
Line:        142
Source: 
>      **/
>     function setVaultAccess(address who, bool permit) external onlyManager {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         canModifyVault[who] = permit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VaultParameters
Line:        152
Source: 
>      **/
>     function setStabilityFee(address asset, uint newValue) public onlyManager {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stabilityFee[asset] = newValue;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VaultParameters
Line:        162
Source: 
>      **/
>     function setLiquidationFee(address asset, uint newValue) public onlyManager {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newValue <= 100, "Unit Protocol: VALUE_OUT_OF_RANGE");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VaultParameters
Line:        174
Source: 
>      **/
>     function setOracleType(uint _type, address asset, bool enabled) public onlyManager {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isOracleTypeEnabled[_type][asset] = enabled;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VaultParameters
Line:        184
Source: 
>      **/
>     function setTokenDebtLimit(address asset, uint limit) public onlyManager {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenDebtLimit[asset] = limit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OracleSimple
Line:        202
Source: 
>     // returns Q112-encoded value
>     function assetToUsd(address asset, uint amount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ChainlinkedOracleSimple
Line:        220
Source: 
>     // returns ordinary value
>     function ethToUsd(uint ethAmount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ChainlinkedOracleSimple
Line:        223
Source: 
>     // returns Q112-encoded value
>     function assetToEth(address asset, uint amount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OracleSimple
Line:        202
Source: 
>     // returns Q112-encoded value
>     function assetToUsd(address asset, uint amount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ChainlinkedOracleSimple
Line:        220
Source: 
>     // returns ordinary value
>     function ethToUsd(uint ethAmount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ChainlinkedOracleSimple
Line:        223
Source: 
>     // returns Q112-encoded value
>     function assetToEth(address asset, uint amount) public virtual view returns (uint) {}
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Auth
Line:        30
Source: 
>     modifier onlyManager() {
>         require(vaultParameters.isManager(msg.sender), "Unit Protocol: AUTH_FAILED");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        342
Source: 
>         address weth,
>         address vaultParameters
>              ^^^^^^^^^^^^^^^^^^
>     )

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        403
Source: 
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[asset]);
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                 ^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        429
Source: 
>         require(address(agg) != address (0), "Unit Protocol: AGGREGATOR_DOES_NOT_EXIST");
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                 ^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        446
Source: 
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[WETH]);
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                 ^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 6 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ChainlinkedOracleSimple
Line:        218
Source: 
> abstract contract ChainlinkedOracleSimple is OracleSimple {
>     address public WETH;
>       ^^^^^^^^^^^^^^^^^^
>     // returns ordinary value

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        403
Source: 
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[asset]);
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                 ^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        429
Source: 
>         require(address(agg) != address (0), "Unit Protocol: AGGREGATOR_DOES_NOT_EXIST");
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                 ^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        446
Source: 
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[WETH]);
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                 ^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 6 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Auth
Line:        30
Source: 
>     modifier onlyManager() {
>         require(vaultParameters.isManager(msg.sender), "Unit Protocol: AUTH_FAILED");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        403
Source: 
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[asset]);
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                                                         ^^^^^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        406
Source: 
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");
>         int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());
>                                      ^^^^^^^^^^^^^^^^^^^^^^^
>         if (decimals < 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        406
Source: 
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");
>         int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());
>                                                                     ^^^^^^^^^^^
>         if (decimals < 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        429
Source: 
>         require(address(agg) != address (0), "Unit Protocol: AGGREGATOR_DOES_NOT_EXIST");
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                                                         ^^^^^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        432
Source: 
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");
>         int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());
>                                      ^^^^^^^^^^^^^^^^^^^^^^^
>         if (decimals < 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        432
Source: 
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");
>         int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());
>                                                                     ^^^^^^^^^^^
>         if (decimals < 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        446
Source: 
>         AggregatorInterface agg = AggregatorInterface(usdAggregators[WETH]);
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>                                                         ^^^^^^^^^^^^^^^^^
>         require(updatedAt > block.timestamp - 6 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkedOracleMainAsset
Line:        448
Source: 
>         require(updatedAt > block.timestamp - 6 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");
>         return ethAmount.mul(uint(answer)).div(10 ** agg.decimals());
>                                                           ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OracleSimplePoolToken
Line:        210
Source: 
> abstract contract OracleSimplePoolToken is OracleSimple {
>     ChainlinkedOracleSimple public oracleMainAsset;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ChainlinkedOracleSimple
Line:        218
Source: 
> abstract contract ChainlinkedOracleSimple is OracleSimple {
>     address public WETH;
>       ^^^^^^^^^^^^^^^^^^
>     // returns ordinary value

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VaultParameters
Line:        99
Source: 
>     function setManager(address who, bool permit) external onlyManager {
>         isManager[who] = permit;
>          ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VaultParameters
Line:        109
Source: 
>         require(newFoundation != address(0), "Unit Protocol: ZERO_ADDRESS");
>         foundation = newFoundation;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VaultParameters
Line:        175
Source: 
>     function setOracleType(uint _type, address asset, bool enabled) public onlyManager {
>         isOracleTypeEnabled[_type][asset] = enabled;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VaultParameters
Line:        185
Source: 
>     function setTokenDebtLimit(address asset, uint limit) public onlyManager {
>         tokenDebtLimit[asset] = limit;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VaultParameters
Line:        164
Source: 
>         require(newValue <= 100, "Unit Protocol: VALUE_OUT_OF_RANGE");
>         liquidationFee[asset] = newValue;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VaultParameters
Line:        153
Source: 
>     function setStabilityFee(address asset, uint newValue) public onlyManager {
>         stabilityFee[asset] = newValue;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VaultParameters
Line:        143
Source: 
>     function setVaultAccess(address who, bool permit) external onlyManager {
>         canModifyVault[who] = permit;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        375
Source: 
>         for (uint i = 0; i < tokenAddresses1.length; i++) {
>             usdAggregators[tokenAddresses1[i]] = _usdAggregators[i];
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit NewAggregator(tokenAddresses1[i], _usdAggregators[i], USD_TYPE);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        380
Source: 
>         for (uint i = 0; i < tokenAddresses2.length; i++) {
>             ethAggregators[tokenAddresses2[i]] = _ethAggregators[i];
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit NewAggregator(tokenAddresses2[i], _ethAggregators[i], ETH_TYPE);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Auth
Line:        22
Source: 
>     // address of the the contract with vault parameters
>     VaultParameters public vaultParameters;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VaultParameters
Line:        72
Source: 
>     // address of the Vault
>     address payable public vault;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VaultParameters
Line:        75
Source: 
>     // The foundation address
>     address public foundation;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OracleSimplePoolToken
Line:        210
Source: 
> abstract contract OracleSimplePoolToken is OracleSimple {
>     ChainlinkedOracleSimple public oracleMainAsset;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ChainlinkedOracleSimple
Line:        218
Source: 
> abstract contract ChainlinkedOracleSimple is OracleSimple {
>     address public WETH;
>       ^^^^^^^^^^^^^^^^^^
>     // returns ordinary value

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        404
Source: 
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");
>                                  ^^^^^^^^^^^^^^^
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        430
Source: 
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>         require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");
>                                  ^^^^^^^^^^^^^^^
>         require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ChainlinkedOracleMainAsset
Line:        447
Source: 
>         (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();
>         require(updatedAt > block.timestamp - 6 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");
>                                  ^^^^^^^^^^^^^^^
>         return ethAmount.mul(uint(answer)).div(10 ** agg.decimals());

[0m
