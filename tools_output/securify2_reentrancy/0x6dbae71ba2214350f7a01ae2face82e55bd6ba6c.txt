Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AssetfinX
Line:        54
Source: 
>     
>     string public name = "AssetfinX";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "AFX";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AssetfinX
Line:        55
Source: 
>     string public name = "AssetfinX";
>     string public symbol = "AFX";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AssetfinX
Line:        56
Source: 
>     string public symbol = "AFX";
>     uint8 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply = TOTALSUPPLY*10**uint256(decimals);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AssetfinX
Line:        57
Source: 
>     uint8 public decimals = 18;
>     uint256 public totalSupply = TOTALSUPPLY*10**uint256(decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        110
Source: 
>      */ 
>     function setminimumFreezetime(uint256 _time) public contractActive onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_time > 0, "Invalid time");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        120
Source: 
>      */ 
>     function requestchangeAdmin(address _newAdmin) public contractActive onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerTransaction[msg.sender][_newAdmin] = Multisig(multisigAddress).requestOwnerChange(owner, _newAdmin);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        129
Source: 
>      */ 
>     function changeAdmin(address _address) public contractActive onlyOwner multisigAdminCheck(ownerTransaction[owner][_address], _address) returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _address;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        139
Source: 
>      */ 
>     function vestRequest(address _address, uint256 _amount) public contractActive onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        vestTransaction[owner][_address][_amount] = Multisig(multisigAddress).vestingTransaction(owner, _address, _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        149
Source: 
>      */ 
>     function mintRequest(uint256 _amount, uint256 _time) public contractActive onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        mintTransaction[owner][_amount][_time] = Multisig(multisigAddress).mintTransaction(owner, _amount, _time);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        158
Source: 
>      */ 
>     function balanceOf(address tokenOwner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[tokenOwner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        167
Source: 
>      */
>     function transfer(address _to, uint256 _value) public contractActive returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0), "Null address");                                         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        180
Source: 
>      */
>     function approve(address _spender, uint256 _value) public contractActive returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_spender != address(0), "Null address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        193
Source: 
>      */ 
>     function allowance(address holder, address delegate) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[holder][delegate];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        203
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public contractActive returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( _to != address(0), "Null address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        231
Source: 
>      */
> 	function freeze(uint256 _value, uint256 _time) public contractActive returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value > 0, "Invalid Value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        247
Source: 
>      */
> 	function unfreeze() public contractActive returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(freezeOf[msg.sender][0] != 0, "Sender has no tokens to unfreeze");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        262
Source: 
>      */
>     function mint(uint256 _amount, uint256 _reqestedTime) public contractActive onlyOwner multisigCheck(mintTransaction[owner][_amount][_reqestedTime]) returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( _amount > 0, "Invalid amount");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        278
Source: 
>      */
>     function vestLock(address _address, uint256 _amount) public contractActive onlyOwner multisigCheck(vestTransaction[owner][_address][_amount]) returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(_amount > 0, "Invalid Amount");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        294
Source: 
>      */ 
>     function vestRelease(address _address, uint256 _amount) public contractActive onlyOwner multisigCheck(vestTransaction[owner][_address][_amount]) returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(_amount > 0, "Invalid Amount");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        309
Source: 
>      */
>     function updatecontractStatus(bool _status) public onlyOwner returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(contractStatus != _status, "Invalid status");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetfinX
Line:        319
Source: 
>      */ 
>     function updateMultisigAddress(address _address) public contractActive onlyOwner returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_address != address(0), "Null Address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AssetfinX
Line:        120
Source: 
>      */ 
>     function requestchangeAdmin(address _newAdmin) public contractActive onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerTransaction[msg.sender][_newAdmin] = Multisig(multisigAddress).requestOwnerChange(owner, _newAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AssetfinX
Line:        129
Source: 
>      */ 
>     function changeAdmin(address _address) public contractActive onlyOwner multisigAdminCheck(ownerTransaction[owner][_address], _address) returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _address;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AssetfinX
Line:        139
Source: 
>      */ 
>     function vestRequest(address _address, uint256 _amount) public contractActive onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        vestTransaction[owner][_address][_amount] = Multisig(multisigAddress).vestingTransaction(owner, _address, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AssetfinX
Line:        149
Source: 
>      */ 
>     function mintRequest(uint256 _amount, uint256 _time) public contractActive onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        mintTransaction[owner][_amount][_time] = Multisig(multisigAddress).mintTransaction(owner, _amount, _time);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AssetfinX
Line:        262
Source: 
>      */
>     function mint(uint256 _amount, uint256 _reqestedTime) public contractActive onlyOwner multisigCheck(mintTransaction[owner][_amount][_reqestedTime]) returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( _amount > 0, "Invalid amount");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AssetfinX
Line:        158
Source: 
>      */ 
>     function balanceOf(address tokenOwner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[tokenOwner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AssetfinX
Line:        193
Source: 
>      */ 
>     function allowance(address holder, address delegate) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[holder][delegate];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AssetfinX
Line:        102
Source: 
>     modifier multisigAdminCheck(uint256 _id, address _newaddress){
>         require(Multisig(multisigAddress).executeAdminChange(_id, _newaddress), "Not confirmed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity ^0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AssetfinX
Line:        50
Source: 
>     
>     uint256 constant TOTALSUPPLY = 50000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AssetfinX
Line:        96
Source: 
>     
>     modifier multisigCheck(uint256 _id){
>                            ^^^^^^^^^^^
>         require(Multisig(multisigAddress).executeChange(_id), "Not confirmed");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AssetfinX
Line:        101
Source: 
>     
>     modifier multisigAdminCheck(uint256 _id, address _newaddress){
>                                 ^^^^^^^^^^^
>         require(Multisig(multisigAddress).executeAdminChange(_id, _newaddress), "Not confirmed");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AssetfinX
Line:        101
Source: 
>     
>     modifier multisigAdminCheck(uint256 _id, address _newaddress){
>                                              ^^^^^^^^^^^^^^^^^^^
>         require(Multisig(multisigAddress).executeAdminChange(_id, _newaddress), "Not confirmed");

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AssetfinX
Line:        50
Source: 
>     
>     uint256 constant TOTALSUPPLY = 50000000;
>                                    ^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetfinX
Line:        102
Source: 
>     modifier multisigAdminCheck(uint256 _id, address _newaddress){
>         require(Multisig(multisigAddress).executeAdminChange(_id, _newaddress), "Not confirmed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetfinX
Line:        97
Source: 
>     modifier multisigCheck(uint256 _id){
>         require(Multisig(multisigAddress).executeChange(_id), "Not confirmed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetfinX
Line:        121
Source: 
>     function requestchangeAdmin(address _newAdmin) public contractActive onlyOwner returns (bool) {
>         ownerTransaction[msg.sender][_newAdmin] = Multisig(multisigAddress).requestOwnerChange(owner, _newAdmin);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetfinX
Line:        140
Source: 
>     function vestRequest(address _address, uint256 _amount) public contractActive onlyOwner returns (bool) {
>        vestTransaction[owner][_address][_amount] = Multisig(multisigAddress).vestingTransaction(owner, _address, _amount);
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetfinX
Line:        150
Source: 
>     function mintRequest(uint256 _amount, uint256 _time) public contractActive onlyOwner returns (bool) {
>        mintTransaction[owner][_amount][_time] = Multisig(multisigAddress).mintTransaction(owner, _amount, _time);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    AssetfinX
Line:        62
Source: 
> 	address public multisigAddress;
> 	uint256 public minfreezeTime;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AssetfinX
Line:        221
Source: 
>     function _transfer(address _from, address _to, uint256 _value) internal {
>         balances[_from] = balances[_from].sub(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_to] = balances[_to].add(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AssetfinX
Line:        222
Source: 
>         balances[_from] = balances[_from].sub(_value);
>         balances[_to] = balances[_to].add(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_from, _to, _value); 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AssetfinX
Line:        183
Source: 
>         require(_value >= 0, "Invalid value");
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetfinX
Line:        121
Source: 
>     function requestchangeAdmin(address _newAdmin) public contractActive onlyOwner returns (bool) {
>         ownerTransaction[msg.sender][_newAdmin] = Multisig(multisigAddress).requestOwnerChange(owner, _newAdmin);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetfinX
Line:        140
Source: 
>     function vestRequest(address _address, uint256 _amount) public contractActive onlyOwner returns (bool) {
>        vestTransaction[owner][_address][_amount] = Multisig(multisigAddress).vestingTransaction(owner, _address, _amount);
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetfinX
Line:        150
Source: 
>     function mintRequest(uint256 _amount, uint256 _time) public contractActive onlyOwner returns (bool) {
>        mintTransaction[owner][_amount][_time] = Multisig(multisigAddress).mintTransaction(owner, _amount, _time);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return true;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AssetfinX
Line:        54
Source: 
>     
>     string public name = "AssetfinX";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "AFX";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AssetfinX
Line:        55
Source: 
>     string public name = "AssetfinX";
>     string public symbol = "AFX";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
