[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Reward
Line:        24
Source: 
>     
>     uint public rewardAmount = 1e18; // 1 Dai
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public endTime = block.timestamp + 7 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Reward
Line:        25
Source: 
>     uint public rewardAmount = 1e18; // 1 Dai
>     uint public endTime = block.timestamp + 7 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Reward
Line:        34
Source: 
>     
>     function claim() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(poll.voted(msg.sender), "Reward::claim: Only voters can claim reward");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Reward
Line:        42
Source: 
>     
>     function end() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp > endTime, "Reward::withdraw: Voting still active");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Reward
Line:        35
Source: 
>     function claim() public {
>         require(poll.voted(msg.sender), "Reward::claim: Only voters can claim reward");
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         require(!claimed[msg.sender], "Reward::claim: Already claimed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Reward
Line:        39
Source: 
>         claimed[msg.sender] = true;
>         dai.transfer(msg.sender, rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Reward
Line:        19
Source: 
>     
>     Poll poll;
>     ^^^^^^^^^
>     IERC20 dai;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Reward
Line:        20
Source: 
>     Poll poll;
>     IERC20 dai;
>     ^^^^^^^^^^
>     address public sponsor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Reward
Line:        35
Source: 
>     function claim() public {
>         require(poll.voted(msg.sender), "Reward::claim: Only voters can claim reward");
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         require(!claimed[msg.sender], "Reward::claim: Already claimed");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reward
Line:        39
Source: 
>         claimed[msg.sender] = true;
>         dai.transfer(msg.sender, rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reward
Line:        45
Source: 
>         
>         uint balance = dai.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dai.transfer(sponsor, balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reward
Line:        46
Source: 
>         uint balance = dai.balanceOf(address(this));
>         dai.transfer(sponsor, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Reward
Line:        39
Source: 
>         claimed[msg.sender] = true;
>         dai.transfer(msg.sender, rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Reward
Line:        46
Source: 
>         uint balance = dai.balanceOf(address(this));
>         dai.transfer(sponsor, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Poll
Line:        14
Source: 
> contract Poll {
>     mapping (address => bool) public voted;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Reward
Line:        43
Source: 
>     function end() public {
>         require(block.timestamp > endTime, "Reward::withdraw: Voting still active");
>                 ^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Reward
Line:        25
Source: 
>     uint public rewardAmount = 1e18; // 1 Dai
>     uint public endTime = block.timestamp + 7 days;
>                           ^^^^^^^^^^^^^^^
>     

[0m
