pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        409
Source: 
>         token = new FixedSupplyToken();
>         token.init(msg.sender, symbol, name, decimals, totalSupply);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isChild[address(token)] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        226
Source: 
> 
>     function owner() public view returns (address) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return mOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        233
Source: 
> 
>     function transferOwnership(address _newOwner) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        238
Source: 
> 
>     function acceptOwnership() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        244
Source: 
>     }
>     function recoverTokens(address token, uint tokens) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        226
Source: 
> 
>     function owner() public view returns (address) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return mOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        233
Source: 
> 
>     function transferOwnership(address _newOwner) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        238
Source: 
> 
>     function acceptOwnership() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        244
Source: 
>     }
>     function recoverTokens(address token, uint tokens) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        287
Source: 
> 
>     function init(address tokenOwner, string memory symbol, string memory name, uint8 decimals, uint fixedSupply) public {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _initOwned(tokenOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        296
Source: 
>     }
>     function symbol() public view override returns (string memory) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        299
Source: 
>     }
>     function name() public view override returns (string memory) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        302
Source: 
>     }
>     function decimals() public view override returns (uint8) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        305
Source: 
>     }
>     function totalSupply() public view override returns (uint) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply.sub(balances[address(0)]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        308
Source: 
>     }
>     function balanceOf(address tokenOwner) public view override returns (uint balance) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[tokenOwner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        311
Source: 
>     }
>     function transfer(address to, uint tokens) public override returns (bool success) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender] = balances[msg.sender].sub(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        317
Source: 
>     }
>     function approve(address spender, uint tokens) public override returns (bool success) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        322
Source: 
>     }
>     function transferFrom(address from, address to, uint tokens) public override returns (bool success) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[from] = balances[from].sub(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        329
Source: 
>     }
>     function allowance(address tokenOwner, address spender) public view override returns (uint remaining) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[tokenOwner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixedSupplyToken
Line:        333
Source: 
>     // NOTE Only use this call with a trusted spender contract
>     function approveAndCall(address spender, uint tokens, bytes memory data) public override returns (bool success) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        233
Source: 
> 
>     function transferOwnership(address _newOwner) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        238
Source: 
> 
>     function acceptOwnership() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        244
Source: 
>     }
>     function recoverTokens(address token, uint tokens) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        390
Source: 
>     }
>     function numberOfChildren() public view returns (uint) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return children.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        393
Source: 
>     }
>     function deprecateFactory(address _newAddress) public {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        399
Source: 
>     }
>     function setMinimumFee(uint _minimumFee) public {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        404
Source: 
>     }
>     function deployTokenContract(string memory symbol, string memory name, uint8 decimals, uint totalSupply) public payable returns (FixedSupplyToken token) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value >= minimumFee);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        233
Source: 
> 
>     function transferOwnership(address _newOwner) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixedSupplyToken
Line:        311
Source: 
>     }
>     function transfer(address to, uint tokens) public override returns (bool success) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender] = balances[msg.sender].sub(tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        233
Source: 
> 
>     function transferOwnership(address _newOwner) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        393
Source: 
>     }
>     function deprecateFactory(address _newAddress) public {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        399
Source: 
>     }
>     function setMinimumFee(uint _minimumFee) public {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isOwner());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        404
Source: 
>     }
>     function deployTokenContract(string memory symbol, string memory name, uint8 decimals, uint totalSupply) public payable returns (FixedSupplyToken token) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value >= minimumFee);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixedSupplyToken
Line:        287
Source: 
> 
>     function init(address tokenOwner, string memory symbol, string memory name, uint8 decimals, uint fixedSupply) public {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _initOwned(tokenOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixedSupplyToken
Line:        308
Source: 
>     }
>     function balanceOf(address tokenOwner) public view override returns (uint balance) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[tokenOwner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixedSupplyToken
Line:        317
Source: 
>     }
>     function approve(address spender, uint tokens) public override returns (bool success) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixedSupplyToken
Line:        322
Source: 
>     }
>     function transferFrom(address from, address to, uint tokens) public override returns (bool success) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[from] = balances[from].sub(tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixedSupplyToken
Line:        329
Source: 
>     }
>     function allowance(address tokenOwner, address spender) public view override returns (uint remaining) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[tokenOwner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixedSupplyToken
Line:        333
Source: 
>     // NOTE Only use this call with a trusted spender contract
>     function approveAndCall(address spender, uint tokens, bytes memory data) public override returns (bool success) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        414
Source: 
>         if (msg.value > 0) {
>             payable(owner()).transfer(msg.value);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FixedSupplyToken
Line:        287
Source: 
> 
>     function init(address tokenOwner, string memory symbol, string memory name, uint8 decimals, uint fixedSupply) public {
>                                             ^^^^^^^^^^^^^^^^^^^^
>         _initOwned(tokenOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FixedSupplyToken
Line:        287
Source: 
> 
>     function init(address tokenOwner, string memory symbol, string memory name, uint8 decimals, uint fixedSupply) public {
>                                                                   ^^^^^^^^^^^^^^^^^^
>         _initOwned(tokenOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FixedSupplyToken
Line:        287
Source: 
> 
>     function init(address tokenOwner, string memory symbol, string memory name, uint8 decimals, uint fixedSupply) public {
>                                                                                       ^^^^^^^^^^^^^^
>         _initOwned(tokenOwner);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FixedSupplyToken
Line:        279
Source: 
> 
>     string _symbol;
>           ^^^^^^^^^
>     string  _name;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FixedSupplyToken
Line:        280
Source: 
>     string _symbol;
>     string  _name;
>           ^^^^^^^^
>     uint8 _decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FixedSupplyToken
Line:        281
Source: 
>     string  _name;
>     uint8 _decimals;
>           ^^^^^^^^^^
>     uint _totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FixedSupplyToken
Line:        282
Source: 
>     uint8 _decimals;
>     uint _totalSupply;
>           ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FixedSupplyToken
Line:        284
Source: 
> 
>     mapping(address => uint) balances;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(address => uint)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FixedSupplyToken
Line:        285
Source: 
>     mapping(address => uint) balances;
>     mapping(address => mapping(address => uint)) allowed;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        378
Source: 
> 
>     address public newAddress;
>              ^^^^^^^^^^^^^^^^^
>     uint public minimumFee = 0.1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        379
Source: 
>     address public newAddress;
>     uint public minimumFee = 0.1 ether;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => bool) public isChild;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Owned
Line:        247
Source: 
>         if (token == address(0)) {
>             payable(mOwner).transfer((tokens == 0 ? address(this).balance : tokens));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        414
Source: 
>         if (msg.value > 0) {
>             payable(owner()).transfer(msg.value);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Owned
Line:        247
Source: 
>         if (token == address(0)) {
>             payable(mOwner).transfer((tokens == 0 ? address(this).balance : tokens));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Owned
Line:        247
Source: 
>         if (token == address(0)) {
>             payable(mOwner).transfer((tokens == 0 ? address(this).balance : tokens));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        414
Source: 
>         if (msg.value > 0) {
>             payable(owner()).transfer(msg.value);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Owned
Line:        249
Source: 
>         } else {
>             IERC20(token).transfer(mOwner, tokens == 0 ? IERC20(token).balanceOf(address(this)) : tokens);
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Owned
Line:        249
Source: 
>         } else {
>             IERC20(token).transfer(mOwner, tokens == 0 ? IERC20(token).balanceOf(address(this)) : tokens);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FixedSupplyToken
Line:        336
Source: 
>         emit Approval(msg.sender, spender, tokens);
>         ApproveAndCallFallback(spender).receiveApproval(msg.sender, tokens, address(this), data);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Owned
Line:        249
Source: 
>         } else {
>             IERC20(token).transfer(mOwner, tokens == 0 ? IERC20(token).balanceOf(address(this)) : tokens);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        409
Source: 
>         token = new FixedSupplyToken();
>         token.init(msg.sender, symbol, name, decimals, totalSupply);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isChild[address(token)] = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        208
Source: 
> 
>     address private mOwner;   
>        ^^^^^^^^^^^^^^^^^^^^^^
>     bool private initialised;    

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        210
Source: 
>     bool private initialised;    
>     address public newOwner;
>        ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        208
Source: 
> 
>     address private mOwner;   
>        ^^^^^^^^^^^^^^^^^^^^^^
>     bool private initialised;    

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        209
Source: 
>     address private mOwner;   
>     bool private initialised;    
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>     address public newOwner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        210
Source: 
>     bool private initialised;    
>     address public newOwner;
>        ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FixedSupplyToken
Line:        279
Source: 
> 
>     string _symbol;
>           ^^^^^^^^^
>     string  _name;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FixedSupplyToken
Line:        280
Source: 
>     string _symbol;
>     string  _name;
>           ^^^^^^^^
>     uint8 _decimals;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FixedSupplyToken
Line:        281
Source: 
>     string  _name;
>     uint8 _decimals;
>           ^^^^^^^^^^
>     uint _totalSupply;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FixedSupplyToken
Line:        282
Source: 
>     uint8 _decimals;
>     uint _totalSupply;
>           ^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        210
Source: 
>     bool private initialised;    
>     address public newOwner;
>        ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        378
Source: 
> 
>     address public newAddress;
>              ^^^^^^^^^^^^^^^^^
>     uint public minimumFee = 0.1 ether;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Owned
Line:        209
Source: 
>     address private mOwner;   
>     bool private initialised;    
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>     address public newOwner;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        414
Source: 
>         if (msg.value > 0) {
>             payable(owner()).transfer(msg.value);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        410
Source: 
>         token.init(msg.sender, symbol, name, decimals, totalSupply);
>         isChild[address(token)] = true;
>                  ^^^^^^^^^^^^^^^^^^^^^^
>         children.push(address(token));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        411
Source: 
>         isChild[address(token)] = true;
>         children.push(address(token));
>                  ^^^^^^^^^^^^^^^^^^^^^
>         emit TokenDeployed(owner(), address(token), symbol, name, decimals, totalSupply);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        221
Source: 
>         require(!initialised);
>         mOwner = address(uint160(_owner));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         initialised = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        222
Source: 
>         mOwner = address(uint160(_owner));
>         initialised = true;
>            ^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(address(0), mOwner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        289
Source: 
>         _initOwned(tokenOwner);
>         _symbol = symbol;
>               ^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        290
Source: 
>         _symbol = symbol;
>         _name = name;
>               ^^^^^^^
>         _decimals = decimals;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        291
Source: 
>         _name = name;
>         _decimals = decimals;
>               ^^^^^^^^^^^^^^^
>         _totalSupply = fixedSupply;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        292
Source: 
>         _decimals = decimals;
>         _totalSupply = fixedSupply;
>               ^^^^^^^^^^^^^^^^^^^^^
>         balances[tokenOwner] = _totalSupply;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        293
Source: 
>         _totalSupply = fixedSupply;
>         balances[tokenOwner] = _totalSupply;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), tokenOwner, _totalSupply);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        313
Source: 
>         balances[msg.sender] = balances[msg.sender].sub(tokens);
>         balances[to] = balances[to].add(tokens);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(msg.sender, to, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        318
Source: 
>     function approve(address spender, uint tokens) public override returns (bool success) {
>         allowed[msg.sender][spender] = tokens;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        323
Source: 
>     function transferFrom(address from, address to, uint tokens) public override returns (bool success) {
>         balances[from] = balances[from].sub(tokens);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        325
Source: 
>         allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
>         balances[to] = balances[to].add(tokens);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(from, to, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FixedSupplyToken
Line:        334
Source: 
>     function approveAndCall(address spender, uint tokens, bytes memory data) public override returns (bool success) {
>         allowed[msg.sender][spender] = tokens;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Owned
Line:        249
Source: 
>         } else {
>             IERC20(token).transfer(mOwner, tokens == 0 ? IERC20(token).balanceOf(address(this)) : tokens);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        412
Source: 
>         children.push(address(token));
>         emit TokenDeployed(owner(), address(token), symbol, name, decimals, totalSupply);
>                                     ^^^^^^^
>         if (msg.value > 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BokkyPooBahsFixedSupplyTokenFactory
Line:        414
Source: 
>         if (msg.value > 0) {
>             payable(owner()).transfer(msg.value);
>                              ^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Owned
Line:        209
Source: 
>     address private mOwner;   
>     bool private initialised;    
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>     address public newOwner;

[0m
