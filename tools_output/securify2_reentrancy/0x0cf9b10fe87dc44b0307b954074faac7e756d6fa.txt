Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DssExec
Line:        186
Source: 
>         address _action = _spellAction;  // Required for assembly access
>         assembly { _tag := extcodehash(_action) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tag = _tag;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DssSpell
Line:        261
Source: 
> contract DssSpell is DssExec {
>     DssSpellAction internal action_ = new DssSpellAction();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DssExec
Line:        163
Source: 
>                 if (hour >= 21) {
>                     if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY
>                         ^^^^^^^^
>                     castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DssExec
Line:        192
Source: 
>         require(now <= expiration, "This contract has expired");
>         require(eta == 0, "This spell has already been scheduled");
>                 ^^^^^^^^
>         eta = now + PauseAbstract(pause).delay();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DssExec
Line:        163
Source: 
>                 if (hour >= 21) {
>                     if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY
>                         ^^^^^^^^
>                     castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DssExec
Line:        192
Source: 
>         require(now <= expiration, "This contract has expired");
>         require(eta == 0, "This spell has already been scheduled");
>                 ^^^^^^^^
>         eta = now + PauseAbstract(pause).delay();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExec
Line:        190
Source: 
> 
>     function schedule() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now <= expiration, "This contract has expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExec
Line:        197
Source: 
> 
>     function cast() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!done, "spell-already-cast");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        37
Source: 
> 
>     function setSurplusAuctionAmount(uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        38
Source: 
>     function setSurplusAuctionAmount(uint256) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkMinVaultAmount(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        39
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function setIlkMinVaultAmount(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssSpellAction
Line:        242
Source: 
>     // Disable Office Hours
>     function officeHours() public override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExec
Line:        190
Source: 
> 
>     function schedule() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now <= expiration, "This contract has expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExec
Line:        197
Source: 
> 
>     function cast() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!done, "spell-already-cast");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        37
Source: 
> 
>     function setSurplusAuctionAmount(uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        38
Source: 
>     function setSurplusAuctionAmount(uint256) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkMinVaultAmount(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        39
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function setIlkMinVaultAmount(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        37
Source: 
> 
>     function setSurplusAuctionAmount(uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        38
Source: 
>     function setSurplusAuctionAmount(uint256) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkMinVaultAmount(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        39
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function setIlkMinVaultAmount(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        37
Source: 
> 
>     function setSurplusAuctionAmount(uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        38
Source: 
>     function setSurplusAuctionAmount(uint256) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkMinVaultAmount(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        39
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function setIlkMinVaultAmount(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        37
Source: 
> 
>     function setSurplusAuctionAmount(uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        38
Source: 
>     function setSurplusAuctionAmount(uint256) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkMinVaultAmount(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        39
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function setIlkMinVaultAmount(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        158
Source: 
>             if (day >= 5) {
>                 castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY
>                             ^^^^^^^^^^^^^^^^^^
>                 castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        159
Source: 
>                 castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY
>                 castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        160
Source: 
>                 castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday
>                 castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC
>                             ^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        164
Source: 
>                     if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY
>                     castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        165
Source: 
>                     castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day
>                     castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC
>                                 ^^^^^^^^^^^^^^^^^^
>                 } else if (hour < 14) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        167
Source: 
>                 } else if (hour < 14) {
>                     castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day
>                                 ^^^^^^^^^^^^^^^^^^^^^
>                     castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        168
Source: 
>                     castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day
>                     castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC
>                                 ^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        158
Source: 
>             if (day >= 5) {
>                 castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY
>                             ^^^^^^^^^^^^^^^^^^
>                 castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        159
Source: 
>                 castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY
>                 castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        160
Source: 
>                 castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday
>                 castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC
>                             ^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        164
Source: 
>                     if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY
>                     castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        165
Source: 
>                     castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day
>                     castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC
>                                 ^^^^^^^^^^^^^^^^^^
>                 } else if (hour < 14) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        167
Source: 
>                 } else if (hour < 14) {
>                     castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day
>                                 ^^^^^^^^^^^^^^^^^^^^^
>                     castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DssExec
Line:        168
Source: 
>                     castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day
>                     castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC
>                                 ^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        193
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        194
Source: 
>         eta = now + PauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        200
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        193
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        194
Source: 
>         eta = now + PauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        200
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssExec
Line:        129
Source: 
> 
>     Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256                 public eta;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssExec
Line:        184
Source: 
>         sig = abi.encodeWithSignature("execute()");
>         bytes32 _tag;                    // Required for assembly access
>         ^^^^^^^^^^^^
>         address _action = _spellAction;  // Required for assembly access

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssExec
Line:        185
Source: 
>         bytes32 _tag;                    // Required for assembly access
>         address _action = _spellAction;  // Required for assembly access
>         ^^^^^^^^^^^^^^^
>         assembly { _tag := extcodehash(_action) }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpellAction
Line:        225
Source: 
>     // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/f5ecd64f82c035d8c115115ca1e562177f4cdb44/governance/votes/Executive%20vote%20-%20March%2026%2C%202021.md -q -O - 2>/dev/null)"
>     string public constant description =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         "2021-03-26 MakerDAO Executive Spell | Hash: 0x735b9ffaa585c6e1d6fb2a4768278ef426402aab0a101b491fb4048c72e4ae27";

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> // SPDX-License-Identifier: AGPL-3.0-or-later
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssAction
Line:        85
Source: 
>         if (officeHours()) {
>             uint day = (block.timestamp / 1 days + 3) % 7;
>             ^^^^^^^^
>             require(day < 5, "Can only be cast on a weekday");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssAction
Line:        87
Source: 
>             require(day < 5, "Can only be cast on a weekday");
>             uint hour = block.timestamp / 1 hours % 24;
>             ^^^^^^^^^
>             require(hour >= 14 && hour < 21, "Outside office hours");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        238
Source: 
> 
>     uint256 constant THOUSAND = 10**3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant MILLION  = 10**6;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        239
Source: 
>     uint256 constant THOUSAND = 10**3;
>     uint256 constant MILLION  = 10**6;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssExec
Line:        151
Source: 
> 
>         if (SpellAction(action).officeHours()) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 day    = (castTime / 1 days + 3) % 7;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssExec
Line:        193
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssExec
Line:        151
Source: 
> 
>         if (SpellAction(action).officeHours()) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 day    = (castTime / 1 days + 3) % 7;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssExec
Line:        193
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        144
Source: 
>     function officeHours() external view returns (bool) {
>         return SpellAction(action).officeHours();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        178
Source: 
>     constructor(string memory _description, uint256 _expiration, address _spellAction) public {
>         pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         description = _description;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        194
Source: 
>         eta = now + PauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        200
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        144
Source: 
>     function officeHours() external view returns (bool) {
>         return SpellAction(action).officeHours();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        178
Source: 
>     constructor(string memory _description, uint256 _expiration, address _spellAction) public {
>         pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         description = _description;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        194
Source: 
>         eta = now + PauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        200
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        262
Source: 
>     DssSpellAction internal action_ = new DssSpellAction();
>     constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}
>                           ^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DssExec
Line:        187
Source: 
>         assembly { _tag := extcodehash(_action) }
>         tag = _tag;
>               ^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        130
Source: 
>     Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);
>     uint256                 public eta;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes                   public sig;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        131
Source: 
>     uint256                 public eta;
>     bytes                   public sig;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool                    public done;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        132
Source: 
>     bytes                   public sig;
>     bool                    public done;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32       immutable public tag;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        133
Source: 
>     bool                    public done;
>     bytes32       immutable public tag;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address       immutable public action;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        134
Source: 
>     bytes32       immutable public tag;
>     address       immutable public action;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256       immutable public expiration;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        135
Source: 
>     address       immutable public action;
>     uint256       immutable public expiration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     PauseAbstract immutable public pause;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        136
Source: 
>     uint256       immutable public expiration;
>     PauseAbstract immutable public pause;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        141
Source: 
>     // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"
>     string                  public description;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        130
Source: 
>     Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);
>     uint256                 public eta;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes                   public sig;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        131
Source: 
>     uint256                 public eta;
>     bytes                   public sig;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool                    public done;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        132
Source: 
>     bytes                   public sig;
>     bool                    public done;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32       immutable public tag;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        133
Source: 
>     bool                    public done;
>     bytes32       immutable public tag;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address       immutable public action;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        134
Source: 
>     bytes32       immutable public tag;
>     address       immutable public action;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256       immutable public expiration;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        135
Source: 
>     address       immutable public action;
>     uint256       immutable public expiration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     PauseAbstract immutable public pause;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        136
Source: 
>     uint256       immutable public expiration;
>     PauseAbstract immutable public pause;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        141
Source: 
>     // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"
>     string                  public description;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DssExecLib
Line:        34
Source: 
>     /*****************/
>     uint256 constant internal WAD      = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal RAD      = 10 ** 45;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DssExecLib
Line:        35
Source: 
>     uint256 constant internal WAD      = 10 ** 18;
>     uint256 constant internal RAD      = 10 ** 45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DssExecLib
Line:        34
Source: 
>     /*****************/
>     uint256 constant internal WAD      = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal RAD      = 10 ** 45;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DssExecLib
Line:        35
Source: 
>     uint256 constant internal WAD      = 10 ** 18;
>     uint256 constant internal RAD      = 10 ** 45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DssExecLib
Line:        34
Source: 
>     /*****************/
>     uint256 constant internal WAD      = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal RAD      = 10 ** 45;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DssExecLib
Line:        35
Source: 
>     uint256 constant internal WAD      = 10 ** 18;
>     uint256 constant internal RAD      = 10 ** 45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssExec
Line:        193
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssExec
Line:        199
Source: 
>         require(!done, "spell-already-cast");
>         done = true;
>         ^^^^^^^^^^^
>         pause.exec(action, tag, sig, eta);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssExec
Line:        193
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssExec
Line:        199
Source: 
>         require(!done, "spell-already-cast");
>         done = true;
>         ^^^^^^^^^^^
>         pause.exec(action, tag, sig, eta);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DssExec
Line:        200
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExec
Line:        141
Source: 
>     // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"
>     string                  public description;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExecLib
Line:        34
Source: 
>     /*****************/
>     uint256 constant internal WAD      = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal RAD      = 10 ** 45;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExecLib
Line:        35
Source: 
>     uint256 constant internal WAD      = 10 ** 18;
>     uint256 constant internal RAD      = 10 ** 45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssSpellAction
Line:        225
Source: 
>     // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/f5ecd64f82c035d8c115115ca1e562177f4cdb44/governance/votes/Executive%20vote%20-%20March%2026%2C%202021.md -q -O - 2>/dev/null)"
>     string public constant description =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         "2021-03-26 MakerDAO Executive Spell | Hash: 0x735b9ffaa585c6e1d6fb2a4768278ef426402aab0a101b491fb4048c72e4ae27";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExecLib
Line:        34
Source: 
>     /*****************/
>     uint256 constant internal WAD      = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal RAD      = 10 ** 45;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExecLib
Line:        35
Source: 
>     uint256 constant internal WAD      = 10 ** 18;
>     uint256 constant internal RAD      = 10 ** 45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExec
Line:        141
Source: 
>     // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"
>     string                  public description;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExecLib
Line:        34
Source: 
>     /*****************/
>     uint256 constant internal WAD      = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal RAD      = 10 ** 45;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExecLib
Line:        35
Source: 
>     uint256 constant internal WAD      = 10 ** 18;
>     uint256 constant internal RAD      = 10 ** 45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DssExec
Line:        149
Source: 
>         require(eta != 0, "DssExec/spell-not-scheduled");
>         castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY
>                    ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DssExec
Line:        149
Source: 
>         require(eta != 0, "DssExec/spell-not-scheduled");
>         castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY
>                                            ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DssAction
Line:        85
Source: 
>         if (officeHours()) {
>             uint day = (block.timestamp / 1 days + 3) % 7;
>                         ^^^^^^^^^^^^^^^
>             require(day < 5, "Can only be cast on a weekday");

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DssAction
Line:        87
Source: 
>             require(day < 5, "Can only be cast on a weekday");
>             uint hour = block.timestamp / 1 hours % 24;
>                         ^^^^^^^^^^^^^^^
>             require(hour >= 14 && hour < 21, "Outside office hours");

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DssExec
Line:        149
Source: 
>         require(eta != 0, "DssExec/spell-not-scheduled");
>         castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY
>                    ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DssExec
Line:        149
Source: 
>         require(eta != 0, "DssExec/spell-not-scheduled");
>         castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY
>                                            ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DssSpell
Line:        262
Source: 
>     DssSpellAction internal action_ = new DssSpellAction();
>     constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}
>                                                  ^^^^^^^^^^^^^^^
> }

[0m
