Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenId
Line:        104
Source: 
>         bytes memory _tokenIdBytes = abi.encodePacked(_market, uint8(_outcome));
>         assembly {
>         ^^^^^^^^^^
>             _tokenId := mload(add(_tokenIdBytes, add(0x20, 0)))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenId
Line:        117
Source: 
>     function unpackTokenId(uint256 _tokenId) internal pure returns (address _market, uint256 _outcome) {
>         assembly {
>         ^^^^^^^^^^
>             _market := shr(96,  and(_tokenId, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        77
Source: 
> 
>     function getInitialized() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return initialized;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CancelOrder
Line:        751
Source: 
> 
>     function initialize(IAugur _augur, IAugurTrading _augurTrading) public beforeInitialized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         endInitialization();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        754
Source: 
>         augur = _augur;
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
>         shareToken = IShareToken(_augur.lookup("ShareToken"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        755
Source: 
>         cash = ICash(_augur.lookup("Cash"));
>         shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != IShareToken(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        759
Source: 
>         augurTrading = _augurTrading;
>         orders = IOrders(_augurTrading.lookup("Orders"));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(orders != IOrders(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        761
Source: 
>         require(orders != IOrders(0));
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        801
Source: 
>             address _creator;
>             (_moneyEscrowed, _sharesEscrowed, _type, _market, _outcome, _creator) = _orders.getOrderDataForCancel(_orderId);
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // Check that the order ID is correct and that the sender owns the order

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        808
Source: 
>         // Clear the order first
>         _orders.removeOrder(_orderId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        812
Source: 
> 
>         IUniverse _universe = _market.getUniverse();
>                               ^^^^^^^^^^^^^^^^^^^^^
>         augurTrading.logOrderCanceled(_universe, _market, _sender, _moneyEscrowed, _sharesEscrowed, _orderId);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        813
Source: 
>         IUniverse _universe = _market.getUniverse();
>         augurTrading.logOrderCanceled(_universe, _market, _sender, _moneyEscrowed, _sharesEscrowed, _orderId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitLoss.recordFrozenFundChange(_universe, _market, _sender, _outcome, -int256(_moneyEscrowed));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        814
Source: 
>         augurTrading.logOrderCanceled(_universe, _market, _sender, _moneyEscrowed, _sharesEscrowed, _orderId);
>         profitLoss.recordFrozenFundChange(_universe, _market, _sender, _outcome, -int256(_moneyEscrowed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        822
Source: 
>             if (_type == Order.Types.Bid) {
>                 uint256 _numberOfOutcomes = _market.getNumberOfOutcomes();
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256[] memory _shortOutcomes = new uint256[](_numberOfOutcomes - 1);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        835
Source: 
>                 uint256[] memory _tokenIds = TokenId.getTokenIds(_market, _shortOutcomes);
>                 shareToken.unsafeBatchTransferFrom(address(augurTrading), _sender, _tokenIds, _values);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        843
Source: 
>         if (_moneyEscrowed > 0) {
>             require(cash.transferFrom(address(augurTrading), _sender, _moneyEscrowed));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CancelOrder
Line:        837
Source: 
>             } else {
>                 shareToken.unsafeTransferFrom(address(augurTrading), _sender, TokenId.getTokenId(_market, _outcome), _sharesEscrowed);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CancelOrder
Line:        771
Source: 
>      */
>     function cancelOrder(bytes32 _orderId) external nonReentrant returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return cancelOrderInternal(msg.sender, _orderId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CancelOrder
Line:        751
Source: 
> 
>     function initialize(IAugur _augur, IAugurTrading _augurTrading) public beforeInitialized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         endInitialization();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CancelOrder
Line:        754
Source: 
>         augur = _augur;
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
>         shareToken = IShareToken(_augur.lookup("ShareToken"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CancelOrder
Line:        755
Source: 
>         cash = ICash(_augur.lookup("Cash"));
>         shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != IShareToken(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CancelOrder
Line:        759
Source: 
>         augurTrading = _augurTrading;
>         orders = IOrders(_augurTrading.lookup("Orders"));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(orders != IOrders(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CancelOrder
Line:        761
Source: 
>         require(orders != IOrders(0));
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    CancelOrder
Line:        754
Source: 
>         augur = _augur;
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
>         shareToken = IShareToken(_augur.lookup("ShareToken"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    CancelOrder
Line:        755
Source: 
>         cash = ICash(_augur.lookup("Cash"));
>         shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != IShareToken(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    CancelOrder
Line:        759
Source: 
>         augurTrading = _augurTrading;
>         orders = IOrders(_augurTrading.lookup("Orders"));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(orders != IOrders(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    CancelOrder
Line:        761
Source: 
>         require(orders != IOrders(0));
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenId
Line:        103
Source: 
>     function getTokenId(IMarket _market, uint256 _outcome) internal pure returns (uint256 _tokenId) {
>         bytes memory _tokenIdBytes = abi.encodePacked(_market, uint8(_outcome));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenId
Line:        111
Source: 
>         _tokenIds = new uint256[](_outcomes.length);
>         for (uint256 _i = 0; _i < _outcomes.length; _i++) {
>              ^^^^^^^^^^
>             _tokenIds[_i] = getTokenId(_market, _outcomes[_i]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        628
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        655
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             ^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        676
Source: 
>         getOrderId(_orderData, _orders);
>         uint256[] memory _uints = new uint256[](5);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         _uints[0] = _orderData.amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        682
Source: 
>         _uints[4] = _orderData.sharesEscrowed;
>         bytes32[] memory _bytes32s = new bytes32[](4);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bytes32s[0] = _orderData.betterOrderId;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        706
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        707
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        724
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        790
Source: 
> 
>         IOrders _orders = orders;
>         ^^^^^^^^^^^^^^^
>         // Look up the order the sender wants to cancel

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        792
Source: 
>         // Look up the order the sender wants to cancel
>         uint256 _moneyEscrowed;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _sharesEscrowed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        793
Source: 
>         uint256 _moneyEscrowed;
>         uint256 _sharesEscrowed;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         Order.Types _type;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        794
Source: 
>         uint256 _sharesEscrowed;
>         Order.Types _type;
>         ^^^^^^^^^^^^^^^^^
>         IMarket _market;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        795
Source: 
>         Order.Types _type;
>         IMarket _market;
>         ^^^^^^^^^^^^^^^
>         uint256 _outcome;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        796
Source: 
>         IMarket _market;
>         uint256 _outcome;
>         ^^^^^^^^^^^^^^^^
>         // Check creator in inner scope to reduce stack depth

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        800
Source: 
>             /* solium-disable indentation */
>             address _creator;
>             ^^^^^^^^^^^^^^^^
>             (_moneyEscrowed, _sharesEscrowed, _type, _market, _outcome, _creator) = _orders.getOrderDataForCancel(_orderId);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        812
Source: 
> 
>         IUniverse _universe = _market.getUniverse();
>         ^^^^^^^^^^^^^^^^^^^
>         augurTrading.logOrderCanceled(_universe, _market, _sender, _moneyEscrowed, _sharesEscrowed, _orderId);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        822
Source: 
>             if (_type == Order.Types.Bid) {
>                 uint256 _numberOfOutcomes = _market.getNumberOfOutcomes();
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256[] memory _shortOutcomes = new uint256[](_numberOfOutcomes - 1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        823
Source: 
>                 uint256 _numberOfOutcomes = _market.getNumberOfOutcomes();
>                 uint256[] memory _shortOutcomes = new uint256[](_numberOfOutcomes - 1);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256[] memory _values = new uint256[](_numberOfOutcomes - 1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        824
Source: 
>                 uint256[] memory _shortOutcomes = new uint256[](_numberOfOutcomes - 1);
>                 uint256[] memory _values = new uint256[](_numberOfOutcomes - 1);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 _indexOutcome = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        825
Source: 
>                 uint256[] memory _values = new uint256[](_numberOfOutcomes - 1);
>                 uint256 _indexOutcome = 0;
>                 ^^^^^^^^^^^^^^^^^^^^^
>                 for (uint256 _i = 0; _i < _numberOfOutcomes - 1; _i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        826
Source: 
>                 uint256 _indexOutcome = 0;
>                 for (uint256 _i = 0; _i < _numberOfOutcomes - 1; _i++) {
>                      ^^^^^^^^^^
>                     if (_i == _outcome) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CancelOrder
Line:        834
Source: 
>                 }
>                 uint256[] memory _tokenIds = TokenId.getTokenIds(_market, _shortOutcomes);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 shareToken.unsafeBatchTransferFrom(address(augurTrading), _sender, _tokenIds, _values);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CancelOrder
Line:        755
Source: 
>         cash = ICash(_augur.lookup("Cash"));
>         shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != IShareToken(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CancelOrder
Line:        759
Source: 
>         augurTrading = _augurTrading;
>         orders = IOrders(_augurTrading.lookup("Orders"));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(orders != IOrders(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CancelOrder
Line:        761
Source: 
>         require(orders != IOrders(0));
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CancelOrder
Line:        801
Source: 
>             address _creator;
>             (_moneyEscrowed, _sharesEscrowed, _type, _market, _outcome, _creator) = _orders.getOrderDataForCancel(_orderId);
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // Check that the order ID is correct and that the sender owns the order

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CancelOrder
Line:        812
Source: 
> 
>         IUniverse _universe = _market.getUniverse();
>                               ^^^^^^^^^^^^^^^^^^^^^
>         augurTrading.logOrderCanceled(_universe, _market, _sender, _moneyEscrowed, _sharesEscrowed, _orderId);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CancelOrder
Line:        822
Source: 
>             if (_type == Order.Types.Bid) {
>                 uint256 _numberOfOutcomes = _market.getNumberOfOutcomes();
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256[] memory _shortOutcomes = new uint256[](_numberOfOutcomes - 1);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CancelOrder
Line:        843
Source: 
>         if (_moneyEscrowed > 0) {
>             require(cash.transferFrom(address(augurTrading), _sender, _moneyEscrowed));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CancelOrder
Line:        754
Source: 
>         augur = _augur;
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
>         shareToken = IShareToken(_augur.lookup("ShareToken"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CancelOrder
Line:        808
Source: 
>         // Clear the order first
>         _orders.removeOrder(_orderId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CancelOrder
Line:        813
Source: 
>         IUniverse _universe = _market.getUniverse();
>         augurTrading.logOrderCanceled(_universe, _market, _sender, _moneyEscrowed, _sharesEscrowed, _orderId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitLoss.recordFrozenFundChange(_universe, _market, _sender, _outcome, -int256(_moneyEscrowed));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CancelOrder
Line:        814
Source: 
>         augurTrading.logOrderCanceled(_universe, _market, _sender, _moneyEscrowed, _sharesEscrowed, _orderId);
>         profitLoss.recordFrozenFundChange(_universe, _market, _sender, _outcome, -int256(_moneyEscrowed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CancelOrder
Line:        835
Source: 
>                 uint256[] memory _tokenIds = TokenId.getTokenIds(_market, _shortOutcomes);
>                 shareToken.unsafeBatchTransferFrom(address(augurTrading), _sender, _tokenIds, _values);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CancelOrder
Line:        837
Source: 
>             } else {
>                 shareToken.unsafeTransferFrom(address(augurTrading), _sender, TokenId.getTokenId(_market, _outcome), _sharesEscrowed);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CancelOrder
Line:        744
Source: 
> 
>     IAugur public augur;
>     ^^^^^^^^^^^^^^^^^^^
>     IAugurTrading public augurTrading;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CancelOrder
Line:        745
Source: 
>     IAugur public augur;
>     IAugurTrading public augurTrading;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IOrders public orders;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CancelOrder
Line:        746
Source: 
>     IAugurTrading public augurTrading;
>     IOrders public orders;
>     ^^^^^^^^^^^^^^^^^^^^^
>     ICash public cash;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CancelOrder
Line:        747
Source: 
>     IOrders public orders;
>     ICash public cash;
>     ^^^^^^^^^^^^^^^^^
>     IShareToken public shareToken;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CancelOrder
Line:        748
Source: 
>     ICash public cash;
>     IShareToken public shareToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IProfitLoss public profitLoss;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CancelOrder
Line:        749
Source: 
>     IShareToken public shareToken;
>     IProfitLoss public profitLoss;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        74
Source: 
>     function endInitialization() internal beforeInitialized {
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CancelOrder
Line:        753
Source: 
>         endInitialization();
>         augur = _augur;
>         ^^^^^^^^^^^^^^
>         cash = ICash(_augur.lookup("Cash"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CancelOrder
Line:        754
Source: 
>         augur = _augur;
>         cash = ICash(_augur.lookup("Cash"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         shareToken = IShareToken(_augur.lookup("ShareToken"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CancelOrder
Line:        755
Source: 
>         cash = ICash(_augur.lookup("Cash"));
>         shareToken = IShareToken(_augur.lookup("ShareToken"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != IShareToken(0));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CancelOrder
Line:        758
Source: 
> 
>         augurTrading = _augurTrading;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         orders = IOrders(_augurTrading.lookup("Orders"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CancelOrder
Line:        759
Source: 
>         augurTrading = _augurTrading;
>         orders = IOrders(_augurTrading.lookup("Orders"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(orders != IOrders(0));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CancelOrder
Line:        761
Source: 
>         require(orders != IOrders(0));
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuard
Line:        94
Source: 
>         require(!rentrancyLock);
>         rentrancyLock = true;
>         ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuard
Line:        96
Source: 
>         _;
>         rentrancyLock = false;
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuard
Line:        94
Source: 
>         require(!rentrancyLock);
>         rentrancyLock = true;
>         ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuard
Line:        96
Source: 
>         _;
>         rentrancyLock = false;
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenId
Line:        112
Source: 
>         for (uint256 _i = 0; _i < _outcomes.length; _i++) {
>             _tokenIds[_i] = getTokenId(_market, _outcomes[_i]);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        201
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        205
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        622
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        624
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        628
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        635
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        655
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        656
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        687
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenId
Line:        112
Source: 
>         for (uint256 _i = 0; _i < _outcomes.length; _i++) {
>             _tokenIds[_i] = getTokenId(_market, _outcomes[_i]);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        201
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        205
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        622
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        624
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        628
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        635
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        655
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        656
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        687
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenId
Line:        112
Source: 
>         for (uint256 _i = 0; _i < _outcomes.length; _i++) {
>             _tokenIds[_i] = getTokenId(_market, _outcomes[_i]);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        201
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        205
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        622
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        624
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        628
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        635
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        655
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        656
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        687
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CancelOrder
Line:        808
Source: 
>         // Clear the order first
>         _orders.removeOrder(_orderId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CancelOrder
Line:        813
Source: 
>         IUniverse _universe = _market.getUniverse();
>         augurTrading.logOrderCanceled(_universe, _market, _sender, _moneyEscrowed, _sharesEscrowed, _orderId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitLoss.recordFrozenFundChange(_universe, _market, _sender, _outcome, -int256(_moneyEscrowed));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CancelOrder
Line:        814
Source: 
>         augurTrading.logOrderCanceled(_universe, _market, _sender, _moneyEscrowed, _sharesEscrowed, _orderId);
>         profitLoss.recordFrozenFundChange(_universe, _market, _sender, _outcome, -int256(_moneyEscrowed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenId
Line:        112
Source: 
>         for (uint256 _i = 0; _i < _outcomes.length; _i++) {
>             _tokenIds[_i] = getTokenId(_market, _outcomes[_i]);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        201
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        205
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        622
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        624
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        628
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        635
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        655
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        656
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        687
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        86
Source: 
>      */
>     bool private rentrancyLock = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CancelOrder
Line:        744
Source: 
> 
>     IAugur public augur;
>     ^^^^^^^^^^^^^^^^^^^
>     IAugurTrading public augurTrading;

[0m
