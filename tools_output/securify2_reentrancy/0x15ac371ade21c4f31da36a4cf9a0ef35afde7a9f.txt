[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Utils
Line:        69
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             size := extcodesize(contract_address)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        66
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        66
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UserDeposit
Line:        189
Source: 
>         // Actual transfer.
>         require(token.transferFrom(msg.sender, address(this), added_deposit), "tokens didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UserDeposit
Line:        257
Source: 
> 
>         require(token.transfer(msg.sender, withdrawable), "tokens didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Token
Line:        45
Source: 
>     // Optionally implemented function to show the number of decimals for the token
>     function decimals() external view returns (uint8 decimals);
>                                                ^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        78
Source: 
> contract UserDeposit is Utils {
>     uint constant public withdraw_delay = 100;  // time before withdraw is allowed in blocks
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        84
Source: 
>     // Trusted contracts (can execute `transfer`)
>     address public msc_address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public one_to_n_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        85
Source: 
>     address public msc_address;
>     address public one_to_n_address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        89
Source: 
>     // doing a transfer or withdrawing tokens will not decrease total_deposit!
>     mapping(address => uint256) public total_deposit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Current user's balance, ignoring planned withdraws

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        92
Source: 
>     mapping(address => uint256) public balances;
>     mapping(address => WithdrawPlan) public withdraw_plans;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        95
Source: 
>     // The sum of all balances
>     uint256 public whole_balance = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Deposit limit for this whole contract

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        97
Source: 
>     // Deposit limit for this whole contract
>     uint256 public whole_balance_limit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        176
Source: 
>         // Calculate the actual amount of tokens that will be transferred
>         uint256 added_deposit = new_total_deposit - total_deposit[beneficiary];
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        244
Source: 
>     {
>         WithdrawPlan storage withdraw_plan = withdraw_plans[msg.sender];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= withdraw_plan.amount, "withdrawing more than planned");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        268
Source: 
>     {
>         WithdrawPlan storage withdraw_plan = withdraw_plans[owner];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (withdraw_plan.amount > balances[owner]) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UserDeposit
Line:        136
Source: 
>         token = Token(_token_address);
>         require(token.totalSupply() > 0, "token has no total supply"); // Check if the contract is indeed a token contract
>                 ^^^^^^^^^^^^^^^^^^^
>         // check and set the whole balance limit

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UserDeposit
Line:        189
Source: 
>         // Actual transfer.
>         require(token.transferFrom(msg.sender, address(this), added_deposit), "tokens didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UserDeposit
Line:        257
Source: 
> 
>         require(token.transfer(msg.sender, withdrawable), "tokens didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Utils
Line:        73
Source: 
> 
>         return size > 0;
>                ^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UserDeposit
Line:        84
Source: 
>     // Trusted contracts (can execute `transfer`)
>     address public msc_address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public one_to_n_address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UserDeposit
Line:        85
Source: 
>     address public msc_address;
>     address public one_to_n_address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UserDeposit
Line:        97
Source: 
>     // Deposit limit for this whole contract
>     uint256 public whole_balance_limit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UserDeposit
Line:        155
Source: 
>         require(contractExists(_msc_address), "MS contract has no code");
>         msc_address = _msc_address;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UserDeposit
Line:        160
Source: 
>         require(contractExists(_one_to_n_address), "OneToN has no code");
>         one_to_n_address = _one_to_n_address;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UserDeposit
Line:        183
Source: 
>         require(whole_balance + added_deposit >= whole_balance, "overflowing deposit");
>         whole_balance += added_deposit;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UserDeposit
Line:        178
Source: 
> 
>         balances[beneficiary] += added_deposit;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         total_deposit[beneficiary] += added_deposit;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UserDeposit
Line:        179
Source: 
>         balances[beneficiary] += added_deposit;
>         total_deposit[beneficiary] += added_deposit;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
