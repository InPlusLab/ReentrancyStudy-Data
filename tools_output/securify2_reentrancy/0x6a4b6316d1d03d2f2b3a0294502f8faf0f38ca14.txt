Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    _HERTZ
Line:        181
Source: 
> // ------------------------------------------------------------------------------
>     function totalSupply() public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    _HERTZ
Line:        189
Source: 
> // ------------------------------------------------------------------------------
>     function currentSupply() public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _currentSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    _HERTZ
Line:        197
Source: 
> // ------------------------------------------------------------------------------
>     function balanceOf(address tokenOwner) public view returns(uint balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[tokenOwner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    _HERTZ
Line:        207
Source: 
> // ------------------------------------------------------------------------
>     function transfer(address to, uint tokens) public returns(bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balances[msg.sender] >= tokens && tokens > 0, "Zero transfer or not enough funds");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    _HERTZ
Line:        238
Source: 
> // ------------------------------------------------------------------------
>     function approve(address spender, uint tokens) public returns(bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    _HERTZ
Line:        254
Source: 
> // ------------------------------------------------------------------------
>     function transferFrom(address from, address to, uint tokens) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balances[from] >= tokens && allowed[from][msg.sender] >= tokens && tokens > 0, "Zero transfer or not enough (allowed) funds");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    _HERTZ
Line:        283
Source: 
> // ----------------------------------------------------------------------------------------------------
>     function allowance(address tokenOwner, address spender) public view returns(uint remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[tokenOwner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    _HERTZ
Line:        292
Source: 
> // ------------------------------------------------------------------------
>     function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    _HERTZ
Line:        379
Source: 
> // ------------------------------------------------------------------------ 
>     function sellAllTokens() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         purchaseEth(balances[msg.sender]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    _HERTZ
Line:        197
Source: 
> // ------------------------------------------------------------------------------
>     function balanceOf(address tokenOwner) public view returns(uint balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[tokenOwner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    _HERTZ
Line:        238
Source: 
> // ------------------------------------------------------------------------
>     function approve(address spender, uint tokens) public returns(bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    _HERTZ
Line:        283
Source: 
> // ----------------------------------------------------------------------------------------------------
>     function allowance(address tokenOwner, address spender) public view returns(uint remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[tokenOwner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    _HERTZ
Line:        292
Source: 
> // ------------------------------------------------------------------------
>     function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        68
Source: 
>     function mul(uint a, uint b) internal pure returns(uint c) {
>         c = a * b;
>             ^^^^^
>         require(a == 0 || c / a == b);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    _HERTZ
Line:        371
Source: 
>         _currentSupply = _currentSupply.sub(tokens);
>         address(msg.sender).transfer(getWei);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         weiDeposited = weiDeposited.sub(getWei);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    _HERTZ
Line:        142
Source: 
> // ----------------------------------------------------------------------------
> contract _HERTZ is ERC20Interface, Owned {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    _HERTZ
Line:        150
Source: 
>     uint8 public decimals;
>     uint private _DECIMALSCONSTANT;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public _totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    _HERTZ
Line:        151
Source: 
>     uint private _DECIMALSCONSTANT;
>     uint public _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public _currentSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    _HERTZ
Line:        152
Source: 
>     uint public _totalSupply;
>     uint public _currentSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool constructorLocked = false;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >= 0.5 .0 < 0.7 .0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    _HERTZ
Line:        153
Source: 
>     uint public _currentSupply;
>     bool constructorLocked = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint) balances;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    _HERTZ
Line:        154
Source: 
>     bool constructorLocked = false;
>     mapping(address => uint) balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(address => uint)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    _HERTZ
Line:        155
Source: 
>     mapping(address => uint) balances;
>     mapping(address => mapping(address => uint)) allowed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public weiDeposited;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    _HERTZ
Line:        371
Source: 
>         _currentSupply = _currentSupply.sub(tokens);
>         address(msg.sender).transfer(getWei);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         weiDeposited = weiDeposited.sub(getWei);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    _HERTZ
Line:        371
Source: 
>         _currentSupply = _currentSupply.sub(tokens);
>         address(msg.sender).transfer(getWei);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         weiDeposited = weiDeposited.sub(getWei);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    _HERTZ
Line:        295
Source: 
>         emit Approval(msg.sender, spender, tokens);
>         ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    _HERTZ
Line:        156
Source: 
>     mapping(address => mapping(address => uint)) allowed;
>     uint public weiDeposited;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    _HERTZ
Line:        371
Source: 
>         _currentSupply = _currentSupply.sub(tokens);
>         address(msg.sender).transfer(getWei);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         weiDeposited = weiDeposited.sub(getWei);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    _HERTZ
Line:        226
Source: 
>         if (address(to) != address(0)) {
>             balances[to] = balances[to].add(tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (address(to) == address(0)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    _HERTZ
Line:        228
Source: 
>         } else if (address(to) == address(0)) {
>             _currentSupply = _currentSupply.sub(tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    _HERTZ
Line:        269
Source: 
>     function _transferFrom(address from, address to, uint tokens) internal returns(bool) {
>         balances[from] = balances[from].sub(tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    _HERTZ
Line:        272
Source: 
>         if (address(to) != address(0)) {
>             balances[to] = balances[to].add(tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (address(to) == address(0)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    _HERTZ
Line:        274
Source: 
>         } else if (address(to) == address(0)) {
>             _currentSupply = _currentSupply.sub(tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    _HERTZ
Line:        354
Source: 
>         balances[msg.sender] = balances[msg.sender].add(tokens);
>         _currentSupply = _currentSupply.add(tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    _HERTZ
Line:        356
Source: 
> 
>         weiDeposited = weiDeposited.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    _HERTZ
Line:        370
Source: 
>         balances[msg.sender] = balances[msg.sender].sub(tokens);
>         _currentSupply = _currentSupply.sub(tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(msg.sender).transfer(getWei);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    _HERTZ
Line:        372
Source: 
>         address(msg.sender).transfer(getWei);
>         weiDeposited = weiDeposited.sub(getWei);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    _HERTZ
Line:        239
Source: 
>     function approve(address spender, uint tokens) public returns(bool success) {
>         allowed[msg.sender][spender] = tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    _HERTZ
Line:        293
Source: 
>     function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool) {
>         allowed[msg.sender][spender] = tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Owned
Line:        125
Source: 
> contract Owned {
>     address public owner;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    _HERTZ
Line:        147
Source: 
>     
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     string public name;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    _HERTZ
Line:        148
Source: 
>     string public symbol;
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
