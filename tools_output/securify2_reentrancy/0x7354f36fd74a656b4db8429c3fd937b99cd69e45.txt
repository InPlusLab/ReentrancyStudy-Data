Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        58
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        77
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        86
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        58
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        77
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        86
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Staking
Line:        505
Source: 
>     */
>     function deposit(uint256 amount) external override nonReentrant returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.number < frozenFrom, "deposits not allowed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Staking
Line:        519
Source: 
>     */
>     function withdrawAndRedeem(uint256 amount) external override nonReentrant returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(deposited[msg.sender] >= amount, "deposit too small");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Staking
Line:        466
Source: 
>     */
>     function getUserDeposit(address user) external view override returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return deposited[user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Staking
Line:        493
Source: 
>     */
>     function initializeNewRound(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _frozenFrom,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Staking
Line:        569
Source: 
>     */
>     function accumulated(address account) public view override returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(deposited[account] == 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Staking
Line:        512
Source: 
>         emit Deposited(msg.sender, amount);
>         require(IERC20(tokenToStake).transferFrom(msg.sender, address(this), amount),"deposit() failed.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Staking
Line:        525
Source: 
>             totalDepositedDynamic = totalDepositedDynamic.sub(amount);
>             require(IERC20(tokenToStake).transfer(msg.sender, amount),"withdrawAndRedeem() failed.");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Staking
Line:        533
Source: 
>             require(_redeem(msg.sender, accumulated), "Failed to redeem tokens");
>             require(IERC20(tokenToStake).transfer(msg.sender, amount),"withdrawAndRedeem() failed.");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Staking
Line:        528
Source: 
>             require(block.number >= frozenUntil, "withdraws not allowed");
>             uint256 accumulated = accumulated(msg.sender);
>             ^^^^^^^^^^^^^^^^^^^
>             deposited[msg.sender] = deposited[msg.sender].sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Staking
Line:        542
Source: 
>     function redeem() external override nonReentrant returns (bool) {
>         uint256 accumulated = accumulated(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^
>         Redeemed(msg.sender, accumulated);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1
Source: 
> pragma solidity ^0.6.2;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Staking
Line:        512
Source: 
>         emit Deposited(msg.sender, amount);
>         require(IERC20(tokenToStake).transferFrom(msg.sender, address(this), amount),"deposit() failed.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Staking
Line:        525
Source: 
>             totalDepositedDynamic = totalDepositedDynamic.sub(amount);
>             require(IERC20(tokenToStake).transfer(msg.sender, amount),"withdrawAndRedeem() failed.");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Staking
Line:        533
Source: 
>             require(_redeem(msg.sender, accumulated), "Failed to redeem tokens");
>             require(IERC20(tokenToStake).transfer(msg.sender, amount),"withdrawAndRedeem() failed.");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Staking
Line:        561
Source: 
>         if(amount > 0) {
>             IERC20(issuingToken).transfer(account, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Staking
Line:        401
Source: 
>     address internal issuingToken;
>     uint256 internal frozenFrom;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal frozenUntil;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Staking
Line:        402
Source: 
>     uint256 internal frozenFrom;
>     uint256 internal frozenUntil;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal dripPerBlock;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Staking
Line:        403
Source: 
>     uint256 internal frozenUntil;
>     uint256 internal dripPerBlock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal totalDeposited;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Staking
Line:        404
Source: 
>     uint256 internal dripPerBlock;
>     uint256 internal totalDeposited;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal totalDepositedDynamic;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Staking
Line:        405
Source: 
>     uint256 internal totalDeposited;
>     uint256 internal totalDepositedDynamic;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) internal deposited;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        357
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _notEntered = false;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Staking
Line:        508
Source: 
>         deposited[msg.sender] = deposited[msg.sender].add(amount);
>         totalDeposited = totalDeposited.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalDepositedDynamic = totalDepositedDynamic.add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Staking
Line:        509
Source: 
>         totalDeposited = totalDeposited.add(amount);
>         totalDepositedDynamic = totalDepositedDynamic.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         latestRedeem[msg.sender] = frozenFrom;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        363
Source: 
>         // https://eips.ethereum.org/EIPS/eip-2200)
>         _notEntered = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        357
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _notEntered = false;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Staking
Line:        552
Source: 
>         if (block.number >= frozenUntil) {
>             latestRedeem[account] = frozenUntil;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Staking
Line:        555
Source: 
>             if(block.number > frozenFrom){
>                 latestRedeem[account] = block.number;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Staking
Line:        557
Source: 
>             } else {
>                 latestRedeem[account] = frozenFrom;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        357
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _notEntered = false;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        363
Source: 
>         // https://eips.ethereum.org/EIPS/eip-2200)
>         _notEntered = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Staking
Line:        561
Source: 
>         if(amount > 0) {
>             IERC20(issuingToken).transfer(account, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        333
Source: 
> contract ReentrancyGuard {
>     bool private _notEntered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
