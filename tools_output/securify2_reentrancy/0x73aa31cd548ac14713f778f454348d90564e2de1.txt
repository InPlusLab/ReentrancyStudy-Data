Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ubountyCreator
Line:        33
Source: 
> 
>     string public version = "ubounties-v0.7";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ubountyCreator
Line:        53
Source: 
> 
>     address public devcash = 0x0fca8Fdb0FB115A33BAadEc6e7A141FFC1bC7d5a;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public admin;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ubountyCreator
Line:        55
Source: 
>     address public admin;
>     address payable public collector = 0xB1F445F64CDDe81d58c26ab1C340FE2a82F55A4C;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        84
Source: 
> 
>     function getSubmission(uint ubountyIndex, uint submissionIndex) public view returns(string memory,address, bool,uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        92
Source: 
> 
>     function getRevision(uint ubountyIndex,uint submissionIndex, uint revisionIndex) public view returns (string memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ubounties[ubountyIndex].submissions[submissionIndex].revisions[revisionIndex];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        99
Source: 
>     uint[] public freeBC; // list of unused bounty chests
>     function numBC() public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return bCList.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        105
Source: 
>     address payable[] public userList;
>     function numUsers() public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return userList.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        116
Source: 
> 
>     function postOpenBounty(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        168
Source: 
> 
>     function postPersonalBounty(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        226
Source: 
> 
>     function awardOpenBounty(uint ubountyIndex, address payable hunter) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender]==ubounties[ubountyIndex].creatorIndex,"You are not the bounty publisher");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        246
Source: 
> 
>     function awardPersonalBounty(string memory name, string memory description, address payable hunter, uint tokenAmount) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (users[msg.sender]==0){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        270
Source: 
> 
>     function submit(uint ubountyIndex, string memory submissionString) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ubounties[ubountyIndex].hunterIndex==0 || msg.sender==userList[ubounties[ubountyIndex].hunterIndex],"You are not the bounty hunter");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        286
Source: 
> 
>     function revise(uint ubountyIndex, uint32 submissionIndex, string memory revisionString) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==userList[ubounties[ubountyIndex].submissions[submissionIndex].submitterIndex],"You are not the submitter");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        297
Source: 
> 
>     function approve(uint ubountyIndex,uint submissionIndex,string memory feedback) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender]==ubounties[ubountyIndex].creatorIndex,"You are not the bounty publisher");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        309
Source: 
> 
>     function reject(uint ubountyIndex,uint submissionIndex,string memory feedback) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender]==ubounties[ubountyIndex].creatorIndex,"You are not the bounty publisher");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        318
Source: 
> 
>     function requestRevision(uint ubountyIndex,uint submissionIndex,string memory feedback) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender]==ubounties[ubountyIndex].creatorIndex,"You are not the bounty publisher");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        345
Source: 
> 
>     function reclaim(uint ubountyIndex) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender]==ubounties[ubountyIndex].creatorIndex,"You are not the bounty creator");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        370
Source: 
> 
>     function reclaimable(uint ubountyIndex) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(now>ubounties[ubountyIndex].deadline){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        387
Source: 
> 
>     function createBountyChest() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bountyChest C = new bountyChest();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        395
Source: 
> 
>     function setFee(uint _fee) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(admin==msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ubountyCreator
Line:        401
Source: 
> 
>       function setWaiver(uint _waiver) public {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(admin==msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        163
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        164
Source: 
>             collector.transfer(_fee);
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit created(numUbounties++,available,amount,weiAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        408
Source: 
>     function satisfiesWaiver(address poster) public view returns(bool){
>         if(ERC20(devcash).balanceOf(poster)>=waiver){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        221
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        222
Source: 
>             collector.transfer(_fee);
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit created(numUbounties++,available,amount,weiAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        236
Source: 
> 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hunter.transfer(weiRewardAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        237
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        264
Source: 
> 
>         hunter.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(msg.sender,hunter,tokenAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        265
Source: 
>         hunter.transfer(weiAmount);
>         ERC20(devcash).transferFrom(msg.sender,hunter,tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit rewarded(numUbounties,hunter,tokenAmount,weiAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        334
Source: 
> 
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        335
Source: 
>         hunter.transfer(weiRewardAmount);
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        354
Source: 
> 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],msg.sender,bountyAmount(ubountyIndex));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(weiAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ubountyCreator
Line:        355
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],msg.sender,bountyAmount(ubountyIndex));
>         msg.sender.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ubountyCreator
Line:        380
Source: 
>     function bountyAmount(uint ubountyIndex) public view returns(uint){
>         return(ERC20(devcash).balanceOf(bCList[ubounties[ubountyIndex].bountyChestIndex]));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ubountyCreator
Line:        226
Source: 
> 
>     function awardOpenBounty(uint ubountyIndex, address payable hunter) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender]==ubounties[ubountyIndex].creatorIndex,"You are not the bounty publisher");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ubountyCreator
Line:        379
Source: 
> 
>     function bountyAmount(uint ubountyIndex) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return(ERC20(devcash).balanceOf(bCList[ubounties[ubountyIndex].bountyChestIndex]));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ubountyCreator
Line:        395
Source: 
> 
>     function setFee(uint _fee) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(admin==msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ubountyCreator
Line:        401
Source: 
> 
>       function setWaiver(uint _waiver) public {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(admin==msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ubountyCreator
Line:        407
Source: 
> 
>     function satisfiesWaiver(address poster) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(ERC20(devcash).balanceOf(poster)>=waiver){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        84
Source: 
> 
>     function getSubmission(uint ubountyIndex, uint submissionIndex) public view returns(string memory,address, bool,uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        92
Source: 
> 
>     function getRevision(uint ubountyIndex,uint submissionIndex, uint revisionIndex) public view returns (string memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ubounties[ubountyIndex].submissions[submissionIndex].revisions[revisionIndex];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        116
Source: 
> 
>     function postOpenBounty(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        168
Source: 
> 
>     function postPersonalBounty(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        246
Source: 
> 
>     function awardPersonalBounty(string memory name, string memory description, address payable hunter, uint tokenAmount) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (users[msg.sender]==0){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        270
Source: 
> 
>     function submit(uint ubountyIndex, string memory submissionString) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ubounties[ubountyIndex].hunterIndex==0 || msg.sender==userList[ubounties[ubountyIndex].hunterIndex],"You are not the bounty hunter");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        286
Source: 
> 
>     function revise(uint ubountyIndex, uint32 submissionIndex, string memory revisionString) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==userList[ubounties[ubountyIndex].submissions[submissionIndex].submitterIndex],"You are not the submitter");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        297
Source: 
> 
>     function approve(uint ubountyIndex,uint submissionIndex,string memory feedback) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender]==ubounties[ubountyIndex].creatorIndex,"You are not the bounty publisher");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        309
Source: 
> 
>     function reject(uint ubountyIndex,uint submissionIndex,string memory feedback) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender]==ubounties[ubountyIndex].creatorIndex,"You are not the bounty publisher");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        318
Source: 
> 
>     function requestRevision(uint ubountyIndex,uint submissionIndex,string memory feedback) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender]==ubounties[ubountyIndex].creatorIndex,"You are not the bounty publisher");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        370
Source: 
> 
>     function reclaimable(uint ubountyIndex) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(now>ubounties[ubountyIndex].deadline){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ubountyCreator
Line:        383
Source: 
> 
>     function weiBountyAmount(uint ubountyIndex) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return(ubounties[ubountyIndex].weiAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ubountyCreator
Line:        164
Source: 
>             collector.transfer(_fee);
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit created(numUbounties++,available,amount,weiAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ubountyCreator
Line:        222
Source: 
>             collector.transfer(_fee);
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit created(numUbounties++,available,amount,weiAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ubountyCreator
Line:        265
Source: 
>         hunter.transfer(weiAmount);
>         ERC20(devcash).transferFrom(msg.sender,hunter,tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit rewarded(numUbounties,hunter,tokenAmount,weiAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ubountyCreator
Line:        163
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ubountyCreator
Line:        221
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ubountyCreator
Line:        264
Source: 
> 
>         hunter.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(msg.sender,hunter,tokenAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ubountyCreator
Line:        334
Source: 
> 
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ubountyCreator
Line:        237
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ubountyCreator
Line:        355
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],msg.sender,bountyAmount(ubountyIndex));
>         msg.sender.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    bountyChest
Line:        25
Source: 
> 
> contract bountyChest{
> ^^^^^^^^^^^^^^^^^^^^^
>     constructor () public {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        31
Source: 
> 
> contract ubountyCreator{
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        35
Source: 
> 
>     event created(uint uBountyIndex,uint bountiesAvailable, uint tokenAmount, uint weiAmount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        37
Source: 
> 
>     event submitted(uint uBountyIndex, uint submissionIndex);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event revised(uint uBountyIndex,uint submissionIndex, uint revisionIndex);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        38
Source: 
>     event submitted(uint uBountyIndex, uint submissionIndex);
>     event revised(uint uBountyIndex,uint submissionIndex, uint revisionIndex);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        40
Source: 
> 
>     event approved(uint uBountyIndex, uint submissionIndex, string feedback);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event rejected(uint uBountyIndex, uint submissionIndex, string feedback);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        41
Source: 
>     event approved(uint uBountyIndex, uint submissionIndex, string feedback);
>     event rejected(uint uBountyIndex, uint submissionIndex, string feedback);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event revisionRequested(uint uBountyIndex, uint submissionIndex, string feedback);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        42
Source: 
>     event rejected(uint uBountyIndex, uint submissionIndex, string feedback);
>     event revisionRequested(uint uBountyIndex, uint submissionIndex, string feedback);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        44
Source: 
> 
>     event rewarded(uint uBountyIndex, address Hunter, uint tokenAmount,uint weiAmount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        46
Source: 
> 
>     event reclaimed(uint uBountyIndex, uint tokenAmount, uint weiAmount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        48
Source: 
> 
>     event completed(uint uBountyIndex);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        50
Source: 
> 
>     event feeChange(uint oldFee, uint newFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event waiverChange(uint oldWaiver, uint newWaiver);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        51
Source: 
>     event feeChange(uint oldFee, uint newFee);
>     event waiverChange(uint oldWaiver, uint newWaiver);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        60
Source: 
> 
>     struct submission{
>     ^^^^^^^^^^^^^^^^^^
>         uint32 submitterIndex;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        68
Source: 
> 
>     struct ubounty{
>     ^^^^^^^^^^^^^^^
>         uint8 available;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        125
Source: 
> 
>             uint _fee;
>             ^^^^^^^^^
>             if(satisfiesWaiver(msg.sender)){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        142
Source: 
>             } else{
>                 bountyChest C = new bountyChest();
>                 ^^^^^^^^^^^^^
>                 bCAddress = address(C);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        178
Source: 
> 
>             uint _fee;
>             ^^^^^^^^^
>             if(satisfiesWaiver(msg.sender)){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        200
Source: 
>             } else{
>                 bountyChest C = new bountyChest();
>                 ^^^^^^^^^^^^^
>                 bCAddress = address(C);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ubountyCreator
Line:        388
Source: 
>     function createBountyChest() public {
>         bountyChest C = new bountyChest();
>         ^^^^^^^^^^^^^
>         address bCAddress = address(C);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ubountyCreator
Line:        96
Source: 
> 
>     mapping(address=>uint32) bountyChests;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address[] public bCList; //list of bounty chest addresses

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ubountyCreator
Line:        57
Source: 
> 
>     uint public fee = 1000000000000000;
>                       ^^^^^^^^^^^^^^^^
>     uint public waiver = 2500000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ubountyCreator
Line:        58
Source: 
>     uint public fee = 1000000000000000;
>     uint public waiver = 2500000000000;
>                          ^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ubountyCreator
Line:        163
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ubountyCreator
Line:        221
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ubountyCreator
Line:        237
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ubountyCreator
Line:        334
Source: 
> 
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ubountyCreator
Line:        355
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],msg.sender,bountyAmount(ubountyIndex));
>         msg.sender.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ubountyCreator
Line:        163
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ubountyCreator
Line:        221
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ubountyCreator
Line:        237
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ubountyCreator
Line:        264
Source: 
> 
>         hunter.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(msg.sender,hunter,tokenAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ubountyCreator
Line:        334
Source: 
> 
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ubountyCreator
Line:        355
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],msg.sender,bountyAmount(ubountyIndex));
>         msg.sender.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ubountyCreator
Line:        163
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ubountyCreator
Line:        221
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ubountyCreator
Line:        237
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ubountyCreator
Line:        264
Source: 
> 
>         hunter.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(msg.sender,hunter,tokenAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ubountyCreator
Line:        334
Source: 
> 
>         hunter.transfer(weiRewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ubountyCreator
Line:        355
Source: 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],msg.sender,bountyAmount(ubountyIndex));
>         msg.sender.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ubountyCreator
Line:        408
Source: 
>     function satisfiesWaiver(address poster) public view returns(bool){
>         if(ERC20(devcash).balanceOf(poster)>=waiver){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bountyChest
Line:        27
Source: 
>     constructor () public {
>         ERC20Approve(0x0fca8Fdb0FB115A33BAadEc6e7A141FFC1bC7d5a).approve(msg.sender,2**256-1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ubountyCreator
Line:        164
Source: 
>             collector.transfer(_fee);
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit created(numUbounties++,available,amount,weiAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ubountyCreator
Line:        222
Source: 
>             collector.transfer(_fee);
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit created(numUbounties++,available,amount,weiAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ubountyCreator
Line:        236
Source: 
> 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hunter.transfer(weiRewardAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ubountyCreator
Line:        380
Source: 
>     function bountyAmount(uint ubountyIndex) public view returns(uint){
>         return(ERC20(devcash).balanceOf(bCList[ubounties[ubountyIndex].bountyChestIndex]));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ubountyCreator
Line:        265
Source: 
>         hunter.transfer(weiAmount);
>         ERC20(devcash).transferFrom(msg.sender,hunter,tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit rewarded(numUbounties,hunter,tokenAmount,weiAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ubountyCreator
Line:        335
Source: 
>         hunter.transfer(weiRewardAmount);
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ubountyCreator
Line:        354
Source: 
> 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],msg.sender,bountyAmount(ubountyIndex));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(weiAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ubountyCreator
Line:        82
Source: 
>     mapping(uint => ubounty) public ubounties;
>     uint public numUbounties;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ubountyCreator
Line:        163
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ubountyCreator
Line:        221
Source: 
> 
>             collector.transfer(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ubountyCreator
Line:        264
Source: 
> 
>         hunter.transfer(weiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(devcash).transferFrom(msg.sender,hunter,tokenAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        150
Source: 
> 
>             ubounties[numUbounties].creatorIndex = users[msg.sender];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].available = available;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        151
Source: 
>             ubounties[numUbounties].creatorIndex = users[msg.sender];
>             ubounties[numUbounties].available = available;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].name = name;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        152
Source: 
>             ubounties[numUbounties].available = available;
>             ubounties[numUbounties].name = name;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].description = description;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        153
Source: 
>             ubounties[numUbounties].name = name;
>             ubounties[numUbounties].description = description;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].bountyChestIndex = bountyChests[bCAddress];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        154
Source: 
>             ubounties[numUbounties].description = description;
>             ubounties[numUbounties].bountyChestIndex = bountyChests[bCAddress];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].weiAmount = weiAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        155
Source: 
>             ubounties[numUbounties].bountyChestIndex = bountyChests[bCAddress];
>             ubounties[numUbounties].weiAmount = weiAmount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        165
Source: 
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             emit created(numUbounties++,available,amount,weiAmount);
>                          ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        208
Source: 
> 
>             ubounties[numUbounties].creatorIndex = users[msg.sender];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].hunterIndex = users[hunter];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        209
Source: 
>             ubounties[numUbounties].creatorIndex = users[msg.sender];
>             ubounties[numUbounties].hunterIndex = users[hunter];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].available = 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        210
Source: 
>             ubounties[numUbounties].hunterIndex = users[hunter];
>             ubounties[numUbounties].available = 1;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].name = name;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        211
Source: 
>             ubounties[numUbounties].available = 1;
>             ubounties[numUbounties].name = name;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].description = description;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        212
Source: 
>             ubounties[numUbounties].name = name;
>             ubounties[numUbounties].description = description;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].bountyChestIndex = bountyChests[bCAddress];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        213
Source: 
>             ubounties[numUbounties].description = description;
>             ubounties[numUbounties].bountyChestIndex = bountyChests[bCAddress];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ubounties[numUbounties].weiAmount = weiAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        214
Source: 
>             ubounties[numUbounties].bountyChestIndex = bountyChests[bCAddress];
>             ubounties[numUbounties].weiAmount = weiAmount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(deadline==0){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        223
Source: 
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             emit created(numUbounties++,available,amount,weiAmount);
>                          ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ubountyCreator
Line:        267
Source: 
>         emit rewarded(numUbounties,hunter,tokenAmount,weiAmount);
>         emit completed(numUbounties++);
>                        ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ubountyCreator
Line:        257
Source: 
> 
>         ubounties[numUbounties].creatorIndex = users[msg.sender];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ubounties[numUbounties].hunterIndex = users[hunter];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ubountyCreator
Line:        258
Source: 
>         ubounties[numUbounties].creatorIndex = users[msg.sender];
>         ubounties[numUbounties].hunterIndex = users[hunter];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ubounties[numUbounties].name = name;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ubountyCreator
Line:        259
Source: 
>         ubounties[numUbounties].hunterIndex = users[hunter];
>         ubounties[numUbounties].name = name;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ubounties[numUbounties].description = description;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ubountyCreator
Line:        260
Source: 
>         ubounties[numUbounties].name = name;
>         ubounties[numUbounties].description = description;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ubountyCreator
Line:        390
Source: 
>         address bCAddress = address(C);
>         bountyChests[bCAddress] = uint32(bCList.length);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         freeBC.push(bCList.length);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ubountyCreator
Line:        391
Source: 
>         bountyChests[bCAddress] = uint32(bCList.length);
>         freeBC.push(bCList.length);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bCList.push(bCAddress);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ubountyCreator
Line:        392
Source: 
>         freeBC.push(bCList.length);
>         bCList.push(bCAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    bountyChest
Line:        27
Source: 
>     constructor () public {
>         ERC20Approve(0x0fca8Fdb0FB115A33BAadEc6e7A141FFC1bC7d5a).approve(msg.sender,2**256-1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ubountyCreator
Line:        164
Source: 
>             collector.transfer(_fee);
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit created(numUbounties++,available,amount,weiAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ubountyCreator
Line:        222
Source: 
>             collector.transfer(_fee);
>             ERC20(devcash).transferFrom(msg.sender,bCAddress,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit created(numUbounties++,available,amount,weiAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ubountyCreator
Line:        236
Source: 
> 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hunter.transfer(weiRewardAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ubountyCreator
Line:        265
Source: 
>         hunter.transfer(weiAmount);
>         ERC20(devcash).transferFrom(msg.sender,hunter,tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit rewarded(numUbounties,hunter,tokenAmount,weiAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ubountyCreator
Line:        335
Source: 
>         hunter.transfer(weiRewardAmount);
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],hunter,rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ubountyCreator
Line:        354
Source: 
> 
>         ERC20(devcash).transferFrom(bCList[ubounties[ubountyIndex].bountyChestIndex],msg.sender,bountyAmount(ubountyIndex));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(weiAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ubountyCreator
Line:        33
Source: 
> 
>     string public version = "ubounties-v0.7";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
