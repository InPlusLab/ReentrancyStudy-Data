Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    KittycoinPresale
Line:        278
Source: 
>     using SafeMath for uint256;
>     uint256 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public TOKEN;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    KittycoinPresale
Line:        281
Source: 
>     
>     uint256 minLimit = 10000000000000000; // min 0.01 ETH
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 maxLimit = 10 ether; // max 10 ETH per account

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    KittycoinPresale
Line:        282
Source: 
>     uint256 minLimit = 10000000000000000; // min 0.01 ETH
>     uint256 maxLimit = 10 ether; // max 10 ETH per account
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    KittycoinPresale
Line:        284
Source: 
>     
>     uint256 rate = 8000000; // 1 ETH = 8,000,000 KTY
>     ^^^^^^^^^^^^^^^^^^^^^^
>     struct User{

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    KittycoinPresale
Line:        357
Source: 
>         require(block.timestamp > saleStart, "Presale has not started");
>         require(saleEnd == 0, "Presale has ended");
>                 ^^^^^^^^^^^^
>         require(IERC20(TOKEN).balanceOf(address(this)) > 0, "Insufficient tokens for Presale");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    KittycoinPresale
Line:        341
Source: 
>     function endSale() external onlyOwner{
>         require(saleEnd == 0, "Presale is already ended");
>                 ^^^^^^^^^^^^
>         saleEnd = block.timestamp;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        265
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0), "Invalid address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KittycoinPresale
Line:        350
Source: 
>     
>     function claimPresale(uint256 claimAmount) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(claimAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KittycoinPresale
Line:        345
Source: 
>     
>     function getUnSoldTokens(uint256 amount) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp > saleEnd, "Wait for Presale to end");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    KittycoinPresale
Line:        351
Source: 
>     function claimPresale(uint256 claimAmount) external onlyOwner{
>         owner.transfer(claimAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         presaleClaimed = presaleClaimed.add(claimAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittycoinPresale
Line:        279
Source: 
>     uint256 public decimals = 18;
>     address public TOKEN;
>     ^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittycoinPresale
Line:        332
Source: 
>     
>     function ClaimTokens() external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(saleEnd > 0 && block.timestamp > saleEnd + 30 days, "Presale tokens are available to withdraw 30 days after presale ends");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KittycoinPresale
Line:        281
Source: 
>     
>     uint256 minLimit = 10000000000000000; // min 0.01 ETH
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 maxLimit = 10 ether; // max 10 ETH per account

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KittycoinPresale
Line:        282
Source: 
>     uint256 minLimit = 10000000000000000; // min 0.01 ETH
>     uint256 maxLimit = 10 ether; // max 10 ETH per account
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KittycoinPresale
Line:        284
Source: 
>     
>     uint256 rate = 8000000; // 1 ETH = 8,000,000 KTY
>     ^^^^^^^^^^^^^^^^^^^^^^
>     struct User{

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KittycoinPresale
Line:        290
Source: 
>     
>     uint256 saleStart;
>     ^^^^^^^^^^^^^^^^^
>     uint256 saleEnd = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KittycoinPresale
Line:        291
Source: 
>     uint256 saleStart;
>     uint256 saleEnd = 0;
>     ^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    KittycoinPresale
Line:        281
Source: 
>     
>     uint256 minLimit = 10000000000000000; // min 0.01 ETH
>                        ^^^^^^^^^^^^^^^^^
>     uint256 maxLimit = 10 ether; // max 10 ETH per account

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    KittycoinPresale
Line:        284
Source: 
>     
>     uint256 rate = 8000000; // 1 ETH = 8,000,000 KTY
>                    ^^^^^^^
>     struct User{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    KittycoinPresale
Line:        351
Source: 
>     function claimPresale(uint256 claimAmount) external onlyOwner{
>         owner.transfer(claimAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         presaleClaimed = presaleClaimed.add(claimAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    KittycoinPresale
Line:        351
Source: 
>     function claimPresale(uint256 claimAmount) external onlyOwner{
>         owner.transfer(claimAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         presaleClaimed = presaleClaimed.add(claimAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    KittycoinPresale
Line:        351
Source: 
>     function claimPresale(uint256 claimAmount) external onlyOwner{
>         owner.transfer(claimAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         presaleClaimed = presaleClaimed.add(claimAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KittycoinPresale
Line:        358
Source: 
>         require(saleEnd == 0, "Presale has ended");
>         require(IERC20(TOKEN).balanceOf(address(this)) > 0, "Insufficient tokens for Presale");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KittycoinPresale
Line:        337
Source: 
>         users[msg.sender].tokens = 0;
>         require(IERC20(TOKEN).transfer(msg.sender, toClaim), "Error sending tokens");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KittycoinPresale
Line:        347
Source: 
>         require(block.timestamp > saleEnd, "Wait for Presale to end");
>         require(IERC20(TOKEN).transfer(msg.sender, amount), "Error sending tokens");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    KittycoinPresale
Line:        294
Source: 
>     mapping(address => User) public users;
>     uint256 public totalPresale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public presaleClaimed;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    KittycoinPresale
Line:        295
Source: 
>     uint256 public totalPresale;
>     uint256 public presaleClaimed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KittycoinPresale
Line:        313
Source: 
>         purchaseToken(msg.value, tokens);
>         totalPresale = totalPresale.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KittycoinPresale
Line:        324
Source: 
>     function purchaseToken(uint256 _amount, uint256 _tokens) private {
>         users[msg.sender].tokens = users[msg.sender].tokens.add(_tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenPurchased(msg.sender, _amount, _tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KittycoinPresale
Line:        317
Source: 
>     function _preValidatePurchase() private {
>         users[msg.sender].presale = users[msg.sender].presale.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].presale >= minLimit, "Amount lower than min limit");

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    KittycoinPresale
Line:        278
Source: 
>     using SafeMath for uint256;
>     uint256 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public TOKEN;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittycoinPresale
Line:        305
Source: 
>         TOKEN = _tokenAddress;
>         saleStart = block.timestamp; // sale will be started once the contract is deployed
>                     ^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittycoinPresale
Line:        356
Source: 
>     modifier saleIsOpen{
>         require(block.timestamp > saleStart, "Presale has not started");
>                 ^^^^^^^^^^^^^^^
>         require(saleEnd == 0, "Presale has ended");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittycoinPresale
Line:        333
Source: 
>     function ClaimTokens() external {
>         require(saleEnd > 0 && block.timestamp > saleEnd + 30 days, "Presale tokens are available to withdraw 30 days after presale ends");
>                                ^^^^^^^^^^^^^^^
>         uint256 toClaim = users[msg.sender].tokens;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittycoinPresale
Line:        342
Source: 
>         require(saleEnd == 0, "Presale is already ended");
>         saleEnd = block.timestamp;
>                   ^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittycoinPresale
Line:        346
Source: 
>     function getUnSoldTokens(uint256 amount) external onlyOwner{
>         require(block.timestamp > saleEnd, "Wait for Presale to end");
>                 ^^^^^^^^^^^^^^^
>         require(IERC20(TOKEN).transfer(msg.sender, amount), "Error sending tokens");

[0m
