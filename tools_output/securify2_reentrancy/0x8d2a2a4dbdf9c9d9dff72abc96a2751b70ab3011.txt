Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        372
Source: 
>      */
>     function registryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _registryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        398
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        423
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        438
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        482
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        398
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        423
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        438
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        482
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        630
Source: 
>     /// @return contractRegistry is the registry contract address
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        398
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        423
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        438
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        482
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        630
Source: 
>     /// @return contractRegistry is the registry contract address
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        398
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        423
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        438
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        482
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        630
Source: 
>     /// @return contractRegistry is the registry contract address
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        398
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        423
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        438
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        482
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        630
Source: 
>     /// @return contractRegistry is the registry contract address
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        423
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        622
Source: 
>     /// @param newContractRegistry is the new registry contract 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        634
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        423
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        622
Source: 
>     /// @param newContractRegistry is the new registry contract 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        634
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        423
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        622
Source: 
>     /// @param newContractRegistry is the new registry contract 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        634
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        423
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        622
Source: 
>     /// @param newContractRegistry is the new registry contract 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        634
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Certification
Line:        762
Source: 
>     /// @param guardian is the guardian to query
>     function isGuardianCertified(address guardian) external override view returns (bool isCertified) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return guardianCertification[guardian];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Certification
Line:        770
Source: 
>     /// @param isCertified bool indication whether the guardian is certified
>     function setGuardianCertification(address guardian, bool isCertified) external override onlyCertificationManager onlyWhenActive {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         guardianCertification[guardian] = isCertified;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        623
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        503
Source: 
>     /// @param _registryAdmin is the registry admin address
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
>         require(address(_contractRegistry) != address(0), "_contractRegistry cannot be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        634
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>                               ^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Lockable
Line:        682
Source: 
>     /// @param _registryAdmin is the registry admin address
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ManagedContract
Line:        726
Source: 
>     /// @param _registryAdmin is the registry admin address
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Certification
Line:        754
Source: 
>     /// @param _registryAdmin is the registry admin address
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) ManagedContract(_contractRegistry, _registryAdmin) public {}
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        535
Source: 
>     function isManager(string memory role) internal view returns (bool) {
>         IContractRegistry _contractRegistry = contractRegistry;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        321
Source: 
> 
> pragma solidity ^0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Certification
Line:        743
Source: 
> contract Certification is ICertification, ManagedContract {
>     mapping(address => bool) guardianCertification;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Certification
Line:        780
Source: 
> 
>     IElections electionsContract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        623
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        536
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        623
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        536
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        623
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        536
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        570
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Certification
Line:        773
Source: 
>         emit GuardianCertificationUpdate(guardian, isCertified);
>         electionsContract.guardianCertificationChanged(guardian, isCertified);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        356
Source: 
>     address private _registryAdmin;
>     address private _pendingRegistryAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        498
Source: 
> 
>     IContractRegistry private contractRegistry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lockable
Line:        677
Source: 
> 
>     bool public locked;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        356
Source: 
>     address private _registryAdmin;
>     address private _pendingRegistryAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        498
Source: 
> 
>     IContractRegistry private contractRegistry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lockable
Line:        677
Source: 
> 
>     bool public locked;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        356
Source: 
>     address private _registryAdmin;
>     address private _pendingRegistryAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        498
Source: 
> 
>     IContractRegistry private contractRegistry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lockable
Line:        677
Source: 
> 
>     bool public locked;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Certification
Line:        780
Source: 
> 
>     IElections electionsContract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        409
Source: 
>         emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);
>         _registryAdmin = newRegistryAdmin;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Certification
Line:        785
Source: 
>     function refreshContracts() external override {
>         electionsContract = IElections(getElectionsContract());
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        536
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        554
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        558
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        562
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        566
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        570
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        574
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        578
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        582
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        586
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        590
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        594
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        598
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        602
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        606
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        610
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        554
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        558
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        562
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        566
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        570
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        574
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        578
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        582
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        586
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        590
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        594
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        598
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        602
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        606
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        610
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        554
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        558
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        562
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        566
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        570
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        574
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        578
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        582
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        586
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        590
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        594
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        598
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        602
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        606
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        610
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        554
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        558
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        562
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        566
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        574
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        578
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        582
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        586
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        590
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        594
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        598
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        602
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        606
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        610
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
