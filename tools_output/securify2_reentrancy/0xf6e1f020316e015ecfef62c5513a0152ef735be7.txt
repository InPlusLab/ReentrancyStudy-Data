Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    RewardXUnicPeriodically
Line:        114
Source: 
>         performData;
>         farmer.rewardXUNIC();
>         ^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ProxyFarmer
Line:        73
Source: 
> contract ProxyFarmer {
>     function rewardXUNIC() public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        94
Source: 
>     
>     function changeInterval(uint updateInterval) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(owner == msg.sender, "Only the owner can change the update interval.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        94
Source: 
>     
>     function changeInterval(uint updateInterval) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(owner == msg.sender, "Only the owner can change the update interval.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        100
Source: 
> 
>     function checkUpkeep(bytes calldata checkData) external override returns (bool upkeepNeeded, bytes memory performData) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        108
Source: 
> 
>     function performUpkeep(bytes calldata performData) external override {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastTimeStamp = block.timestamp;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        83
Source: 
>     uint public lastTimeStamp;
>     ProxyFarmer farmer;
>     ^^^^^^^^^^^^^^^^^^
>     address owner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        84
Source: 
>     ProxyFarmer farmer;
>     address owner;
>     ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        114
Source: 
>         performData;
>         farmer.rewardXUNIC();
>         ^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        109
Source: 
>     function performUpkeep(bytes calldata performData) external override {
>         lastTimeStamp = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        89
Source: 
>       interval = updateInterval;
>       lastTimeStamp = block.timestamp;
>                       ^^^^^^^^^^^^^^^
>       farmer = ProxyFarmer(_t);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        97
Source: 
>       interval = updateInterval;
>       lastTimeStamp = block.timestamp;
>                       ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        101
Source: 
>     function checkUpkeep(bytes calldata checkData) external override returns (bool upkeepNeeded, bytes memory performData) {
>         upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
>                         ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    RewardXUnicPeriodically
Line:        109
Source: 
>     function performUpkeep(bytes calldata performData) external override {
>         lastTimeStamp = block.timestamp;
>                         ^^^^^^^^^^^^^^^
> 

[0m
