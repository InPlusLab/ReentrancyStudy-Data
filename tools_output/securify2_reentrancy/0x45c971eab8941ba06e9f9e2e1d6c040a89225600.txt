Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Violation
Contract:    AddressConfig
Line:        307
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        16
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        86
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        112
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        121
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        16
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        86
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        112
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        121
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        121
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        159
Source: 
> 
> 	function validateIllegalAddress(address _addr) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr != address(0), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        163
Source: 
> 
> 	function validateGroup(address _addr, address _groupAddr) external view {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        167
Source: 
> 
> 	function validateGroups(
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        178
Source: 
> 
> 	function validateAddress(address _addr, address _target) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr == _target, errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        182
Source: 
> 
> 	function validateAddresses(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        193
Source: 
> 
> 	function validate3Addresses(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        254
Source: 
> 
> 	function setAllocator(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocator = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        258
Source: 
> 
> 	function setAllocatorStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocatorStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        262
Source: 
> 
> 	function setWithdraw(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdraw = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        266
Source: 
> 
> 	function setWithdrawStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdrawStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        270
Source: 
> 
> 	function setMarketFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        274
Source: 
> 
> 	function setMarketGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        278
Source: 
> 
> 	function setPropertyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        282
Source: 
> 
> 	function setPropertyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        286
Source: 
> 
> 	function setMetricsFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        290
Source: 
> 
> 	function setMetricsGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        294
Source: 
> 
> 	function setPolicyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        298
Source: 
> 
> 	function setPolicyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        302
Source: 
> 
> 	function setPolicySet(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policySet = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        306
Source: 
> 
> 	function setPolicy(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, policyFactory);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        311
Source: 
> 
> 	function setToken(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		token = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        315
Source: 
> 
> 	function setLockup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        319
Source: 
> 
> 	function setLockupStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockupStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        323
Source: 
> 
> 	function setVoteTimes(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimes = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        327
Source: 
> 
> 	function setVoteTimesStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimesStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        331
Source: 
> 
> 	function setVoteCounter(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounter = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        335
Source: 
> 
> 	function setVoteCounterStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounterStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetricsFactory
Line:        406
Source: 
> 
> 	function create(address _property) external returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetricsFactory
Line:        417
Source: 
> 
> 	function destroy(address _metrics) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		IMetricsGroup metricsGroup = IMetricsGroup(config().metricsGroup());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MetricsFactory
Line:        404
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Killable
Line:        10
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressValidator
Line:        157
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AddressValidator
Line:        157
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        164
Source: 
> 	function validateGroup(address _addr, address _groupAddr) external view {
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        172
Source: 
> 	) external view {
> 		if (IGroup(_groupAddr1).isGroup(_addr)) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			return;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        175
Source: 
> 		}
> 		require(IGroup(_groupAddr2).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MetricsFactory
Line:        419
Source: 
> 		IMetricsGroup metricsGroup = IMetricsGroup(config().metricsGroup());
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressConfig
Line:        307
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        407
Source: 
> 	function create(address _property) external returns (address) {
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        407
Source: 
> 	function create(address _property) external returns (address) {
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        410
Source: 
> 		Metrics metrics = new Metrics(msg.sender, _property);
> 		IMetricsGroup metricsGroup = IMetricsGroup(config().metricsGroup());
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
> 		address metricsAddress = address(metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        412
Source: 
> 		address metricsAddress = address(metrics);
> 		metricsGroup.addGroup(metricsAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Create(msg.sender, metricsAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        418
Source: 
> 	function destroy(address _metrics) external {
> 		IMetricsGroup metricsGroup = IMetricsGroup(config().metricsGroup());
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        420
Source: 
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        420
Source: 
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        422
Source: 
> 		Metrics metrics = Metrics(_metrics);
> 		addressValidator().validateAddress(msg.sender, metrics.market());
>                                                  ^^^^^^^^^^^^^^^^
> 		IMetricsGroup(config().metricsGroup()).removeGroup(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        422
Source: 
> 		Metrics metrics = Metrics(_metrics);
> 		addressValidator().validateAddress(msg.sender, metrics.market());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		IMetricsGroup(config().metricsGroup()).removeGroup(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        423
Source: 
> 		addressValidator().validateAddress(msg.sender, metrics.market());
> 		IMetricsGroup(config().metricsGroup()).removeGroup(_metrics);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Destroy(msg.sender, _metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        423
Source: 
> 		addressValidator().validateAddress(msg.sender, metrics.market());
> 		IMetricsGroup(config().metricsGroup()).removeGroup(_metrics);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Destroy(msg.sender, _metrics);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        233
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        234
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        235
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        236
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        237
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        238
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        239
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        240
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        241
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        242
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        243
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        244
Source: 
> 	address public policy;
> 	address public policyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policySet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        245
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        246
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        247
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        248
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        249
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        250
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        251
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        252
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressConfig
Line:        308
Source: 
> 		addressValidator().validateAddress(msg.sender, policyFactory);
> 		policy = _addr;
>   ^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AddressConfig
Line:        307
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        407
Source: 
> 	function create(address _property) external returns (address) {
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        407
Source: 
> 	function create(address _property) external returns (address) {
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        410
Source: 
> 		Metrics metrics = new Metrics(msg.sender, _property);
> 		IMetricsGroup metricsGroup = IMetricsGroup(config().metricsGroup());
>                                              ^^^^^^^^
> 		address metricsAddress = address(metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        418
Source: 
> 	function destroy(address _metrics) external {
> 		IMetricsGroup metricsGroup = IMetricsGroup(config().metricsGroup());
>                                              ^^^^^^^^
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        420
Source: 
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        420
Source: 
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        422
Source: 
> 		Metrics metrics = Metrics(_metrics);
> 		addressValidator().validateAddress(msg.sender, metrics.market());
>   ^^^^^^^^^^^^^^^^^^
> 		IMetricsGroup(config().metricsGroup()).removeGroup(_metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        423
Source: 
> 		addressValidator().validateAddress(msg.sender, metrics.market());
> 		IMetricsGroup(config().metricsGroup()).removeGroup(_metrics);
>                 ^^^^^^^^
> 		emit Destroy(msg.sender, _metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        423
Source: 
> 		addressValidator().validateAddress(msg.sender, metrics.market());
> 		IMetricsGroup(config().metricsGroup()).removeGroup(_metrics);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Destroy(msg.sender, _metrics);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UsingValidator
Line:        216
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        232
Source: 
> contract AddressConfig is Ownable, UsingValidator, Killable {
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocator;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        233
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        234
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        235
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        236
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        237
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        238
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        239
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        240
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        241
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        242
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        243
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        245
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        246
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        247
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        248
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        249
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        250
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        251
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        252
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Metrics
Line:        365
Source: 
> contract Metrics {
> 	address public market;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public property;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Metrics
Line:        366
Source: 
> 	address public market;
> 	address public property;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
