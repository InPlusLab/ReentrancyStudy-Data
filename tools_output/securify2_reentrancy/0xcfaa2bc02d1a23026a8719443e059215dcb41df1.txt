Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.10. Changing pragma version to 0.6.10....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        369
Source: 
>         uint256 cs;
>         assembly {
>         ^^^^^^^^^^
>             cs := extcodesize(self)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Initializable
Line:        376
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        417
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        436
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        445
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        417
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        436
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        445
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrueRatingAgency
Line:        787
Source: 
>      */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         IBurnableERC20 _trustToken,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrueRatingAgency
Line:        838
Source: 
>      */
>     function getNoVote(address id, address voter) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].votes[voter][false];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrueRatingAgency
Line:        847
Source: 
>      */
>     function getYesVote(address id, address voter) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].votes[voter][true];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrueRatingAgency
Line:        907
Source: 
>      */
>     function pauseSubmissions(bool status) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         submissionPauseStatus = status;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgency
Line:        907
Source: 
>      */
>     function pauseSubmissions(bool status) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         submissionPauseStatus = status;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgency
Line:        917
Source: 
>      */
>     function submit(address id) external override onlyAllowedSubmitters onlyNotExistingLoans(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!submissionPauseStatus, "TrueRatingAgency: New submissions are paused");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgency
Line:        963
Source: 
>      */
>     function yes(address id, uint256 stake) external override onlyPendingLoans(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vote(id, stake, true);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgency
Line:        972
Source: 
>      */
>     function no(address id, uint256 stake) external override onlyPendingLoans(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vote(id, stake, false);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgency
Line:        983
Source: 
>      */
>     function withdraw(address id, uint256 stake) external override onlyNotRunningLoans(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool choice = loans[id].votes[msg.sender][true] > 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgency
Line:        1093
Source: 
>      */
>     function claim(address id, address voter) public override onlyFundedLoans(id) calculateTotalReward(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 claimableRewards = claimable(id, voter);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        787
Source: 
>      */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         IBurnableERC20 _trustToken,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        828
Source: 
>      */
>     function setRewardMultiplier(uint256 newRewardMultiplier) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardMultiplier = newRewardMultiplier;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        838
Source: 
>      */
>     function getNoVote(address id, address voter) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].votes[voter][false];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        847
Source: 
>      */
>     function getYesVote(address id, address voter) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].votes[voter][true];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        855
Source: 
>      */
>     function getTotalNoVotes(address id) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].prediction[false];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        863
Source: 
>      */
>     function getTotalYesVotes(address id) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].prediction[true];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        871
Source: 
>      */
>     function getVotingStart(address id) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].timestamp;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        880
Source: 
>      */
>     function getResults(address id)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        898
Source: 
>      */
>     function allow(address who, bool status) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowedSubmitters[who] = status;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1031
Source: 
>      */
>     function bounty(address id, bool incorrectChoice) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // reward = (incorrect_tokens_staked) * (loss_factor) * (1 - burn_factor)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1105
Source: 
> 
>     function claimed(address id, address voter) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].claimed[voter];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1109
Source: 
> 
>     function claimable(address id, address voter) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (status(id) < LoanStatus.Running) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueRatingAgency
Line:        792
Source: 
>     ) public initializer {
>         require(address(this) == _distributor.beneficiary(), "TrueRatingAgency: Invalid distributor beneficiary");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueRatingAgency
Line:        919
Source: 
>         require(!submissionPauseStatus, "TrueRatingAgency: New submissions are paused");
>         require(ILoanToken(id).borrower() == msg.sender, "TrueRatingAgency: Sender is not borrower");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(factory.isLoanToken(id), "TrueRatingAgency: Only LoanTokens created via LoanFactory are supported");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueRatingAgency
Line:        920
Source: 
>         require(ILoanToken(id).borrower() == msg.sender, "TrueRatingAgency: Sender is not borrower");
>         require(factory.isLoanToken(id), "TrueRatingAgency: Only LoanTokens created via LoanFactory are supported");
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         loans[id] = Loan({creator: msg.sender, timestamp: block.timestamp, reward: 0});

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TrueRatingAgency
Line:        898
Source: 
>      */
>     function allow(address who, bool status) external onlyOwner {
>                                 ^^^^^^^^^^^
>         allowedSubmitters[who] = status;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TrueRatingAgency
Line:        907
Source: 
>      */
>     function pauseSubmissions(bool status) public onlyOwner {
>                               ^^^^^^^^^^^
>         submissionPauseStatus = status;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Initializable
Line:        376
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        347
Source: 
> 
>         bool isTopLevelCall = !initializing;
>         ^^^^^^^^^^^^^^^^^^^
>         if (isTopLevelCall) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgency
Line:        743
Source: 
>      */
>     modifier onlyCreator(address id) {
>                          ^^^^^^^^^^
>         require(loans[id].creator == msg.sender, "TrueRatingAgency: Not sender's loan");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgency
Line:        751
Source: 
>      */
>     modifier onlyNotExistingLoans(address id) {
>                                   ^^^^^^^^^^
>         require(status(id) == LoanStatus.Void, "TrueRatingAgency: Loan was already created");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgency
Line:        759
Source: 
>      */
>     modifier onlyPendingLoans(address id) {
>                               ^^^^^^^^^^
>         require(status(id) == LoanStatus.Pending, "TrueRatingAgency: Loan is not currently pending");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgency
Line:        767
Source: 
>      */
>     modifier onlyNotRunningLoans(address id) {
>                                  ^^^^^^^^^^
>         require(status(id) != LoanStatus.Running, "TrueRatingAgency: Loan is currently running");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgency
Line:        775
Source: 
>      */
>     modifier onlyFundedLoans(address id) {
>                              ^^^^^^^^^^
>         require(status(id) >= LoanStatus.Running, "TrueRatingAgency: Loan was not funded");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgency
Line:        1055
Source: 
>      */
>     modifier calculateTotalReward(address id) {
>                                   ^^^^^^^^^^
>         if (loans[id].reward == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgency
Line:        1057
Source: 
>         if (loans[id].reward == 0) {
>             uint256 interest = ILoanToken(id).profit();
>             ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgency
Line:        1061
Source: 
>             // prettier-ignore
>             uint256 reward = toTrustToken(
>             ^^^^^^^^^^^^^^
>                 interest

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgency
Line:        792
Source: 
>     ) public initializer {
>         require(address(this) == _distributor.beneficiary(), "TrueRatingAgency: Invalid distributor beneficiary");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgency
Line:        919
Source: 
>         require(!submissionPauseStatus, "TrueRatingAgency: New submissions are paused");
>         require(ILoanToken(id).borrower() == msg.sender, "TrueRatingAgency: Sender is not borrower");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(factory.isLoanToken(id), "TrueRatingAgency: Only LoanTokens created via LoanFactory are supported");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgency
Line:        920
Source: 
>         require(ILoanToken(id).borrower() == msg.sender, "TrueRatingAgency: Sender is not borrower");
>         require(factory.isLoanToken(id), "TrueRatingAgency: Only LoanTokens created via LoanFactory are supported");
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         loans[id] = Loan({creator: msg.sender, timestamp: block.timestamp, reward: 0});

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgency
Line:        1168
Source: 
>         // get internal status
>         ILoanToken.Status loanInternalStatus = ILoanToken(id).status();
>                                                ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgency
Line:        954
Source: 
> 
>         require(trustToken.transferFrom(msg.sender, address(this), stake));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Voted(id, msg.sender, choice, stake);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgency
Line:        1021
Source: 
>         // transfer tokens to sender and emit event
>         require(trustToken.transfer(msg.sender, amountToTransfer));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrawn(id, msg.sender, stake, amountToTransfer, burned);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgency
Line:        1057
Source: 
>         if (loans[id].reward == 0) {
>             uint256 interest = ILoanToken(id).profit();
>                                ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgency
Line:        1063
Source: 
>                 interest
>                     .mul(distributor.remaining())
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>                     .mul(rewardMultiplier)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgency
Line:        1100
Source: 
>             // transfer tokens
>             require(trustToken.transfer(voter, claimableRewards));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Claimed(id, voter, claimableRewards);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1008
Source: 
>                 burned = lostAmount.mul(burnFactor).div(10000);
>                 trustToken.burn(burned);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1065
Source: 
>                     .mul(rewardMultiplier)
>                     .div(distributor.amount())
>                          ^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1070
Source: 
>             if (loans[id].reward > 0) {
>                 distributor.distribute(reward);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1114
Source: 
> 
>         uint256 totalTime = ILoanToken(id).term();
>                             ^^^^^^^^^^^^^^^^^^^^^
>         uint256 passedTime = block.timestamp.sub(ILoanToken(id).start());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1115
Source: 
>         uint256 totalTime = ILoanToken(id).term();
>         uint256 passedTime = block.timestamp.sub(ILoanToken(id).start());
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        372
Source: 
>         }
>         return cs == 0;
>                ^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        401
Source: 
> contract Ownable is Initializable, Context {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        334
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        339
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        401
Source: 
> contract Ownable is Initializable, Context {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgency
Line:        704
Source: 
> 
>     IBurnableERC20 public trustToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IArbitraryDistributor public distributor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgency
Line:        705
Source: 
>     IBurnableERC20 public trustToken;
>     IArbitraryDistributor public distributor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ILoanFactory public factory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgency
Line:        706
Source: 
>     IArbitraryDistributor public distributor;
>     ILoanFactory public factory;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgency
Line:        711
Source: 
>      */
>     uint256 public lossFactor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public burnFactor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgency
Line:        712
Source: 
>     uint256 public lossFactor;
>     uint256 public burnFactor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgency
Line:        715
Source: 
>     // reward multiplier for voters
>     uint256 public rewardMultiplier;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgency
Line:        717
Source: 
> 
>     bool public submissionPauseStatus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        334
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        339
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        376
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        334
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        339
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        376
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        349
Source: 
>         if (isTopLevelCall) {
>             initializing = true;
>             ^^^^^^^^^^^^^^^^^^^
>             initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        350
Source: 
>             initializing = true;
>             initialized = true;
>             ^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        410
Source: 
>         address msgSender = _msgSender();
>         _owner = msgSender;
>         ^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(address(0), msgSender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        356
Source: 
>         if (isTopLevelCall) {
>             initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        349
Source: 
>         if (isTopLevelCall) {
>             initializing = true;
>             ^^^^^^^^^^^^^^^^^^^
>             initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        350
Source: 
>             initializing = true;
>             initialized = true;
>             ^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgency
Line:        795
Source: 
> 
>         trustToken = _trustToken;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         distributor = _distributor;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgency
Line:        796
Source: 
>         trustToken = _trustToken;
>         distributor = _distributor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         factory = _factory;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgency
Line:        797
Source: 
>         distributor = _distributor;
>         factory = _factory;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgency
Line:        799
Source: 
> 
>         lossFactor = 2500;
>         ^^^^^^^^^^^^^^^^^
>         burnFactor = 2500;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgency
Line:        800
Source: 
>         lossFactor = 2500;
>         burnFactor = 2500;
>         ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        356
Source: 
>         if (isTopLevelCall) {
>             initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1068
Source: 
> 
>             loans[id].reward = reward;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (loans[id].reward > 0) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgency
Line:        1098
Source: 
>             // track amount of claimed tokens
>             loans[id].claimed[voter] = loans[id].claimed[voter].add(claimableRewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // transfer tokens

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Initializable
Line:        345
Source: 
>     modifier initializer() {
>         require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");
>                                 ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Ownable
Line:        409
Source: 
>     function initialize() internal initializer {
>         address msgSender = _msgSender();
>                             ^^^^^^^^^^^^
>         _owner = msgSender;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        334
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        339
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        376
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        334
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        339
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        376
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
