Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ERC20SafeTransfer
Line:        190
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             switch returndatasize()

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ERC20SafeTransfer
Line:        212
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             switch returndatasize()

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        30
Source: 
>     // Warning: you should absolutely sure you want to give up authority!!!
>     function disableOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        35
Source: 
> 
>     function transferOwnership(address newOwner_) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner_ != owner, "TransferOwnership: the same owner.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        40
Source: 
> 
>     function acceptOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "AcceptOwnership: only new owner do this.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        48
Source: 
>     ///[snow] guard is Authority who inherit DSAuth.
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        30
Source: 
>     // Warning: you should absolutely sure you want to give up authority!!!
>     function disableOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        35
Source: 
> 
>     function transferOwnership(address newOwner_) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner_ != owner, "TransferOwnership: the same owner.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        40
Source: 
> 
>     function acceptOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "AcceptOwnership: only new owner do this.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        48
Source: 
>     ///[snow] guard is Authority who inherit DSAuth.
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        123
Source: 
>      */
>     function pause() public whenNotPaused auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        131
Source: 
>      */
>     function unpause() public whenPaused auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        30
Source: 
>     // Warning: you should absolutely sure you want to give up authority!!!
>     function disableOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        35
Source: 
> 
>     function transferOwnership(address newOwner_) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner_ != owner, "TransferOwnership: the same owner.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        40
Source: 
> 
>     function acceptOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "AcceptOwnership: only new owner do this.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        48
Source: 
>     ///[snow] guard is Authority who inherit DSAuth.
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        123
Source: 
>      */
>     function pause() public whenNotPaused auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        131
Source: 
>      */
>     function unpause() public whenPaused auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GOLDx
Line:        627
Source: 
>      */
>     function getOutstanding(address _token, uint256 _unit) public view returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _amount = convertDecimals(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        48
Source: 
>     ///[snow] guard is Authority who inherit DSAuth.
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GOLDx
Line:        405
Source: 
>      */
>     function upgradeProtocol(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _upgradeTime,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GOLDx
Line:        522
Source: 
>      */
>     function mint(address _dst, uint256 _pie) external whenNotPaused notUpgrading nonReentrant {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!blacklists[msg.sender] && !blacklists[_dst], "mint: Address is frozen!");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GOLDx
Line:        553
Source: 
>      */
>     function burn(address _src, uint256 _wad) external whenNotPaused notUpgrading {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkPrecondition(_src, msg.sender, _wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSAuth
Line:        48
Source: 
>     ///[snow] guard is Authority who inherit DSAuth.
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GOLDx
Line:        312
Source: 
>     // This function is used with contract proxy, do not modify this function.
>     function initialize(string memory _name, string memory _symbol, address _token) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!initialized, "initialize: Already initialized!");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GOLDx
Line:        574
Source: 
>     // --- ERC20 ---
>     function transfer(address _dst, uint256 _wad) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, _dst, _wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GOLDx
Line:        578
Source: 
> 
>     function transferFrom(address _src, address _dst, uint256 _wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkPrecondition(_src, msg.sender, _wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GOLDx
Line:        584
Source: 
> 
>     function approve(address _spender, uint256 _wad) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][_spender] = _wad;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GOLDx
Line:        597
Source: 
>      */
>     function getTokenBalance(address _src) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getRedeemAmount(balanceOf[_src]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GOLDx
Line:        605
Source: 
>      */
>     function getRedeemAmount(uint256 _wad) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GOLDx
Line:        627
Source: 
>      */
>     function getOutstanding(address _token, uint256 _unit) public view returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _amount = convertDecimals(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GOLDx
Line:        639
Source: 
>      */
>     function getFee(uint256 _feeRate, uint256 _amount) public pure returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_feeRate == 0) return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        244
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x);
>                                ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GOLDx
Line:        524
Source: 
>         require(!blacklists[msg.sender] && !blacklists[_dst], "mint: Address is frozen!");
>         uint256 _balance = IERC20(token).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(doTransferFrom(token, msg.sender, address(this), _pie), "mint: TransferFrom failed!");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GOLDx
Line:        528
Source: 
>             convertDecimals(
>                 IERC20(token).decimals(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>                 decimals,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GOLDx
Line:        530
Source: 
>                 decimals,
>                 IERC20(token).balanceOf(address(this)).sub(_balance)
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ),

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20SafeTransfer
Line:        186
Source: 
>         IERC20 token = IERC20(_token);
>         bool _result;
>         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20SafeTransfer
Line:        208
Source: 
>         IERC20 token = IERC20(_token);
>         bool _result;
>         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        426
Source: 
>         require(upgradeTime > 0 && upgradeTime <= now, "removeReserve: Too early to remove reserve!");
>         uint256 _balance = IERC20(token).balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^
>         if (_balance > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        461
Source: 
>         require(blacklists[_address], "retrieveBlackAddress: Address is not frozen!");
>         uint256 _balance = balanceOf[_address];
>         ^^^^^^^^^^^^^^^^
>         balanceOf[_address] = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        472
Source: 
>         require(blacklists[_address], "wipeBlackAddress: Address is not frozen!");
>         uint256 _balance = balanceOf[_address];
>         ^^^^^^^^^^^^^^^^
>         balanceOf[_address] = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        503
Source: 
>     function transfer(address _src, address _dst, uint256 _wad) internal whenNotPaused notUpgrading {
>         uint256 _fee = getFee(fee[this.transfer.selector], _wad);
>         ^^^^^^^^^^^^
>         uint256 _principle = _wad.sub(_fee);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        504
Source: 
>         uint256 _fee = getFee(fee[this.transfer.selector], _wad);
>         uint256 _principle = _wad.sub(_fee);
>         ^^^^^^^^^^^^^^^^^^
>         balanceOf[_src] = balanceOf[_src].sub(_wad);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        524
Source: 
>         require(!blacklists[msg.sender] && !blacklists[_dst], "mint: Address is frozen!");
>         uint256 _balance = IERC20(token).balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^
>         require(doTransferFrom(token, msg.sender, address(this), _pie), "mint: TransferFrom failed!");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        526
Source: 
>         require(doTransferFrom(token, msg.sender, address(this), _pie), "mint: TransferFrom failed!");
>         uint256 _wad = rmul(
>         ^^^^^^^^^^^^
>             convertDecimals(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        535
Source: 
>         require(_wad > 0 && _wad >= minMintAmount, "mint: Do not satisfy min minting amount!");
>         uint256 _fee = getFee(fee[msg.sig], _wad);
>         ^^^^^^^^^^^^
>         uint256 _principle = _wad.sub(_fee);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        536
Source: 
>         uint256 _fee = getFee(fee[msg.sig], _wad);
>         uint256 _principle = _wad.sub(_fee);
>         ^^^^^^^^^^^^^^^^^^
>         balanceOf[_dst] = balanceOf[_dst].add(_principle);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        556
Source: 
>         require(_wad >= minBurnAmount, "burn: Do not satisfy min burning amount!");
>         uint256 _fee = getFee(fee[msg.sig], _wad);
>         ^^^^^^^^^^^^
>         uint256 _principle = _wad.sub(_fee);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        557
Source: 
>         uint256 _fee = getFee(fee[msg.sig], _wad);
>         uint256 _principle = _wad.sub(_fee);
>         ^^^^^^^^^^^^^^^^^^
>         balanceOf[_src] = balanceOf[_src].sub(_wad);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        567
Source: 
>         }
>         uint256 _pie = getRedeemAmount(_principle);
>         ^^^^^^^^^^^^
>         if (_pie > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        618
Source: 
>     function getOutstanding() public view returns (uint256) {
>         int256 _amount = getOutstanding(token, unit);
>         ^^^^^^^^^^^^^^
>         return _amount > 0 ? uint256(_amount) : 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GOLDx
Line:        628
Source: 
>     function getOutstanding(address _token, uint256 _unit) public view returns (int256) {
>         uint256 _amount = convertDecimals(
>         ^^^^^^^^^^^^^^^
>             decimals,

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    GOLDx
Line:        279
Source: 
> 
>     uint256 constant ONE = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    GOLDx
Line:        321
Source: 
>         notEntered = true;
>         unit = 31103476800000000000;
>                ^^^^^^^^^^^^^^^^^^^^
>         initialized = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DSAuth
Line:        78
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GOLDx
Line:        426
Source: 
>         require(upgradeTime > 0 && upgradeTime <= now, "removeReserve: Too early to remove reserve!");
>         uint256 _balance = IERC20(token).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_balance > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GOLDx
Line:        524
Source: 
>         require(!blacklists[msg.sender] && !blacklists[_dst], "mint: Address is frozen!");
>         uint256 _balance = IERC20(token).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(doTransferFrom(token, msg.sender, address(this), _pie), "mint: TransferFrom failed!");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GOLDx
Line:        528
Source: 
>             convertDecimals(
>                 IERC20(token).decimals(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>                 decimals,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GOLDx
Line:        530
Source: 
>                 decimals,
>                 IERC20(token).balanceOf(address(this)).sub(_balance)
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GOLDx
Line:        609
Source: 
>                 decimals,
>                 IERC20(token).decimals(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>                 rdiv(_wad, unit)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GOLDx
Line:        630
Source: 
>             decimals,
>             IERC20(_token).decimals(),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             rdiv(totalSupply, _unit)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20SafeTransfer
Line:        188
Source: 
> 
>         token.transfer(_to, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20SafeTransfer
Line:        210
Source: 
> 
>         token.transferFrom(_from, _to, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GOLDx
Line:        633
Source: 
>         );
>         return int256(_amount - IERC20(_token).balanceOf(address(this)));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GOLDx
Line:        666
Source: 
>             decimals,
>             IERC20(token).decimals(),
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             fee[this.mint.selector],

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GOLDx
Line:        669
Source: 
>             fee[this.burn.selector],
>             IPAXG(token).feeParts(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             IPAXG(token).feeRate(),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GOLDx
Line:        670
Source: 
>             IPAXG(token).feeParts(),
>             IPAXG(token).feeRate(),
>             ^^^^^^^^^^^^^^^^^^^^^^
>             paused || (upgradeTime > 0 && upgradeTime <= now)

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        236
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        240
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        244
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        20
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        22
Source: 
>     address      public  owner;
>     address      public  newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        20
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        22
Source: 
>     address      public  owner;
>     address      public  newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        20
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        22
Source: 
>     address      public  owner;
>     address      public  newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GOLDx
Line:        255
Source: 
>     uint8   public decimals;
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GOLDx
Line:        264
Source: 
>     address public token;               // Basic anchored asset
>     address public pendingToken;        // New replacing anchored asset
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GOLDx
Line:        267
Source: 
>     uint256 public unit;                // The exchange rate
>     uint256 public pendingUnit;         // New exchange rate
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GOLDx
Line:        269
Source: 
> 
>     uint256 public minMintAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public minBurnAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GOLDx
Line:        270
Source: 
>     uint256 public minMintAmount;
>     uint256 public minBurnAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pendingMinMintAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GOLDx
Line:        271
Source: 
>     uint256 public minBurnAmount;
>     uint256 public pendingMinMintAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pendingMinBurnAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GOLDx
Line:        272
Source: 
>     uint256 public pendingMinMintAmount;
>     uint256 public pendingMinBurnAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GOLDx
Line:        277
Source: 
>     mapping(address => bool) public blacklists;
>     uint256 public upgradeTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        31
Source: 
>     function disableOwnership() public onlyOwner {
>         owner = address(0);
>         ^^^^^^^^^^^^^^^^^^
>         emit OwnerUpdate(msg.sender, owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        37
Source: 
>         require(newOwner_ != owner, "TransferOwnership: the same owner.");
>         newOwner = newOwner_;
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        52
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        31
Source: 
>     function disableOwnership() public onlyOwner {
>         owner = address(0);
>         ^^^^^^^^^^^^^^^^^^
>         emit OwnerUpdate(msg.sender, owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        37
Source: 
>         require(newOwner_ != owner, "TransferOwnership: the same owner.");
>         newOwner = newOwner_;
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        52
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        124
Source: 
>     function pause() public whenNotPaused auth {
>         paused = true;
>         ^^^^^^^^^^^^^
>         emit Paused(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        132
Source: 
>     function unpause() public whenPaused auth {
>         paused = false;
>         ^^^^^^^^^^^^^^
>         emit Unpaused(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        31
Source: 
>     function disableOwnership() public onlyOwner {
>         owner = address(0);
>         ^^^^^^^^^^^^^^^^^^
>         emit OwnerUpdate(msg.sender, owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        37
Source: 
>         require(newOwner_ != owner, "TransferOwnership: the same owner.");
>         newOwner = newOwner_;
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        52
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        124
Source: 
>     function pause() public whenNotPaused auth {
>         paused = true;
>         ^^^^^^^^^^^^^
>         emit Paused(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        132
Source: 
>     function unpause() public whenPaused auth {
>         paused = false;
>         ^^^^^^^^^^^^^^
>         emit Unpaused(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        335
Source: 
>         require(_newUnit != unit, "setUnit: New unit should be different!");
>         unit = _newUnit;
>         ^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        344
Source: 
>                 "setMinMintAmount: New minimum minting amount should be different!");
>         minMintAmount = _minMintAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        353
Source: 
>                 "setMinBurnAmount: New minimum burning amount should be different!");
>         minBurnAmount = _minBurnAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        364
Source: 
>                 "setFeeRecipient: New fee recipient should not be zero address!");
>         feeRecipient = _feeRecipient;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        374
Source: 
>         require(_fee != fee[_sig], "setFee: New fee should be different!");
>         fee[_sig] = _fee;
>         ^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        383
Source: 
>         require(!blacklists[_account], "addBlacklist: Account has been in the blacklist!");
>         blacklists[_account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BlacklistAdded(_account);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        393
Source: 
>         require(blacklists[_account], "removeBlacklist: Account is not in the blacklist!");
>         blacklists[_account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BlacklistRemoved(_account);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        414
Source: 
>         require(_token != address(0), "upgradeProtocol: New anchored asset should not be zero address!");
>         upgradeTime = _upgradeTime;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pendingToken = _token;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        415
Source: 
>         upgradeTime = _upgradeTime;
>         pendingToken = _token;
>         ^^^^^^^^^^^^^^^^^^^^^
>         pendingUnit = _unit;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        416
Source: 
>         pendingToken = _token;
>         pendingUnit = _unit;
>         ^^^^^^^^^^^^^^^^^^^
>         pendingMinMintAmount = _minMintAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        417
Source: 
>         pendingUnit = _unit;
>         pendingMinMintAmount = _minMintAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pendingMinBurnAmount = _minBurnAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        418
Source: 
>         pendingMinMintAmount = _minMintAmount;
>         pendingMinBurnAmount = _minBurnAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        437
Source: 
>         require(upgradeTime > 0 && upgradeTime <= now, "confirmUpgrade:  Too early to confirm upgrading!");
>         token = pendingToken;
>         ^^^^^^^^^^^^^^^^^^^^
>         unit = pendingUnit;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        438
Source: 
>         token = pendingToken;
>         unit = pendingUnit;
>         ^^^^^^^^^^^^^^^^^^
>         minMintAmount = pendingMinMintAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        439
Source: 
>         unit = pendingUnit;
>         minMintAmount = pendingMinMintAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minBurnAmount = pendingMinBurnAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        440
Source: 
>         minMintAmount = pendingMinMintAmount;
>         minBurnAmount = pendingMinBurnAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelUpgrade();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        449
Source: 
>         require(getOutstanding() == 0, "cancelUpgrade: Add more current anchored asset!");
>         upgradeTime = 0;
>         ^^^^^^^^^^^^^^^
>         pendingToken = address(0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        450
Source: 
>         upgradeTime = 0;
>         pendingToken = address(0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         pendingUnit = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        451
Source: 
>         pendingToken = address(0);
>         pendingUnit = 0;
>         ^^^^^^^^^^^^^^^
>         pendingMinMintAmount = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        452
Source: 
>         pendingUnit = 0;
>         pendingMinMintAmount = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         pendingMinBurnAmount = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        453
Source: 
>         pendingMinMintAmount = 0;
>         pendingMinBurnAmount = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        462
Source: 
>         uint256 _balance = balanceOf[_address];
>         balanceOf[_address] = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[owner] = balanceOf[owner].add(_balance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        463
Source: 
>         balanceOf[_address] = 0;
>         balanceOf[owner] = balanceOf[owner].add(_balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_address, owner, _balance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        473
Source: 
>         uint256 _balance = balanceOf[_address];
>         balanceOf[_address] = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         totalSupply = totalSupply.sub(_balance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        474
Source: 
>         balanceOf[_address] = 0;
>         totalSupply = totalSupply.sub(_balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_address, address(0), _balance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        498
Source: 
>             require(allowance[_src][_dst] >= _wad, "checkPrecondition: Insufficient allowance!");
>             allowance[_src][_dst] = allowance[_src][_dst].sub(_wad);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        505
Source: 
>         uint256 _principle = _wad.sub(_fee);
>         balanceOf[_src] = balanceOf[_src].sub(_wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[_dst] = balanceOf[_dst].add(_principle);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        506
Source: 
>         balanceOf[_src] = balanceOf[_src].sub(_wad);
>         balanceOf[_dst] = balanceOf[_dst].add(_principle);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_src, _dst, _principle);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        509
Source: 
>         if (_fee > 0) {
>             balanceOf[feeRecipient] = balanceOf[feeRecipient].add(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit FeeCollected(_src, feeRecipient, _fee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        162
Source: 
>         // Any calls to nonReentrant after this point will fail
>         notEntered = false;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        558
Source: 
>         uint256 _principle = _wad.sub(_fee);
>         balanceOf[_src] = balanceOf[_src].sub(_wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalSupply = totalSupply.sub(_principle);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        559
Source: 
>         balanceOf[_src] = balanceOf[_src].sub(_wad);
>         totalSupply = totalSupply.sub(_principle);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_src, address(0), _principle);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GOLDx
Line:        563
Source: 
>         if (_fee > 0) {
>             balanceOf[feeRecipient] = balanceOf[feeRecipient].add(_fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(_src, feeRecipient, _fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        314
Source: 
>         require(!initialized, "initialize: Already initialized!");
>         name = _name;
>         ^^^^^^^^^^^^
>         symbol = _symbol;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        315
Source: 
>         name = _name;
>         symbol = _symbol;
>         ^^^^^^^^^^^^^^^^
>         token = _token;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        316
Source: 
>         symbol = _symbol;
>         token = _token;
>         ^^^^^^^^^^^^^^
>         decimals = 18;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        317
Source: 
>         token = _token;
>         decimals = 18;
>         ^^^^^^^^^^^^^
>         owner = msg.sender;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        318
Source: 
>         decimals = 18;
>         owner = msg.sender;
>         ^^^^^^^^^^^^^^^^^^
>         feeRecipient = msg.sender;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        319
Source: 
>         owner = msg.sender;
>         feeRecipient = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         notEntered = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        320
Source: 
>         feeRecipient = msg.sender;
>         notEntered = true;
>         ^^^^^^^^^^^^^^^^^
>         unit = 31103476800000000000;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        321
Source: 
>         notEntered = true;
>         unit = 31103476800000000000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        322
Source: 
>         unit = 31103476800000000000;
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GOLDx
Line:        585
Source: 
>     function approve(address _spender, uint256 _wad) external returns (bool) {
>         allowance[msg.sender][_spender] = _wad;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DSAuth
Line:        78
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GOLDx
Line:        633
Source: 
>         );
>         return int256(_amount - IERC20(_token).balanceOf(address(this)));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        138
Source: 
> contract ReentrancyGuard {
>     bool internal notEntered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    GOLDx
Line:        252
Source: 
>     // --- ERC20 Data ---
>     string  public name;
>     ^^^^^^^^^^^^^^^^^^^
>     string  public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    GOLDx
Line:        253
Source: 
>     string  public name;
>     string  public symbol;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint8   public decimals;

[0m
