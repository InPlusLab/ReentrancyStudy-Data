pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LN2tBTC
Line:        153
Source: 
> 	// ERC20 tBTC contract (vending machine)
> 	IERC20 tBTContract = IERC20(0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LN2tBTC
Line:        222
Source: 
> 	// Constant chosen arbitrarily
> 	uint public timeoutPeriod = 1 hours;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LN2tBTC
Line:        311
Source: 
> 	// Furthemore, operators can defend against this attack by being selective on the swaps they allow (eg: they can reject big amounts)
> 	uint public securityDepositAmount = 1 ether;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        158
Source: 
> 	// Requires a previous approve() call to the ERC20 tBTC contract to allow the token transfer
> 	function operatorRegister(uint tBTCBalance, uint lnBalance, uint linearFee, uint constantFee, string memory publicUrl) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(operators[msg.sender].exists==false, "Operator has already been registered before");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        169
Source: 
> 	// Used by clients to iterate over the operators when searching for the lowest fees
> 	function getOperatorListLength() view public returns(uint length){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return operatorList.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        174
Source: 
> 	// Simple withdraw operation for the ERC20 tBTC tokens held in the contract in behalf of an operator
> 	function operatorWithdrawTBTC(uint amount) public returns(bool){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Operator storage op = operators[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        184
Source: 
> 	// Requires a previous approve() call to the ERC20 tBTC contract to allow the token transfer
> 	function operatorDepositTBTC(uint amount) public returns(bool){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Operator storage op = operators[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        193
Source: 
> 	// Set the fees of the operator calling the function
> 	function operatorSetFees(uint newLinearFee, uint newConstantFee) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		operators[msg.sender].linearFee = newLinearFee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        200
Source: 
> 	// This number is completely unverified and can be faked
> 	function operatorSetLNBalance(uint newLNBalance) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		operators[msg.sender].lnBalance = newLNBalance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        205
Source: 
> 	// Set the url of the operator node
> 	function operatorSetPublicUrl(string memory newUrl) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		operators[msg.sender].publicUrl = newUrl;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        251
Source: 
> 	// This can be solved by having the users listen to the `TBTC2LNSwapCreated` events emitted by the contract
> 	function createTBTC2LNSwap(bytes32 paymentHash, uint amount, address providerAddress, uint lockTime, string memory invoice) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(tbtcSwaps[msg.sender][paymentHash].timeoutTimestamp == 0, "Swap already exists");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        262
Source: 
> 	// (it could also happen if the operator malfunctions and doesn't claim it's payment after the swap, but this should never happen)
> 	function revertTBTC2LNSwap(bytes32 paymentHash) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		TBTC2LNSwap storage swap = tbtcSwaps[msg.sender][paymentHash];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        275
Source: 
> 	// which is revealed when the invoice is accepted by the user's wallet/node
> 	function operatorClaimPayment(address userAddress, bytes32 paymentHash, bytes memory preimage) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		TBTC2LNSwap storage swap = tbtcSwaps[userAddress][paymentHash];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        342
Source: 
> 	// This function doesn't reduce the `lnBalance` of an operator, see the comment on the definition of `createTBTC2LNSwap` for more details on this
> 	function createLN2TBTCSwap(bytes32 paymentHash, address providerAddress, uint tBTCAmount) payable public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(lnSwaps[msg.sender][paymentHash].startTimestamp == 0, "Swap already exists");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        352
Source: 
> 	// Returns the security deposit to the user
> 	function revertLN2TBTCSwap(bytes32 paymentHash) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		LN2TBTCSwap storage swap = lnSwaps[msg.sender][paymentHash];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        362
Source: 
> 	// Lock tBTC tokens and make them claimable by the user if they provide a valid pre-image before timeout
> 	function operatorLockTBTCForLN2TBTCSwap(address userAddress, bytes32 paymentHash) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		LN2TBTCSwap storage swap = lnSwaps[userAddress][paymentHash];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        378
Source: 
> 	//   - Make up for the opportunity cost on the operator's side of having their tBTC locked for some time
> 	function operatorRevertLN2TBTCSwap(address userAddress, bytes32 paymentHash) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		LN2TBTCSwap storage swap = lnSwaps[userAddress][paymentHash];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LN2tBTC
Line:        390
Source: 
> 	// Claim the tBTC tokens locked by the operator, revealing the HTLC preimage and thus allowing the operator to finalise the LN payment
> 	function claimTBTCPayment(bytes32 paymentHash, bytes memory preimage) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		LN2TBTCSwap storage swap = lnSwaps[msg.sender][paymentHash];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LN2tBTC
Line:        184
Source: 
> 	// Requires a previous approve() call to the ERC20 tBTC contract to allow the token transfer
> 	function operatorDepositTBTC(uint amount) public returns(bool){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Operator storage op = operators[msg.sender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LN2tBTC
Line:        158
Source: 
> 	// Requires a previous approve() call to the ERC20 tBTC contract to allow the token transfer
> 	function operatorRegister(uint tBTCBalance, uint lnBalance, uint linearFee, uint constantFee, string memory publicUrl) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(operators[msg.sender].exists==false, "Operator has already been registered before");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LN2tBTC
Line:        193
Source: 
> 	// Set the fees of the operator calling the function
> 	function operatorSetFees(uint newLinearFee, uint newConstantFee) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		operators[msg.sender].linearFee = newLinearFee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LN2tBTC
Line:        200
Source: 
> 	// This number is completely unverified and can be faked
> 	function operatorSetLNBalance(uint newLNBalance) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		operators[msg.sender].lnBalance = newLNBalance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LN2tBTC
Line:        205
Source: 
> 	// Set the url of the operator node
> 	function operatorSetPublicUrl(string memory newUrl) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		operators[msg.sender].publicUrl = newUrl;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LN2tBTC
Line:        251
Source: 
> 	// This can be solved by having the users listen to the `TBTC2LNSwapCreated` events emitted by the contract
> 	function createTBTC2LNSwap(bytes32 paymentHash, uint amount, address providerAddress, uint lockTime, string memory invoice) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(tbtcSwaps[msg.sender][paymentHash].timeoutTimestamp == 0, "Swap already exists");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LN2tBTC
Line:        292
Source: 
> 	// Extra care must be taken to ensure that the results from this function are only used in situations where this is fine
> 	function removeFees(uint amount, uint linearFee, uint constantFee) pure public returns (uint amountWithoutFees){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return ((amount - constantFee)*linearFeeDenominator)/(linearFeeDenominator+linearFee);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LN2tBTC
Line:        342
Source: 
> 	// This function doesn't reduce the `lnBalance` of an operator, see the comment on the definition of `createTBTC2LNSwap` for more details on this
> 	function createLN2TBTCSwap(bytes32 paymentHash, address providerAddress, uint tBTCAmount) payable public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(lnSwaps[msg.sender][paymentHash].startTimestamp == 0, "Swap already exists");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LN2tBTC
Line:        408
Source: 
> 	// Extra care must be taken to ensure that the results from this function are only used in situations where this is fine
> 	function addFees(uint amount, uint linearFee, uint constantFee) pure public returns (uint amountWithFees){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (amount * (linearFeeDenominator + linearFee))/linearFeeDenominator + constantFee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LN2tBTC
Line:        293
Source: 
> 	function removeFees(uint amount, uint linearFee, uint constantFee) pure public returns (uint amountWithoutFees){
> 		return ((amount - constantFee)*linearFeeDenominator)/(linearFeeDenominator+linearFee);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LN2tBTC
Line:        409
Source: 
> 	function addFees(uint amount, uint linearFee, uint constantFee) pure public returns (uint amountWithFees){
> 		return (amount * (linearFeeDenominator + linearFee))/linearFeeDenominator + constantFee;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LN2tBTC
Line:        162
Source: 
> 		if(tBTCBalance > 0){
> 			tBTContract.transferFrom(msg.sender, address(this), tBTCBalance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    LN2tBTC
Line:        398
Source: 
> 		tBTContract.transfer(msg.sender, tBTCAmount);
> 		msg.sender.transfer(securityDepositAmount); // Return security deposit to user
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Operator storage op = operators[swap.provider];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LN2tBTC
Line:        143
Source: 
> 	// Conversion: a fee of 0.1% would be 0.1*linearFeeDenominator/100
> 	uint constant linearFeeDenominator = 10**8;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Bitcoin uses 8 decimals but tBTC uses 18, this should be corrected

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LN2tBTC
Line:        145
Source: 
> 	// Bitcoin uses 8 decimals but tBTC uses 18, this should be corrected
> 	uint constant tBTCDenominator = 10**10;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LN2tBTC
Line:        143
Source: 
> 	// Conversion: a fee of 0.1% would be 0.1*linearFeeDenominator/100
> 	uint constant linearFeeDenominator = 10**8;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Bitcoin uses 8 decimals but tBTC uses 18, this should be corrected

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LN2tBTC
Line:        145
Source: 
> 	// Bitcoin uses 8 decimals but tBTC uses 18, this should be corrected
> 	uint constant tBTCDenominator = 10**10;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LN2tBTC
Line:        153
Source: 
> 	// ERC20 tBTC contract (vending machine)
> 	IERC20 tBTContract = IERC20(0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    LN2tBTC
Line:        358
Source: 
> 		swap.tBTCAmount = 0;
> 		msg.sender.transfer(securityDepositAmount); // Return security deposit
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    LN2tBTC
Line:        386
Source: 
> 		swap.tBTCAmount = 0;
> 		msg.sender.transfer(securityDepositAmount); // Award security deposit to the operator as compensation
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    LN2tBTC
Line:        398
Source: 
> 		tBTContract.transfer(msg.sender, tBTCAmount);
> 		msg.sender.transfer(securityDepositAmount); // Return security deposit to user
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Operator storage op = operators[swap.provider];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    LN2tBTC
Line:        398
Source: 
> 		tBTContract.transfer(msg.sender, tBTCAmount);
> 		msg.sender.transfer(securityDepositAmount); // Return security deposit to user
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Operator storage op = operators[swap.provider];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LN2tBTC
Line:        358
Source: 
> 		swap.tBTCAmount = 0;
> 		msg.sender.transfer(securityDepositAmount); // Return security deposit
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LN2tBTC
Line:        386
Source: 
> 		swap.tBTCAmount = 0;
> 		msg.sender.transfer(securityDepositAmount); // Award security deposit to the operator as compensation
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LN2tBTC
Line:        398
Source: 
> 		tBTContract.transfer(msg.sender, tBTCAmount);
> 		msg.sender.transfer(securityDepositAmount); // Return security deposit to user
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Operator storage op = operators[swap.provider];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LN2tBTC
Line:        162
Source: 
> 		if(tBTCBalance > 0){
> 			tBTContract.transferFrom(msg.sender, address(this), tBTCBalance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LN2tBTC
Line:        178
Source: 
> 		op.tBTCBalance -= amount;
> 		tBTContract.transfer(msg.sender, amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LN2tBTC
Line:        188
Source: 
> 		op.tBTCBalance += amount;
> 		tBTContract.transferFrom(msg.sender, address(this), amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LN2tBTC
Line:        254
Source: 
> 		tbtcSwaps[msg.sender][paymentHash] = TBTC2LNSwap(providerAddress, amount, now + lockTime);
> 		tBTContract.transferFrom(msg.sender, address(this), amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit TBTC2LNSwapCreated(paymentHash, amount, msg.sender, providerAddress, lockTime, invoice);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LN2tBTC
Line:        269
Source: 
> 		swap.tBTCAmount = 0;
> 		tBTContract.transfer(msg.sender, tBTCAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LN2tBTC
Line:        397
Source: 
> 		swap.tBTCAmount = 0;
> 		tBTContract.transfer(msg.sender, tBTCAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		msg.sender.transfer(securityDepositAmount); // Return security deposit to user

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LN2tBTC
Line:        194
Source: 
> 	function operatorSetFees(uint newLinearFee, uint newConstantFee) public {
> 		operators[msg.sender].linearFee = newLinearFee;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		operators[msg.sender].constantFee = newConstantFee;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LN2tBTC
Line:        195
Source: 
> 		operators[msg.sender].linearFee = newLinearFee;
> 		operators[msg.sender].constantFee = newConstantFee;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LN2tBTC
Line:        201
Source: 
> 	function operatorSetLNBalance(uint newLNBalance) public {
> 		operators[msg.sender].lnBalance = newLNBalance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LN2tBTC
Line:        206
Source: 
> 	function operatorSetPublicUrl(string memory newUrl) public {
> 		operators[msg.sender].publicUrl = newUrl;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LN2tBTC
Line:        162
Source: 
> 		if(tBTCBalance > 0){
> 			tBTContract.transferFrom(msg.sender, address(this), tBTCBalance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LN2tBTC
Line:        178
Source: 
> 		op.tBTCBalance -= amount;
> 		tBTContract.transfer(msg.sender, amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LN2tBTC
Line:        188
Source: 
> 		op.tBTCBalance += amount;
> 		tBTContract.transferFrom(msg.sender, address(this), amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LN2tBTC
Line:        254
Source: 
> 		tbtcSwaps[msg.sender][paymentHash] = TBTC2LNSwap(providerAddress, amount, now + lockTime);
> 		tBTContract.transferFrom(msg.sender, address(this), amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit TBTC2LNSwapCreated(paymentHash, amount, msg.sender, providerAddress, lockTime, invoice);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LN2tBTC
Line:        269
Source: 
> 		swap.tBTCAmount = 0;
> 		tBTContract.transfer(msg.sender, tBTCAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LN2tBTC
Line:        397
Source: 
> 		swap.tBTCAmount = 0;
> 		tBTContract.transfer(msg.sender, tBTCAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		msg.sender.transfer(securityDepositAmount); // Return security deposit to user

[0m
