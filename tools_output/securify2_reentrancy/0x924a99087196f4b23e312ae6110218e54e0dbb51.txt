Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        122
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        122
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                                                                  ^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        124
Source: 
>    
>     UserStruct[] public requests;
>                        ^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        126
Source: 
>      
>       constructor() public {
>               ^^^^^^^^^^^^^^
>           ownerWallet = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        127
Source: 
>       constructor() public {
>           ownerWallet = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        129
Source: 
> 
>         LEVEL_PRICE[1] = 0.01 ether;
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[2] = 0.005 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        129
Source: 
> 
>         LEVEL_PRICE[1] = 0.01 ether;
>                                      
>         LEVEL_PRICE[2] = 0.005 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        130
Source: 
>         LEVEL_PRICE[1] = 0.01 ether;
>         LEVEL_PRICE[2] = 0.005 ether;
>                              ^^^^^^^^
>         LEVEL_PRICE[3] = 0.0025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        131
Source: 
>         LEVEL_PRICE[2] = 0.005 ether;
>         LEVEL_PRICE[3] = 0.0025 ether;
>                       ^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[4] = 0.00025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        132
Source: 
>         LEVEL_PRICE[3] = 0.0025 ether;
>         LEVEL_PRICE[4] = 0.00025 ether;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^
>       unlimited_level_price=0.00025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BullRun
Line:        133
Source: 
>         LEVEL_PRICE[4] = 0.00025 ether;
>       unlimited_level_price=0.00025 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        282
Source: 
>        
>         users[userList[users[msg.sender].referrerID]].referredUsers=users[userList[users[msg.sender].referrerID]].referredUsers+1;
>                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        349
Source: 
>        bool sent = false;
>        sent = address(uint160(pool1Currentuser)).send(pool1_price);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        379
Source: 
>        pool2users[msg.sender] = userStruct;
>        pool2userList[pool2currUserID]=msg.sender;
>                                       ^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        414
Source: 
>        pool3users[msg.sender] = userStruct;
>        pool3userList[pool3currUserID]=msg.sender;
>                                         ^^^^^^^^^
>        bool sent = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        446
Source: 
>        pool4users[msg.sender] = userStruct;
>        pool4userList[pool4currUserID]=msg.sender;
>                                            ^^^^^^
>        bool sent = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        479
Source: 
>        pool5users[msg.sender] = userStruct;
>        pool5userList[pool5currUserID]=msg.sender;
>                                          ^^^^^^^^
>        bool sent = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        511
Source: 
>        bool sent = false;
>        sent = address(uint160(pool6Currentuser)).send(pool6_price);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        540
Source: 
>        pool7users[msg.sender] = userStruct;
>        pool7userList[pool7currUserID]=msg.sender;
>                                          ^^^^^^^^
>        bool sent = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        572
Source: 
>        pool8users[msg.sender] = userStruct;
>        pool8userList[pool8currUserID]=msg.sender;
>                                           ^^^^^^^
>        bool sent = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        605
Source: 
>        pool9users[msg.sender] = userStruct;
>        pool9userList[pool9currUserID]=msg.sender;
>                                           ^^^^^^^
>        bool sent = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BullRun
Line:        637
Source: 
>        pool10users[msg.sender] = userStruct;
>        pool10userList[pool10currUserID]=msg.sender;
>                                 ^^^^^^^^^^^^^^^^^^^
>        bool sent = false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        367
Source: 
>         require(msg.value == pool2_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        402
Source: 
>         require(msg.value == pool3_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        434
Source: 
>         require(msg.value == pool4_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        467
Source: 
>         require(msg.value == pool5_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        498
Source: 
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>         
>  ^^^^^^^
>         PoolUserStruct memory userStruct;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        528
Source: 
>         require(msg.value == pool7_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        560
Source: 
>         require(msg.value == pool8_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        592
Source: 
>       require(!pool9users[msg.sender].isExist, "Already in AutoPool");
>         require(msg.value == pool9_price, 'Incorrect Value');
>                                                               
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        625
Source: 
>         require(msg.value == pool10_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    BullRun
Line:        661
Source: 
>              
>          }
>   ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        78
Source: 
>      
>      mapping (address => PoolUserStruct) public pool3users;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      mapping (uint => address) public pool3userList;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        122
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        122
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        122
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                                                                  ^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        124
Source: 
>    
>     UserStruct[] public requests;
>                        ^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        126
Source: 
>      
>       constructor() public {
>               ^^^^^^^^^^^^^^
>           ownerWallet = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        127
Source: 
>       constructor() public {
>           ownerWallet = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        129
Source: 
> 
>         LEVEL_PRICE[1] = 0.01 ether;
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[2] = 0.005 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        129
Source: 
> 
>         LEVEL_PRICE[1] = 0.01 ether;
>                                      
>         LEVEL_PRICE[2] = 0.005 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        130
Source: 
>         LEVEL_PRICE[1] = 0.01 ether;
>         LEVEL_PRICE[2] = 0.005 ether;
>                              ^^^^^^^^
>         LEVEL_PRICE[3] = 0.0025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        131
Source: 
>         LEVEL_PRICE[2] = 0.005 ether;
>         LEVEL_PRICE[3] = 0.0025 ether;
>                       ^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[4] = 0.00025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        132
Source: 
>         LEVEL_PRICE[3] = 0.0025 ether;
>         LEVEL_PRICE[4] = 0.00025 ether;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^
>       unlimited_level_price=0.00025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        133
Source: 
>         LEVEL_PRICE[4] = 0.00025 ether;
>       unlimited_level_price=0.00025 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        133
Source: 
>         LEVEL_PRICE[4] = 0.00025 ether;
>       unlimited_level_price=0.00025 ether;
>                                            
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        138
Source: 
> 
>         userStruct = UserStruct({
>                        ^^^^^^^^^^
>             isExist: true,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        142
Source: 
>             referrerID: 0,
>             referredUsers:0
>                      ^^^^^^
>            

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        147
Source: 
>         users[ownerWallet] = userStruct;
>        userList[currUserID] = ownerWallet;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BullRun
Line:        319
Source: 
>         if(!sent) {
>           //  emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);
>                         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        46
Source: 
>       uint public pool5activeUserID = 0;
>       uint public pool6activeUserID = 0;
>                        ^^^^^^^^^^^^^^^^^
>       uint public pool7activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        47
Source: 
>       uint public pool6activeUserID = 0;
>       uint public pool7activeUserID = 0;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>       uint public pool8activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        53
Source: 
>       
>       uint public unlimited_level_price=0;
>                           ^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        55
Source: 
>      
>       struct UserStruct {
>                ^^^^^^^^^^
>         bool isExist;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        57
Source: 
>         bool isExist;
>         uint id;
>      ^^^^^^^^^^^
>         uint referrerID;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        59
Source: 
>         uint referrerID;
>        uint referredUsers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^
>         mapping(uint => uint) levelExpired;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        60
Source: 
>        uint referredUsers;
>         mapping(uint => uint) levelExpired;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        62
Source: 
>     }
>     
>  ^^^
>      struct PoolUserStruct {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        64
Source: 
>      struct PoolUserStruct {
>         bool isExist;
>                 ^^^^^
>         uint id;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        66
Source: 
>         uint id;
>        uint payment_received; 
>                  ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        70
Source: 
>     mapping (address => UserStruct) public users;
>      mapping (uint => address) public userList;
>                                                
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        74
Source: 
>      mapping (uint => address) public pool1userList;
>      
>   ^^^
>      mapping (address => PoolUserStruct) public pool2users;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        86
Source: 
>      mapping (uint => address) public pool5userList;
>      
>   ^^^
>      mapping (address => PoolUserStruct) public pool6users;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        87
Source: 
>      
>      mapping (address => PoolUserStruct) public pool6users;
>                                                ^^^^^^^^^^^^
>      mapping (uint => address) public pool6userList;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        88
Source: 
>      mapping (address => PoolUserStruct) public pool6users;
>      mapping (uint => address) public pool6userList;
>                                           ^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        90
Source: 
>      
>      mapping (address => PoolUserStruct) public pool7users;
>                                           ^^^^^^^^^^^^^^^^^
>      mapping (uint => address) public pool7userList;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        91
Source: 
>      mapping (address => PoolUserStruct) public pool7users;
>      mapping (uint => address) public pool7userList;
>                                           ^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        93
Source: 
>      
>      mapping (address => PoolUserStruct) public pool8users;
>                                           ^^^^^^^^^^^^^^^^^
>      mapping (uint => address) public pool8userList;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        94
Source: 
>      mapping (address => PoolUserStruct) public pool8users;
>      mapping (uint => address) public pool8userList;
>                                           ^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        96
Source: 
>      
>      mapping (address => PoolUserStruct) public pool9users;
>                                           ^^^^^^^^^^^^^^^^^
>      mapping (uint => address) public pool9userList;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        97
Source: 
>      mapping (address => PoolUserStruct) public pool9users;
>      mapping (uint => address) public pool9userList;
>                                           ^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        99
Source: 
>      
>      mapping (address => PoolUserStruct) public pool10users;
>                                           ^^^^^^^^^^^^^^^^^^
>      mapping (uint => address) public pool10userList;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        102
Source: 
>      
>     mapping(uint => uint) public LEVEL_PRICE;
>                                         ^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        105
Source: 
>    uint REGESTRATION_FESS=0.05 ether;
>    uint pool1_price=0.1 ether;
>          ^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.2 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        107
Source: 
>    uint pool2_price=0.2 ether ;
>    uint pool3_price=0.5 ether;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        109
Source: 
>    uint pool4_price=1 ether;
>    uint pool5_price=2 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        111
Source: 
>    uint pool6_price=5 ether;
>    uint pool7_price=10 ether ;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=20 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        113
Source: 
>    uint pool8_price=20 ether;
>    uint pool9_price=50 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool10_price=100 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        115
Source: 
>    uint pool10_price=100 ether;
>    
> ^^^
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        116
Source: 
>    
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        117
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        117
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                                                          ^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        119
Source: 
>       
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        122
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        122
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        122
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                                                                  ^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        124
Source: 
>    
>     UserStruct[] public requests;
>                        ^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        127
Source: 
>       constructor() public {
>           ownerWallet = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        129
Source: 
> 
>         LEVEL_PRICE[1] = 0.01 ether;
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[2] = 0.005 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        129
Source: 
> 
>         LEVEL_PRICE[1] = 0.01 ether;
>                                      
>         LEVEL_PRICE[2] = 0.005 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        130
Source: 
>         LEVEL_PRICE[1] = 0.01 ether;
>         LEVEL_PRICE[2] = 0.005 ether;
>                              ^^^^^^^^
>         LEVEL_PRICE[3] = 0.0025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        131
Source: 
>         LEVEL_PRICE[2] = 0.005 ether;
>         LEVEL_PRICE[3] = 0.0025 ether;
>                       ^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[4] = 0.00025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        132
Source: 
>         LEVEL_PRICE[3] = 0.0025 ether;
>         LEVEL_PRICE[4] = 0.00025 ether;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^
>       unlimited_level_price=0.00025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        133
Source: 
>         LEVEL_PRICE[4] = 0.00025 ether;
>       unlimited_level_price=0.00025 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BullRun
Line:        150
Source: 
>        
>          PoolUserStruct memory pooluserStruct;
>                                             ^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        329
Source: 
>        function buyPool1() public payable {
>        require(users[msg.sender].isExist, "User Not Registered");
>                                              ^^^^^^^^^^^^^^^^^^^^
>       require(!pool1users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        665
Source: 
>    
> }


[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        367
Source: 
>         require(msg.value == pool2_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        402
Source: 
>         require(msg.value == pool3_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        434
Source: 
>         require(msg.value == pool4_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        467
Source: 
>         require(msg.value == pool5_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        498
Source: 
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>         
>  ^^^^^^^
>         PoolUserStruct memory userStruct;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        528
Source: 
>         require(msg.value == pool7_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        560
Source: 
>         require(msg.value == pool8_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        592
Source: 
>       require(!pool9users[msg.sender].isExist, "Already in AutoPool");
>         require(msg.value == pool9_price, 'Incorrect Value');
>                                                               
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        625
Source: 
>         require(msg.value == pool10_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        661
Source: 
>              
>          }
>   ^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        329
Source: 
>        function buyPool1() public payable {
>        require(users[msg.sender].isExist, "User Not Registered");
>                                              ^^^^^^^^^^^^^^^^^^^^
>       require(!pool1users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        665
Source: 
>    
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        367
Source: 
>         require(msg.value == pool2_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        402
Source: 
>         require(msg.value == pool3_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        434
Source: 
>         require(msg.value == pool4_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        467
Source: 
>         require(msg.value == pool5_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        498
Source: 
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>         
>  ^^^^^^^
>         PoolUserStruct memory userStruct;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        528
Source: 
>         require(msg.value == pool7_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        560
Source: 
>         require(msg.value == pool8_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        592
Source: 
>       require(!pool9users[msg.sender].isExist, "Already in AutoPool");
>         require(msg.value == pool9_price, 'Incorrect Value');
>                                                               
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        625
Source: 
>         require(msg.value == pool10_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BullRun
Line:        661
Source: 
>              
>          }
>   ^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        329
Source: 
>        function buyPool1() public payable {
>        require(users[msg.sender].isExist, "User Not Registered");
>                                              ^^^^^^^^^^^^^^^^^^^^
>       require(!pool1users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        665
Source: 
>    
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        367
Source: 
>         require(msg.value == pool2_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        402
Source: 
>         require(msg.value == pool3_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        434
Source: 
>         require(msg.value == pool4_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        467
Source: 
>         require(msg.value == pool5_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        498
Source: 
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>         
>  ^^^^^^^
>         PoolUserStruct memory userStruct;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        528
Source: 
>         require(msg.value == pool7_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        560
Source: 
>         require(msg.value == pool8_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        592
Source: 
>       require(!pool9users[msg.sender].isExist, "Already in AutoPool");
>         require(msg.value == pool9_price, 'Incorrect Value');
>                                                               
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        625
Source: 
>         require(msg.value == pool10_price, 'Incorrect Value');
>         require(users[msg.sender].referredUsers>=0, "Must need 0 referral");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BullRun
Line:        661
Source: 
>              
>          }
>   ^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BullRun
Line:        329
Source: 
>        function buyPool1() public payable {
>        require(users[msg.sender].isExist, "User Not Registered");
>                                              ^^^^^^^^^^^^^^^^^^^^
>       require(!pool1users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BullRun
Line:        665
Source: 
>    
> }


[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BullRun
Line:        150
Source: 
>        
>          PoolUserStruct memory pooluserStruct;
>                                             ^^
>         

[0m
