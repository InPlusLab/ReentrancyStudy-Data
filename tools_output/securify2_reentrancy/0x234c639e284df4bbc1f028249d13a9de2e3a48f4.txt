Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        66
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        75
Source: 
>      */
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        66
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        75
Source: 
>      */
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KauriStaking
Line:        109
Source: 
> 
>     function stakeTokens(uint256 _amount, uint256 _duration) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakedTokens[msg.sender].amount == 0, "some tokens are already staked for this address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KauriStaking
Line:        116
Source: 
> 
>     function stakeTokensFor(address _staker, uint256 _amount, uint256 _duration) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakedTokens[_staker].amount == 0, "some tokens are already staked for this address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KauriStaking
Line:        123
Source: 
> 
>     function withdrawTokens(uint256 _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Staked memory staked = stakedTokens[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KauriStaking
Line:        148
Source: 
> 
>     function stakedDetails(address _staker) public view returns (uint256, uint256, uint256, bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Staked memory staked = stakedTokens[_staker];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        75
Source: 
>      */
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KauriStaking
Line:        148
Source: 
> 
>     function stakedDetails(address _staker) public view returns (uint256, uint256, uint256, bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Staked memory staked = stakedTokens[_staker];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KauriStaking
Line:        109
Source: 
> 
>     function stakeTokens(uint256 _amount, uint256 _duration) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakedTokens[msg.sender].amount == 0, "some tokens are already staked for this address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KauriStaking
Line:        116
Source: 
> 
>     function stakeTokensFor(address _staker, uint256 _amount, uint256 _duration) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakedTokens[_staker].amount == 0, "some tokens are already staked for this address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    KauriStaking
Line:        111
Source: 
>         require(stakedTokens[msg.sender].amount == 0, "some tokens are already staked for this address");
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakedTokens[msg.sender] = Staked(now, _duration, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    KauriStaking
Line:        118
Source: 
>         require(stakedTokens[_staker].amount == 0, "some tokens are already staked for this address");
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakedTokens[_staker] = Staked(now, _duration, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    KauriStaking
Line:        134
Source: 
> 
>         token.transfer(msg.sender, toWithdaw);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(staked.amount == toWithdaw){

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    KauriStaking
Line:        111
Source: 
>         require(stakedTokens[msg.sender].amount == 0, "some tokens are already staked for this address");
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakedTokens[msg.sender] = Staked(now, _duration, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    KauriStaking
Line:        118
Source: 
>         require(stakedTokens[_staker].amount == 0, "some tokens are already staked for this address");
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakedTokens[_staker] = Staked(now, _duration, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    KauriStaking
Line:        134
Source: 
> 
>         token.transfer(msg.sender, toWithdaw);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(staked.amount == toWithdaw){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    KauriStaking
Line:        111
Source: 
>         require(stakedTokens[msg.sender].amount == 0, "some tokens are already staked for this address");
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakedTokens[msg.sender] = Staked(now, _duration, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    KauriStaking
Line:        118
Source: 
>         require(stakedTokens[_staker].amount == 0, "some tokens are already staked for this address");
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakedTokens[_staker] = Staked(now, _duration, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    KauriStaking
Line:        134
Source: 
> 
>         token.transfer(msg.sender, toWithdaw);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(staked.amount == toWithdaw){

[0m
