[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EJackpot
Line:        445
Source: 
>         address addr = msg.sender;
>         assembly {size := extcodesize(addr)}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(size <= 0, "Called by contract");

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EJackpot
Line:        283
Source: 
>     uint public totalWins = 0;
>     Probability[11] public probabilities;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => uint[12]) public betsPrizes;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EJackpot
Line:        286
Source: 
>     mapping(uint => bool) public cases;
>     uint[9] public casesArr = [
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         5 * 10 ** 16,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        32
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == owner);
>                 ^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    EJackpot
Line:        359
Source: 
>     function play(address payable referrer) external payable notContract {
>         if (msg.sender == owner) return;
>             ^^^^^^^^^^^^^^^^^^^
>         uint maxPrize = betsPrizes[msg.value][betsPrizes[msg.value].length - 1] * multiplier;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    EJackpot
Line:        375
Source: 
> 
>         if (referrer == address(0x0) && referrals[msg.sender] == address(0x0)) return;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    EJackpot
Line:        438
Source: 
>     modifier onlyOwner {
>         require(msg.sender == owner, "Called by unknown account");
>                 ^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        40
Source: 
>      */
>     function transferOwnership(address newOwner) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        173
Source: 
> 
>     function getMonth(uint timestamp) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return parseTimestamp(timestamp).month;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        177
Source: 
> 
>     function getDay(uint timestamp) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return parseTimestamp(timestamp).day;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        201
Source: 
> 
>     function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return toTimestamp(year, month, day, hour, 0, 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        205
Source: 
> 
>     function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return toTimestamp(year, month, day, hour, minute, 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        209
Source: 
> 
>     function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 i;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        40
Source: 
>      */
>     function transferOwnership(address newOwner) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EJackpot
Line:        373
Source: 
>         increaseDailyStat(prize);
>         msg.sender.transfer(prize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EJackpot
Line:        389
Source: 
>         referralStats[referrals[msg.sender]].profit += referrerProfit;
>         referrals[msg.sender].transfer(referrerProfit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EJackpot
Line:        416
Source: 
>         uint16 year = dateTimeAPI.getYear(now);
>         uint8 month = dateTimeAPI.getMonth(now);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 day = dateTimeAPI.getDay(now);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EJackpot
Line:        417
Source: 
>         uint8 month = dateTimeAPI.getMonth(now);
>         uint8 day = dateTimeAPI.getDay(now);
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 hour = dateTimeAPI.getHour(now);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EJackpot
Line:        418
Source: 
>         uint8 day = dateTimeAPI.getDay(now);
>         uint8 hour = dateTimeAPI.getHour(now);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint timestamp = dateTimeAPI.toTimestamp(year, month, day, hour);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EJackpot
Line:        419
Source: 
>         uint8 hour = dateTimeAPI.getHour(now);
>         uint timestamp = dateTimeAPI.toTimestamp(year, month, day, hour);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EJackpot
Line:        430
Source: 
>         require(address(this).balance >= amount);
>         msg.sender.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EJackpot
Line:        415
Source: 
>     function increaseDailyStat(uint prize) private {
>         uint16 year = dateTimeAPI.getYear(now);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 month = dateTimeAPI.getMonth(now);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        173
Source: 
> 
>     function getMonth(uint timestamp) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return parseTimestamp(timestamp).month;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        177
Source: 
> 
>     function getDay(uint timestamp) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return parseTimestamp(timestamp).day;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        71
Source: 
> 
>     function isLeapYear(uint16 year) public pure returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (year % 4 != 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        84
Source: 
> 
>     function leapYearsBefore(uint year) public pure returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         year -= 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        89
Source: 
> 
>     function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        181
Source: 
> 
>     function getHour(uint timestamp) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint8((timestamp / 60 / 60) % 24);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        185
Source: 
> 
>     function getMinute(uint timestamp) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint8((timestamp / 60) % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        189
Source: 
> 
>     function getSecond(uint timestamp) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint8(timestamp % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        193
Source: 
> 
>     function getWeekday(uint timestamp) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        197
Source: 
> 
>     function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return toTimestamp(year, month, day, 0, 0, 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        201
Source: 
> 
>     function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return toTimestamp(year, month, day, hour, 0, 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        205
Source: 
> 
>     function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return toTimestamp(year, month, day, hour, minute, 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        209
Source: 
> 
>     function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 i;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        113
Source: 
> 
>         secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        114
Source: 
>         secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>         secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        158
Source: 
> 
>         secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        159
Source: 
>         secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>         secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EJackpot
Line:        348
Source: 
>              for (uint i = 0; i < probabilities.length; i++) {
>                  sum+= multiplier*betsPrizes[casesVal][i]*(probabilities[i].to-probabilities[i].from+1);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EJackpot
Line:        348
Source: 
>              for (uint i = 0; i < probabilities.length; i++) {
>                  sum+= multiplier*betsPrizes[casesVal][i]*(probabilities[i].to-probabilities[i].from+1);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EJackpot
Line:        351
Source: 
> 
>              result[casesIndex]=((d*sum)/(casesVal*100));
>                                   ^^^^^
>          }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EJackpot
Line:        360
Source: 
>         if (msg.sender == owner) return;
>         uint maxPrize = betsPrizes[msg.value][betsPrizes[msg.value].length - 1] * multiplier;
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(cases[msg.value] && address(this).balance >= maxPrize, "Contract balance is not enough");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EJackpot
Line:        387
Source: 
>         if (casinoProfit <= 0) return;
>         uint referrerProfit = uint(casinoProfit * 10 / 100);
>                                    ^^^^^^^^^^^^^^^^^
>         referralStats[referrals[msg.sender]].profit += referrerProfit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EJackpot
Line:        402
Source: 
>             if (chance >= probabilities[i].from && chance <= probabilities[i].to) {
>                 prize = prizes[i] * multiplier;
>                         ^^^^^^^^^^^^^^^^^^^^^^
>                 break;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EJackpot
Line:        389
Source: 
>         referralStats[referrals[msg.sender]].profit += referrerProfit;
>         referrals[msg.sender].transfer(referrerProfit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EJackpot
Line:        373
Source: 
>         increaseDailyStat(prize);
>         msg.sender.transfer(prize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DateTime
Line:        52
Source: 
>      */
>     struct _DateTime {
>     ^^^^^^^^^^^^^^^^^^
>         uint16 year;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EJackpot
Line:        304
Source: 
>     mapping(address => ReferralStat) public referralStats;
>     uint private constant multiplier = 1 ether / 10000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     DateTimeAPI private dateTimeAPI;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        62
Source: 
> 
>     uint constant DAY_IN_SECONDS = 86400;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant YEAR_IN_SECONDS = 31536000;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        63
Source: 
>     uint constant DAY_IN_SECONDS = 86400;
>     uint constant YEAR_IN_SECONDS = 31536000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant LEAP_YEAR_IN_SECONDS = 31622400;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        64
Source: 
>     uint constant YEAR_IN_SECONDS = 31536000;
>     uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        66
Source: 
> 
>     uint constant HOUR_IN_SECONDS = 3600;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant MINUTE_IN_SECONDS = 60;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        67
Source: 
>     uint constant HOUR_IN_SECONDS = 3600;
>     uint constant MINUTE_IN_SECONDS = 60;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        69
Source: 
> 
>     uint16 constant ORIGIN_YEAR = 1970;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EJackpot
Line:        443
Source: 
>     modifier notContract {
>         uint size;
>         ^^^^^^^^^
>         address addr = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EJackpot
Line:        444
Source: 
>         uint size;
>         address addr = msg.sender;
>         ^^^^^^^^^^^^
>         assembly {size := extcodesize(addr)}

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EJackpot
Line:        334
Source: 
>         betsPrizes[15 * 10 ** 17] = [2000, 3000, 4000, 5000, 7000, 10000, 15000, 20000, 40000, 60000, 75000];
>         betsPrizes[2 * 10 ** 18] = [2665, 4000, 5330, 6666, 9350, 13330, 20000, 26665, 53330, 80000, 100000];
>                                                                                                      ^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EJackpot
Line:        430
Source: 
>         require(address(this).balance >= amount);
>         msg.sender.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EJackpot
Line:        373
Source: 
>         increaseDailyStat(prize);
>         msg.sender.transfer(prize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EJackpot
Line:        389
Source: 
>         referralStats[referrals[msg.sender]].profit += referrerProfit;
>         referrals[msg.sender].transfer(referrerProfit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EJackpot
Line:        373
Source: 
>         increaseDailyStat(prize);
>         msg.sender.transfer(prize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EJackpot
Line:        389
Source: 
>         referralStats[referrals[msg.sender]].profit += referrerProfit;
>         referrals[msg.sender].transfer(referrerProfit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EJackpot
Line:        373
Source: 
>         increaseDailyStat(prize);
>         msg.sender.transfer(prize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EJackpot
Line:        389
Source: 
>         referralStats[referrals[msg.sender]].profit += referrerProfit;
>         referrals[msg.sender].transfer(referrerProfit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EJackpot
Line:        430
Source: 
>         require(address(this).balance >= amount);
>         msg.sender.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EJackpot
Line:        415
Source: 
>     function increaseDailyStat(uint prize) private {
>         uint16 year = dateTimeAPI.getYear(now);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 month = dateTimeAPI.getMonth(now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EJackpot
Line:        416
Source: 
>         uint16 year = dateTimeAPI.getYear(now);
>         uint8 month = dateTimeAPI.getMonth(now);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 day = dateTimeAPI.getDay(now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EJackpot
Line:        417
Source: 
>         uint8 month = dateTimeAPI.getMonth(now);
>         uint8 day = dateTimeAPI.getDay(now);
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 hour = dateTimeAPI.getHour(now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EJackpot
Line:        418
Source: 
>         uint8 day = dateTimeAPI.getDay(now);
>         uint8 hour = dateTimeAPI.getHour(now);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint timestamp = dateTimeAPI.toTimestamp(year, month, day, hour);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EJackpot
Line:        419
Source: 
>         uint8 hour = dateTimeAPI.getHour(now);
>         uint timestamp = dateTimeAPI.toTimestamp(year, month, day, hour);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DateTime
Line:        110
Source: 
>         // Year
>         dt.year = getYear(timestamp);
>         ^^
>         buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DateTime
Line:        224
Source: 
>         uint8[12] memory monthDayCounts;
>         monthDayCounts[0] = 31;
>         ^^^^^^^^^^^^^^
>         if (isLeapYear(year)) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    EJackpot
Line:        351
Source: 
> 
>              result[casesIndex]=((d*sum)/(casesVal*100));
>              ^^^^^^
>          }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EJackpot
Line:        283
Source: 
>     uint public totalWins = 0;
>     Probability[11] public probabilities;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => uint[12]) public betsPrizes;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    EJackpot
Line:        434
Source: 
>     function random() private view returns (uint8) {
>         return uint8(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender, userCasesCount[msg.sender]))) % 100) + 1;
>                                                         ^^^^^^^^^^^^^^^
>     }

[0m
