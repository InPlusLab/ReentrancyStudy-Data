pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        85
Source: 
> // ERC Token Standard #20 Interface
> // ----------------------------------------------------------------------------
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> interface IToken {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        85
Source: 
> // ERC Token Standard #20 Interface
> // ----------------------------------------------------------------------------
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> interface IToken {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TritonPresale
Line:        163
Source: 
>     function setMaxEthLimit(uint256 amount) external onlyOwner {
>         maxEthLimit = amount;    
>                                 ^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TritonPresale
Line:        168
Source: 
>         tokenRatePerEth = rate;
>     }
>  ^^^^
>     

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TritonPresale
Line:        171
Source: 
>     function setRateDecimals(uint256 decimals) external onlyOwner {
>         rateDecimals = decimals;
>                                 
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TritonPresale
Line:        173
Source: 
>     }
> }
>                                                                                                        

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TritonPresale
Line:        173
Source: 
>     }
> }
>                                                                                                                                                                                                                      

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TritonPresale
Line:        124
Source: 
>     
>     function getTokensPerEth(uint256 amount) internal view returns(uint256) {
>                                                                             ^
>         return amount.mul(tokenRatePerEth).div(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    TritonPresale
Line:        131
Source: 
>     function burnRemaining() external onlyOwner {
>         require(!isPresaleOpen, "You cannot burn tokens untitl the presale is closed.");
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Owned
Line:        76
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>                                                                  ^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TritonPresale
Line:        104
Source: 
>     
>     mapping(address => uint256) public usersInvestments;
>                                              ^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TritonPresale
Line:        107
Source: 
>     constructor() public {
>         owner = msg.sender;
>                     ^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TritonPresale
Line:        111
Source: 
>     
>     receive() external payable{
>               ^^^^^^^^^^^^^^^^^
>         require(isPresaleOpen, "Presale is not open.");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TritonPresale
Line:        112
Source: 
>     receive() external payable{
>         require(isPresaleOpen, "Presale is not open.");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TritonPresale
Line:        113
Source: 
>         require(isPresaleOpen, "Presale is not open.");
>         require(
>        ^^^^^^^^^
>                 usersInvestments[msg.sender].add(msg.value) <= maxEthLimit

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TritonPresale
Line:        114
Source: 
>         require(
>                 usersInvestments[msg.sender].add(msg.value) <= maxEthLimit
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 && usersInvestments[msg.sender].add(msg.value) >= minEthLimit,

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TritonPresale
Line:        115
Source: 
>                 usersInvestments[msg.sender].add(msg.value) <= maxEthLimit
>                 && usersInvestments[msg.sender].add(msg.value) >= minEthLimit,
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Installment Invalid."

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TritonPresale
Line:        131
Source: 
>     function burnRemaining() external onlyOwner {
>         require(!isPresaleOpen, "You cannot burn tokens untitl the presale is closed.");
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TritonPresale
Line:        131
Source: 
>     function burnRemaining() external onlyOwner {
>         require(!isPresaleOpen, "You cannot burn tokens untitl the presale is closed.");
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TritonPresale
Line:        124
Source: 
>     
>     function getTokensPerEth(uint256 amount) internal view returns(uint256) {
>                                                                             ^
>         return amount.mul(tokenRatePerEth).div(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TritonPresale
Line:        144
Source: 
>         
>         isPresaleOpen = false;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TritonPresale
Line:        142
Source: 
>     function close() external onlyOwner{
>         require(isPresaleOpen, "Presale is not open yet.");
>                                       ^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TritonPresale
Line:        104
Source: 
>     
>     mapping(address => uint256) public usersInvestments;
>                                              ^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TritonPresale
Line:        106
Source: 
>     
>     constructor() public {
>               ^^^^^^^^^^^^
>         owner = msg.sender;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TritonPresale
Line:        131
Source: 
>     function burnRemaining() external onlyOwner {
>         require(!isPresaleOpen, "You cannot burn tokens untitl the presale is closed.");
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   

[0m
