Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MinionSummoner
Line:        108
Source: 
>     uint8 private status;
>     uint8 private NOT_SET;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant SET = 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Minion
Line:        45
Source: 
> 
>     function doWithdraw(address token, uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         moloch.withdrawBalance(token, amount); // withdraw funds from parent moloch

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Minion
Line:        49
Source: 
> 
>     function proposeAction(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address actionTo,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Minion
Line:        84
Source: 
> 
>     function executeAction(uint256 proposalId) public returns (bytes memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Action memory action = actions[proposalId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinionSummoner
Line:        117
Source: 
> 
>     function setMolochSummoner(address _molochSummoner) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status != SET, "already set");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinionSummoner
Line:        123
Source: 
> 
>     function summonMinion(address _moloch, address _molochDepositToken) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == molochSummoner, "not molochSummoner");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Minion
Line:        95
Source: 
>         actions[proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Minion
Line:        95
Source: 
>         actions[proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinionSummoner
Line:        117
Source: 
> 
>     function setMolochSummoner(address _molochSummoner) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status != SET, "already set");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Minion
Line:        45
Source: 
> 
>     function doWithdraw(address token, uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         moloch.withdrawBalance(token, amount); // withdraw funds from parent moloch

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Minion
Line:        49
Source: 
> 
>     function proposeAction(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address actionTo,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinionSummoner
Line:        123
Source: 
> 
>     function summonMinion(address _moloch, address _molochDepositToken) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == molochSummoner, "not molochSummoner");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Minion
Line:        59
Source: 
> 
>         uint256 proposalId = moloch.submitProposal(
>                              ^^^^^^^^^^^^^^^^^^^^^^
>             address(this),

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinionSummoner
Line:        108
Source: 
>     uint8 private status;
>     uint8 private NOT_SET;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant SET = 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Minion
Line:        95
Source: 
>         actions[proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Minion
Line:        95
Source: 
>         actions[proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Minion
Line:        95
Source: 
>         actions[proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Minion
Line:        86
Source: 
>         Action memory action = actions[proposalId];
>         bool[6] memory flags = moloch.getProposalFlags(proposalId);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Minion
Line:        46
Source: 
>     function doWithdraw(address token, uint256 amount) public {
>         moloch.withdrawBalance(token, amount); // withdraw funds from parent moloch
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Minion
Line:        59
Source: 
> 
>         uint256 proposalId = moloch.submitProposal(
>                              ^^^^^^^^^^^^^^^^^^^^^^
>             address(this),

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MinionSummoner
Line:        105
Source: 
> contract MinionSummoner {
>     Minion private minion;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address public molochSummoner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MinionSummoner
Line:        106
Source: 
>     Minion private minion;
>     address public molochSummoner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private status;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinionSummoner
Line:        108
Source: 
>     uint8 private status;
>     uint8 private NOT_SET;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant SET = 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Minion
Line:        95
Source: 
>         actions[proposalId].executed = true;
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call failure");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Minion
Line:        78
Source: 
> 
>         actions[proposalId] = action;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Minion
Line:        94
Source: 
>         // execute call
>         actions[proposalId].executed = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MinionSummoner
Line:        119
Source: 
>         require(status != SET, "already set");
>         molochSummoner = _molochSummoner;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         status = SET; // lock minionSummoner to molochSummoner

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MinionSummoner
Line:        120
Source: 
>         molochSummoner = _molochSummoner;
>         status = SET; // lock minionSummoner to molochSummoner
>         ^^^^^^^^^^^^
>     }

[0m
