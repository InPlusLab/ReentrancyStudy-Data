Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DebtNotifier
Line:        973
Source: 
>   **/
>   function debtChanged(uint256 _vaultId) public override onlyVaultsCore {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IVaultsDataProvider.Vault memory v = a.parallel().vaultsData().vaults(_vaultId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DebtNotifier
Line:        990
Source: 
>   **/
>   function setCollateralSupplyMiner(address collateral, ISupplyMiner supplyMiner) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     collateralSupplyMinerMapping[collateral] = supplyMiner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DebtNotifier
Line:        973
Source: 
>   **/
>   function debtChanged(uint256 _vaultId) public override onlyVaultsCore {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IVaultsDataProvider.Vault memory v = a.parallel().vaultsData().vaults(_vaultId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DebtNotifier
Line:        990
Source: 
>   **/
>   function setCollateralSupplyMiner(address collateral, ISupplyMiner supplyMiner) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     collateralSupplyMinerMapping[collateral] = supplyMiner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ITimelock
Line:        174
Source: 
> 
>   function GRACE_PERIOD() external view returns (uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        303
Source: 
> 
>   function MANAGER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        305
Source: 
> 
>   function MINTER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IVaultsCore
Line:        782
Source: 
> 
>   function WETH() external view returns (IWETH);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DebtNotifier
Line:        958
Source: 
>   modifier onlyVaultsCore() {
>     require(msg.sender == address(a.parallel().core()), "Caller is not VaultsCore");
>                                   ^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DebtNotifier
Line:        974
Source: 
>   function debtChanged(uint256 _vaultId) public override onlyVaultsCore {
>     IVaultsDataProvider.Vault memory v = a.parallel().vaultsData().vaults(_vaultId);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DebtNotifier
Line:        958
Source: 
>   modifier onlyVaultsCore() {
>     require(msg.sender == address(a.parallel().core()), "Caller is not VaultsCore");
>                                   ^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DebtNotifier
Line:        974
Source: 
>   function debtChanged(uint256 _vaultId) public override onlyVaultsCore {
>     IVaultsDataProvider.Vault memory v = a.parallel().vaultsData().vaults(_vaultId);
>                                          ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DebtNotifier
Line:        974
Source: 
>   function debtChanged(uint256 _vaultId) public override onlyVaultsCore {
>     IVaultsDataProvider.Vault memory v = a.parallel().vaultsData().vaults(_vaultId);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DebtNotifier
Line:        981
Source: 
>     }
>     supplyMiner.baseDebtChanged(v.owner, v.baseDebt);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DebtNotifier
Line:        991
Source: 
>   function setCollateralSupplyMiner(address collateral, ISupplyMiner supplyMiner) public override onlyManager {
>     collateralSupplyMinerMapping[collateral] = supplyMiner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DebtNotifier
Line:        958
Source: 
>   modifier onlyVaultsCore() {
>     require(msg.sender == address(a.parallel().core()), "Caller is not VaultsCore");
>                                   ^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DebtNotifier
Line:        974
Source: 
>   function debtChanged(uint256 _vaultId) public override onlyVaultsCore {
>     IVaultsDataProvider.Vault memory v = a.parallel().vaultsData().vaults(_vaultId);
>                                          ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DebtNotifier
Line:        974
Source: 
>   function debtChanged(uint256 _vaultId) public override onlyVaultsCore {
>     IVaultsDataProvider.Vault memory v = a.parallel().vaultsData().vaults(_vaultId);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DebtNotifier
Line:        963
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));
>             ^^^^^^^^^^^^^^
>     _;

[0m
