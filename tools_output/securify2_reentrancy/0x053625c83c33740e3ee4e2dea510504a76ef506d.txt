[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        72
Source: 
>      */
>     function owner() public view returns (address) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        100
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        106
Source: 
> 
>     function geUnlockTime() public view returns (uint256) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _lockTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        111
Source: 
>     //Locks the contract for owner for the amount of time provided
>     function lock(uint256 time) public virtual onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _previousOwner = _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        119
Source: 
>     //Unlocks the contract for owner when _lockTime is exceeds
>     function unlock() public virtual {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_previousOwner == msg.sender, "You don't have permission to unlock");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        100
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        106
Source: 
> 
>     function geUnlockTime() public view returns (uint256) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _lockTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        111
Source: 
>     //Locks the contract for owner for the amount of time provided
>     function lock(uint256 time) public virtual onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _previousOwner = _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        119
Source: 
>     //Unlocks the contract for owner when _lockTime is exceeds
>     function unlock() public virtual {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_previousOwner == msg.sender, "You don't have permission to unlock");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WSDOGEPresale
Line:        212
Source: 
>     
>     function setTokensPerAllocation(uint256 amount) public onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokensPerAllocation = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WSDOGEPresale
Line:        216
Source: 
>     
>     function setAllocationSize(uint256 amount) public onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allocationSize = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WSDOGEPresale
Line:        220
Source: 
>     
>     function whitelistAddresses(address[] memory account) public onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < account.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WSDOGEPresale
Line:        226
Source: 
>     
>     function removeAddressesFromWhitelist(address[] memory account) public onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < account.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WSDOGEPresale
Line:        232
Source: 
>     
>     function withdrawTokens() public onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(tokenAddress).transfer(owner(), IERC20(tokenAddress).balanceOf(address(this)));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WSDOGEPresale
Line:        236
Source: 
>     
>     function withdrawETH() public onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         payable(owner()).transfer(address(this).balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WSDOGEPresale
Line:        246
Source: 
>         
>         IERC20(tokenAddress).transfer(msg.sender, tokensPerAllocation);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WSDOGEPresale
Line:        233
Source: 
>     function withdrawTokens() public onlyOwner {
>         IERC20(tokenAddress).transfer(owner(), IERC20(tokenAddress).balanceOf(address(this)));
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WSDOGEPresale
Line:        233
Source: 
>     function withdrawTokens() public onlyOwner {
>         IERC20(tokenAddress).transfer(owner(), IERC20(tokenAddress).balanceOf(address(this)));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WSDOGEPresale
Line:        237
Source: 
>     function withdrawETH() public onlyOwner {
>         payable(owner()).transfer(address(this).balance);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        111
Source: 
>     //Locks the contract for owner for the amount of time provided
>     function lock(uint256 time) public virtual onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _previousOwner = _owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WSDOGEPresale
Line:        212
Source: 
>     
>     function setTokensPerAllocation(uint256 amount) public onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokensPerAllocation = amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WSDOGEPresale
Line:        216
Source: 
>     
>     function setAllocationSize(uint256 amount) public onlyOwner {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allocationSize = amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WSDOGEPresale
Line:        246
Source: 
>         
>         IERC20(tokenAddress).transfer(msg.sender, tokensPerAllocation);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        28
Source: 
> //SPDX-License-Identifier: UNLICENSED
> pragma solidity ^0.6.12;
>       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    WSDOGEPresale
Line:        237
Source: 
>     function withdrawETH() public onlyOwner {
>         payable(owner()).transfer(address(this).balance);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    WSDOGEPresale
Line:        237
Source: 
>     function withdrawETH() public onlyOwner {
>         payable(owner()).transfer(address(this).balance);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    WSDOGEPresale
Line:        237
Source: 
>     function withdrawETH() public onlyOwner {
>         payable(owner()).transfer(address(this).balance);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WSDOGEPresale
Line:        246
Source: 
>         
>         IERC20(tokenAddress).transfer(msg.sender, tokensPerAllocation);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WSDOGEPresale
Line:        233
Source: 
>     function withdrawTokens() public onlyOwner {
>         IERC20(tokenAddress).transfer(owner(), IERC20(tokenAddress).balanceOf(address(this)));
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WSDOGEPresale
Line:        233
Source: 
>     function withdrawTokens() public onlyOwner {
>         IERC20(tokenAddress).transfer(owner(), IERC20(tokenAddress).balanceOf(address(this)));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        55
Source: 
>     address private _owner;
>     address private _previousOwner;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _lockTime;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        56
Source: 
>     address private _previousOwner;
>     uint256 private _lockTime;
>           ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        55
Source: 
>     address private _owner;
>     address private _previousOwner;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _lockTime;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        56
Source: 
>     address private _previousOwner;
>     uint256 private _lockTime;
>           ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WSDOGEPresale
Line:        199
Source: 
>     address public tokenAddress;
>     uint256 public tokensPerAllocation;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public allocationSize;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WSDOGEPresale
Line:        200
Source: 
>     uint256 public tokensPerAllocation;
>     uint256 public allocationSize;
>           ^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => bool) public isWhitelisted;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WSDOGEPresale
Line:        246
Source: 
>         
>         IERC20(tokenAddress).transfer(msg.sender, tokensPerAllocation);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WSDOGEPresale
Line:        233
Source: 
>     function withdrawTokens() public onlyOwner {
>         IERC20(tokenAddress).transfer(owner(), IERC20(tokenAddress).balanceOf(address(this)));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WSDOGEPresale
Line:        237
Source: 
>     function withdrawETH() public onlyOwner {
>         payable(owner()).transfer(address(this).balance);
>                       ^^^^^^^
>     }

[0m
