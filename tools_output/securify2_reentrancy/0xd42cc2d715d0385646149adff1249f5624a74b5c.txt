[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        179
Source: 
>       uint length;
>       assembly { length := extcodesize(_addr) }    
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return (length>0);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        205
Source: 
>         uint256 loadSize;uint256 load;
>         assembly {
>         ^^^^^^^^^^
>           loadSize := mload(_extraData)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Token
Line:        46
Source: 
>   event Approval(address indexed _owner, address indexed _spender, uint256 _value);
>   uint public decimals;
>   ^^^^^^^^^^^^^^^^^^^^
>   string public name;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Token
Line:        47
Source: 
>   uint public decimals;
>   string public name;
>   ^^^^^^^^^^^^^^^^^^
>   uint256 public totalSupplyLimit;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Token
Line:        48
Source: 
>   string public name;
>   uint256 public totalSupplyLimit;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        10
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>            ^^^^^^
>     return c;  

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        10
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>                      ^^^^^^^^^^
>     return c;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        35
Source: 
> contract Token {
>   function totalSupply() public view returns (uint256 supply) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function balanceOf(address _owner) public view returns (uint256 balance) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        36
Source: 
>   function totalSupply() public view returns (uint256 supply) {}
>   function balanceOf(address _owner) public view returns (uint256 balance) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function transfer(address _to, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        37
Source: 
>   function balanceOf(address _owner) public view returns (uint256 balance) {}
>   function transfer(address _to, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        38
Source: 
>   function transfer(address _to, uint256 _value) public returns (bool success) {}
>   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function approve(address _spender, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        39
Source: 
>   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}
>   function approve(address _spender, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        40
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool success) {}
>   function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}  
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function burn(uint256 _value) public returns (bool success){}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        41
Source: 
>   function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}  
>   function burn(uint256 _value) public returns (bool success){}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function mintToken(address _target, uint256 _mintedAmount) public returns (bool success) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        42
Source: 
>   function burn(uint256 _value) public returns (bool success){}
>   function mintToken(address _target, uint256 _mintedAmount) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function share(address _token) external payable {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        95
Source: 
>     /*Setup administrator*/
>     function setManager(address _add)public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == owner) ;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        104
Source: 
>     /*change Owner*/  
>     function changeOwner(address payable _add)public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == owner) ;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        113
Source: 
>     /*Set the revenue receiving address*/
>     function setShare(address _add)public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == owner) ;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        122
Source: 
>     /*Set the distributionInvest operator address*/
>     function setOperator(address _add)public returns (bool success) {       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == owner) ;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        131
Source: 
>     /*Pause Issue*/
>     function setPauseIssue(bool _pause)public     {   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == manager) ; 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        138
Source: 
>     /*set InvestToken*/
>     function setInvestToken(address _token,uint256 _value,uint8 _tokenDecimals,uint256 _maxInvestRate)public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == owner) ; 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        156
Source: 
>     /*Set the latest price*/
>     function setNewPrice(address _token,uint256 _amount)public returns (bool success) { 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == manager) ;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        166
Source: 
>     // transfer Ether balance to owner
>     function withdrawEther(uint amount) public{// transfer balance to owner
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        203
Source: 
>     //This method implements the service contract function. _from: original sender, _value: send value, _token: token contract address, _extraData: extended data
>     function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public    {   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 loadSize;uint256 load;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        221
Source: 
>     /*End n round of auction, assign token*/
>     function distributionInvest(uint256 _periods,uint256 _batchsize) public returns (bool success)    {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == operator);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        168
Source: 
>       require(msg.sender == owner);
>       owner.transfer(amount); 
>       ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        189
Source: 
>         require(upAmount[_token] > 0);                               
>         require (Token(_token).transferFrom(_mgsSender, address(this), _amount)) ;   
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 n = safeDiv(block.number , blocksPeriod);   

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        173
Source: 
>      function getThisTimesSaleAmount(address _token) public view returns (uint256 ) {
>         return safeDiv(safeMul(safeSub(upTotalSupply , Token(tokenAddress).totalSupply()) , upAmount[_token]),safePower(10,18));
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }   

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        237
Source: 
>                     if (share != address(this)){
>                         require(Token(investToken[j]).transfer(share, investTotalAmount[n][investToken[j]]));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        239
Source: 
>                     }
>                     Token(tokenAddress).mintToken(address(this),SaleTotal[n][investToken[j]]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }   

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        243
Source: 
>                 for (uint256 i = distributionInvestI[_periods]; i < investorTotal[n][investToken[j]]; i++){
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        244
Source: 
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));
>                                                                                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        244
Source: 
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        246
Source: 
>                     }
>                     Token(tokenAddress).transfer(investAddress[n][investToken[j]][i],safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))) ;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _temp = _temp + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    Token
Line:        34
Source: 
> }
> contract Token {
> ^^^^^^^^^^^^^^^^
>   function totalSupply() public view returns (uint256 supply) {}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        131
Source: 
>     /*Pause Issue*/
>     function setPauseIssue(bool _pause)public     {   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == manager) ; 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        172
Source: 
>     /*Get current sales*/
>      function getThisTimesSaleAmount(address _token) public view returns (uint256 ) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return safeDiv(safeMul(safeSub(upTotalSupply , Token(tokenAddress).totalSupply()) , upAmount[_token]),safePower(10,18));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        199
Source: 
>     /*Buy UDAO*/
>     function buy(address _token,uint256 _amount) external payable  returns (bool success)    {   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _buy(msg.sender,_token,_amount);    }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        36
Source: 
>   function totalSupply() public view returns (uint256 supply) {}
>   function balanceOf(address _owner) public view returns (uint256 balance) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function transfer(address _to, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        37
Source: 
>   function balanceOf(address _owner) public view returns (uint256 balance) {}
>   function transfer(address _to, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        38
Source: 
>   function transfer(address _to, uint256 _value) public returns (bool success) {}
>   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function approve(address _spender, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        39
Source: 
>   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}
>   function approve(address _spender, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}  

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        40
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool success) {}
>   function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}  
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function burn(uint256 _value) public returns (bool success){}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        41
Source: 
>   function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}  
>   function burn(uint256 _value) public returns (bool success){}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function mintToken(address _target, uint256 _mintedAmount) public returns (bool success) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        42
Source: 
>   function burn(uint256 _value) public returns (bool success){}
>   function mintToken(address _target, uint256 _mintedAmount) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function share(address _token) external payable {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        43
Source: 
>   function mintToken(address _target, uint256 _mintedAmount) public returns (bool success) {}
>   function share(address _token) external payable {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Transfer(address indexed _from, address indexed _to, uint256 _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        138
Source: 
>     /*set InvestToken*/
>     function setInvestToken(address _token,uint256 _value,uint8 _tokenDecimals,uint256 _maxInvestRate)public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == owner) ; 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        156
Source: 
>     /*Set the latest price*/
>     function setNewPrice(address _token,uint256 _amount)public returns (bool success) { 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == manager) ;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        166
Source: 
>     // transfer Ether balance to owner
>     function withdrawEther(uint amount) public{// transfer balance to owner
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        203
Source: 
>     //This method implements the service contract function. _from: original sender, _value: send value, _token: token contract address, _extraData: extended data
>     function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public    {   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 loadSize;uint256 load;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        9
Source: 
>   function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
>     uint256 c = a * b;
>                 ^^^^^
>     assert(a == 0 || c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        237
Source: 
>                     if (share != address(this)){
>                         require(Token(investToken[j]).transfer(share, investTotalAmount[n][investToken[j]]));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        239
Source: 
>                     }
>                     Token(tokenAddress).mintToken(address(this),SaleTotal[n][investToken[j]]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }   

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        243
Source: 
>                 for (uint256 i = distributionInvestI[_periods]; i < investorTotal[n][investToken[j]]; i++){
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        244
Source: 
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));
>                                                                                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        244
Source: 
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        246
Source: 
>                     }
>                     Token(tokenAddress).transfer(investAddress[n][investToken[j]][i],safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))) ;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _temp = _temp + 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    tokenRecipient
Line:        50
Source: 
> }
> interface tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> contract UNIONDAOISSUE is SafeMath{     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        68
Source: 
>     mapping (uint256 => mapping (address => uint256)) public investorTotal;/*Number of investors in each issue*/    
>     mapping (uint256 => mapping (address => uint256)) public SaleTotal;/*Sales volume of each period*/    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) public upAmount;/*The total amount rate of this token exchange per day,Defaults:1000000000000000*/ 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        241
Source: 
>                 }   
>                 uint256 _temp;
>                 ^^^^^^^^^^^^^
>                 for (uint256 i = distributionInvestI[_periods]; i < investorTotal[n][investToken[j]]; i++){

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.5;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        141
Source: 
>         require (_token != address(0x0)) ;
>         require (_value > 0 && _value <= 10000000000000000) ;       
>                                          ^^^^^^^^^^^^^^^^^
>         if (upAmount[_token] == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        214
Source: 
>     function getGrowthRate(uint256 _base) public view returns (uint256 _rate) {
>         _rate = (block.number - _base) * 1000000000000000000 / 600000;          
>                                          ^^^^^^^^^^^^^^^^^^^
>         if(_rate > 10000000000000000000)        

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        214
Source: 
>     function getGrowthRate(uint256 _base) public view returns (uint256 _rate) {
>         _rate = (block.number - _base) * 1000000000000000000 / 600000;          
>                                                                ^^^^^^
>         if(_rate > 10000000000000000000)        

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        215
Source: 
>         _rate = (block.number - _base) * 1000000000000000000 / 600000;          
>         if(_rate > 10000000000000000000)        
>                    ^^^^^^^^^^^^^^^^^^^^
>             _rate = 10000000000000000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        216
Source: 
>         if(_rate > 10000000000000000000)        
>             _rate = 10000000000000000000;       
>                     ^^^^^^^^^^^^^^^^^^^^
>         return _rate;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        230
Source: 
>                 }
>                 if(investRate[n][investToken[j]] > safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) )){     
>                                                                                                      ^^^^^^^^^^^^^^^^^^^
>                     investRate[n][investToken[j]] = safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) );     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        230
Source: 
>                 }
>                 if(investRate[n][investToken[j]] > safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) )){     
>                                                                                                                                     ^^^^^^^^^^^^^^^^^^^
>                     investRate[n][investToken[j]] = safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) );     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        231
Source: 
>                 if(investRate[n][investToken[j]] > safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) )){     
>                     investRate[n][investToken[j]] = safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) );     
>                                                                                                       ^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        231
Source: 
>                 if(investRate[n][investToken[j]] > safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) )){     
>                     investRate[n][investToken[j]] = safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) );     
>                                                                                                                                      ^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        168
Source: 
>       require(msg.sender == owner);
>       owner.transfer(amount); 
>       ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        168
Source: 
>       require(msg.sender == owner);
>       owner.transfer(amount); 
>       ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        168
Source: 
>       require(msg.sender == owner);
>       owner.transfer(amount); 
>       ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        173
Source: 
>      function getThisTimesSaleAmount(address _token) public view returns (uint256 ) {
>         return safeDiv(safeMul(safeSub(upTotalSupply , Token(tokenAddress).totalSupply()) , upAmount[_token]),safePower(10,18));
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }   

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        189
Source: 
>         require(upAmount[_token] > 0);                               
>         require (Token(_token).transferFrom(_mgsSender, address(this), _amount)) ;   
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 n = safeDiv(block.number , blocksPeriod);   

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        237
Source: 
>                     if (share != address(this)){
>                         require(Token(investToken[j]).transfer(share, investTotalAmount[n][investToken[j]]));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        243
Source: 
>                 for (uint256 i = distributionInvestI[_periods]; i < investorTotal[n][investToken[j]]; i++){
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        244
Source: 
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));
>                                                                                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        239
Source: 
>                     }
>                     Token(tokenAddress).mintToken(address(this),SaleTotal[n][investToken[j]]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }   

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        244
Source: 
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        246
Source: 
>                     }
>                     Token(tokenAddress).transfer(investAddress[n][investToken[j]][i],safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))) ;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _temp = _temp + 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        180
Source: 
>       assembly { length := extcodesize(_addr) }    
>       return (length>0);
>               ^^^^^^
>     }    

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        208
Source: 
>           load := mload(add(_extraData, 0x20))}
>         load = load >> 8*(32 - loadSize);
>                                ^^^^^^^^
>         if(load == 0x31){_buy(_from,_token,_value);}

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        57
Source: 
>     address public share;
>     uint256 public tokenNumber;/*Number of assets*/    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public blocksPeriod;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        59
Source: 
>     uint256 public blocksPeriod;
>     bool public pauseIssue;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public baseBlock;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Token
Line:        46
Source: 
>   event Approval(address indexed _owner, address indexed _spender, uint256 _value);
>   uint public decimals;
>   ^^^^^^^^^^^^^^^^^^^^
>   string public name;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Token
Line:        47
Source: 
>   uint public decimals;
>   string public name;
>   ^^^^^^^^^^^^^^^^^^
>   uint256 public totalSupplyLimit;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Token
Line:        48
Source: 
>   string public name;
>   uint256 public totalSupplyLimit;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        191
Source: 
>         uint256 n = safeDiv(block.number , blocksPeriod);   
>         investAddress[n][_token][investorTotal[n][_token]] = _mgsSender; 
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         investAmount[n][_token][investorTotal[n][_token]] = _amount;        

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        192
Source: 
>         investAddress[n][_token][investorTotal[n][_token]] = _mgsSender; 
>         investAmount[n][_token][investorTotal[n][_token]] = _amount;        
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         investTotalAmount[n][_token] = safeAdd(investTotalAmount[n][_token],_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        193
Source: 
>         investAmount[n][_token][investorTotal[n][_token]] = _amount;        
>         investTotalAmount[n][_token] = safeAdd(investTotalAmount[n][_token],_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         investorTotal[n][_token] = safeAdd(investorTotal[n][_token],1);     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNIONDAOISSUE
Line:        194
Source: 
>         investTotalAmount[n][_token] = safeAdd(investTotalAmount[n][_token],_amount);
>         investorTotal[n][_token] = safeAdd(investorTotal[n][_token],1);     
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;    

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        228
Source: 
>                 if(distributionInvestI[_periods] == 0){
>                     investRate[n][investToken[j]] = safeDiv(safeMul(getThisTimesSaleAmount(investToken[j]) , safePower(10,18)) , investTotalAmount[n][investToken[j]]);     
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        231
Source: 
>                 if(investRate[n][investToken[j]] > safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) )){     
>                     investRate[n][investToken[j]] = safeDiv( safeMul( maxInvestRate[investToken[j]] , 1000000000000000000) , safeAdd(1000000000000000000 , getGrowthRate(baseBlock)) );     
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        234
Source: 
>                 if(distributionInvestI[_periods] == 0){
>                     SaleTotal[n][investToken[j]] = safeDiv(safeMul(investTotalAmount[n][investToken[j]],investRate[n][investToken[j]]),safePower(10,18));   
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     newPrice[investToken[j]] = safeDiv(safePower(10,36),investRate[n][investToken[j]]);   

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        235
Source: 
>                     SaleTotal[n][investToken[j]] = safeDiv(safeMul(investTotalAmount[n][investToken[j]],investRate[n][investToken[j]]),safePower(10,18));   
>                     newPrice[investToken[j]] = safeDiv(safePower(10,36),investRate[n][investToken[j]]);   
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     if (share != address(this)){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        239
Source: 
>                     }
>                     Token(tokenAddress).mintToken(address(this),SaleTotal[n][investToken[j]]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }   

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        244
Source: 
>                     if(Token(tokenAddress).balanceOf(address(this)) < safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))){
>                         Token(tokenAddress).mintToken(address(this),safeSub(safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18)),Token(tokenAddress).balanceOf(address(this))));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UNIONDAOISSUE
Line:        246
Source: 
>                     }
>                     Token(tokenAddress).transfer(investAddress[n][investToken[j]][i],safeDiv(safeMul(investAmount[n][investToken[j]][i],investRate[n][investToken[j]]),safePower(10,18))) ;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _temp = _temp + 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Token
Line:        46
Source: 
>   event Approval(address indexed _owner, address indexed _spender, uint256 _value);
>   uint public decimals;
>   ^^^^^^^^^^^^^^^^^^^^
>   string public name;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Token
Line:        47
Source: 
>   uint public decimals;
>   string public name;
>   ^^^^^^^^^^^^^^^^^^
>   uint256 public totalSupplyLimit;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Token
Line:        48
Source: 
>   string public name;
>   uint256 public totalSupplyLimit;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
