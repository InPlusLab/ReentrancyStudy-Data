[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        57
Source: 
>     // contracts then.
>     assembly { codehash := extcodehash(account) }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        95
Source: 
>     
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        100
Source: 
>     
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        95
Source: 
>     
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        100
Source: 
>     
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Whitelist
Line:        131
Source: 
> 	
> 	function mint(uint _amount) public payable {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.value >= NFTprice.mul(_amount), "Insufficient ETH");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Whitelist
Line:        139
Source: 
> 	
> 	function setWhitelist(address[] memory _users) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    uint userLength = _users.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Whitelist
Line:        150
Source: 
> 	
> 	function setNFTPrice(uint256 _newPrice) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(_newPrice > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        95
Source: 
>     
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        100
Source: 
>     
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Whitelist
Line:        131
Source: 
> 	
> 	function mint(uint _amount) public payable {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.value >= NFTprice.mul(_amount), "Insufficient ETH");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Whitelist
Line:        139
Source: 
> 	
> 	function setWhitelist(address[] memory _users) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    uint userLength = _users.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Whitelist
Line:        150
Source: 
> 	
> 	function setNFTPrice(uint256 _newPrice) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(_newPrice > 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    Whitelist
Line:        115
Source: 
> 
> contract Whitelist is Ownable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        100
Source: 
>     
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Whitelist
Line:        136
Source: 
>         IfWhiteList[msg.sender] = false;
> 	    cosmoChamber.authorizedGenerator(_amount, msg.sender);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Whitelist
Line:        122
Source: 
>     
>     uint256 public NFTprice = 0.03 * 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping (address => bool) public IfWhiteList;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Whitelist
Line:        123
Source: 
>     uint256 public NFTprice = 0.03 * 10**18;
> 	mapping (address => bool) public IfWhiteList;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Whitelist
Line:        118
Source: 
>     
>     CosmoChamber cosmoChamber;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CosmoChamberWhiteList
Line:        163
Source: 
> 	function withdrawBalance() external onlyOwner {
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CosmoChamberWhiteList
Line:        163
Source: 
> 	function withdrawBalance() external onlyOwner {
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CosmoChamberWhiteList
Line:        163
Source: 
> 	function withdrawBalance() external onlyOwner {
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Whitelist
Line:        136
Source: 
>         IfWhiteList[msg.sender] = false;
> 	    cosmoChamber.authorizedGenerator(_amount, msg.sender);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        58
Source: 
>     assembly { codehash := extcodehash(account) }
>     return (codehash != 0x0 && codehash != accountHash);
>             ^^^^^^^^
>   }

[0m
