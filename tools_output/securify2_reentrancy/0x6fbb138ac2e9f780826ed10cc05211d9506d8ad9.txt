pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Policy
Line:        2525
Source: 
> 	{
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Property
Line:        2986
Source: 
> 	) public UsingConfig(_config) ERC20Detailed(_name, _symbol, _decimals) {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Market
Line:        3164
Source: 
> 	{
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Market
Line:        3176
Source: 
> 	function toEnable() external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Market
Line:        3231
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, behavior);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(enabled, "market is not enabled");

[0m
[0;31mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Violation
Contract:    AddressConfig
Line:        417
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    LOW
Pattern:     Call to Default Constructor
Description: A call to the constructor might be a call to a normal
             function instead.
Type:        Violation
Contract:    MarketGroup
Line:        2355
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) UsingStorage() {}
>                                                           ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Call to Default Constructor
Description: A call to the constructor might be a call to a normal
             function instead.
Type:        Violation
Contract:    AllocatorStorage
Line:        2634
Source: 
> {
> 	constructor(address _config) public UsingConfig(_config) UsingStorage() {}
>                                                           ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PauserRole
Line:        79
Source: 
> 	event PauserRemoved(address indexed account);
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MinterRole
Line:        1382
Source: 
> 	event MinterRemoved(address indexed account);
> 	Roles.Role private _minters;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	constructor () internal {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        544
Source: 
> 		// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
> 		if (a == 0) {
>       ^^^^^^
> 			return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        548
Source: 
> 		uint256 c = a * b;
> 		require(c / a == b, "SafeMath: multiplication overflow");
>           ^^^^^^^^^^
> 		return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Decimals
Line:        1313
Source: 
> 	{
> 		if (_a == 0) {
>       ^^^^^^^
> 			return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        242
Source: 
> 	function isOwner() public view returns (bool) {
> 		return _msgSender() == _owner;
>          ^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        544
Source: 
> 		// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
> 		if (a == 0) {
>       ^^^^^^
> 			return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        548
Source: 
> 		uint256 c = a * b;
> 		require(c / a == b, "SafeMath: multiplication overflow");
>           ^^^^^^^^^^
> 		return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Decimals
Line:        1313
Source: 
> 	{
> 		if (_a == 0) {
>       ^^^^^^^
> 			return 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        101
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        101
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        148
Source: 
> 	 */
> 	function paused() public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        170
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        993
Source: 
> 	 */
> 	function totalSupply() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1012
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1052
Source: 
> 	 */
> 	function transferFrom(address sender, address recipient, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1393
Source: 
> 	}
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1396
Source: 
> 	}
> 	function renounceMinter() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removeMinter(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        993
Source: 
> 	 */
> 	function totalSupply() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1012
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1052
Source: 
> 	 */
> 	function transferFrom(address sender, address recipient, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1393
Source: 
> 	}
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1396
Source: 
> 	}
> 	function renounceMinter() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removeMinter(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Mintable
Line:        1424
Source: 
> 	 */
> 	function mint(address account, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        101
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        170
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        101
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        170
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        101
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        170
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        226
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        993
Source: 
> 	 */
> 	function totalSupply() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1012
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1052
Source: 
> 	 */
> 	function transferFrom(address sender, address recipient, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        1246
Source: 
> 	 */
> 	function name() public view returns (string memory) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        1253
Source: 
> 	 */
> 	function symbol() public view returns (string memory) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        1268
Source: 
> 	 */
> 	function decimals() public view returns (uint8) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Property
Line:        2994
Source: 
> 
> 	function transfer(address _to, uint256 _value) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateIllegalAddress(_to);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        101
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        170
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        993
Source: 
> 	 */
> 	function totalSupply() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1012
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1052
Source: 
> 	 */
> 	function transferFrom(address sender, address recipient, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        3100
Source: 
> 	 */
> 	function burn(uint256 amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_burn(_msgSender(), amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        3106
Source: 
> 	 */
> 	function burnFrom(address account, uint256 amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_burnFrom(account, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        993
Source: 
> 	 */
> 	function totalSupply() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        1246
Source: 
> 	 */
> 	function name() public view returns (string memory) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        1253
Source: 
> 	 */
> 	function symbol() public view returns (string memory) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        1268
Source: 
> 	 */
> 	function decimals() public view returns (uint8) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1393
Source: 
> 	}
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1396
Source: 
> 	}
> 	function renounceMinter() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removeMinter(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Mintable
Line:        1424
Source: 
> 	 */
> 	function mint(address account, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        3100
Source: 
> 	 */
> 	function burn(uint256 amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_burn(_msgSender(), amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        3106
Source: 
> 	 */
> 	function burnFrom(address account, uint256 amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_burnFrom(account, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Market
Line:        3183
Source: 
> 
> 	function authenticate(
>  ^^^^^^^^^^^^^^^^^^^^^^
> 		address _prop,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        101
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        170
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2398
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2396
Source: 
> 	function addSet(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2400
Source: 
> 		);
> 		uint256 index = eternalStorage().getUint(getPlicySetIndexKey());
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytes32 key = getIndexKey(index);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2402
Source: 
> 		bytes32 key = getIndexKey(index);
> 		eternalStorage().setAddress(key, _addr);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		index = index.add(1);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2404
Source: 
> 		index = index.add(1);
> 		eternalStorage().setUint(getPlicySetIndexKey(), index);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2410
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2408
Source: 
> 	function deleteAll() external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2412
Source: 
> 		);
> 		uint256 index = eternalStorage().getUint(getPlicySetIndexKey());
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		for (uint256 i = 0; i < index; i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2417
Source: 
> 		}
> 		eternalStorage().setUint(getPlicySetIndexKey(), 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2421
Source: 
> 	function count() external view returns (uint256) {
> 		return eternalStorage().getUint(getPlicySetIndexKey());
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicySet
Line:        2426
Source: 
> 		bytes32 key = getIndexKey(_index);
> 		return eternalStorage().getAddress(key);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2481
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateIllegalAddress(_newPolicyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Policy policy = new Policy(address(config()), _newPolicyAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2485
Source: 
> 		emit Create(msg.sender, policyAddress, _newPolicyAddress);
> 		if (config().policy() == address(0)) {
>       ^^^^^^^^^^^^^^^^^
> 			config().setPolicy(policyAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2486
Source: 
> 		if (config().policy() == address(0)) {
> 			config().setPolicy(policyAddress);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2490
Source: 
> 		}
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
>                                         ^^^^^^^^^^^^^^^^^^^^^^
> 		policyGroup.addGroup(policyAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2491
Source: 
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
> 		policyGroup.addGroup(policyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		PolicySet policySet = PolicySet(config().policySet());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2492
Source: 
> 		policyGroup.addGroup(policyAddress);
> 		PolicySet policySet = PolicySet(config().policySet());
>                                   ^^^^^^^^^^^^^^^^^^^^
> 		policySet.addSet(policyAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2493
Source: 
> 		PolicySet policySet = PolicySet(config().policySet());
> 		policySet.addSet(policyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return policyAddress;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2488
Source: 
> 		} else {
> 			VoteTimes(config().voteTimes()).addVoteTime();
>              ^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2488
Source: 
> 		} else {
> 			VoteTimes(config().voteTimes()).addVoteTime();
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2498
Source: 
> 	function convergePolicy(address _currentPolicyAddress) external {
> 		addressValidator().validateGroup(msg.sender, config().policyGroup());
>                                                ^^^^^^^^^^^^^^^^^^^^^^
> 		config().setPolicy(_currentPolicyAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2498
Source: 
> 	function convergePolicy(address _currentPolicyAddress) external {
> 		addressValidator().validateGroup(msg.sender, config().policyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		config().setPolicy(_currentPolicyAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2499
Source: 
> 		addressValidator().validateGroup(msg.sender, config().policyGroup());
> 		config().setPolicy(_currentPolicyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		PolicySet policySet = PolicySet(config().policySet());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2500
Source: 
> 		config().setPolicy(_currentPolicyAddress);
> 		PolicySet policySet = PolicySet(config().policySet());
>                                   ^^^^^^^^^^^^^^^^^^^^
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2501
Source: 
> 		PolicySet policySet = PolicySet(config().policySet());
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
>                                         ^^^^^^^^^^^^^^^^^^^^^^
> 		for (uint256 i = 0; i < policySet.count(); i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2510
Source: 
> 		}
> 		policySet.deleteAll();
>   ^^^^^^^^^^^^^^^^^^^^^
> 		policySet.addSet(_currentPolicyAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PolicyFactory
Line:        2511
Source: 
> 		policySet.deleteAll();
> 		policySet.addSet(_currentPolicyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PolicySet
Line:        2415
Source: 
> 			bytes32 key = getIndexKey(i);
> 			eternalStorage().setAddress(key, address(0));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PolicyFactory
Line:        2502
Source: 
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
> 		for (uint256 i = 0; i < policySet.count(); i++) {
>                           ^^^^^^^^^^^^^^^^^
> 			address policyAddress = policySet.get(i);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PolicyFactory
Line:        2503
Source: 
> 		for (uint256 i = 0; i < policySet.count(); i++) {
> 			address policyAddress = policySet.get(i);
>                            ^^^^^^^^^^^^^^^^
> 			if (policyAddress == _currentPolicyAddress) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PolicyFactory
Line:        2507
Source: 
> 			}
> 			Policy(policyAddress).kill();
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			policyGroup.deleteGroup(policyAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PolicyFactory
Line:        2508
Source: 
> 			Policy(policyAddress).kill();
> 			policyGroup.deleteGroup(policyAddress);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        93
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        93
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EternalStorage
Line:        645
Source: 
> 
> 	function changeOwner(address _newOwner) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == currentOwner, "not current owner");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteTimesStorage
Line:        793
Source: 
> 	//Vote Times By Property
> 	function getVoteTimesByProperty(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1012
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1052
Source: 
> 	 */
> 	function transferFrom(address sender, address recipient, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetricsGroup
Line:        1351
Source: 
> 
> 	function addGroup(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetricsGroup
Line:        1363
Source: 
> 
> 	function isGroup(address _addr) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().getBool(getGroupKey(_addr));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1390
Source: 
> 	}
> 	function isMinter(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _minters.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1393
Source: 
> 	}
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1012
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1052
Source: 
> 	 */
> 	function transferFrom(address sender, address recipient, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1390
Source: 
> 	}
> 	function isMinter(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _minters.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1393
Source: 
> 	}
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Mintable
Line:        1424
Source: 
> 	 */
> 	function mint(address account, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PropertyGroup
Line:        1445
Source: 
> 
> 	function addGroup(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PropertyGroup
Line:        1454
Source: 
> 
> 	function isGroup(address _addr) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().getBool(getGroupKey(_addr));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1470
Source: 
> 	// RewardsAmount
> 	function setRewardsAmount(address _property, uint256 _value) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().withdraw());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1475
Source: 
> 
> 	function getRewardsAmount(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1492
Source: 
> 	// CumulativePrice
> 	function setCumulativePrice(address _property, uint256 _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1500
Source: 
> 
> 	function getCumulativePrice(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1517
Source: 
> 	// WithdrawalLimitTotal
> 	function setWithdrawalLimitTotal(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1529
Source: 
> 
> 	function getWithdrawalLimitTotal(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1552
Source: 
> 	// WithdrawalLimitBalance
> 	function setWithdrawalLimitBalance(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1564
Source: 
> 
> 	function getWithdrawalLimitBalance(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1587
Source: 
> 	//LastWithdrawalPrice
> 	function setLastWithdrawalPrice(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1599
Source: 
> 
> 	function getLastWithdrawalPrice(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1622
Source: 
> 	//PendingWithdrawal
> 	function setPendingWithdrawal(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1634
Source: 
> 
> 	function getPendingWithdrawal(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        93
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1661
Source: 
> 
> 	function withdraw(address _property) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(paused() == false, "You cannot use that");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1673
Source: 
> 
> 	function beforeBalanceChange(address _property, address _from, address _to)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1705
Source: 
> 
> 	function increment(address _property, uint256 _allocationResult) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().allocator());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1716
Source: 
> 
> 	function getRewardsAmount(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1749
Source: 
> 
> 	function calculateAmount(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1769
Source: 
> 
> 	function calculateWithdrawableAmount(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1789
Source: 
> 	//Value
> 	function setValue(address _property, address _sender, uint256 _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1797
Source: 
> 	}
> 	function getValue(address _property, address _sender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1813
Source: 
> 	//PropertyValue
> 	function setPropertyValue(address _property, uint256 _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1821
Source: 
> 	}
> 	function getPropertyValue(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1837
Source: 
> 	//WithdrawalStatus
> 	function setWithdrawalStatus(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1846
Source: 
> 	}
> 	function getWithdrawalStatus(address _property, address _from)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1865
Source: 
> 	//InterestPrice
> 	function setInterestPrice(address _property, uint256 _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1872
Source: 
> 	}
> 	function getInterestPrice(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1887
Source: 
> 	//LastInterestPrice
> 	function setLastInterestPrice(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1898
Source: 
> 	}
> 	function getLastInterestPrice(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1917
Source: 
> 	//PendingWithdrawal
> 	function setPendingInterestWithdrawal(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LockupStorage
Line:        1928
Source: 
> 	}
> 	function getPendingInterestWithdrawal(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        93
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lockup
Line:        1959
Source: 
> 
> 	function lockup(address _from, address _property, uint256 _value) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(paused() == false, "You cannot use that");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lockup
Line:        1978
Source: 
> 
> 	function cancel(address _property) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lockup
Line:        1992
Source: 
> 
> 	function withdraw(address _property) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lockup
Line:        2004
Source: 
> 
> 	function increment(address _property, uint256 _interestResult) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().allocator());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lockup
Line:        2025
Source: 
> 
> 	function calculateInterestAmount(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lockup
Line:        2044
Source: 
> 
> 	function calculateWithdrawableInterestAmount(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lockup
Line:        2051
Source: 
> 
> 	function withdrawInterest(address _property) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lockup
Line:        2068
Source: 
> 
> 	function getPropertyValue(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lockup
Line:        2076
Source: 
> 
> 	function getValue(address _property, address _sender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteCounterStorage
Line:        2163
Source: 
> 	// Already Vote Flg
> 	function setAlreadyVoteFlg(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _user,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteCounterStorage
Line:        2172
Source: 
> 	}
> 	function getAlreadyVoteFlg(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _user,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteCounterStorage
Line:        2191
Source: 
> 	// Agree Count
> 	function getAgreeCount(address _sender) external view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().getUint(getAgreeVoteCountKey(_sender));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteCounterStorage
Line:        2194
Source: 
> 	}
> 	function setAgreeCount(address _sender, uint256 count)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteCounterStorage
Line:        2209
Source: 
> 	// Opposite Count
> 	function getOppositeCount(address _sender) external view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().getUint(getOppositeVoteCountKey(_sender));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteCounterStorage
Line:        2212
Source: 
> 	}
> 	function setOppositeCount(address _sender, uint256 count)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteCounter
Line:        2235
Source: 
> 
> 	function addVoteCount(address _user, address _property, bool _agree)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteCounter
Line:        2259
Source: 
> 
> 	function getAgreeCount(address _sender) external view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return getStorage().getAgreeCount(_sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteCounter
Line:        2263
Source: 
> 
> 	function getOppositeCount(address _sender) external view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return getStorage().getOppositeCount(_sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MarketGroup
Line:        2357
Source: 
> 
> 	function addGroup(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MarketGroup
Line:        2367
Source: 
> 
> 	function isGroup(address _addr) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().getBool(getGroupKey(_addr));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PolicySet
Line:        2424
Source: 
> 
> 	function get(uint256 _index) external view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytes32 key = getIndexKey(_index);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PolicyGroup
Line:        2449
Source: 
> 
> 	function addGroup(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PolicyGroup
Line:        2458
Source: 
> 
> 	function deleteGroup(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PolicyGroup
Line:        2467
Source: 
> 
> 	function isGroup(address _addr) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().getBool(getGroupKey(_addr));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        93
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PolicyFactory
Line:        2479
Source: 
> 
> 	function create(address _newPolicyAddress) external returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(paused() == false, "You cannot use that");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        759
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        763
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AllocatorStorage
Line:        2642
Source: 
> 
> 	function getLastBlockNumber(address _metrics)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AllocatorStorage
Line:        2678
Source: 
> 
> 	function getPendingIncrement(address _metrics)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AllocatorStorage
Line:        2706
Source: 
> 
> 	function getLastAllocationBlockEachMetrics(address _metrics)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AllocatorStorage
Line:        2739
Source: 
> 
> 	function getLastAssetValueEachMetrics(address _metrics)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AllocatorStorage
Line:        2767
Source: 
> 
> 	function getLastAssetValueEachMarketPerBlock(address _market)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        261
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Allocator
Line:        2813
Source: 
> 
> 	function allocate(address _metrics) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Allocator
Line:        2826
Source: 
> 
> 	function calculatedCallback(address _metrics, uint256 _value) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Allocator
Line:        2894
Source: 
> 
> 	function beforeBalanceChange(address _property, address _from, address _to)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Allocator
Line:        2905
Source: 
> 
> 	function getRewardsAmount(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1012
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1052
Source: 
> 	 */
> 	function transferFrom(address sender, address recipient, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Property
Line:        2994
Source: 
> 
> 	function transfer(address _to, uint256 _value) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateIllegalAddress(_to);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Property
Line:        3005
Source: 
> 
> 	function withdraw(address _sender, uint256 _value) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().lockup());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        93
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1012
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1052
Source: 
> 	 */
> 	function transferFrom(address sender, address recipient, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        3100
Source: 
> 	 */
> 	function burn(uint256 amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_burn(_msgSender(), amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        3106
Source: 
> 	 */
> 	function burnFrom(address account, uint256 amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_burnFrom(account, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1012
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1052
Source: 
> 	 */
> 	function transferFrom(address sender, address recipient, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1080
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        1106
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1390
Source: 
> 	}
> 	function isMinter(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _minters.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1393
Source: 
> 	}
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Mintable
Line:        1424
Source: 
> 	 */
> 	function mint(address account, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        3100
Source: 
> 	 */
> 	function burn(uint256 amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_burn(_msgSender(), amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        3106
Source: 
> 	 */
> 	function burnFrom(address account, uint256 amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_burnFrom(account, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Dev
Line:        3125
Source: 
> 
> 	function deposit(address _to, uint256 _amount) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(transfer(_to, _amount), "dev transfer failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Dev
Line:        3131
Source: 
> 
> 	function depositFrom(address _from, address _to, uint256 _amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Dev
Line:        3140
Source: 
> 
> 	function fee(address _from, uint256 _amount) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Market
Line:        3227
Source: 
> 
> 	function authenticatedCallback(address _property, bytes32 _idHash)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        93
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        97
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MarketFactory
Line:        3276
Source: 
> 
> 	function create(address _addr) external returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(paused() == false, "You cannot use that");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        292
Source: 
> 
> 	function validateIllegalAddress(address _addr) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr != address(0), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        296
Source: 
> 
> 	function validateGroup(address _addr, address _groupAddr) external view {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        300
Source: 
> 
> 	function validateGroups(
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        311
Source: 
> 
> 	function validateAddress(address _addr, address _target) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr == _target, errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        315
Source: 
> 
> 	function validateAddresses(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        364
Source: 
> 
> 	function setAllocator(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocator = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        368
Source: 
> 
> 	function setAllocatorStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocatorStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        372
Source: 
> 
> 	function setWithdraw(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdraw = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        376
Source: 
> 
> 	function setWithdrawStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdrawStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        380
Source: 
> 
> 	function setMarketFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        384
Source: 
> 
> 	function setMarketGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        388
Source: 
> 
> 	function setPropertyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        392
Source: 
> 
> 	function setPropertyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        396
Source: 
> 
> 	function setMetricsFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        400
Source: 
> 
> 	function setMetricsGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        404
Source: 
> 
> 	function setPolicyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        408
Source: 
> 
> 	function setPolicyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        412
Source: 
> 
> 	function setPolicySet(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policySet = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        416
Source: 
> 
> 	function setPolicy(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, policyFactory);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        421
Source: 
> 
> 	function setToken(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		token = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        425
Source: 
> 
> 	function setLockup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        429
Source: 
> 
> 	function setLockupStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockupStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        433
Source: 
> 
> 	function setVoteTimes(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimes = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        437
Source: 
> 
> 	function setVoteTimesStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimesStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        441
Source: 
> 
> 	function setVoteCounter(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounter = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        445
Source: 
> 
> 	function setVoteCounterStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounterStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        651
Source: 
> 	// *** Getter Methods ***
> 	function getUint(bytes32 _key) external view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return uIntStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        655
Source: 
> 
> 	function getString(bytes32 _key) external view returns (string memory) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return stringStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        659
Source: 
> 
> 	function getAddress(bytes32 _key) external view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return addressStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        663
Source: 
> 
> 	function getBytes(bytes32 _key) external view returns (bytes32) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return bytesStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        667
Source: 
> 
> 	function getBool(bytes32 _key) external view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return boolStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        671
Source: 
> 
> 	function getInt(bytes32 _key) external view returns (int256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return intStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        676
Source: 
> 	// *** Setter Methods ***
> 	function setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uIntStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        680
Source: 
> 
> 	function setString(bytes32 _key, string calldata _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        687
Source: 
> 
> 	function setAddress(bytes32 _key, address _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        694
Source: 
> 
> 	function setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytesStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        698
Source: 
> 
> 	function setBool(bytes32 _key, bool _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		boolStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        702
Source: 
> 
> 	function setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		intStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        707
Source: 
> 	// *** Delete Methods ***
> 	function deleteUint(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete uIntStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        711
Source: 
> 
> 	function deleteString(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete stringStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        715
Source: 
> 
> 	function deleteAddress(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete addressStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        719
Source: 
> 
> 	function deleteBytes(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete bytesStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        723
Source: 
> 
> 	function deleteBool(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete boolStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        727
Source: 
> 
> 	function deleteInt(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete intStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimesStorage
Line:        783
Source: 
> 
> 	function setVoteTimes(uint256 times) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimesStorage
Line:        801
Source: 
> 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimes
Line:        837
Source: 
> 
> 	function addVoteTimesByProperty(address _property) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimes
Line:        846
Source: 
> 
> 	function resetVoteTimesByProperty(address _property) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddresses(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimes
Line:        856
Source: 
> 
> 	function getAbstentionTimes(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PolicySet
Line:        2395
Source: 
> 
> 	function addSet(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Policy
Line:        2537
Source: 
> 
> 	function rewards(uint256 _lockups, uint256 _assets)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Policy
Line:        2545
Source: 
> 
> 	function holdersShare(uint256 _amount, uint256 _lockups)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Policy
Line:        2553
Source: 
> 
> 	function assetValue(uint256 _value, uint256 _lockups)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Policy
Line:        2561
Source: 
> 
> 	function authenticationFee(uint256 _assets, uint256 _propertyAssets)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Policy
Line:        2569
Source: 
> 
> 	function marketApproval(uint256 _agree, uint256 _opposite)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Policy
Line:        2577
Source: 
> 
> 	function policyApproval(uint256 _agree, uint256 _opposite)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Policy
Line:        2593
Source: 
> 
> 	function abstentionPenalty(uint256 _count) external view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _policy.abstentionPenalty(_count);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Policy
Line:        2601
Source: 
> 
> 	function vote(address _property, bool _agree) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AllocatorStorage
Line:        2637
Source: 
> 	// Last Block Number
> 	function setLastBlockNumber(address _metrics, uint256 _blocks) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().allocator());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AllocatorStorage
Line:        2659
Source: 
> 	// Base Block Number
> 	function setBaseBlockNumber(uint256 _blockNumber) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().allocator());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AllocatorStorage
Line:        2673
Source: 
> 	// PendingIncrement
> 	function setPendingIncrement(address _metrics, bool value) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().allocator());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AllocatorStorage
Line:        2695
Source: 
> 	// LastAllocationBlockEachMetrics
> 	function setLastAllocationBlockEachMetrics(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _metrics,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AllocatorStorage
Line:        2729
Source: 
> 	// LastAssetValueEachMetrics
> 	function setLastAssetValueEachMetrics(address _metrics, uint256 value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AllocatorStorage
Line:        2757
Source: 
> 	// lastAssetValueEachMarketPerBlock
> 	function setLastAssetValueEachMarketPerBlock(address _market, uint256 value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Allocator
Line:        2913
Source: 
> 
> 	function allocation(
>  ^^^^^^^^^^^^^^^^^^^^
> 		uint256 _blocks,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetricsFactory
Line:        3073
Source: 
> 
> 	function create(address _property) external returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(paused() == false, "You cannot use that");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1000
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1020
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        1035
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Market
Line:        3183
Source: 
> 
> 	function authenticate(
>  ^^^^^^^^^^^^^^^^^^^^^^
> 		address _prop,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Market
Line:        3249
Source: 
> 
> 	function vote(address _property, bool _agree) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2602
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(config().policy() != address(this), "this policy is current");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2602
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(config().policy() != address(this), "this policy is current");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2603
Source: 
> 		addressValidator().validateGroup(_property, config().propertyGroup());
> 		require(config().policy() != address(this), "this policy is current");
>           ^^^^^^^^^^^^^^^^^
> 		require(voting(), "voting deadline is over");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2605
Source: 
> 		require(voting(), "voting deadline is over");
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
>                                         ^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2606
Source: 
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bool result = Policy(config().policy()).policyApproval(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2608
Source: 
> 		bool result = Policy(config().policy()).policyApproval(
> 			voteCounter.getAgreeCount(address(this)),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			voteCounter.getOppositeCount(address(this))

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2609
Source: 
> 			voteCounter.getAgreeCount(address(this)),
> 			voteCounter.getOppositeCount(address(this))
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2607
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		bool result = Policy(config().policy()).policyApproval(
>                        ^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2607
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		bool result = Policy(config().policy()).policyApproval(
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2614
Source: 
> 		}
> 		PolicyFactory(config().policyFactory()).convergePolicy(address(this));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
> 		_votingEndBlockNumber = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Policy
Line:        2614
Source: 
> 		}
> 		PolicyFactory(config().policyFactory()).convergePolicy(address(this));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_votingEndBlockNumber = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3178
Source: 
> 			msg.sender,
> 			config().marketFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3176
Source: 
> 	function toEnable() external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3231
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, behavior);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(enabled, "market is not enabled");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3235
Source: 
> 		idMap[_idHash] = true;
> 		address sender = Property(_property).author();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		MetricsFactory metricsFactory = MetricsFactory(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3237
Source: 
> 		MetricsFactory metricsFactory = MetricsFactory(
> 			config().metricsFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3239
Source: 
> 		);
> 		address metrics = metricsFactory.create(_property);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 authenticationFee = getAuthenticationFee(_property);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3242
Source: 
> 		require(
> 			Dev(config().token()).fee(sender, authenticationFee),
>        ^^^^^^^^^^^^^^^^
> 			"dev fee failed"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3242
Source: 
> 		require(
> 			Dev(config().token()).fee(sender, authenticationFee),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			"dev fee failed"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3250
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(enabled == false, "market is already enabled");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3250
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(enabled == false, "market is already enabled");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3256
Source: 
> 		);
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
>                                         ^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3257
Source: 
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		enabled = Policy(config().policy()).marketApproval(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3259
Source: 
> 		enabled = Policy(config().policy()).marketApproval(
> 			voteCounter.getAgreeCount(address(this)),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			voteCounter.getOppositeCount(address(this))

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3260
Source: 
> 			voteCounter.getAgreeCount(address(this)),
> 			voteCounter.getOppositeCount(address(this))
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3258
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		enabled = Policy(config().policy()).marketApproval(
>                    ^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        3258
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		enabled = Policy(config().policy()).marketApproval(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Allocator
Line:        2829
Source: 
> 		Metrics metrics = Metrics(_metrics);
> 		Market market = Market(metrics.market());
>                          ^^^^^^^^^^^^^^^^
> 		require(

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Allocator
Line:        2842
Source: 
> 		uint256 lockupValue = Lockup(config().lockup()).getPropertyValue(
> 			metrics.property()
>    ^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Allocator
Line:        2852
Source: 
> 		uint256 marketValue = getStorage()
> 			.getLastAssetValueEachMarketPerBlock(metrics.market())
>                                         ^^^^^^^^^^^^^^^^
> 			.sub(getStorage().getLastAssetValueEachMetrics(_metrics))

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Allocator
Line:        2859
Source: 
> 		getStorage().setLastAssetValueEachMarketPerBlock(
> 			metrics.market(),
>    ^^^^^^^^^^^^^^^^
> 			marketValue

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    VoteTimesStorage
Line:        776
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    VoteTimes
Line:        824
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        1238
Source: 
> 	 */
> 	constructor (string memory name, string memory symbol, uint8 decimals) public {
>               ^^^^^^^^^^^^^^^^^^
> 		_name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        1238
Source: 
> 	 */
> 	constructor (string memory name, string memory symbol, uint8 decimals) public {
>                                   ^^^^^^^^^^^^^^^^^^^^
> 		_name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        1238
Source: 
> 	 */
> 	constructor (string memory name, string memory symbol, uint8 decimals) public {
>                                                         ^^^^^^^^^^^^^^
> 		_name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MetricsGroup
Line:        1349
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    PropertyGroup
Line:        1443
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    WithdrawStorage
Line:        1467
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Withdraw
Line:        1659
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    LockupStorage
Line:        1787
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 	//Value

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Lockup
Line:        1957
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2161
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 	// Already Vote Flg

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    VoteCounter
Line:        2233
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MarketGroup
Line:        2355
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) UsingStorage() {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    PolicySet
Line:        2393
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    PolicyGroup
Line:        2447
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    PolicyFactory
Line:        2477
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Policy
Line:        2521
Source: 
> 
> 	constructor(address _config, address _innerPolicyAddress)
>              ^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AllocatorStorage
Line:        2634
Source: 
> {
> 	constructor(address _config) public UsingConfig(_config) UsingStorage() {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Allocator
Line:        2811
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Property
Line:        2981
Source: 
> 	constructor(
> 		address _config,
>   ^^^^^^^^^^^^^^^
> 		address _own,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Property
Line:        2983
Source: 
> 		address _own,
> 		string memory _name,
>   ^^^^^^^^^^^^^^^^^^^
> 		string memory _symbol

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Property
Line:        2984
Source: 
> 		string memory _name,
> 		string memory _symbol
>   ^^^^^^^^^^^^^^^^^^^^^
> 	) public UsingConfig(_config) ERC20Detailed(_name, _symbol, _decimals) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MetricsFactory
Line:        3071
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Dev
Line:        3119
Source: 
> {
> 	constructor(address _config)
>              ^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Market
Line:        3160
Source: 
> 
> 	constructor(address _config, address _behavior)
>              ^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MarketFactory
Line:        3274
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Killable
Line:        186
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressValidator
Line:        290
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Decimals
Line:        1306
Source: 
> 	using SafeMath for uint256;
> 	uint120 private constant basisValue = 1000000000000000000;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1729
Source: 
> 	{
> 		uint256 _last = getStorage().getLastWithdrawalPrice(_property, _user);
>   ^^^^^^^^^^^^^
> 		uint256 totalLimit = getStorage().getWithdrawalLimitTotal(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1762
Source: 
> 	{
> 		uint256 _value = _calculateAmount(_property, _user);
>   ^^^^^^^^^^^^^^
> 		uint256 value = _value.add(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lockup
Line:        2017
Source: 
> 	{
> 		uint256 _last = getStorage().getLastInterestPrice(_property, _user);
>   ^^^^^^^^^^^^^
> 		uint256 price = getStorage().getInterestPrice(_property);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Allocator
Line:        2808
Source: 
> 	);
> 	uint64 public constant basis = 1000000000000000000;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Property
Line:        2976
Source: 
> contract Property is ERC20, ERC20Detailed, UsingConfig, UsingValidator {
> 	uint8 private constant _decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 private constant _supply = 10000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Property
Line:        2977
Source: 
> 	uint8 private constant _decimals = 18;
> 	uint256 private constant _supply = 10000000;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public author;

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    Property
Line:        2976
Source: 
> contract Property is ERC20, ERC20Detailed, UsingConfig, UsingValidator {
> 	uint8 private constant _decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 private constant _supply = 10000000;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AddressValidator
Line:        290
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Decimals
Line:        1306
Source: 
> 	using SafeMath for uint256;
> 	uint120 private constant basisValue = 1000000000000000000;
>                                        ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Allocator
Line:        2808
Source: 
> 	);
> 	uint64 public constant basis = 1000000000000000000;
>                                 ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Property
Line:        2977
Source: 
> 	uint8 private constant _decimals = 18;
> 	uint256 private constant _supply = 10000000;
>                                     ^^^^^^^^
> 	address public author;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        297
Source: 
> 	function validateGroup(address _addr, address _groupAddr) external view {
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        305
Source: 
> 	) external view {
> 		if (IGroup(_groupAddr1).isGroup(_addr)) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			return;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        308
Source: 
> 		}
> 		require(IGroup(_groupAddr2).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteTimes
Line:        832
Source: 
> 		);
> 		uint256 voteTimes = getStorage().getVoteTimes();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimes = voteTimes.add(1);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteTimes
Line:        839
Source: 
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MetricsGroup
Line:        1358
Source: 
> 		eternalStorage().setBool(getGroupKey(_addr), true);
> 		uint256 totalCount = eternalStorage().getUint(getTotalCountKey());
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalCount = totalCount.add(1);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1471
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getRewardsAmountKey(_property), _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1496
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getCumulativePriceKey(_property), _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1522
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1557
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1592
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1627
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1663
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 value = _calculateWithdrawableAmount(_property, msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1666
Source: 
> 		require(value != 0, "withdraw value is 0");
> 		uint256 price = getStorage().getCumulativePrice(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setLastWithdrawalPrice(_property, msg.sender, price);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1670
Source: 
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
> 		require(erc20.mint(msg.sender, value), "dev mint failed");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1764
Source: 
> 		uint256 value = _value.add(
> 			getStorage().getPendingWithdrawal(_property, _user)
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1730
Source: 
> 		uint256 _last = getStorage().getLastWithdrawalPrice(_property, _user);
> 		uint256 totalLimit = getStorage().getWithdrawalLimitTotal(
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1734
Source: 
> 		);
> 		uint256 balanceLimit = getStorage().getWithdrawalLimitBalance(
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1740
Source: 
> 		uint256 priceGap = price.sub(_last);
> 		uint256 balance = ERC20(_property).balanceOf(_user);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 total = getStorage().getRewardsAmount(_property);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1741
Source: 
> 		uint256 balance = ERC20(_property).balanceOf(_user);
> 		uint256 total = getStorage().getRewardsAmount(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (totalLimit == total) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1676
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		uint256 price = getStorage().getCumulativePrice(_property);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1677
Source: 
> 		addressValidator().validateAddress(msg.sender, config().allocator());
> 		uint256 price = getStorage().getCumulativePrice(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 amountFrom = _calculateAmount(_property, _from);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1682
Source: 
> 		getStorage().setLastWithdrawalPrice(_property, _to, price);
> 		uint256 pendFrom = getStorage().getPendingWithdrawal(_property, _from);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 pendTo = getStorage().getPendingWithdrawal(_property, _to);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1683
Source: 
> 		uint256 pendFrom = getStorage().getPendingWithdrawal(_property, _from);
> 		uint256 pendTo = getStorage().getPendingWithdrawal(_property, _to);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setPendingWithdrawal(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1690
Source: 
> 		getStorage().setPendingWithdrawal(_property, _to, pendTo.add(amountTo));
> 		uint256 totalLimit = getStorage().getWithdrawalLimitTotal(
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1694
Source: 
> 		);
> 		uint256 total = getStorage().getRewardsAmount(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (totalLimit != total) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1700
Source: 
> 				_to,
> 				ERC20(_property).balanceOf(_to)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1706
Source: 
> 	function increment(address _property, uint256 _allocationResult) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		uint256 priceValue = _allocationResult.outOf(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1708
Source: 
> 		uint256 priceValue = _allocationResult.outOf(
> 			ERC20(_property).totalSupply()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1710
Source: 
> 		);
> 		uint256 total = getStorage().getRewardsAmount(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setRewardsAmount(_property, total.add(_allocationResult));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1712
Source: 
> 		getStorage().setRewardsAmount(_property, total.add(_allocationResult));
> 		uint256 price = getStorage().getCumulativePrice(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setCumulativePrice(_property, price.add(priceValue));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LockupStorage
Line:        1793
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^^^^^^^^^^
> 		bytes32 key = getValueKey(_property, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LockupStorage
Line:        1817
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^^^^^^^^^^
> 		bytes32 key = getPropertyValueKey(_property);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LockupStorage
Line:        1842
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^^^^^^^^^^
> 		bytes32 key = getWithdrawalStatusKey(_property, _from);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LockupStorage
Line:        1869
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getInterestPriceKey(_property), _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LockupStorage
Line:        1892
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LockupStorage
Line:        1922
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        1961
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateAddress(msg.sender, config().token());
>                                                  ^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        1962
Source: 
> 		addressValidator().validateAddress(msg.sender, config().token());
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_value != 0, "illegal lockup value");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        1964
Source: 
> 		require(_value != 0, "illegal lockup value");
> 		bool isWaiting = getStorage().getWithdrawalStatus(_property, _from) !=
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        1973
Source: 
> 			_from,
> 			getStorage().getInterestPrice(_property)
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2102
Source: 
> 	function addPropertyValue(address _property, uint256 _value) private {
> 		uint256 value = getStorage().getPropertyValue(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		value = value.add(_value);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2087
Source: 
> 	{
> 		uint256 value = getStorage().getValue(_property, _sender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		value = value.add(_value);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2121
Source: 
> 	{
> 		uint256 pending = getStorage().getPendingInterestWithdrawal(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2020
Source: 
> 		uint256 priceGap = price.sub(_last);
> 		uint256 lockupedValue = getStorage().getValue(_property, _user);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 value = priceGap.mul(lockupedValue);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        1979
Source: 
> 	function cancel(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(hasValue(_property, msg.sender), "dev token is not locked");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        1981
Source: 
> 		require(hasValue(_property, msg.sender), "dev token is not locked");
> 		bool isWaiting = getStorage().getWithdrawalStatus(
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        1987
Source: 
> 		require(isWaiting == false, "lockup is already canceled");
> 		uint256 blockNumber = Policy(config().policy()).lockUpBlocks();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		blockNumber = blockNumber.add(block.number);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2097
Source: 
> 	{
> 		uint256 value = getStorage().getValue(_property, _sender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return value != 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        1993
Source: 
> 	function withdraw(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(possible(_property, msg.sender), "waiting for release");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        1995
Source: 
> 		require(possible(_property, msg.sender), "waiting for release");
> 		uint256 lockupedValue = getStorage().getValue(_property, msg.sender);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(lockupedValue != 0, "dev token is not locked");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2137
Source: 
> 	{
> 		uint256 blockNumber = getStorage().getWithdrawalStatus(
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2005
Source: 
> 	function increment(address _property, uint256 _interestResult) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		uint256 priceValue = _interestResult.outOf(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2007
Source: 
> 		uint256 priceValue = _interestResult.outOf(
> 			getStorage().getPropertyValue(_property)
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2114
Source: 
> 	function incrementInterest(address _property, uint256 _priceValue) private {
> 		uint256 price = getStorage().getInterestPrice(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setInterestPrice(_property, price.add(_priceValue));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2052
Source: 
> 	function withdrawInterest(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 value = _calculateWithdrawableInterestAmount(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2061
Source: 
> 			msg.sender,
> 			getStorage().getInterestPrice(_property)
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lockup
Line:        2065
Source: 
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
> 		require(erc20.mint(msg.sender, value), "dev mint failed");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounterStorage
Line:        2168
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 		bytes32 alreadyVoteKey = getAlreadyVoteKey(_user, _sender, _property);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounterStorage
Line:        2198
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getAgreeVoteCountKey(_sender), count);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounterStorage
Line:        2216
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getOppositeVoteCountKey(_sender), count);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounter
Line:        2240
Source: 
> 			msg.sender,
> 			config().marketGroup(),
>    ^^^^^^^^^^^^^^^^^^^^^^
> 			config().policyGroup()

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounter
Line:        2241
Source: 
> 			config().marketGroup(),
> 			config().policyGroup()
>    ^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounter
Line:        2243
Source: 
> 		);
> 		bool alreadyVote = getStorage().getAlreadyVoteFlg(
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_user,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounter
Line:        2287
Source: 
> 	function addAgreeCount(address _target, uint256 _voteCount) private {
> 		uint256 agreeCount = getStorage().getAgreeCount(_target);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		agreeCount = agreeCount.add(_voteCount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounter
Line:        2293
Source: 
> 	function addOppositeCount(address _target, uint256 _voteCount) private {
> 		uint256 oppositeCount = getStorage().getOppositeCount(_target);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		oppositeCount = oppositeCount.add(_voteCount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounter
Line:        2272
Source: 
> 		uint256 voteCount;
> 		if (Property(_property).author() == _sender) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			// solium-disable-next-line operator-whitespace

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounter
Line:        2277
Source: 
> 				.add(
> 				Allocator(config().allocator()).getRewardsAmount(_property)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounter
Line:        2274
Source: 
> 			// solium-disable-next-line operator-whitespace
> 			voteCount = Lockup(config().lockup())
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				.getPropertyValue(_property)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteCounter
Line:        2281
Source: 
> 		} else {
> 			voteCount = Lockup(config().lockup()).getValue(_property, _sender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MarketGroup
Line:        2373
Source: 
> 		bytes32 key = getCountKey();
> 		uint256 number = eternalStorage().getUint(key);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		number = number.add(1);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PolicySet
Line:        2400
Source: 
> 		);
> 		uint256 index = eternalStorage().getUint(getPlicySetIndexKey());
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytes32 key = getIndexKey(index);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PolicySet
Line:        2412
Source: 
> 		);
> 		uint256 index = eternalStorage().getUint(getPlicySetIndexKey());
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		for (uint256 i = 0; i < index; i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PolicyFactory
Line:        2485
Source: 
> 		emit Create(msg.sender, policyAddress, _newPolicyAddress);
> 		if (config().policy() == address(0)) {
>       ^^^^^^^^^^^^^^^^^
> 			config().setPolicy(policyAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PolicyFactory
Line:        2502
Source: 
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
> 		for (uint256 i = 0; i < policySet.count(); i++) {
>                           ^^^^^^^^^^^^^^^^^
> 			address policyAddress = policySet.get(i);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PolicyFactory
Line:        2503
Source: 
> 		for (uint256 i = 0; i < policySet.count(); i++) {
> 			address policyAddress = policySet.get(i);
>                            ^^^^^^^^^^^^^^^^
> 			if (policyAddress == _currentPolicyAddress) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Policy
Line:        2619
Source: 
> 	function setVotingEndBlockNumber() private {
> 		if (config().policy() == address(0)) {
>       ^^^^^^^^^^^^^^^^^
> 			return;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Policy
Line:        2622
Source: 
> 		}
> 		uint256 tmp = Policy(config().policy()).policyVotingBlocks();
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_votingEndBlockNumber = block.number.add(tmp);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Policy
Line:        2603
Source: 
> 		addressValidator().validateGroup(_property, config().propertyGroup());
> 		require(config().policy() != address(this), "this policy is current");
>           ^^^^^^^^^^^^^^^^^
> 		require(voting(), "voting deadline is over");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Policy
Line:        2607
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		bool result = Policy(config().policy()).policyApproval(
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2814
Source: 
> 	function allocate(address _metrics) external {
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
> 		validateTargetPeriod(_metrics);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2958
Source: 
> 	{
> 		uint256 blockNumber = getStorage().getLastBlockNumber(_metrics);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 baseBlockNumber = getStorage().getBaseBlockNumber();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2959
Source: 
> 		uint256 blockNumber = getStorage().getLastBlockNumber(_metrics);
> 		uint256 baseBlockNumber = getStorage().getBaseBlockNumber();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (baseBlockNumber == 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2965
Source: 
> 			? blockNumber
> 			: getStorage().getBaseBlockNumber();
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return lastAllocationBlockNumber;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2935
Source: 
> 	function validateTargetPeriod(address _metrics) private {
> 		address property = Metrics(_metrics).property();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		VoteTimes voteTimes = VoteTimes(config().voteTimes());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2937
Source: 
> 		VoteTimes voteTimes = VoteTimes(config().voteTimes());
> 		uint256 abstentionCount = voteTimes.getAbstentionTimes(property);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 notTargetPeriod = Policy(config().policy()).abstentionPenalty(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2938
Source: 
> 		uint256 abstentionCount = voteTimes.getAbstentionTimes(property);
> 		uint256 notTargetPeriod = Policy(config().policy()).abstentionPenalty(
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			abstentionCount

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2827
Source: 
> 	function calculatedCallback(address _metrics, uint256 _value) external {
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2831
Source: 
> 		require(
> 			msg.sender == market.behavior(),
>                  ^^^^^^^^^^^^^^^^^
> 			"don't call from other than market behavior"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2835
Source: 
> 		require(
> 			getStorage().getPendingIncrement(_metrics),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			"not asking for an indicator"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2839
Source: 
> 		Policy policy = Policy(config().policy());
> 		uint256 totalAssets = MetricsGroup(config().metricsGroup())
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			.totalIssuedMetrics();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2842
Source: 
> 		uint256 lockupValue = Lockup(config().lockup()).getPropertyValue(
> 			metrics.property()
>    ^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2841
Source: 
> 			.totalIssuedMetrics();
> 		uint256 lockupValue = Lockup(config().lockup()).getPropertyValue(
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			metrics.property()

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2847
Source: 
> 		);
> 		uint256 mint = policy.rewards(lockupValue, totalAssets);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 value = (policy.assetValue(_value, lockupValue).mul(basis)).div(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2848
Source: 
> 		uint256 mint = policy.rewards(lockupValue, totalAssets);
> 		uint256 value = (policy.assetValue(_value, lockupValue).mul(basis)).div(
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			blocks

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2852
Source: 
> 		uint256 marketValue = getStorage()
> 			.getLastAssetValueEachMarketPerBlock(metrics.market())
>                                         ^^^^^^^^^^^^^^^^
> 			.sub(getStorage().getLastAssetValueEachMetrics(_metrics))

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2855
Source: 
> 			.add(value);
> 		uint256 assets = market.issuedMetrics();
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setLastAllocationBlockEachMetrics(_metrics, block.number);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2859
Source: 
> 		getStorage().setLastAssetValueEachMarketPerBlock(
> 			metrics.market(),
>    ^^^^^^^^^^^^^^^^
> 			marketValue

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2878
Source: 
> 		);
> 		increment(metrics.property(), result, lockupValue);
>             ^^^^^^^^^^^^^^^^^^
> 		getStorage().setPendingIncrement(_metrics, false);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2885
Source: 
> 	{
> 		uint256 holders = Policy(config().policy()).holdersShare(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_reward,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Allocator
Line:        2897
Source: 
> 	{
> 		addressValidator().validateGroup(msg.sender, config().propertyGroup());
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^
> 		Withdraw(config().withdraw()).beforeBalanceChange(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Property
Line:        2988
Source: 
> 			msg.sender,
> 			config().propertyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Property
Line:        3006
Source: 
> 	function withdraw(address _sender, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^^^^^^^^^^
> 		ERC20 devToken = ERC20(config().token());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Dev
Line:        3141
Source: 
> 	function fee(address _from, uint256 _amount) external returns (bool) {
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^^^^^^^^^^^^^^^
> 		_burn(_from, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3166
Source: 
> 			msg.sender,
> 			config().marketFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3170
Source: 
> 		enabled = false;
> 		uint256 marketVotingBlocks = Policy(config().policy())
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			.marketVotingBlocks();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3178
Source: 
> 			msg.sender,
> 			config().marketFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3193
Source: 
> 			msg.sender,
> 			Property(_prop).author()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3215
Source: 
> 	{
> 		uint256 tokenValue = Lockup(config().lockup()).getPropertyValue(
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3222
Source: 
> 			policy.authenticationFee(
> 				metricsGroup.totalIssuedMetrics(),
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				tokenValue

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3221
Source: 
> 		return
> 			policy.authenticationFee(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				metricsGroup.totalIssuedMetrics(),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3235
Source: 
> 		idMap[_idHash] = true;
> 		address sender = Property(_property).author();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		MetricsFactory metricsFactory = MetricsFactory(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3242
Source: 
> 		require(
> 			Dev(config().token()).fee(sender, authenticationFee),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			"dev fee failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3250
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(enabled == false, "market is already enabled");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3259
Source: 
> 		enabled = Policy(config().policy()).marketApproval(
> 			voteCounter.getAgreeCount(address(this)),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			voteCounter.getOppositeCount(address(this))

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3260
Source: 
> 			voteCounter.getAgreeCount(address(this)),
> 			voteCounter.getOppositeCount(address(this))
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        3258
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		enabled = Policy(config().policy()).marketApproval(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MarketFactory
Line:        3283
Source: 
> 		marketGroup.addGroup(marketAddr);
> 		if (marketGroup.getCount() == 1) {
>       ^^^^^^^^^^^^^^^^^^^^^^
> 			market.toEnable();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressConfig
Line:        417
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        780
Source: 
> 	function getVoteTimes() external view returns (uint256) {
> 		return eternalStorage().getUint(getVoteTimesKey());
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        784
Source: 
> 	function setVoteTimes(uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().setUint(getVoteTimesKey(), times);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        784
Source: 
> 	function setVoteTimes(uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().setUint(getVoteTimesKey(), times);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        785
Source: 
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
> 		return eternalStorage().setUint(getVoteTimesKey(), times);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        798
Source: 
> 	{
> 		return eternalStorage().getUint(getVoteTimesByPropertyKey(_property));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        802
Source: 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		return

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        802
Source: 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        804
Source: 
> 		return
> 			eternalStorage().setUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getVoteTimesByPropertyKey(_property),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        829
Source: 
> 			msg.sender,
> 			config().marketFactory(),
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 			config().policyFactory()

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        830
Source: 
> 			config().marketFactory(),
> 			config().policyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        827
Source: 
> 	function addVoteTime() external {
> 		addressValidator().validateAddresses(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        834
Source: 
> 		voteTimes = voteTimes.add(1);
> 		getStorage().setVoteTimes(voteTimes);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        869
Source: 
> 	function getStorage() private view returns (VoteTimesStorage) {
> 		return VoteTimesStorage(config().voteTimesStorage());
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        838
Source: 
> 	function addVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        838
Source: 
> 	function addVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        843
Source: 
> 		voteTimesByProperty = voteTimesByProperty.add(1);
> 		getStorage().setVoteTimesByProperty(_property, voteTimesByProperty);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        849
Source: 
> 			msg.sender,
> 			config().allocator(),
>    ^^^^^^^^^^^^^^^^^^^^
> 			config().propertyFactory()

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        850
Source: 
> 			config().allocator(),
> 			config().propertyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        847
Source: 
> 	function resetVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddresses(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        852
Source: 
> 		);
> 		uint256 voteTimes = getStorage().getVoteTimes();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setVoteTimesByProperty(_property, voteTimes);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        853
Source: 
> 		uint256 voteTimes = getStorage().getVoteTimes();
> 		getStorage().setVoteTimesByProperty(_property, voteTimes);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        861
Source: 
> 	{
> 		uint256 voteTimes = getStorage().getVoteTimes();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        862
Source: 
> 		uint256 voteTimes = getStorage().getVoteTimes();
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        1354
Source: 
> 			msg.sender,
> 			config().metricsFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        1352
Source: 
> 	function addGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        1357
Source: 
> 		require(isGroup(_addr) == false, "already enabled");
> 		eternalStorage().setBool(getGroupKey(_addr), true);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 totalCount = eternalStorage().getUint(getTotalCountKey());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        1360
Source: 
> 		totalCount = totalCount.add(1);
> 		eternalStorage().setUint(getTotalCountKey(), totalCount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        1364
Source: 
> 	function isGroup(address _addr) public view returns (bool) {
> 		return eternalStorage().getBool(getGroupKey(_addr));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        1368
Source: 
> 	function totalIssuedMetrics() external view returns (uint256) {
> 		return eternalStorage().getUint(getTotalCountKey());
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PropertyGroup
Line:        1448
Source: 
> 			msg.sender,
> 			config().propertyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PropertyGroup
Line:        1446
Source: 
> 	function addGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PropertyGroup
Line:        1451
Source: 
> 		require(isGroup(_addr) == false, "already enabled");
> 		eternalStorage().setBool(getGroupKey(_addr), true);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PropertyGroup
Line:        1455
Source: 
> 	function isGroup(address _addr) public view returns (bool) {
> 		return eternalStorage().getBool(getGroupKey(_addr));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1471
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getRewardsAmountKey(_property), _value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1472
Source: 
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
> 		eternalStorage().setUint(getRewardsAmountKey(_property), _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1480
Source: 
> 	{
> 		return eternalStorage().getUint(getRewardsAmountKey(_property));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1496
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getCumulativePriceKey(_property), _value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1497
Source: 
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
> 		eternalStorage().setUint(getCumulativePriceKey(_property), _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1505
Source: 
> 	{
> 		return eternalStorage().getUint(getCumulativePriceKey(_property));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1522
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1523
Source: 
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getWithdrawalLimitTotalKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1535
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getWithdrawalLimitTotalKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1557
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1558
Source: 
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getWithdrawalLimitBalanceKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1570
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getWithdrawalLimitBalanceKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1592
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1593
Source: 
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getLastWithdrawalPriceKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1605
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getLastWithdrawalPriceKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1627
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1628
Source: 
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getPendingWithdrawalKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1640
Source: 
> 		return
> 			eternalStorage().getUint(getPendingWithdrawalKey(_property, _user));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1663
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 value = _calculateWithdrawableAmount(_property, msg.sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1667
Source: 
> 		uint256 price = getStorage().getCumulativePrice(_property);
> 		getStorage().setLastWithdrawalPrice(_property, msg.sender, price);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setPendingWithdrawal(_property, msg.sender, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1668
Source: 
> 		getStorage().setLastWithdrawalPrice(_property, msg.sender, price);
> 		getStorage().setPendingWithdrawal(_property, msg.sender, 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1669
Source: 
> 		getStorage().setPendingWithdrawal(_property, msg.sender, 0);
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
>                                       ^^^^^^^^^^^^^^^^
> 		require(erc20.mint(msg.sender, value), "dev mint failed");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1778
Source: 
> 	function getStorage() private view returns (WithdrawStorage) {
> 		return WithdrawStorage(config().withdrawStorage());
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1729
Source: 
> 	{
> 		uint256 _last = getStorage().getLastWithdrawalPrice(_property, _user);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 totalLimit = getStorage().getWithdrawalLimitTotal(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1738
Source: 
> 		);
> 		uint256 price = getStorage().getCumulativePrice(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 priceGap = price.sub(_last);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1676
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 price = getStorage().getCumulativePrice(_property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1680
Source: 
> 		uint256 amountTo = _calculateAmount(_property, _to);
> 		getStorage().setLastWithdrawalPrice(_property, _from, price);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setLastWithdrawalPrice(_property, _to, price);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1681
Source: 
> 		getStorage().setLastWithdrawalPrice(_property, _from, price);
> 		getStorage().setLastWithdrawalPrice(_property, _to, price);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 pendFrom = getStorage().getPendingWithdrawal(_property, _from);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1684
Source: 
> 		uint256 pendTo = getStorage().getPendingWithdrawal(_property, _to);
> 		getStorage().setPendingWithdrawal(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1689
Source: 
> 		);
> 		getStorage().setPendingWithdrawal(_property, _to, pendTo.add(amountTo));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 totalLimit = getStorage().getWithdrawalLimitTotal(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1696
Source: 
> 		if (totalLimit != total) {
> 			getStorage().setWithdrawalLimitTotal(_property, _to, total);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getStorage().setWithdrawalLimitBalance(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1697
Source: 
> 			getStorage().setWithdrawalLimitTotal(_property, _to, total);
> 			getStorage().setWithdrawalLimitBalance(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1706
Source: 
> 	function increment(address _property, uint256 _allocationResult) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 priceValue = _allocationResult.outOf(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1711
Source: 
> 		uint256 total = getStorage().getRewardsAmount(_property);
> 		getStorage().setRewardsAmount(_property, total.add(_allocationResult));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 price = getStorage().getCumulativePrice(_property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1713
Source: 
> 		uint256 price = getStorage().getCumulativePrice(_property);
> 		getStorage().setCumulativePrice(_property, price.add(priceValue));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1721
Source: 
> 	{
> 		return getStorage().getRewardsAmount(_property);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1793
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytes32 key = getValueKey(_property, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1795
Source: 
> 		bytes32 key = getValueKey(_property, _sender);
> 		eternalStorage().setUint(key, _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1803
Source: 
> 		bytes32 key = getValueKey(_property, _sender);
> 		return eternalStorage().getUint(key);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1817
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytes32 key = getPropertyValueKey(_property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1819
Source: 
> 		bytes32 key = getPropertyValueKey(_property);
> 		eternalStorage().setUint(key, _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1827
Source: 
> 		bytes32 key = getPropertyValueKey(_property);
> 		return eternalStorage().getUint(key);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1842
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytes32 key = getWithdrawalStatusKey(_property, _from);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1844
Source: 
> 		bytes32 key = getWithdrawalStatusKey(_property, _from);
> 		eternalStorage().setUint(key, _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1852
Source: 
> 		bytes32 key = getWithdrawalStatusKey(_property, _from);
> 		return eternalStorage().getUint(key);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1869
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getInterestPriceKey(_property), _value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1870
Source: 
> 		addressValidator().validateAddress(msg.sender, config().lockup());
> 		eternalStorage().setUint(getInterestPriceKey(_property), _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1877
Source: 
> 	{
> 		return eternalStorage().getUint(getInterestPriceKey(_property));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1892
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1893
Source: 
> 		addressValidator().validateAddress(msg.sender, config().lockup());
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getLastInterestPriceKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1904
Source: 
> 		return
> 			eternalStorage().getUint(getLastInterestPriceKey(_property, _user));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1922
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1923
Source: 
> 		addressValidator().validateAddress(msg.sender, config().lockup());
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getPendingInterestWithdrawalKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LockupStorage
Line:        1934
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getPendingInterestWithdrawalKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        1961
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateAddress(msg.sender, config().token());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        1962
Source: 
> 		addressValidator().validateAddress(msg.sender, config().token());
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_value != 0, "illegal lockup value");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        1970
Source: 
> 		addPropertyValue(_property, _value);
> 		getStorage().setLastInterestPrice(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2148
Source: 
> 	function getStorage() private view returns (LockupStorage) {
> 		return LockupStorage(config().lockupStorage());
>                        ^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2104
Source: 
> 		value = value.add(_value);
> 		getStorage().setPropertyValue(_property, value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2089
Source: 
> 		value = value.add(_value);
> 		getStorage().setValue(_property, _sender, value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2125
Source: 
> 		);
> 		getStorage().setPendingInterestWithdrawal(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2017
Source: 
> 	{
> 		uint256 _last = getStorage().getLastInterestPrice(_property, _user);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 price = getStorage().getInterestPrice(_property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2018
Source: 
> 		uint256 _last = getStorage().getLastInterestPrice(_property, _user);
> 		uint256 price = getStorage().getInterestPrice(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 priceGap = price.sub(_last);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        1979
Source: 
> 	function cancel(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(hasValue(_property, msg.sender), "dev token is not locked");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        1987
Source: 
> 		require(isWaiting == false, "lockup is already canceled");
> 		uint256 blockNumber = Policy(config().policy()).lockUpBlocks();
>                                ^^^^^^^^^^^^^^^^^
> 		blockNumber = blockNumber.add(block.number);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        1989
Source: 
> 		blockNumber = blockNumber.add(block.number);
> 		getStorage().setWithdrawalStatus(_property, msg.sender, blockNumber);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        1993
Source: 
> 	function withdraw(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(possible(_property, msg.sender), "waiting for release");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        1998
Source: 
> 		updatePendingInterestWithdrawal(_property, msg.sender);
> 		Property(_property).withdraw(msg.sender, lockupedValue);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setValue(_property, msg.sender, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        1999
Source: 
> 		Property(_property).withdraw(msg.sender, lockupedValue);
> 		getStorage().setValue(_property, msg.sender, 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		subPropertyValue(_property, lockupedValue);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2001
Source: 
> 		subPropertyValue(_property, lockupedValue);
> 		getStorage().setWithdrawalStatus(_property, msg.sender, 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2108
Source: 
> 	function subPropertyValue(address _property, uint256 _value) private {
> 		uint256 value = getStorage().getPropertyValue(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		value = value.sub(_value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2110
Source: 
> 		value = value.sub(_value);
> 		getStorage().setPropertyValue(_property, value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2005
Source: 
> 	function increment(address _property, uint256 _interestResult) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 priceValue = _interestResult.outOf(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2115
Source: 
> 		uint256 price = getStorage().getInterestPrice(_property);
> 		getStorage().setInterestPrice(_property, price.add(_priceValue));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2037
Source: 
> 	) private view returns (uint256) {
> 		uint256 pending = getStorage().getPendingInterestWithdrawal(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2052
Source: 
> 	function withdrawInterest(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 value = _calculateWithdrawableInterestAmount(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2058
Source: 
> 		require(value > 0, "your interest amount is 0");
> 		getStorage().setLastInterestPrice(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2063
Source: 
> 		);
> 		getStorage().setPendingInterestWithdrawal(_property, msg.sender, 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2064
Source: 
> 		getStorage().setPendingInterestWithdrawal(_property, msg.sender, 0);
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
>                                       ^^^^^^^^^^^^^^^^
> 		require(erc20.mint(msg.sender, value), "dev mint failed");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2073
Source: 
> 	{
> 		return getStorage().getPropertyValue(_property);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lockup
Line:        2081
Source: 
> 	{
> 		return getStorage().getValue(_property, _sender);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2168
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytes32 alreadyVoteKey = getAlreadyVoteKey(_user, _sender, _property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2170
Source: 
> 		bytes32 alreadyVoteKey = getAlreadyVoteKey(_user, _sender, _property);
> 		return eternalStorage().setBool(alreadyVoteKey, true);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2178
Source: 
> 		bytes32 alreadyVoteKey = getAlreadyVoteKey(_user, _sender, _property);
> 		return eternalStorage().getBool(alreadyVoteKey);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2192
Source: 
> 	function getAgreeCount(address _sender) external view returns (uint256) {
> 		return eternalStorage().getUint(getAgreeVoteCountKey(_sender));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2198
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getAgreeVoteCountKey(_sender), count);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2199
Source: 
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
> 		eternalStorage().setUint(getAgreeVoteCountKey(_sender), count);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2210
Source: 
> 	function getOppositeCount(address _sender) external view returns (uint256) {
> 		return eternalStorage().getUint(getOppositeVoteCountKey(_sender));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2216
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getOppositeVoteCountKey(_sender), count);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounterStorage
Line:        2217
Source: 
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
> 		eternalStorage().setUint(getOppositeVoteCountKey(_sender), count);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2238
Source: 
> 	{
> 		addressValidator().validateGroups(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2251
Source: 
> 		require(voteCount != 0, "vote count is 0");
> 		getStorage().setAlreadyVoteFlg(_user, msg.sender, _property);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (_agree) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2289
Source: 
> 		agreeCount = agreeCount.add(_voteCount);
> 		getStorage().setAgreeCount(_target, agreeCount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2299
Source: 
> 	function getStorage() private view returns (VoteCounterStorage) {
> 		return VoteCounterStorage(config().voteCounterStorage());
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2295
Source: 
> 		oppositeCount = oppositeCount.add(_voteCount);
> 		getStorage().setOppositeCount(_target, oppositeCount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2277
Source: 
> 				.add(
> 				Allocator(config().allocator()).getRewardsAmount(_property)
>               ^^^^^^^^^^^^^^^^^^^^
> 			);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2274
Source: 
> 			// solium-disable-next-line operator-whitespace
> 			voteCount = Lockup(config().lockup())
>                       ^^^^^^^^^^^^^^^^^
> 				.getPropertyValue(_property)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2279
Source: 
> 			);
> 			VoteTimes(config().voteTimes()).addVoteTimesByProperty(_property);
>              ^^^^^^^^^^^^^^^^^^^^
> 		} else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2279
Source: 
> 			);
> 			VoteTimes(config().voteTimes()).addVoteTimesByProperty(_property);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2281
Source: 
> 		} else {
> 			voteCount = Lockup(config().lockup()).getValue(_property, _sender);
>                       ^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2260
Source: 
> 	function getAgreeCount(address _sender) external view returns (uint256) {
> 		return getStorage().getAgreeCount(_sender);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteCounter
Line:        2264
Source: 
> 	function getOppositeCount(address _sender) external view returns (uint256) {
> 		return getStorage().getOppositeCount(_sender);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketGroup
Line:        2360
Source: 
> 			msg.sender,
> 			config().marketFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketGroup
Line:        2358
Source: 
> 	function addGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketGroup
Line:        2363
Source: 
> 		require(isGroup(_addr) == false, "already enabled");
> 		eternalStorage().setBool(getGroupKey(_addr), true);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addCount();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketGroup
Line:        2375
Source: 
> 		number = number.add(1);
> 		eternalStorage().setUint(key, number);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketGroup
Line:        2368
Source: 
> 	function isGroup(address _addr) public view returns (bool) {
> 		return eternalStorage().getBool(getGroupKey(_addr));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketGroup
Line:        2380
Source: 
> 		bytes32 key = getCountKey();
> 		return eternalStorage().getUint(key);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2398
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2396
Source: 
> 	function addSet(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2402
Source: 
> 		bytes32 key = getIndexKey(index);
> 		eternalStorage().setAddress(key, _addr);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		index = index.add(1);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2404
Source: 
> 		index = index.add(1);
> 		eternalStorage().setUint(getPlicySetIndexKey(), index);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2410
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2408
Source: 
> 	function deleteAll() external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2415
Source: 
> 			bytes32 key = getIndexKey(i);
> 			eternalStorage().setAddress(key, address(0));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2417
Source: 
> 		}
> 		eternalStorage().setUint(getPlicySetIndexKey(), 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2421
Source: 
> 	function count() external view returns (uint256) {
> 		return eternalStorage().getUint(getPlicySetIndexKey());
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicySet
Line:        2426
Source: 
> 		bytes32 key = getIndexKey(_index);
> 		return eternalStorage().getAddress(key);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyGroup
Line:        2452
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyGroup
Line:        2450
Source: 
> 	function addGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyGroup
Line:        2455
Source: 
> 		require(isGroup(_addr) == false, "already enabled");
> 		eternalStorage().setBool(getGroupKey(_addr), true);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyGroup
Line:        2468
Source: 
> 	function isGroup(address _addr) public view returns (bool) {
> 		return eternalStorage().getBool(getGroupKey(_addr));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyGroup
Line:        2461
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyGroup
Line:        2459
Source: 
> 	function deleteGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyGroup
Line:        2464
Source: 
> 		require(isGroup(_addr), "not enabled");
> 		return eternalStorage().setBool(getGroupKey(_addr), false);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2481
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateIllegalAddress(_newPolicyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Policy policy = new Policy(address(config()), _newPolicyAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2486
Source: 
> 		if (config().policy() == address(0)) {
> 			config().setPolicy(policyAddress);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2490
Source: 
> 		}
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
>                                         ^^^^^^^^^^^^^^^^^^^^^^
> 		policyGroup.addGroup(policyAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2491
Source: 
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
> 		policyGroup.addGroup(policyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		PolicySet policySet = PolicySet(config().policySet());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2492
Source: 
> 		policyGroup.addGroup(policyAddress);
> 		PolicySet policySet = PolicySet(config().policySet());
>                                   ^^^^^^^^^^^^^^^^^^^^
> 		policySet.addSet(policyAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2493
Source: 
> 		PolicySet policySet = PolicySet(config().policySet());
> 		policySet.addSet(policyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return policyAddress;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2488
Source: 
> 		} else {
> 			VoteTimes(config().voteTimes()).addVoteTime();
>              ^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2488
Source: 
> 		} else {
> 			VoteTimes(config().voteTimes()).addVoteTime();
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2498
Source: 
> 	function convergePolicy(address _currentPolicyAddress) external {
> 		addressValidator().validateGroup(msg.sender, config().policyGroup());
>                                                ^^^^^^^^^^^^^^^^^^^^^^
> 		config().setPolicy(_currentPolicyAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2498
Source: 
> 	function convergePolicy(address _currentPolicyAddress) external {
> 		addressValidator().validateGroup(msg.sender, config().policyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		config().setPolicy(_currentPolicyAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2499
Source: 
> 		addressValidator().validateGroup(msg.sender, config().policyGroup());
> 		config().setPolicy(_currentPolicyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		PolicySet policySet = PolicySet(config().policySet());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2500
Source: 
> 		config().setPolicy(_currentPolicyAddress);
> 		PolicySet policySet = PolicySet(config().policySet());
>                                   ^^^^^^^^^^^^^^^^^^^^
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2501
Source: 
> 		PolicySet policySet = PolicySet(config().policySet());
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
>                                         ^^^^^^^^^^^^^^^^^^^^^^
> 		for (uint256 i = 0; i < policySet.count(); i++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2507
Source: 
> 			}
> 			Policy(policyAddress).kill();
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			policyGroup.deleteGroup(policyAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2508
Source: 
> 			Policy(policyAddress).kill();
> 			policyGroup.deleteGroup(policyAddress);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2510
Source: 
> 		}
> 		policySet.deleteAll();
>   ^^^^^^^^^^^^^^^^^^^^^
> 		policySet.addSet(_currentPolicyAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PolicyFactory
Line:        2511
Source: 
> 		policySet.deleteAll();
> 		policySet.addSet(_currentPolicyAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2527
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2525
Source: 
> 	{
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2622
Source: 
> 		}
> 		uint256 tmp = Policy(config().policy()).policyVotingBlocks();
>                        ^^^^^^^^^^^^^^^^^
> 		_votingEndBlockNumber = block.number.add(tmp);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2542
Source: 
> 	{
> 		return _policy.rewards(_lockups, _assets);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2550
Source: 
> 	{
> 		return _policy.holdersShare(_amount, _lockups);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2558
Source: 
> 	{
> 		return _policy.assetValue(_value, _lockups);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2566
Source: 
> 	{
> 		return _policy.authenticationFee(_assets, _propertyAssets);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2574
Source: 
> 	{
> 		return _policy.marketApproval(_agree, _opposite);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2582
Source: 
> 	{
> 		return _policy.policyApproval(_agree, _opposite);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2586
Source: 
> 	function marketVotingBlocks() external view returns (uint256) {
> 		return _policy.marketVotingBlocks();
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2590
Source: 
> 	function policyVotingBlocks() external view returns (uint256) {
> 		return _policy.policyVotingBlocks();
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2594
Source: 
> 	function abstentionPenalty(uint256 _count) external view returns (uint256) {
> 		return _policy.abstentionPenalty(_count);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2598
Source: 
> 	function lockUpBlocks() external view returns (uint256) {
> 		return _policy.lockUpBlocks();
>          ^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2602
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(config().policy() != address(this), "this policy is current");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2602
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(config().policy() != address(this), "this policy is current");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2605
Source: 
> 		require(voting(), "voting deadline is over");
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
>                                         ^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2606
Source: 
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bool result = Policy(config().policy()).policyApproval(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2608
Source: 
> 		bool result = Policy(config().policy()).policyApproval(
> 			voteCounter.getAgreeCount(address(this)),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			voteCounter.getOppositeCount(address(this))

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2609
Source: 
> 			voteCounter.getAgreeCount(address(this)),
> 			voteCounter.getOppositeCount(address(this))
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2607
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		bool result = Policy(config().policy()).policyApproval(
>                        ^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2614
Source: 
> 		}
> 		PolicyFactory(config().policyFactory()).convergePolicy(address(this));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
> 		_votingEndBlockNumber = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Policy
Line:        2614
Source: 
> 		}
> 		PolicyFactory(config().policyFactory()).convergePolicy(address(this));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_votingEndBlockNumber = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2638
Source: 
> 	function setLastBlockNumber(address _metrics, uint256 _blocks) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getLastBlockNumberKey(_metrics), _blocks);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2638
Source: 
> 	function setLastBlockNumber(address _metrics, uint256 _blocks) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getLastBlockNumberKey(_metrics), _blocks);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2639
Source: 
> 		addressValidator().validateAddress(msg.sender, config().allocator());
> 		eternalStorage().setUint(getLastBlockNumberKey(_metrics), _blocks);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2647
Source: 
> 	{
> 		return eternalStorage().getUint(getLastBlockNumberKey(_metrics));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2660
Source: 
> 	function setBaseBlockNumber(uint256 _blockNumber) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getBaseBlockNumberKey(), _blockNumber);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2660
Source: 
> 	function setBaseBlockNumber(uint256 _blockNumber) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getBaseBlockNumberKey(), _blockNumber);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2661
Source: 
> 		addressValidator().validateAddress(msg.sender, config().allocator());
> 		eternalStorage().setUint(getBaseBlockNumberKey(), _blockNumber);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2665
Source: 
> 	function getBaseBlockNumber() external view returns (uint256) {
> 		return eternalStorage().getUint(getBaseBlockNumberKey());
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2674
Source: 
> 	function setPendingIncrement(address _metrics, bool value) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setBool(getPendingIncrementKey(_metrics), value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2674
Source: 
> 	function setPendingIncrement(address _metrics, bool value) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setBool(getPendingIncrementKey(_metrics), value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2675
Source: 
> 		addressValidator().validateAddress(msg.sender, config().allocator());
> 		eternalStorage().setBool(getPendingIncrementKey(_metrics), value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2683
Source: 
> 	{
> 		return eternalStorage().getBool(getPendingIncrementKey(_metrics));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2699
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2699
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2700
Source: 
> 		addressValidator().validateAddress(msg.sender, config().allocator());
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getLastAllocationBlockEachMetricsKey(_metrics),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2712
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getLastAllocationBlockEachMetricsKey(_metrics)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2732
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2732
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2733
Source: 
> 		addressValidator().validateAddress(msg.sender, config().allocator());
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getLastAssetValueEachMetricsKey(_metrics),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2745
Source: 
> 		return
> 			eternalStorage().getUint(getLastAssetValueEachMetricsKey(_metrics));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2760
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2760
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2761
Source: 
> 		addressValidator().validateAddress(msg.sender, config().allocator());
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getLastAssetValueEachMarketPerBlockKey(_market),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AllocatorStorage
Line:        2773
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getLastAssetValueEachMarketPerBlockKey(_market)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2814
Source: 
> 	function allocate(address _metrics) external {
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		validateTargetPeriod(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2816
Source: 
> 		validateTargetPeriod(_metrics);
> 		address market = Metrics(_metrics).market();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setPendingIncrement(_metrics, true);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2817
Source: 
> 		address market = Metrics(_metrics).market();
> 		getStorage().setPendingIncrement(_metrics, true);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		IMarketBehavior(Market(market).behavior()).calculate(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2818
Source: 
> 		getStorage().setPendingIncrement(_metrics, true);
> 		IMarketBehavior(Market(market).behavior()).calculate(
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_metrics,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2818
Source: 
> 		getStorage().setPendingIncrement(_metrics, true);
> 		IMarketBehavior(Market(market).behavior()).calculate(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_metrics,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2823
Source: 
> 		);
> 		getStorage().setLastBlockNumber(_metrics, block.number);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2970
Source: 
> 	function getStorage() private view returns (AllocatorStorage) {
> 		return AllocatorStorage(config().allocatorStorage());
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2961
Source: 
> 		if (baseBlockNumber == 0) {
> 			getStorage().setBaseBlockNumber(block.number);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2936
Source: 
> 		address property = Metrics(_metrics).property();
> 		VoteTimes voteTimes = VoteTimes(config().voteTimes());
>                                   ^^^^^^^^^^^^^^^^^^^^
> 		uint256 abstentionCount = voteTimes.getAbstentionTimes(property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2938
Source: 
> 		uint256 abstentionCount = voteTimes.getAbstentionTimes(property);
> 		uint256 notTargetPeriod = Policy(config().policy()).abstentionPenalty(
>                                    ^^^^^^^^^^^^^^^^^
> 			abstentionCount

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2950
Source: 
> 		);
> 		getStorage().setLastBlockNumber(_metrics, notTargetBlockNumber);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimes.resetVoteTimesByProperty(property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2951
Source: 
> 		getStorage().setLastBlockNumber(_metrics, notTargetBlockNumber);
> 		voteTimes.resetVoteTimesByProperty(property);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2827
Source: 
> 	function calculatedCallback(address _metrics, uint256 _value) external {
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2829
Source: 
> 		Metrics metrics = Metrics(_metrics);
> 		Market market = Market(metrics.market());
>                          ^^^^^^^^^^^^^^^^
> 		require(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2838
Source: 
> 		);
> 		Policy policy = Policy(config().policy());
>                          ^^^^^^^^^^^^^^^^^
> 		uint256 totalAssets = MetricsGroup(config().metricsGroup())

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2839
Source: 
> 		Policy policy = Policy(config().policy());
> 		uint256 totalAssets = MetricsGroup(config().metricsGroup())
>                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 			.totalIssuedMetrics();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2841
Source: 
> 			.totalIssuedMetrics();
> 		uint256 lockupValue = Lockup(config().lockup()).getPropertyValue(
>                                ^^^^^^^^^^^^^^^^^
> 			metrics.property()

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2845
Source: 
> 		uint256 blocks = block.number.sub(
> 			getStorage().getLastAllocationBlockEachMetrics(_metrics)
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2853
Source: 
> 			.getLastAssetValueEachMarketPerBlock(metrics.market())
> 			.sub(getStorage().getLastAssetValueEachMetrics(_metrics))
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			.add(value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2851
Source: 
> 		);
> 		uint256 marketValue = getStorage()
>                         ^^^^^^^^^^^^
> 			.getLastAssetValueEachMarketPerBlock(metrics.market())

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2856
Source: 
> 		uint256 assets = market.issuedMetrics();
> 		getStorage().setLastAllocationBlockEachMetrics(_metrics, block.number);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setLastAssetValueEachMetrics(_metrics, value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2857
Source: 
> 		getStorage().setLastAllocationBlockEachMetrics(_metrics, block.number);
> 		getStorage().setLastAssetValueEachMetrics(_metrics, value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setLastAssetValueEachMarketPerBlock(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2858
Source: 
> 		getStorage().setLastAssetValueEachMetrics(_metrics, value);
> 		getStorage().setLastAssetValueEachMarketPerBlock(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			metrics.market(),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2879
Source: 
> 		increment(metrics.property(), result, lockupValue);
> 		getStorage().setPendingIncrement(_metrics, false);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2885
Source: 
> 	{
> 		uint256 holders = Policy(config().policy()).holdersShare(
>                            ^^^^^^^^^^^^^^^^^
> 			_reward,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2890
Source: 
> 		uint256 interest = _reward.sub(holders);
> 		Withdraw(config().withdraw()).increment(_property, holders);
>            ^^^^^^^^^^^^^^^^^^^
> 		Lockup(config().lockup()).increment(_property, interest);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2890
Source: 
> 		uint256 interest = _reward.sub(holders);
> 		Withdraw(config().withdraw()).increment(_property, holders);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Lockup(config().lockup()).increment(_property, interest);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2891
Source: 
> 		Withdraw(config().withdraw()).increment(_property, holders);
> 		Lockup(config().lockup()).increment(_property, interest);
>          ^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2891
Source: 
> 		Withdraw(config().withdraw()).increment(_property, holders);
> 		Lockup(config().lockup()).increment(_property, interest);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2897
Source: 
> 	{
> 		addressValidator().validateGroup(msg.sender, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Withdraw(config().withdraw()).beforeBalanceChange(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2898
Source: 
> 		addressValidator().validateGroup(msg.sender, config().propertyGroup());
> 		Withdraw(config().withdraw()).beforeBalanceChange(
>            ^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2898
Source: 
> 		addressValidator().validateGroup(msg.sender, config().propertyGroup());
> 		Withdraw(config().withdraw()).beforeBalanceChange(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2910
Source: 
> 	{
> 		return Withdraw(config().withdraw()).getRewardsAmount(_property);
>                   ^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Allocator
Line:        2910
Source: 
> 	{
> 		return Withdraw(config().withdraw()).getRewardsAmount(_property);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Property
Line:        2986
Source: 
> 	) public UsingConfig(_config) ERC20Detailed(_name, _symbol, _decimals) {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Property
Line:        2995
Source: 
> 	function transfer(address _to, uint256 _value) public returns (bool) {
> 		addressValidator().validateIllegalAddress(_to);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_value != 0, "illegal transfer value");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Property
Line:        2997
Source: 
> 		require(_value != 0, "illegal transfer value");
> 		Allocator(config().allocator()).beforeBalanceChange(
>             ^^^^^^^^^^^^^^^^^^^^
> 			address(this),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Property
Line:        2997
Source: 
> 		require(_value != 0, "illegal transfer value");
> 		Allocator(config().allocator()).beforeBalanceChange(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			address(this),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Property
Line:        3006
Source: 
> 	function withdraw(address _sender, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		ERC20 devToken = ERC20(config().token());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Property
Line:        3007
Source: 
> 		addressValidator().validateAddress(msg.sender, config().lockup());
> 		ERC20 devToken = ERC20(config().token());
>                          ^^^^^^^^^^^^^^^^
> 		devToken.transfer(_sender, _value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Property
Line:        3008
Source: 
> 		ERC20 devToken = ERC20(config().token());
> 		devToken.transfer(_sender, _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        3075
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = new Metrics(msg.sender, _property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        3075
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = new Metrics(msg.sender, _property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        3077
Source: 
> 		Metrics metrics = new Metrics(msg.sender, _property);
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^
> 		address metricsAddress = address(metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        3079
Source: 
> 		address metricsAddress = address(metrics);
> 		metricsGroup.addGroup(metricsAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Create(msg.sender, metricsAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Dev
Line:        3147
Source: 
> 	function lock(address _from, address _to, uint256 _amount) private {
> 		Lockup(config().lockup()).lockup(_from, _to, _amount);
>          ^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Dev
Line:        3147
Source: 
> 	function lock(address _from, address _to, uint256 _amount) private {
> 		Lockup(config().lockup()).lockup(_from, _to, _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Dev
Line:        3141
Source: 
> 	function fee(address _from, uint256 _amount) external returns (bool) {
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_burn(_from, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3164
Source: 
> 	{
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3170
Source: 
> 		enabled = false;
> 		uint256 marketVotingBlocks = Policy(config().policy())
>                                       ^^^^^^^^^^^^^^^^^
> 			.marketVotingBlocks();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3176
Source: 
> 	function toEnable() external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3191
Source: 
> 	) public returns (address) {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3199
Source: 
> 		return
> 			IMarketBehavior(behavior).authenticate(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				_prop,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3215
Source: 
> 	{
> 		uint256 tokenValue = Lockup(config().lockup()).getPropertyValue(
>                               ^^^^^^^^^^^^^^^^^
> 			_property

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3218
Source: 
> 		);
> 		Policy policy = Policy(config().policy());
>                          ^^^^^^^^^^^^^^^^^
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3219
Source: 
> 		Policy policy = Policy(config().policy());
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^
> 		return

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3231
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, behavior);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(enabled, "market is not enabled");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3237
Source: 
> 		MetricsFactory metricsFactory = MetricsFactory(
> 			config().metricsFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3239
Source: 
> 		);
> 		address metrics = metricsFactory.create(_property);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 authenticationFee = getAuthenticationFee(_property);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3242
Source: 
> 		require(
> 			Dev(config().token()).fee(sender, authenticationFee),
>        ^^^^^^^^^^^^^^^^
> 			"dev fee failed"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3250
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(enabled == false, "market is already enabled");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3256
Source: 
> 		);
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
>                                         ^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3257
Source: 
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		enabled = Policy(config().policy()).marketApproval(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3258
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		enabled = Policy(config().policy()).marketApproval(
>                    ^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        3265
Source: 
> 	function schema() external view returns (string memory) {
> 		return IMarketBehavior(behavior).schema();
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketFactory
Line:        3278
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateIllegalAddress(_addr);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Market market = new Market(address(config()), _addr);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketFactory
Line:        3281
Source: 
> 		address marketAddr = address(market);
> 		MarketGroup marketGroup = MarketGroup(config().marketGroup());
>                                         ^^^^^^^^^^^^^^^^^^^^^^
> 		marketGroup.addGroup(marketAddr);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketFactory
Line:        3282
Source: 
> 		MarketGroup marketGroup = MarketGroup(config().marketGroup());
> 		marketGroup.addGroup(marketAddr);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (marketGroup.getCount() == 1) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketFactory
Line:        3284
Source: 
> 		if (marketGroup.getCount() == 1) {
> 			market.toEnable();
>    ^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketFactory
Line:        3287
Source: 
> 		emit Create(msg.sender, marketAddr);
> 		VoteTimes(config().voteTimes()).addVoteTime();
>             ^^^^^^^^^^^^^^^^^^^^
> 		return marketAddr;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MarketFactory
Line:        3287
Source: 
> 		emit Create(msg.sender, marketAddr);
> 		VoteTimes(config().voteTimes()).addVoteTime();
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return marketAddr;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        343
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        344
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        345
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        346
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        347
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        348
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        349
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        350
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        351
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        352
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        353
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        354
Source: 
> 	address public policy;
> 	address public policyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policySet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        355
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        356
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        357
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        358
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        359
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        360
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        361
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        362
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        734
Source: 
> contract UsingStorage is Ownable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	modifier hasStorage() {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        988
Source: 
> 	mapping(address => mapping(address => uint256)) private _allowances;
> 	uint256 private _totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        734
Source: 
> contract UsingStorage is Ownable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	modifier hasStorage() {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        135
Source: 
> 	event Unpaused(address account);
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Killable
Line:        186
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        329
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        452
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        734
Source: 
> contract UsingStorage is Ownable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	modifier hasStorage() {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        135
Source: 
> 	event Unpaused(address account);
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Killable
Line:        186
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        329
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        452
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        734
Source: 
> contract UsingStorage is Ownable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	modifier hasStorage() {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        135
Source: 
> 	event Unpaused(address account);
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Killable
Line:        186
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        329
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        452
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Policy
Line:        2518
Source: 
> 	using SafeMath for uint256;
> 	IPolicy private _policy;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 private _votingEndBlockNumber;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Policy
Line:        2519
Source: 
> 	IPolicy private _policy;
> 	uint256 private _votingEndBlockNumber;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        734
Source: 
> contract UsingStorage is Ownable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	modifier hasStorage() {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        988
Source: 
> 	mapping(address => mapping(address => uint256)) private _allowances;
> 	uint256 private _totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Property
Line:        2978
Source: 
> 	uint256 private constant _supply = 10000000;
> 	address public author;
>  ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        135
Source: 
> 	event Unpaused(address account);
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Killable
Line:        186
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        329
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        452
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        988
Source: 
> 	mapping(address => mapping(address => uint256)) private _allowances;
> 	uint256 private _totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        329
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        452
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        988
Source: 
> 	mapping(address => mapping(address => uint256)) private _allowances;
> 	uint256 private _totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Market
Line:        3154
Source: 
> 	using SafeMath for uint256;
> 	bool public enabled;
>  ^^^^^^^^^^^^^^^^^^^
> 	address public behavior;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Market
Line:        3155
Source: 
> 	bool public enabled;
> 	address public behavior;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 private _votingEndBlockNumber;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Market
Line:        3156
Source: 
> 	address public behavior;
> 	uint256 private _votingEndBlockNumber;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public issuedMetrics;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Market
Line:        3157
Source: 
> 	uint256 private _votingEndBlockNumber;
> 	uint256 public issuedMetrics;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(bytes32 => bool) private idMap;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        135
Source: 
> 	event Unpaused(address account);
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Killable
Line:        186
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        329
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        452
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        79
Source: 
> 	event PauserRemoved(address indexed account);
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        988
Source: 
> 	mapping(address => mapping(address => uint256)) private _allowances;
> 	uint256 private _totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinterRole
Line:        1382
Source: 
> 	event MinterRemoved(address indexed account);
> 	Roles.Role private _minters;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	constructor () internal {

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        79
Source: 
> 	event PauserRemoved(address indexed account);
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinterRole
Line:        1382
Source: 
> 	event MinterRemoved(address indexed account);
> 	Roles.Role private _minters;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	constructor () internal {

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        79
Source: 
> 	event PauserRemoved(address indexed account);
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Decimals
Line:        1306
Source: 
> 	using SafeMath for uint256;
> 	uint120 private constant basisValue = 1000000000000000000;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        171
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        179
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        1201
Source: 
> 		require(spender != address(0), "ERC20: approve to the zero address");
> 		_allowances[owner][spender] = amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        1201
Source: 
> 		require(spender != address(0), "ERC20: approve to the zero address");
> 		_allowances[owner][spender] = amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        1159
Source: 
> 		require(account != address(0), "ERC20: mint to the zero address");
> 		_totalSupply = _totalSupply.add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_balances[account] = _balances[account].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        1160
Source: 
> 		_totalSupply = _totalSupply.add(amount);
> 		_balances[account] = _balances[account].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(0), account, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        171
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        179
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        171
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        179
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        171
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        179
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        1201
Source: 
> 		require(spender != address(0), "ERC20: approve to the zero address");
> 		_allowances[owner][spender] = amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        171
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        179
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        1201
Source: 
> 		require(spender != address(0), "ERC20: approve to the zero address");
> 		_allowances[owner][spender] = amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        1159
Source: 
> 		require(account != address(0), "ERC20: mint to the zero address");
> 		_totalSupply = _totalSupply.add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_balances[account] = _balances[account].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        1160
Source: 
> 		_totalSupply = _totalSupply.add(amount);
> 		_balances[account] = _balances[account].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(0), account, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Market
Line:        3245
Source: 
> 		);
> 		issuedMetrics = issuedMetrics.add(1);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return metrics;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        49
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        57
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        171
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        179
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressConfig
Line:        418
Source: 
> 		addressValidator().validateAddress(msg.sender, policyFactory);
> 		policy = _addr;
>   ^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1140
Source: 
> 		require(recipient != address(0), "ERC20: transfer to the zero address");
> 		_balances[sender] = _balances[sender].sub(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1144
Source: 
> 		);
> 		_balances[recipient] = _balances[recipient].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1140
Source: 
> 		require(recipient != address(0), "ERC20: transfer to the zero address");
> 		_balances[sender] = _balances[sender].sub(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1144
Source: 
> 		);
> 		_balances[recipient] = _balances[recipient].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Policy
Line:        2615
Source: 
> 		PolicyFactory(config().policyFactory()).convergePolicy(address(this));
> 		_votingEndBlockNumber = 0;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1140
Source: 
> 		require(recipient != address(0), "ERC20: transfer to the zero address");
> 		_balances[sender] = _balances[sender].sub(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1144
Source: 
> 		);
> 		_balances[recipient] = _balances[recipient].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1140
Source: 
> 		require(recipient != address(0), "ERC20: transfer to the zero address");
> 		_balances[sender] = _balances[sender].sub(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1144
Source: 
> 		);
> 		_balances[recipient] = _balances[recipient].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1177
Source: 
> 		require(account != address(0), "ERC20: burn from the zero address");
> 		_balances[account] = _balances[account].sub(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1181
Source: 
> 		);
> 		_totalSupply = _totalSupply.sub(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(account, address(0), amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1140
Source: 
> 		require(recipient != address(0), "ERC20: transfer to the zero address");
> 		_balances[sender] = _balances[sender].sub(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1144
Source: 
> 		);
> 		_balances[recipient] = _balances[recipient].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1177
Source: 
> 		require(account != address(0), "ERC20: burn from the zero address");
> 		_balances[account] = _balances[account].sub(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        1181
Source: 
> 		);
> 		_totalSupply = _totalSupply.sub(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(account, address(0), amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Market
Line:        3180
Source: 
> 		);
> 		enabled = true;
>   ^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Market
Line:        3234
Source: 
> 		require(idMap[_idHash] == false, "id is duplicated");
> 		idMap[_idHash] = true;
>   ^^^^^^^^^^^^^^^^^^^^^
> 		address sender = Property(_property).author();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Market
Line:        3258
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		enabled = Policy(config().policy()).marketApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        172
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        180
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AddressConfig
Line:        417
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimesStorage
Line:        784
Source: 
> 	function setVoteTimes(uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>                                                  ^^^^^^^^
> 		return eternalStorage().setUint(getVoteTimesKey(), times);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimesStorage
Line:        784
Source: 
> 	function setVoteTimes(uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>   ^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().setUint(getVoteTimesKey(), times);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimesStorage
Line:        802
Source: 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>                                                  ^^^^^^^^
> 		return

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimesStorage
Line:        802
Source: 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>   ^^^^^^^^^^^^^^^^^^
> 		return

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        829
Source: 
> 			msg.sender,
> 			config().marketFactory(),
>    ^^^^^^^^
> 			config().policyFactory()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        830
Source: 
> 			config().marketFactory(),
> 			config().policyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        827
Source: 
> 	function addVoteTime() external {
> 		addressValidator().validateAddresses(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        869
Source: 
> 	function getStorage() private view returns (VoteTimesStorage) {
> 		return VoteTimesStorage(config().voteTimesStorage());
>                           ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        838
Source: 
> 	function addVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        838
Source: 
> 	function addVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        849
Source: 
> 			msg.sender,
> 			config().allocator(),
>    ^^^^^^^^
> 			config().propertyFactory()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        850
Source: 
> 			config().allocator(),
> 			config().propertyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        847
Source: 
> 	function resetVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddresses(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        1215
Source: 
> 			account,
> 			_msgSender(),
>    ^^^^^^^^^^^^
> 			_allowances[account][_msgSender()].sub(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        1216
Source: 
> 			_msgSender(),
> 			_allowances[account][_msgSender()].sub(
>                         ^^^^^^^^^^^^
> 				amount,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsGroup
Line:        1354
Source: 
> 			msg.sender,
> 			config().metricsFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsGroup
Line:        1352
Source: 
> 	function addGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        1215
Source: 
> 			account,
> 			_msgSender(),
>    ^^^^^^^^^^^^
> 			_allowances[account][_msgSender()].sub(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        1216
Source: 
> 			_msgSender(),
> 			_allowances[account][_msgSender()].sub(
>                         ^^^^^^^^^^^^
> 				amount,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PropertyGroup
Line:        1448
Source: 
> 			msg.sender,
> 			config().propertyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PropertyGroup
Line:        1446
Source: 
> 	function addGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1471
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(getRewardsAmountKey(_property), _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1471
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getRewardsAmountKey(_property), _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1496
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(getCumulativePriceKey(_property), _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1496
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getCumulativePriceKey(_property), _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1522
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1522
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1557
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1557
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1592
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1592
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1627
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1627
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        172
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        180
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1663
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^
> 		uint256 value = _calculateWithdrawableAmount(_property, msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1663
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		uint256 value = _calculateWithdrawableAmount(_property, msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1669
Source: 
> 		getStorage().setPendingWithdrawal(_property, msg.sender, 0);
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
>                                       ^^^^^^^^
> 		require(erc20.mint(msg.sender, value), "dev mint failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1778
Source: 
> 	function getStorage() private view returns (WithdrawStorage) {
> 		return WithdrawStorage(config().withdrawStorage());
>                          ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1676
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		uint256 price = getStorage().getCumulativePrice(_property);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1676
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		uint256 price = getStorage().getCumulativePrice(_property);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1706
Source: 
> 	function increment(address _property, uint256 _allocationResult) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		uint256 priceValue = _allocationResult.outOf(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1706
Source: 
> 	function increment(address _property, uint256 _allocationResult) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		uint256 priceValue = _allocationResult.outOf(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1713
Source: 
> 		uint256 price = getStorage().getCumulativePrice(_property);
> 		getStorage().setCumulativePrice(_property, price.add(priceValue));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1793
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^
> 		bytes32 key = getValueKey(_property, _sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1793
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^
> 		bytes32 key = getValueKey(_property, _sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1817
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^
> 		bytes32 key = getPropertyValueKey(_property);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1817
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^
> 		bytes32 key = getPropertyValueKey(_property);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1842
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^
> 		bytes32 key = getWithdrawalStatusKey(_property, _from);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1842
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^
> 		bytes32 key = getWithdrawalStatusKey(_property, _from);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1869
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(getInterestPriceKey(_property), _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1869
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getInterestPriceKey(_property), _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1892
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1892
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1922
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LockupStorage
Line:        1922
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        172
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        180
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1961
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateAddress(msg.sender, config().token());
>                                                  ^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1961
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateAddress(msg.sender, config().token());
>   ^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1962
Source: 
> 		addressValidator().validateAddress(msg.sender, config().token());
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^
> 		require(_value != 0, "illegal lockup value");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1962
Source: 
> 		addressValidator().validateAddress(msg.sender, config().token());
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		require(_value != 0, "illegal lockup value");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2148
Source: 
> 	function getStorage() private view returns (LockupStorage) {
> 		return LockupStorage(config().lockupStorage());
>                        ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2104
Source: 
> 		value = value.add(_value);
> 		getStorage().setPropertyValue(_property, value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2089
Source: 
> 		value = value.add(_value);
> 		getStorage().setValue(_property, _sender, value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1979
Source: 
> 	function cancel(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^
> 		require(hasValue(_property, msg.sender), "dev token is not locked");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1979
Source: 
> 	function cancel(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		require(hasValue(_property, msg.sender), "dev token is not locked");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1987
Source: 
> 		require(isWaiting == false, "lockup is already canceled");
> 		uint256 blockNumber = Policy(config().policy()).lockUpBlocks();
>                                ^^^^^^^^
> 		blockNumber = blockNumber.add(block.number);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1987
Source: 
> 		require(isWaiting == false, "lockup is already canceled");
> 		uint256 blockNumber = Policy(config().policy()).lockUpBlocks();
>                                ^^^^^^^^^^^^^^^^^
> 		blockNumber = blockNumber.add(block.number);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1993
Source: 
> 	function withdraw(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^
> 		require(possible(_property, msg.sender), "waiting for release");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1993
Source: 
> 	function withdraw(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		require(possible(_property, msg.sender), "waiting for release");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        1999
Source: 
> 		Property(_property).withdraw(msg.sender, lockupedValue);
> 		getStorage().setValue(_property, msg.sender, 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		subPropertyValue(_property, lockupedValue);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2110
Source: 
> 		value = value.sub(_value);
> 		getStorage().setPropertyValue(_property, value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2005
Source: 
> 	function increment(address _property, uint256 _interestResult) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		uint256 priceValue = _interestResult.outOf(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2005
Source: 
> 	function increment(address _property, uint256 _interestResult) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		uint256 priceValue = _interestResult.outOf(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2115
Source: 
> 		uint256 price = getStorage().getInterestPrice(_property);
> 		getStorage().setInterestPrice(_property, price.add(_priceValue));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2052
Source: 
> 	function withdrawInterest(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^
> 		uint256 value = _calculateWithdrawableInterestAmount(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2052
Source: 
> 	function withdrawInterest(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		uint256 value = _calculateWithdrawableInterestAmount(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lockup
Line:        2064
Source: 
> 		getStorage().setPendingInterestWithdrawal(_property, msg.sender, 0);
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
>                                       ^^^^^^^^
> 		require(erc20.mint(msg.sender, value), "dev mint failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounterStorage
Line:        2168
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^
> 		bytes32 alreadyVoteKey = getAlreadyVoteKey(_user, _sender, _property);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounterStorage
Line:        2168
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^
> 		bytes32 alreadyVoteKey = getAlreadyVoteKey(_user, _sender, _property);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounterStorage
Line:        2198
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(getAgreeVoteCountKey(_sender), count);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounterStorage
Line:        2198
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getAgreeVoteCountKey(_sender), count);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounterStorage
Line:        2216
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(getOppositeVoteCountKey(_sender), count);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounterStorage
Line:        2216
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getOppositeVoteCountKey(_sender), count);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2240
Source: 
> 			msg.sender,
> 			config().marketGroup(),
>    ^^^^^^^^
> 			config().policyGroup()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2241
Source: 
> 			config().marketGroup(),
> 			config().policyGroup()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2238
Source: 
> 	{
> 		addressValidator().validateGroups(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2289
Source: 
> 		agreeCount = agreeCount.add(_voteCount);
> 		getStorage().setAgreeCount(_target, agreeCount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2299
Source: 
> 	function getStorage() private view returns (VoteCounterStorage) {
> 		return VoteCounterStorage(config().voteCounterStorage());
>                             ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2295
Source: 
> 		oppositeCount = oppositeCount.add(_voteCount);
> 		getStorage().setOppositeCount(_target, oppositeCount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2277
Source: 
> 				.add(
> 				Allocator(config().allocator()).getRewardsAmount(_property)
>               ^^^^^^^^
> 			);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2277
Source: 
> 				.add(
> 				Allocator(config().allocator()).getRewardsAmount(_property)
>               ^^^^^^^^^^^^^^^^^^^^
> 			);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2274
Source: 
> 			// solium-disable-next-line operator-whitespace
> 			voteCount = Lockup(config().lockup())
>                       ^^^^^^^^
> 				.getPropertyValue(_property)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2274
Source: 
> 			// solium-disable-next-line operator-whitespace
> 			voteCount = Lockup(config().lockup())
>                       ^^^^^^^^^^^^^^^^^
> 				.getPropertyValue(_property)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2279
Source: 
> 			);
> 			VoteTimes(config().voteTimes()).addVoteTimesByProperty(_property);
>              ^^^^^^^^
> 		} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2279
Source: 
> 			);
> 			VoteTimes(config().voteTimes()).addVoteTimesByProperty(_property);
>              ^^^^^^^^^^^^^^^^^^^^
> 		} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2281
Source: 
> 		} else {
> 			voteCount = Lockup(config().lockup()).getValue(_property, _sender);
>                       ^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteCounter
Line:        2281
Source: 
> 		} else {
> 			voteCount = Lockup(config().lockup()).getValue(_property, _sender);
>                       ^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MarketGroup
Line:        2360
Source: 
> 			msg.sender,
> 			config().marketFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MarketGroup
Line:        2358
Source: 
> 	function addGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicySet
Line:        2398
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicySet
Line:        2396
Source: 
> 	function addSet(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicySet
Line:        2410
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicySet
Line:        2408
Source: 
> 	function deleteAll() external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyGroup
Line:        2452
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyGroup
Line:        2450
Source: 
> 	function addGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyGroup
Line:        2461
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyGroup
Line:        2459
Source: 
> 	function deleteGroup(address _addr) external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        172
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        180
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2481
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateIllegalAddress(_newPolicyAddress);
>   ^^^^^^^^^^^^^^^^^^
> 		Policy policy = new Policy(address(config()), _newPolicyAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2482
Source: 
> 		addressValidator().validateIllegalAddress(_newPolicyAddress);
> 		Policy policy = new Policy(address(config()), _newPolicyAddress);
>                                      ^^^^^^^^
> 		address policyAddress = address(policy);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2485
Source: 
> 		emit Create(msg.sender, policyAddress, _newPolicyAddress);
> 		if (config().policy() == address(0)) {
>       ^^^^^^^^
> 			config().setPolicy(policyAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2486
Source: 
> 		if (config().policy() == address(0)) {
> 			config().setPolicy(policyAddress);
>    ^^^^^^^^
> 		} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2490
Source: 
> 		}
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
>                                         ^^^^^^^^
> 		policyGroup.addGroup(policyAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2492
Source: 
> 		policyGroup.addGroup(policyAddress);
> 		PolicySet policySet = PolicySet(config().policySet());
>                                   ^^^^^^^^
> 		policySet.addSet(policyAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2488
Source: 
> 		} else {
> 			VoteTimes(config().voteTimes()).addVoteTime();
>              ^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2488
Source: 
> 		} else {
> 			VoteTimes(config().voteTimes()).addVoteTime();
>              ^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2498
Source: 
> 	function convergePolicy(address _currentPolicyAddress) external {
> 		addressValidator().validateGroup(msg.sender, config().policyGroup());
>                                                ^^^^^^^^
> 		config().setPolicy(_currentPolicyAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2498
Source: 
> 	function convergePolicy(address _currentPolicyAddress) external {
> 		addressValidator().validateGroup(msg.sender, config().policyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		config().setPolicy(_currentPolicyAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2499
Source: 
> 		addressValidator().validateGroup(msg.sender, config().policyGroup());
> 		config().setPolicy(_currentPolicyAddress);
>   ^^^^^^^^
> 		PolicySet policySet = PolicySet(config().policySet());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2500
Source: 
> 		config().setPolicy(_currentPolicyAddress);
> 		PolicySet policySet = PolicySet(config().policySet());
>                                   ^^^^^^^^
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PolicyFactory
Line:        2501
Source: 
> 		PolicySet policySet = PolicySet(config().policySet());
> 		PolicyGroup policyGroup = PolicyGroup(config().policyGroup());
>                                         ^^^^^^^^
> 		for (uint256 i = 0; i < policySet.count(); i++) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2527
Source: 
> 			msg.sender,
> 			config().policyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2525
Source: 
> 	{
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2619
Source: 
> 	function setVotingEndBlockNumber() private {
> 		if (config().policy() == address(0)) {
>       ^^^^^^^^
> 			return;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2622
Source: 
> 		}
> 		uint256 tmp = Policy(config().policy()).policyVotingBlocks();
>                        ^^^^^^^^
> 		_votingEndBlockNumber = block.number.add(tmp);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2622
Source: 
> 		}
> 		uint256 tmp = Policy(config().policy()).policyVotingBlocks();
>                        ^^^^^^^^^^^^^^^^^
> 		_votingEndBlockNumber = block.number.add(tmp);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2602
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^
> 		require(config().policy() != address(this), "this policy is current");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2602
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		require(config().policy() != address(this), "this policy is current");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2603
Source: 
> 		addressValidator().validateGroup(_property, config().propertyGroup());
> 		require(config().policy() != address(this), "this policy is current");
>           ^^^^^^^^
> 		require(voting(), "voting deadline is over");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2605
Source: 
> 		require(voting(), "voting deadline is over");
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
>                                         ^^^^^^^^
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2607
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		bool result = Policy(config().policy()).policyApproval(
>                        ^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2607
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		bool result = Policy(config().policy()).policyApproval(
>                        ^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2614
Source: 
> 		}
> 		PolicyFactory(config().policyFactory()).convergePolicy(address(this));
>                 ^^^^^^^^
> 		_votingEndBlockNumber = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Policy
Line:        2614
Source: 
> 		}
> 		PolicyFactory(config().policyFactory()).convergePolicy(address(this));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
> 		_votingEndBlockNumber = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2638
Source: 
> 	function setLastBlockNumber(address _metrics, uint256 _blocks) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(getLastBlockNumberKey(_metrics), _blocks);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2638
Source: 
> 	function setLastBlockNumber(address _metrics, uint256 _blocks) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getLastBlockNumberKey(_metrics), _blocks);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2660
Source: 
> 	function setBaseBlockNumber(uint256 _blockNumber) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(getBaseBlockNumberKey(), _blockNumber);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2660
Source: 
> 	function setBaseBlockNumber(uint256 _blockNumber) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(getBaseBlockNumberKey(), _blockNumber);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2674
Source: 
> 	function setPendingIncrement(address _metrics, bool value) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		eternalStorage().setBool(getPendingIncrementKey(_metrics), value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2674
Source: 
> 	function setPendingIncrement(address _metrics, bool value) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setBool(getPendingIncrementKey(_metrics), value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2699
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2699
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2732
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2732
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2760
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AllocatorStorage
Line:        2760
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		eternalStorage().setUint(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2814
Source: 
> 	function allocate(address _metrics) external {
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());
>                                              ^^^^^^^^
> 		validateTargetPeriod(_metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2814
Source: 
> 	function allocate(address _metrics) external {
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		validateTargetPeriod(_metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2818
Source: 
> 		getStorage().setPendingIncrement(_metrics, true);
> 		IMarketBehavior(Market(market).behavior()).calculate(
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_metrics,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2818
Source: 
> 		getStorage().setPendingIncrement(_metrics, true);
> 		IMarketBehavior(Market(market).behavior()).calculate(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_metrics,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2970
Source: 
> 	function getStorage() private view returns (AllocatorStorage) {
> 		return AllocatorStorage(config().allocatorStorage());
>                           ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2936
Source: 
> 		address property = Metrics(_metrics).property();
> 		VoteTimes voteTimes = VoteTimes(config().voteTimes());
>                                   ^^^^^^^^
> 		uint256 abstentionCount = voteTimes.getAbstentionTimes(property);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2938
Source: 
> 		uint256 abstentionCount = voteTimes.getAbstentionTimes(property);
> 		uint256 notTargetPeriod = Policy(config().policy()).abstentionPenalty(
>                                    ^^^^^^^^
> 			abstentionCount

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2938
Source: 
> 		uint256 abstentionCount = voteTimes.getAbstentionTimes(property);
> 		uint256 notTargetPeriod = Policy(config().policy()).abstentionPenalty(
>                                    ^^^^^^^^^^^^^^^^^
> 			abstentionCount

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2827
Source: 
> 	function calculatedCallback(address _metrics, uint256 _value) external {
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());
>                                              ^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2827
Source: 
> 	function calculatedCallback(address _metrics, uint256 _value) external {
> 		addressValidator().validateGroup(_metrics, config().metricsGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2838
Source: 
> 		);
> 		Policy policy = Policy(config().policy());
>                          ^^^^^^^^
> 		uint256 totalAssets = MetricsGroup(config().metricsGroup())

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2839
Source: 
> 		Policy policy = Policy(config().policy());
> 		uint256 totalAssets = MetricsGroup(config().metricsGroup())
>                                      ^^^^^^^^
> 			.totalIssuedMetrics();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2839
Source: 
> 		Policy policy = Policy(config().policy());
> 		uint256 totalAssets = MetricsGroup(config().metricsGroup())
>                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 			.totalIssuedMetrics();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2841
Source: 
> 			.totalIssuedMetrics();
> 		uint256 lockupValue = Lockup(config().lockup()).getPropertyValue(
>                                ^^^^^^^^
> 			metrics.property()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2841
Source: 
> 			.totalIssuedMetrics();
> 		uint256 lockupValue = Lockup(config().lockup()).getPropertyValue(
>                                ^^^^^^^^^^^^^^^^^
> 			metrics.property()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2885
Source: 
> 	{
> 		uint256 holders = Policy(config().policy()).holdersShare(
>                            ^^^^^^^^
> 			_reward,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2885
Source: 
> 	{
> 		uint256 holders = Policy(config().policy()).holdersShare(
>                            ^^^^^^^^^^^^^^^^^
> 			_reward,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2890
Source: 
> 		uint256 interest = _reward.sub(holders);
> 		Withdraw(config().withdraw()).increment(_property, holders);
>            ^^^^^^^^
> 		Lockup(config().lockup()).increment(_property, interest);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2890
Source: 
> 		uint256 interest = _reward.sub(holders);
> 		Withdraw(config().withdraw()).increment(_property, holders);
>            ^^^^^^^^^^^^^^^^^^^
> 		Lockup(config().lockup()).increment(_property, interest);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2891
Source: 
> 		Withdraw(config().withdraw()).increment(_property, holders);
> 		Lockup(config().lockup()).increment(_property, interest);
>          ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2891
Source: 
> 		Withdraw(config().withdraw()).increment(_property, holders);
> 		Lockup(config().lockup()).increment(_property, interest);
>          ^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2897
Source: 
> 	{
> 		addressValidator().validateGroup(msg.sender, config().propertyGroup());
>                                                ^^^^^^^^
> 		Withdraw(config().withdraw()).beforeBalanceChange(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2897
Source: 
> 	{
> 		addressValidator().validateGroup(msg.sender, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		Withdraw(config().withdraw()).beforeBalanceChange(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2898
Source: 
> 		addressValidator().validateGroup(msg.sender, config().propertyGroup());
> 		Withdraw(config().withdraw()).beforeBalanceChange(
>            ^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2898
Source: 
> 		addressValidator().validateGroup(msg.sender, config().propertyGroup());
> 		Withdraw(config().withdraw()).beforeBalanceChange(
>            ^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2910
Source: 
> 	{
> 		return Withdraw(config().withdraw()).getRewardsAmount(_property);
>                   ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Allocator
Line:        2910
Source: 
> 	{
> 		return Withdraw(config().withdraw()).getRewardsAmount(_property);
>                   ^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        1215
Source: 
> 			account,
> 			_msgSender(),
>    ^^^^^^^^^^^^
> 			_allowances[account][_msgSender()].sub(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        1216
Source: 
> 			_msgSender(),
> 			_allowances[account][_msgSender()].sub(
>                         ^^^^^^^^^^^^
> 				amount,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Property
Line:        2988
Source: 
> 			msg.sender,
> 			config().propertyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Property
Line:        2986
Source: 
> 	) public UsingConfig(_config) ERC20Detailed(_name, _symbol, _decimals) {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Property
Line:        2995
Source: 
> 	function transfer(address _to, uint256 _value) public returns (bool) {
> 		addressValidator().validateIllegalAddress(_to);
>   ^^^^^^^^^^^^^^^^^^
> 		require(_value != 0, "illegal transfer value");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Property
Line:        2997
Source: 
> 		require(_value != 0, "illegal transfer value");
> 		Allocator(config().allocator()).beforeBalanceChange(
>             ^^^^^^^^
> 			address(this),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Property
Line:        2997
Source: 
> 		require(_value != 0, "illegal transfer value");
> 		Allocator(config().allocator()).beforeBalanceChange(
>             ^^^^^^^^^^^^^^^^^^^^
> 			address(this),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Property
Line:        3006
Source: 
> 	function withdraw(address _sender, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>                                                  ^^^^^^^^
> 		ERC20 devToken = ERC20(config().token());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Property
Line:        3006
Source: 
> 	function withdraw(address _sender, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().lockup());
>   ^^^^^^^^^^^^^^^^^^
> 		ERC20 devToken = ERC20(config().token());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Property
Line:        3007
Source: 
> 		addressValidator().validateAddress(msg.sender, config().lockup());
> 		ERC20 devToken = ERC20(config().token());
>                          ^^^^^^^^
> 		devToken.transfer(_sender, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Property
Line:        3008
Source: 
> 		ERC20 devToken = ERC20(config().token());
> 		devToken.transfer(_sender, _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        172
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        180
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        3075
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^
> 		Metrics metrics = new Metrics(msg.sender, _property);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        3075
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = new Metrics(msg.sender, _property);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        3077
Source: 
> 		Metrics metrics = new Metrics(msg.sender, _property);
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());
>                                            ^^^^^^^^
> 		address metricsAddress = address(metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Dev
Line:        3147
Source: 
> 	function lock(address _from, address _to, uint256 _amount) private {
> 		Lockup(config().lockup()).lockup(_from, _to, _amount);
>          ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Dev
Line:        3147
Source: 
> 	function lock(address _from, address _to, uint256 _amount) private {
> 		Lockup(config().lockup()).lockup(_from, _to, _amount);
>          ^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Dev
Line:        3141
Source: 
> 	function fee(address _from, uint256 _amount) external returns (bool) {
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^
> 		_burn(_from, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Dev
Line:        3141
Source: 
> 	function fee(address _from, uint256 _amount) external returns (bool) {
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		_burn(_from, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3166
Source: 
> 			msg.sender,
> 			config().marketFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3164
Source: 
> 	{
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3170
Source: 
> 		enabled = false;
> 		uint256 marketVotingBlocks = Policy(config().policy())
>                                       ^^^^^^^^
> 			.marketVotingBlocks();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3170
Source: 
> 		enabled = false;
> 		uint256 marketVotingBlocks = Policy(config().policy())
>                                       ^^^^^^^^^^^^^^^^^
> 			.marketVotingBlocks();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3178
Source: 
> 			msg.sender,
> 			config().marketFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3176
Source: 
> 	function toEnable() external {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3191
Source: 
> 	) public returns (address) {
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3215
Source: 
> 	{
> 		uint256 tokenValue = Lockup(config().lockup()).getPropertyValue(
>                               ^^^^^^^^
> 			_property

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3215
Source: 
> 	{
> 		uint256 tokenValue = Lockup(config().lockup()).getPropertyValue(
>                               ^^^^^^^^^^^^^^^^^
> 			_property

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3218
Source: 
> 		);
> 		Policy policy = Policy(config().policy());
>                          ^^^^^^^^
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3219
Source: 
> 		Policy policy = Policy(config().policy());
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());
>                                            ^^^^^^^^
> 		return

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3231
Source: 
> 	{
> 		addressValidator().validateAddress(msg.sender, behavior);
>   ^^^^^^^^^^^^^^^^^^
> 		require(enabled, "market is not enabled");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3237
Source: 
> 		MetricsFactory metricsFactory = MetricsFactory(
> 			config().metricsFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3242
Source: 
> 		require(
> 			Dev(config().token()).fee(sender, authenticationFee),
>        ^^^^^^^^
> 			"dev fee failed"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3242
Source: 
> 		require(
> 			Dev(config().token()).fee(sender, authenticationFee),
>        ^^^^^^^^^^^^^^^^
> 			"dev fee failed"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3250
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^
> 		require(enabled == false, "market is already enabled");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3250
Source: 
> 	function vote(address _property, bool _agree) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		require(enabled == false, "market is already enabled");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3256
Source: 
> 		);
> 		VoteCounter voteCounter = VoteCounter(config().voteCounter());
>                                         ^^^^^^^^
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3258
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		enabled = Policy(config().policy()).marketApproval(
>                    ^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Market
Line:        3258
Source: 
> 		voteCounter.addVoteCount(msg.sender, _property, _agree);
> 		enabled = Policy(config().policy()).marketApproval(
>                    ^^^^^^^^^^^^^^^^^
> 			voteCounter.getAgreeCount(address(this)),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        172
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        180
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MarketFactory
Line:        3278
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateIllegalAddress(_addr);
>   ^^^^^^^^^^^^^^^^^^
> 		Market market = new Market(address(config()), _addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MarketFactory
Line:        3279
Source: 
> 		addressValidator().validateIllegalAddress(_addr);
> 		Market market = new Market(address(config()), _addr);
>                                      ^^^^^^^^
> 		address marketAddr = address(market);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MarketFactory
Line:        3281
Source: 
> 		address marketAddr = address(market);
> 		MarketGroup marketGroup = MarketGroup(config().marketGroup());
>                                         ^^^^^^^^
> 		marketGroup.addGroup(marketAddr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MarketFactory
Line:        3287
Source: 
> 		emit Create(msg.sender, marketAddr);
> 		VoteTimes(config().voteTimes()).addVoteTime();
>             ^^^^^^^^
> 		return marketAddr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MarketFactory
Line:        3287
Source: 
> 		emit Create(msg.sender, marketAddr);
> 		VoteTimes(config().voteTimes()).addVoteTime();
>             ^^^^^^^^^^^^^^^^^^^^
> 		return marketAddr;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UsingValidator
Line:        329
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        342
Source: 
> contract AddressConfig is Ownable, UsingValidator, Killable {
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocator;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        343
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        344
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        345
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        346
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        347
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        348
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        349
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        350
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        351
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        352
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        353
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        355
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        356
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        357
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        358
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        359
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        360
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        361
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        362
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Metrics
Line:        1328
Source: 
> contract Metrics {
> 	address public market;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public property;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Metrics
Line:        1329
Source: 
> 	address public market;
> 	address public property;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
