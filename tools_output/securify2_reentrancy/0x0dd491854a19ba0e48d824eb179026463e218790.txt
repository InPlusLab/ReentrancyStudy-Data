Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Lionshare
Line:        237
Source: 
>     function bytesToAddress(bytes memory _data) private pure returns(address addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(_data, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Lionshare
Line:        20
Source: 
> 
>     uint40 public LEVEL_TIME_LIFE = 120 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lionshare
Line:        132
Source: 
> 
>         address profiter = this.findUpline(upline, round, offset);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lionshare
Line:        139
Source: 
> 
>             if(payable(users[_user].inviter).send(com)) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 value -= com;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lionshare
Line:        195
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lionshare
Line:        196
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lionshare
Line:        209
Source: 
> 
>         return this.findUpline(users[_user].uplines[_round], _round, _offset - 1);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lionshare
Line:        125
Source: 
> 
>             upline = this.findFreeReferrer(upline, round);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lionshare
Line:        174
Source: 
> 
>     function register(uint256 _upline_id) payable external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _register(msg.sender, users_ids[_upline_id], msg.value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lionshare
Line:        178
Source: 
> 
>     function buy(uint8 _level) payable external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].id > 0, "User not register");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lionshare
Line:        206
Source: 
> 
>     function findUpline(address _user, uint8 _round, uint8 _offset) external view returns(address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_user == root || _offset == 0) return _user;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Lionshare
Line:        139
Source: 
> 
>             if(payable(users[_user].inviter).send(com)) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 value -= com;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Lionshare
Line:        195
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Lionshare
Line:        196
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lionshare
Line:        20
Source: 
> 
>     uint40 public LEVEL_TIME_LIFE = 120 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lionshare
Line:        23
Source: 
>     address payable public root;
>     uint256 public last_id;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lionshare
Line:        27
Source: 
>     mapping(address => User) public users;
>     mapping(uint256 => address) public users_ids;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lionshare
Line:        139
Source: 
> 
>             if(payable(users[_user].inviter).send(com)) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 value -= com;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lionshare
Line:        195
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lionshare
Line:        196
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lionshare
Line:        139
Source: 
> 
>             if(payable(users[_user].inviter).send(com)) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 value -= com;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lionshare
Line:        195
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lionshare
Line:        196
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lionshare
Line:        139
Source: 
> 
>             if(payable(users[_user].inviter).send(com)) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 value -= com;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lionshare
Line:        195
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lionshare
Line:        196
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lionshare
Line:        125
Source: 
> 
>             upline = this.findFreeReferrer(upline, round);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lionshare
Line:        132
Source: 
> 
>         address profiter = this.findUpline(upline, round, offset);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lionshare
Line:        209
Source: 
> 
>         return this.findUpline(users[_user].uplines[_round], _round, _offset - 1);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Lionshare
Line:        139
Source: 
> 
>             if(payable(users[_user].inviter).send(com)) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 value -= com;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        99
Source: 
>     function _newUser(address _addr, address _inviter) private {
>         users[_addr].id = ++last_id;
>                           ^^^^^^^^^
>         users[_addr].inviter = _inviter;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        99
Source: 
>     function _newUser(address _addr, address _inviter) private {
>         users[_addr].id = ++last_id;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].inviter = _inviter;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        100
Source: 
>         users[_addr].id = ++last_id;
>         users[_addr].inviter = _inviter;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users_ids[last_id] = _addr;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        101
Source: 
>         users[_addr].inviter = _inviter;
>         users_ids[last_id] = _addr;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        111
Source: 
>         
>         users[_user].balance -= levels[_level];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_user].expires[_level] = uint40((users[_user].expires[_level] > block.timestamp ? users[_user].expires[_level] : block.timestamp) + LEVEL_TIME_LIFE);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        112
Source: 
>         users[_user].balance -= levels[_level];
>         users[_user].expires[_level] = uint40((users[_user].expires[_level] > block.timestamp ? users[_user].expires[_level] : block.timestamp) + LEVEL_TIME_LIFE);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        127
Source: 
> 
>             users[_user].uplines[round] = upline;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[upline].referrals[round].push(_user);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        128
Source: 
>             users[_user].uplines[round] = upline;
>             users[upline].referrals[round].push(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        146
Source: 
> 
>         users[profiter].balance += value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _autoBuyLevel(profiter);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lionshare
Line:        168
Source: 
>         
>         users[_user].balance += _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Lionshare
Line:        157
Source: 
> 
>             if(users[_user].expires[i] < block.timestamp) {
>                                          ^^^^^^^^^^^^^^^
>                 _buyLevel(_user, i);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Lionshare
Line:        109
Source: 
>         require(users[_user].balance >= levels[_level], "Insufficient funds");
>         require(_level == 0 || users[_user].expires[_level - 1] > block.timestamp, "Need previous level");
>                                                                   ^^^^^^^^^^^^^^^
>         

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Lionshare
Line:        112
Source: 
>         users[_user].balance -= levels[_level];
>         users[_user].expires[_level] = uint40((users[_user].expires[_level] > block.timestamp ? users[_user].expires[_level] : block.timestamp) + LEVEL_TIME_LIFE);
>                                                                               ^^^^^^^^^^^^^^^
>         

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Lionshare
Line:        119
Source: 
>         if(users[_user].uplines[round] == address(0)) {
>             while(users[upline].expires[_level] < block.timestamp) {
>                                                   ^^^^^^^^^^^^^^^
>                 emit Lost(upline, _user, levels[_level]);

[0m
