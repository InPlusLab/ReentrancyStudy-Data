Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WarpSync
Line:        707
Source: 
>     uint256 private constant MAX_NUM_TICKS = 2 ** 256 - 2;
>     int256 private INT256_MIN = int256(2**255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private INT256_MAX = int256(2**255 - 1);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WarpSync
Line:        708
Source: 
>     int256 private INT256_MIN = int256(2**255);
>     int256 private INT256_MAX = int256(2**255 - 1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256[] private PRICES = [INT256_MIN, INT256_MAX];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        82
Source: 
> 
>     function getInitialized() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return initialized;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WarpSync
Line:        713
Source: 
> 
>     function initialize(IAugur _augur) public beforeInitialized returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         endInitialization();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WarpSync
Line:        726
Source: 
>      */
>     function doInitialReport(IUniverse _universe, uint256[] memory _payoutNumerators, string memory _description) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IMarket _market = IMarket(markets[address(_universe)]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WarpSync
Line:        737
Source: 
>      */
>     function initializeUniverse(IUniverse _universe) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(augur.isKnownUniverse(_universe));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WarpSync
Line:        744
Source: 
> 
>     function notifyMarketFinalized() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IMarket _market = IMarket(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WarpSync
Line:        737
Source: 
>      */
>     function initializeUniverse(IUniverse _universe) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(augur.isKnownUniverse(_universe));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WarpSync
Line:        713
Source: 
> 
>     function initialize(IAugur _augur) public beforeInitialized returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         endInitialization();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WarpSync
Line:        726
Source: 
>      */
>     function doInitialReport(IUniverse _universe, uint256[] memory _payoutNumerators, string memory _description) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IMarket _market = IMarket(markets[address(_universe)]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WarpSync
Line:        773
Source: 
>      */
>     function getFinalizationReward(IMarket _market) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getRepReward(_market.getDisputeWindow().getEndTime());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WarpSync
Line:        781
Source: 
>      */
>     function getCreationReward(IUniverse _universe) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getRepReward(_universe.creationTime());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WarpSync
Line:        804
Source: 
>     function createMarket(IUniverse _universe) private {
>         IV2ReputationToken _reputationToken = _universe.getReputationToken();
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _repBond = _universe.getOrCacheMarketRepBond();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WarpSync
Line:        805
Source: 
>         IV2ReputationToken _reputationToken = _universe.getReputationToken();
>         uint256 _repBond = _universe.getOrCacheMarketRepBond();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _reputationToken.mintForWarpSync(_repBond, address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WarpSync
Line:        806
Source: 
>         uint256 _repBond = _universe.getOrCacheMarketRepBond();
>         _reputationToken.mintForWarpSync(_repBond, address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _endTime = augur.getTimestamp().add(MARKET_LENGTH);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WarpSync
Line:        807
Source: 
>         _reputationToken.mintForWarpSync(_repBond, address(this));
>         uint256 _endTime = augur.getTimestamp().add(MARKET_LENGTH);
>                            ^^^^^^^^^^^^^^^^^^^^
>         IMarket _market = _universe.createScalarMarket(_endTime, 0, IAffiliateValidator(0), 0, address(this), PRICES, MAX_NUM_TICKS, EXTRA_INFO);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WarpSync
Line:        808
Source: 
>         uint256 _endTime = augur.getTimestamp().add(MARKET_LENGTH);
>         IMarket _market = _universe.createScalarMarket(_endTime, 0, IAffiliateValidator(0), 0, address(this), PRICES, MAX_NUM_TICKS, EXTRA_INFO);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         markets[address(_universe)] = address(_market);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        579
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        606
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             ^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        627
Source: 
>         getOrderId(_orderData, _orders);
>         uint256[] memory _uints = new uint256[](5);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         _uints[0] = _orderData.amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        633
Source: 
>         _uints[4] = _orderData.sharesEscrowed;
>         bytes32[] memory _bytes32s = new bytes32[](4);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bytes32s[0] = _orderData.betterOrderId;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        657
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        658
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        675
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        707
Source: 
>     uint256 private constant MAX_NUM_TICKS = 2 ** 256 - 2;
>     int256 private INT256_MIN = int256(2**255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private INT256_MAX = int256(2**255 - 1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        708
Source: 
>     int256 private INT256_MIN = int256(2**255);
>     int256 private INT256_MAX = int256(2**255 - 1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256[] private PRICES = [INT256_MIN, INT256_MAX];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        709
Source: 
>     int256 private INT256_MAX = int256(2**255 - 1);
>     int256[] private PRICES = [INT256_MIN, INT256_MAX];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant EXTRA_INFO = '{"description":"What will the next Augur Warp Sync hash be?","longDescription":"What will the Augur SDK warp sync hash be for the last block with a timestamp less than the reporting start timestamp for this market? At least 30 blocks should be mined after this block before attempting to generate a hash in order to account for possible rollbacks."}';

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        727
Source: 
>     function doInitialReport(IUniverse _universe, uint256[] memory _payoutNumerators, string memory _description) public returns (bool) {
>         IMarket _market = IMarket(markets[address(_universe)]);
>         ^^^^^^^^^^^^^^^
>         _market.doInitialReport(_payoutNumerators, _description, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        745
Source: 
>     function notifyMarketFinalized() public {
>         IMarket _market = IMarket(msg.sender);
>         ^^^^^^^^^^^^^^^
>         IUniverse _universe = _market.getUniverse();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        746
Source: 
>         IMarket _market = IMarket(msg.sender);
>         IUniverse _universe = _market.getUniverse();
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        762
Source: 
>         awardRep(_universe, getFinalizationReward(_market));
>         uint256 _warpSyncHash = _market.getWinningPayoutNumerator(2);
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 _endTime = _market.getEndTime();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        763
Source: 
>         uint256 _warpSyncHash = _market.getWinningPayoutNumerator(2);
>         uint256 _endTime = _market.getEndTime();
>         ^^^^^^^^^^^^^^^^
>         data[address(_universe)].warpSyncHash = _warpSyncHash;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        786
Source: 
>     function getRepReward(uint256 _theoreticalTime) private view returns (uint256) {
>         uint256 _currentTime = augur.getTimestamp();
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 _timeSinceTheoreticalCreationInSeconds = _currentTime.sub(_theoreticalTime);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        787
Source: 
>         uint256 _currentTime = augur.getTimestamp();
>         uint256 _timeSinceTheoreticalCreationInSeconds = _currentTime.sub(_theoreticalTime);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_timeSinceTheoreticalCreationInSeconds > MAX_REWARD_GROWTH_TIME) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        796
Source: 
>     function awardRep(IUniverse _universe, uint256 _amount) private returns (bool) {
>         IV2ReputationToken _reputationToken = _universe.getReputationToken();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Whoever was responsible for this tx occuring gets REP.

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        804
Source: 
>     function createMarket(IUniverse _universe) private {
>         IV2ReputationToken _reputationToken = _universe.getReputationToken();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _repBond = _universe.getOrCacheMarketRepBond();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        805
Source: 
>         IV2ReputationToken _reputationToken = _universe.getReputationToken();
>         uint256 _repBond = _universe.getOrCacheMarketRepBond();
>         ^^^^^^^^^^^^^^^^
>         _reputationToken.mintForWarpSync(_repBond, address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        807
Source: 
>         _reputationToken.mintForWarpSync(_repBond, address(this));
>         uint256 _endTime = augur.getTimestamp().add(MARKET_LENGTH);
>         ^^^^^^^^^^^^^^^^
>         IMarket _market = _universe.createScalarMarket(_endTime, 0, IAffiliateValidator(0), 0, address(this), PRICES, MAX_NUM_TICKS, EXTRA_INFO);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WarpSync
Line:        808
Source: 
>         uint256 _endTime = augur.getTimestamp().add(MARKET_LENGTH);
>         IMarket _market = _universe.createScalarMarket(_endTime, 0, IAffiliateValidator(0), 0, address(this), PRICES, MAX_NUM_TICKS, EXTRA_INFO);
>         ^^^^^^^^^^^^^^^
>         markets[address(_universe)] = address(_market);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        738
Source: 
>     function initializeUniverse(IUniverse _universe) public {
>         require(augur.isKnownUniverse(_universe));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(markets[address(_universe)] == address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        805
Source: 
>         IV2ReputationToken _reputationToken = _universe.getReputationToken();
>         uint256 _repBond = _universe.getOrCacheMarketRepBond();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _reputationToken.mintForWarpSync(_repBond, address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        807
Source: 
>         _reputationToken.mintForWarpSync(_repBond, address(this));
>         uint256 _endTime = augur.getTimestamp().add(MARKET_LENGTH);
>                            ^^^^^^^^^^^^^^^^^^^^
>         IMarket _market = _universe.createScalarMarket(_endTime, 0, IAffiliateValidator(0), 0, address(this), PRICES, MAX_NUM_TICKS, EXTRA_INFO);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        782
Source: 
>     function getCreationReward(IUniverse _universe) public view returns (uint256) {
>         return getRepReward(_universe.creationTime());
>                             ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        786
Source: 
>     function getRepReward(uint256 _theoreticalTime) private view returns (uint256) {
>         uint256 _currentTime = augur.getTimestamp();
>                                ^^^^^^^^^^^^^^^^^^^^
>         uint256 _timeSinceTheoreticalCreationInSeconds = _currentTime.sub(_theoreticalTime);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        746
Source: 
>         IMarket _market = IMarket(msg.sender);
>         IUniverse _universe = _market.getUniverse();
>                               ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        755
Source: 
> 
>         if (!_universe.isForking()) {
>              ^^^^^^^^^^^^^^^^^^^^^
>             createMarket(_universe);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        762
Source: 
>         awardRep(_universe, getFinalizationReward(_market));
>         uint256 _warpSyncHash = _market.getWinningPayoutNumerator(2);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _endTime = _market.getEndTime();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        763
Source: 
>         uint256 _warpSyncHash = _market.getWinningPayoutNumerator(2);
>         uint256 _endTime = _market.getEndTime();
>                            ^^^^^^^^^^^^^^^^^^^^
>         data[address(_universe)].warpSyncHash = _warpSyncHash;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WarpSync
Line:        774
Source: 
>     function getFinalizationReward(IMarket _market) public view returns (uint256) {
>         return getRepReward(_market.getDisputeWindow().getEndTime());
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        728
Source: 
>         IMarket _market = IMarket(markets[address(_universe)]);
>         _market.doInitialReport(_payoutNumerators, _description, 0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _market.getInitialReporter().transferOwnership(msg.sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        729
Source: 
>         _market.doInitialReport(_payoutNumerators, _description, 0);
>         _market.getInitialReporter().transferOwnership(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        729
Source: 
>         _market.doInitialReport(_payoutNumerators, _description, 0);
>         _market.getInitialReporter().transferOwnership(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        804
Source: 
>     function createMarket(IUniverse _universe) private {
>         IV2ReputationToken _reputationToken = _universe.getReputationToken();
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _repBond = _universe.getOrCacheMarketRepBond();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        806
Source: 
>         uint256 _repBond = _universe.getOrCacheMarketRepBond();
>         _reputationToken.mintForWarpSync(_repBond, address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _endTime = augur.getTimestamp().add(MARKET_LENGTH);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        808
Source: 
>         uint256 _endTime = augur.getTimestamp().add(MARKET_LENGTH);
>         IMarket _market = _universe.createScalarMarket(_endTime, 0, IAffiliateValidator(0), 0, address(this), PRICES, MAX_NUM_TICKS, EXTRA_INFO);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         markets[address(_universe)] = address(_market);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        796
Source: 
>     function awardRep(IUniverse _universe, uint256 _amount) private returns (bool) {
>         IV2ReputationToken _reputationToken = _universe.getReputationToken();
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Whoever was responsible for this tx occuring gets REP.

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        799
Source: 
>         // solium-disable-next-line security/no-tx-origin
>         _reputationToken.mintForWarpSync(_amount, tx.origin);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        766
Source: 
>         data[address(_universe)].timestamp = _endTime;
>         augur.logWarpSyncDataUpdated(address(_universe), _warpSyncHash, _endTime);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WarpSync
Line:        774
Source: 
>     function getFinalizationReward(IMarket _market) public view returns (uint256) {
>         return getRepReward(_market.getDisputeWindow().getEndTime());
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WarpSync
Line:        701
Source: 
> 
>     IAugur public augur;
>     ^^^^^^^^^^^^^^^^^^^
>     mapping(address => address) public markets;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        79
Source: 
>     function endInitialization() internal beforeInitialized {
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WarpSync
Line:        715
Source: 
>         endInitialization();
>         augur = _augur;
>         ^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WarpSync
Line:        809
Source: 
>         IMarket _market = _universe.createScalarMarket(_endTime, 0, IAffiliateValidator(0), 0, address(this), PRICES, MAX_NUM_TICKS, EXTRA_INFO);
>         markets[address(_universe)] = address(_market);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        164
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        168
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        573
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        575
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        579
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        586
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        606
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        607
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        638
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WarpSync
Line:        728
Source: 
>         IMarket _market = IMarket(markets[address(_universe)]);
>         _market.doInitialReport(_payoutNumerators, _description, 0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _market.getInitialReporter().transferOwnership(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WarpSync
Line:        729
Source: 
>         _market.doInitialReport(_payoutNumerators, _description, 0);
>         _market.getInitialReporter().transferOwnership(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WarpSync
Line:        729
Source: 
>         _market.doInitialReport(_payoutNumerators, _description, 0);
>         _market.getInitialReporter().transferOwnership(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WarpSync
Line:        806
Source: 
>         uint256 _repBond = _universe.getOrCacheMarketRepBond();
>         _reputationToken.mintForWarpSync(_repBond, address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _endTime = augur.getTimestamp().add(MARKET_LENGTH);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WarpSync
Line:        799
Source: 
>         // solium-disable-next-line security/no-tx-origin
>         _reputationToken.mintForWarpSync(_amount, tx.origin);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WarpSync
Line:        766
Source: 
>         data[address(_universe)].timestamp = _endTime;
>         augur.logWarpSyncDataUpdated(address(_universe), _warpSyncHash, _endTime);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WarpSync
Line:        774
Source: 
>     function getFinalizationReward(IMarket _market) public view returns (uint256) {
>         return getRepReward(_market.getDisputeWindow().getEndTime());
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        164
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        168
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        573
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        575
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        579
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        586
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        606
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        607
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        638
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
