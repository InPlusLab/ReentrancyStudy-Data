[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ESMThresholdSetter
Line:        79
Source: 
>     function both(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := and(x, y)}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ESMThresholdSetter
Line:        23
Source: 
>      */
>     function addAuthorization(address account) public isAuthorized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ESMThresholdSetter
Line:        31
Source: 
>      */
>     function removeAuthorization(address account) public isAuthorized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ESMThresholdSetter
Line:        112
Source: 
>     */
>     function recomputeThreshold() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // The ESM must still be functional

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ESMThresholdSetter
Line:        23
Source: 
>      */
>     function addAuthorization(address account) public isAuthorized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ESMThresholdSetter
Line:        31
Source: 
>      */
>     function removeAuthorization(address account) public isAuthorized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ESMThresholdSetter
Line:        105
Source: 
>           esm = ESMLike(addr);
>           require(esm.settled() == 0, "ESMThresholdSetter/esm-disabled");
>                   ^^^^^^^^^^^^^
>         } else revert("ESMThresholdSetter/modify-unrecognized-param");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ESMThresholdSetter
Line:        83
Source: 
>     // --- Math ---
>     uint256 constant THOUSAND = 10 ** 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function maximum(uint256 x, uint256 y) internal pure returns (uint256 z) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESMThresholdSetter
Line:        74
Source: 
> 
>         require(protocolToken.totalSupply() > 0, "ESMThresholdSetter/null-token-supply");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESMThresholdSetter
Line:        105
Source: 
>           esm = ESMLike(addr);
>           require(esm.settled() == 0, "ESMThresholdSetter/esm-disabled");
>                   ^^^^^^^^^^^^^
>         } else revert("ESMThresholdSetter/modify-unrecognized-param");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESMThresholdSetter
Line:        114
Source: 
>         // The ESM must still be functional
>         require(esm.settled() == 0, "ESMThresholdSetter/esm-disabled");
>                 ^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESMThresholdSetter
Line:        116
Source: 
> 
>         uint256 currentTokenSupply = protocolToken.totalSupply();
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (currentTokenSupply == 0) { // If the current supply is zero, set the min amount to burn

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESMThresholdSetter
Line:        120
Source: 
>         } else { // Otherwise compute a new threshold taking into account supplyPercentageToBurn
>           uint256 newThreshold = multiply(subtract(currentTokenSupply, protocolToken.balanceOf(address(0))), supplyPercentageToBurn) / THOUSAND;
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           esm.modifyParameters("triggerThreshold", maximum(minAmountToBurn, newThreshold));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESMThresholdSetter
Line:        118
Source: 
>         if (currentTokenSupply == 0) { // If the current supply is zero, set the min amount to burn
>           esm.modifyParameters("triggerThreshold", minAmountToBurn);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else { // Otherwise compute a new threshold taking into account supplyPercentageToBurn

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESMThresholdSetter
Line:        121
Source: 
>           uint256 newThreshold = multiply(subtract(currentTokenSupply, protocolToken.balanceOf(address(0))), supplyPercentageToBurn) / THOUSAND;
>           esm.modifyParameters("triggerThreshold", maximum(minAmountToBurn, newThreshold));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ESMThresholdSetter
Line:        88
Source: 
>     function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x, "ESMThresholdSetter/sub-uint-uint-underflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ESMThresholdSetter
Line:        91
Source: 
>     function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x, "ESMThresholdSetter/multiply-uint-uint-overflow");
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ESMThresholdSetter
Line:        52
Source: 
>     // The address of the ESM contract
>     ESMLike           public esm;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
