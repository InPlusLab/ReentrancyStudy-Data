Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.7. Changing pragma version to 0.5.7....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Proxy
Line:        376
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             let ptr := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UpgradeabilityProxy
Line:        427
Source: 
>         bytes32 position = IMPLEMENTATION_POSITION;
>         assembly {
>         ^^^^^^^^^^
>             impl := sload(position)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UpgradeabilityProxy
Line:        438
Source: 
>         bytes32 position = IMPLEMENTATION_POSITION;
>         assembly {
>         ^^^^^^^^^^
>         sstore(position, _newImplementation)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OwnedUpgradeabilityProxy
Line:        498
Source: 
>         bytes32 position = PROXY_OWNER_POSITION;
>         assembly {
>         ^^^^^^^^^^
>             owner := sload(position)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OwnedUpgradeabilityProxy
Line:        526
Source: 
>         bytes32 position = PROXY_OWNER_POSITION;
>         assembly {
>         ^^^^^^^^^^
>             sstore(position, _newProxyOwner)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Governed
Line:        351
Source: 
>     /// @dev checks if an address is authorized to govern
>     function isAuthorizedToGovern(address _toCheck) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IMaster ms = IMaster(masterAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnedUpgradeabilityProxy
Line:        507
Source: 
>     */
>     function transferProxyOwnership(address _newOwner) public onlyProxyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnedUpgradeabilityProxy
Line:        517
Source: 
>     */
>     function upgradeTo(address _implementation) public onlyProxyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _upgradeTo(_implementation);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        664
Source: 
>      */
>     function setMasterAddress() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         OwnedUpgradeabilityProxy proxy = OwnedUpgradeabilityProxy(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        713
Source: 
>     /// @param _authorized Authorized member against every role id
>     function addRole(
>     ^^^^^^^^^^^^^^^^^
>         //solhint-disable-line

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        726
Source: 
>     /// @param _active active is set to be True if we want to assign this role to member, False otherwise!
>     function updateRole(
>     ^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-line

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        736
Source: 
>     /// @dev Return number of member roles
>     function totalRoles() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-line

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        744
Source: 
>     /// @param _newAuthorized New authorized address against role id
>     function changeAuthorized(uint256 _roleId, address _newAuthorized)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        756
Source: 
>     /// @return allMemberAddress Member addresses of specified role id
>     function members(uint256 _memberRoleId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        777
Source: 
>     /// @dev Return member address who holds the right to add/remove any member from specific role.
>     function authorized(uint256 _memberRoleId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-line

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        783
Source: 
>     /// @dev Get All role ids array that has been assigned to a member so far.
>     function roles(address _memberAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        813
Source: 
>      */
>     function updateUintParameters(bytes8 code, uint val) public onlyAuthorizedToGovern {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(code == "MNLOCKDR") { //Minimum lock amount to consider user as DR member

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        835
Source: 
>     /// i.e. Returns true if this roleId is assigned to member
>     function checkRole(address _memberAddress, uint256 _roleId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MemberRoles
Line:        860
Source: 
>     /// @return totalMembers Total members in particular role id
>     function getMemberLengthForAllRoles()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Governed
Line:        353
Source: 
>         IMaster ms = IMaster(masterAddress);
>         return (ms.getLatestAddress("GV") == _toCheck);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MemberRoles
Line:        668
Source: 
>         );
>         require(msg.sender == proxy.proxyOwner(), "Sender is not proxy owner.");
>                               ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MemberRoles
Line:        674
Source: 
>         tokenController = ITokenController(
>             masterInstance.getLatestAddress("TC")
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MemberRoles
Line:        688
Source: 
>         );
>         require(msg.sender == proxy.proxyOwner(), "Sender is not proxy owner.");
>                               ^^^^^^^^^^^^^^^^^^
>         require(initiator == address(0), "Already Set");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Governed
Line:        346
Source: 
>         IMaster ms = IMaster(masterAddress);
>         require(ms.getLatestAddress("GV") == msg.sender, "Not authorized");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MemberRoles
Line:        802
Source: 
>         }
>         if (tokenController.tokensLockedAtTime(_memberAddress, "DR", (lockTimeForDR).add(now)) >= minLockAmountForDR) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             assignedRoles[counter] = uint256(Role.DisputeResolution);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Governed
Line:        346
Source: 
>         IMaster ms = IMaster(masterAddress);
>         require(ms.getLatestAddress("GV") == msg.sender, "Not authorized");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MemberRoles
Line:        844
Source: 
>         } else if (_roleId == uint256(Role.TokenHolder)) {
>             if (tokenController.totalBalanceOf(_memberAddress) > 0) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MemberRoles
Line:        848
Source: 
>         } else if (_roleId == uint256(Role.DisputeResolution)) {
>             if (tokenController.tokensLockedAtTime(_memberAddress, "DR", (lockTimeForDR).add(now)) >= minLockAmountForDR) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MemberRoles
Line:        798
Source: 
>         }
>         if (tokenController.totalBalanceOf(_memberAddress) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             assignedRoles[counter] = uint256(Role.TokenHolder);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    UpgradeabilityProxy
Line:        406
Source: 
>  */
> contract UpgradeabilityProxy is Proxy {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /**

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    OwnedUpgradeabilityProxy
Line:        465
Source: 
>  */
> contract OwnedUpgradeabilityProxy is UpgradeabilityProxy {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /**

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MemberRoles
Line:        653
Source: 
>      */
>     function swapABMember(address _newABAddress, address _removeAB)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MemberRoles
Line:        684
Source: 
>      */
>     function setInititorAddress(address _initiator) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         OwnedUpgradeabilityProxy proxy = OwnedUpgradeabilityProxy(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MemberRoles
Line:        726
Source: 
>     /// @param _active active is set to be True if we want to assign this role to member, False otherwise!
>     function updateRole(
>     ^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-line

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MemberRoles
Line:        783
Source: 
>     /// @dev Get All role ids array that has been assigned to a member so far.
>     function roles(address _memberAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MemberRoles
Line:        813
Source: 
>      */
>     function updateUintParameters(bytes8 code, uint val) public onlyAuthorizedToGovern {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(code == "MNLOCKDR") { //Minimum lock amount to consider user as DR member

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MemberRoles
Line:        835
Source: 
>     /// i.e. Returns true if this roleId is assigned to member
>     function checkRole(address _memberAddress, uint256 _roleId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Governed
Line:        351
Source: 
>     /// @dev checks if an address is authorized to govern
>     function isAuthorizedToGovern(address _toCheck) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IMaster ms = IMaster(masterAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OwnedUpgradeabilityProxy
Line:        507
Source: 
>     */
>     function transferProxyOwnership(address _newOwner) public onlyProxyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OwnedUpgradeabilityProxy
Line:        517
Source: 
>     */
>     function upgradeTo(address _implementation) public onlyProxyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _upgradeTo(_implementation);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Governed
Line:        351
Source: 
>     /// @dev checks if an address is authorized to govern
>     function isAuthorizedToGovern(address _toCheck) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IMaster ms = IMaster(masterAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MemberRoles
Line:        713
Source: 
>     /// @param _authorized Authorized member against every role id
>     function addRole(
>     ^^^^^^^^^^^^^^^^^
>         //solhint-disable-line

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MemberRoles
Line:        744
Source: 
>     /// @param _newAuthorized New authorized address against role id
>     function changeAuthorized(uint256 _roleId, address _newAuthorized)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MemberRoles
Line:        756
Source: 
>     /// @return allMemberAddress Member addresses of specified role id
>     function members(uint256 _memberRoleId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MemberRoles
Line:        767
Source: 
>     /// @return memberRoleData[_memberRoleId].memberCounter Member length
>     function numberOfMembers(uint256 _memberRoleId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MemberRoles
Line:        777
Source: 
>     /// @dev Return member address who holds the right to add/remove any member from specific role.
>     function authorized(uint256 _memberRoleId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-line

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MemberRoles
Line:        668
Source: 
>         );
>         require(msg.sender == proxy.proxyOwner(), "Sender is not proxy owner.");
>                               ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MemberRoles
Line:        674
Source: 
>         tokenController = ITokenController(
>             masterInstance.getLatestAddress("TC")
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Proxy
Line:        373
Source: 
>     function () external payable {
>         address _impl = implementation();
>         ^^^^^^^^^^^^^
>         require(_impl != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MemberRoles
Line:        908
Source: 
>             );
>             uint256 _memberIndex = memberRoleData[_roleId]
>             ^^^^^^^^^^^^^^^^^^^^
>                 .memberIndex[_memberAddress];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MemberRoles
Line:        910
Source: 
>                 .memberIndex[_memberAddress];
>             address _topElement = memberRoleData[_roleId]
>             ^^^^^^^^^^^^^^^^^^^
>                 .memberAddress[memberRoleData[_roleId].memberCounter];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Governed
Line:        345
Source: 
>     modifier onlyAuthorizedToGovern() {
>         IMaster ms = IMaster(masterAddress);
>         ^^^^^^^^^^
>         require(ms.getLatestAddress("GV") == msg.sender, "Not authorized");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MemberRoles
Line:        638
Source: 
> 
>     modifier checkRoleAuthority(uint256 _memberRoleId) {
>                                 ^^^^^^^^^^^^^^^^^^^^^
>         if (memberRoleData[_memberRoleId].authorized != address(0))

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MemberRoles
Line:        668
Source: 
>         );
>         require(msg.sender == proxy.proxyOwner(), "Sender is not proxy owner.");
>                               ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MemberRoles
Line:        688
Source: 
>         );
>         require(msg.sender == proxy.proxyOwner(), "Sender is not proxy owner.");
>                               ^^^^^^^^^^^^^^^^^^
>         require(initiator == address(0), "Already Set");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Governed
Line:        346
Source: 
>         IMaster ms = IMaster(masterAddress);
>         require(ms.getLatestAddress("GV") == msg.sender, "Not authorized");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MemberRoles
Line:        798
Source: 
>         }
>         if (tokenController.totalBalanceOf(_memberAddress) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             assignedRoles[counter] = uint256(Role.TokenHolder);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MemberRoles
Line:        802
Source: 
>         }
>         if (tokenController.tokensLockedAtTime(_memberAddress, "DR", (lockTimeForDR).add(now)) >= minLockAmountForDR) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             assignedRoles[counter] = uint256(Role.DisputeResolution);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Governed
Line:        346
Source: 
>         IMaster ms = IMaster(masterAddress);
>         require(ms.getLatestAddress("GV") == msg.sender, "Not authorized");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MemberRoles
Line:        844
Source: 
>         } else if (_roleId == uint256(Role.TokenHolder)) {
>             if (tokenController.totalBalanceOf(_memberAddress) > 0) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MemberRoles
Line:        848
Source: 
>         } else if (_roleId == uint256(Role.DisputeResolution)) {
>             if (tokenController.tokensLockedAtTime(_memberAddress, "DR", (lockTimeForDR).add(now)) >= minLockAmountForDR) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Governed
Line:        353
Source: 
>         IMaster ms = IMaster(masterAddress);
>         return (ms.getLatestAddress("GV") == _toCheck);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MemberRoles
Line:        674
Source: 
>         tokenController = ITokenController(
>             masterInstance.getLatestAddress("TC")
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Governed
Line:        341
Source: 
> 
>     address public masterAddress; // Name of the dApp, needs to be set by contracts inheriting this contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MemberRoles
Line:        624
Source: 
> 
>     ITokenController internal tokenController;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     struct MemberRoleDetails {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MemberRoles
Line:        633
Source: 
>     MemberRoleDetails[] internal memberRoleData;
>     bool internal constructorCheck;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address internal initiator;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MemberRoles
Line:        634
Source: 
>     bool internal constructorCheck;
>     address internal initiator;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal minLockAmountForDR;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MemberRoles
Line:        635
Source: 
>     address internal initiator;
>     uint256 internal minLockAmountForDR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal lockTimeForDR;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MemberRoles
Line:        636
Source: 
>     uint256 internal minLockAmountForDR;
>     uint256 internal lockTimeForDR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Governed
Line:        341
Source: 
> 
>     address public masterAddress; // Name of the dApp, needs to be set by contracts inheriting this contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MemberRoles
Line:        893
Source: 
> 
>             memberRoleData[_roleId].memberCounter = SafeMath.add(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 memberRoleData[_roleId].memberCounter,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MemberRoles
Line:        897
Source: 
>             );
>             memberRoleData[_roleId]
>             ^^^^^^^^^^^^^^^^^^^^^^^
>                 .memberIndex[_memberAddress] = memberRoleData[_roleId]

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MemberRoles
Line:        901
Source: 
>                 .length;
>             memberRoleData[_roleId].memberAddress.push(_memberAddress);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MemberRoles
Line:        912
Source: 
>                 .memberAddress[memberRoleData[_roleId].memberCounter];
>             memberRoleData[_roleId].memberIndex[_topElement] = _memberIndex;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             memberRoleData[_roleId].memberCounter = SafeMath.sub(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MemberRoles
Line:        913
Source: 
>             memberRoleData[_roleId].memberIndex[_topElement] = _memberIndex;
>             memberRoleData[_roleId].memberCounter = SafeMath.sub(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 memberRoleData[_roleId].memberCounter,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MemberRoles
Line:        917
Source: 
>             );
>             memberRoleData[_roleId].memberAddress[_memberIndex] = _topElement;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             memberRoleData[_roleId].memberAddress.length--;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MemberRoles
Line:        918
Source: 
>             memberRoleData[_roleId].memberAddress[_memberIndex] = _topElement;
>             memberRoleData[_roleId].memberAddress.length--;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             delete memberRoleData[_roleId].memberIndex[_memberAddress];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MemberRoles
Line:        933
Source: 
>         emit MemberRole(memberRoleData.length, _roleName, _roleDescription);
>         memberRoleData.push(
>         ^^^^^^^^^^^^^^^^^^^^
>             MemberRoleDetails(0, new address[](1), _authorized)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Governed
Line:        353
Source: 
>         IMaster ms = IMaster(masterAddress);
>         return (ms.getLatestAddress("GV") == _toCheck);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
