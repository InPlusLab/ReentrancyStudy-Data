Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Utils
Line:        29
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             size := extcodesize(contract_address)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ECVerify
Line:        661
Source: 
>         // Compact means, uint8 is not padded to 32 bytes.
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(signature, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OneToN
Line:        848
Source: 
>         bytes memory signature = new bytes(96);
>         assembly { // solium-disable-line security/no-inline-assembly
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // Copy the 96 bytes, using `offset` to start at the beginning

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        26
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        107
Source: 
> 
>     function setDeprecationSwitch() public onlyController returns (bool _success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         deprecated = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        112
Source: 
> 
>     function changeParameters(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _price_bump_numerator,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        107
Source: 
> 
>     function setDeprecationSwitch() public onlyController returns (bool _success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         deprecated = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        112
Source: 
> 
>     function changeParameters(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _price_bump_numerator,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistry
Line:        336
Source: 
>     // when other parties have just called `deposit()`)
>     function deposit(uint _limit_amount) public returns (bool _success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(! deprecated, "this contract was deprecated");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistry
Line:        377
Source: 
>     /// @param new_url The new URL string to be stored
>     function setURL(string memory new_url) public returns (bool _success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(hasValidRegistration(msg.sender), "registration expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistry
Line:        385
Source: 
>     /// A getter function for seeing the length of ever_made_deposits array
>     function everMadeDepositsLen() public view returns (uint256 _len) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ever_made_deposits.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        26
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OneToN
Line:        773
Source: 
>         // claim as much as possible
>         uint256 transferable = min(amount, deposit_contract.balances(sender));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (transferable > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OneToN
Line:        780
Source: 
> 
>             require(deposit_contract.transfer(sender, receiver, transferable), "deposit did not transfer");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    OneToN
Line:        754
Source: 
>     {
>         require(service_registry_contract.hasValidRegistration(receiver), "receiver not registered");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.number <= expiration_block, "IOU expired");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        112
Source: 
> 
>     function changeParameters(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _price_bump_numerator,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        26
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        112
Source: 
> 
>     function changeParameters(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _price_bump_numerator,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Deposit
Line:        268
Source: 
>     /// @param _to The address where the withdrawn tokens should go
>     function withdraw(address payable _to) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = token.balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        26
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ServiceRegistry
Line:        389
Source: 
> 
>     function hasValidRegistration(address _address) public view returns (bool _has_registration) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return now < service_valid_till[_address];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        26
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OneToN
Line:        743
Source: 
>     /// @return Amount of transferred tokens
>     function claim(
>     ^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OneToN
Line:        794
Source: 
>     /// @return Amount of transferred tokens
>     function bulkClaim(
>     ^^^^^^^^^^^^^^^^^^^
>         address[] calldata senders,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        221
Source: 
>         // P should be at most 24 * (2 ** 40).
>         uint256 price = _set_price * P / Q;
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        215
Source: 
> 
>         uint256 P = 24 * (A ** 4);
>                     ^^^^^^^^^^^^^
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        216
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        216
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        216
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                                       ^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        216
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                                       ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        216
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                                                          ^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        216
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                                                          ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        221
Source: 
>         // P should be at most 24 * (2 ** 40).
>         uint256 price = _set_price * P / Q;
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistry
Line:        357
Source: 
>         // Record the price
>         set_price = amount * price_bump_numerator / price_bump_denominator;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (set_price > 2 ** 90) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ServiceRegistry
Line:        366
Source: 
>         Deposit depo = new Deposit(address(token), valid_till, msg.sender, address(this));
>         require(token.transferFrom(msg.sender, address(depo), amount), "Token transfer for deposit failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UserDeposit
Line:        530
Source: 
>         // Actual transfer.
>         require(token.transferFrom(msg.sender, address(this), added_deposit), "tokens didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UserDeposit
Line:        598
Source: 
> 
>         require(token.transfer(msg.sender, withdrawable), "tokens didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OneToN
Line:        754
Source: 
>     {
>         require(service_registry_contract.hasValidRegistration(receiver), "receiver not registered");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.number <= expiration_block, "IOU expired");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OneToN
Line:        773
Source: 
>         // claim as much as possible
>         uint256 transferable = min(amount, deposit_contract.balances(sender));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (transferable > 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OneToN
Line:        780
Source: 
> 
>             require(deposit_contract.transfer(sender, receiver, transferable), "deposit did not transfer");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Token
Line:        75
Source: 
>     // Optionally implemented function to show the number of decimals for the token
>     function decimals() external view returns (uint8 decimals);
>                                                ^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    OneToN
Line:        868
Source: 
>         uint256 expiration_block,
>         uint256 chain_id,
>         ^^^^^^^^^^^^^^^^
>         bytes memory signature

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        88
Source: 
>     // the price decays according to decayedPrice().
>     uint256 public set_price;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public set_price_at;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        89
Source: 
>     uint256 public set_price;
>     uint256 public set_price_at;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        92
Source: 
>     /// The amount of time (in seconds) till the price decreases to roughly 1/e.
>     uint256 public decay_constant = 200 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        95
Source: 
>     // Once the price is at min_price, it can't decay further.
>     uint256 public min_price = 1000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        98
Source: 
>     // Whenever a deposit comes in, the price is multiplied by numerator / denominator.
>     uint256 public price_bump_numerator = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price_bump_denominator = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        99
Source: 
>     uint256 public price_bump_numerator = 1;
>     uint256 public price_bump_denominator = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        102
Source: 
>     // The duration of service registration/extension in seconds
>     uint256 public registration_duration = 180 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        185
Source: 
>         require(now >= set_price_at, "An underflow in price computation");
>         uint256 seconds_passed = now - set_price_at;
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        207
Source: 
> 
>         uint256 X = _seconds_passed;
>         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        213
Source: 
> 
>         uint256 A = decay_constant;
>         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        215
Source: 
> 
>         uint256 P = 24 * (A ** 4);
>         ^^^^^^^^^
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        216
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Deposit
Line:        241
Source: 
>     // If the address has no code, service_registry.deprecated() call will fail.
>     ServiceRegistryConfigurableParameters service_registry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Deposit
Line:        247
Source: 
>     // The timestamp after which the withdrawer can withdraw the deposit.
>     uint256 public release_at;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistry
Line:        282
Source: 
> 
>     mapping(address => uint256) public service_valid_till;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => string) public urls;  // URLs of services for HTTP access

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistry
Line:        287
Source: 
>     // Starting from this list, all alive registrations can be figured out.
>     address[] public ever_made_deposits;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistry
Line:        343
Source: 
>         // Extend the service position.
>         uint256 valid_till = service_valid_till[msg.sender];
>         ^^^^^^^^^^^^^^^^^^
>         if (valid_till == 0) { // a first time joiner

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        419
Source: 
> contract UserDeposit is Utils {
>     uint constant public withdraw_delay = 100;  // time before withdraw is allowed in blocks
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        425
Source: 
>     // Trusted contracts (can execute `transfer`)
>     address public msc_address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public one_to_n_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        426
Source: 
>     address public msc_address;
>     address public one_to_n_address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        430
Source: 
>     // doing a transfer or withdrawing tokens will not decrease total_deposit!
>     mapping(address => uint256) public total_deposit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Current user's balance, ignoring planned withdraws

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        433
Source: 
>     mapping(address => uint256) public balances;
>     mapping(address => WithdrawPlan) public withdraw_plans;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        436
Source: 
>     // The sum of all balances
>     uint256 public whole_balance = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Deposit limit for this whole contract

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        438
Source: 
>     // Deposit limit for this whole contract
>     uint256 public whole_balance_limit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        517
Source: 
>         // Calculate the actual amount of tokens that will be transferred
>         uint256 added_deposit = new_total_deposit - total_deposit[beneficiary];
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        585
Source: 
>     {
>         WithdrawPlan storage withdraw_plan = withdraw_plans[msg.sender];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= withdraw_plan.amount, "withdrawing more than planned");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UserDeposit
Line:        609
Source: 
>     {
>         WithdrawPlan storage withdraw_plan = withdraw_plans[owner];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (withdraw_plan.amount > balances[owner]) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OneToN
Line:        686
Source: 
> contract OneToN is Utils {
>     UserDeposit public deposit_contract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ServiceRegistry public service_registry_contract;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OneToN
Line:        687
Source: 
>     UserDeposit public deposit_contract;
>     ServiceRegistry public service_registry_contract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OneToN
Line:        691
Source: 
>     // this chain_id.  Otherwise the call fails.
>     uint256 public chain_id;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OneToN
Line:        695
Source: 
>     // keccak256(receiver, sender, expiration_block) => expiration_block.
>     mapping (bytes32 => uint256) public settled_sessions;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OneToN
Line:        769
Source: 
>         // must not be claimed before
>         bytes32 _key = keccak256(abi.encodePacked(receiver, sender, expiration_block));
>         ^^^^^^^^^^^^
>         require(settled_sessions[_key] == 0, "Already settled session");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OneToN
Line:        875
Source: 
>     {
>         bytes32 message_hash = keccak256(abi.encodePacked(
>         ^^^^^^^^^^^^^^^^^^^^
>             "\x19Ethereum Signed Message:\n188",

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    OneToN
Line:        686
Source: 
> contract OneToN is Utils {
>     UserDeposit public deposit_contract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ServiceRegistry public service_registry_contract;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    OneToN
Line:        687
Source: 
>     UserDeposit public deposit_contract;
>     ServiceRegistry public service_registry_contract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    OneToN
Line:        691
Source: 
>     // this chain_id.  Otherwise the call fails.
>     uint256 public chain_id;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    OneToN
Line:        695
Source: 
>     // keccak256(receiver, sender, expiration_block) => expiration_block.
>     mapping (bytes32 => uint256) public settled_sessions;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Deposit
Line:        241
Source: 
>     // If the address has no code, service_registry.deprecated() call will fail.
>     ServiceRegistryConfigurableParameters service_registry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Deposit
Line:        269
Source: 
>     function withdraw(address payable _to) external {
>         uint256 balance = token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == withdrawer, "the caller is not the withdrawer");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Deposit
Line:        271
Source: 
>         require(msg.sender == withdrawer, "the caller is not the withdrawer");
>         require(now >= release_at || service_registry.deprecated(), "deposit not released yet");
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance > 0, "nothing to withdraw");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Deposit
Line:        273
Source: 
>         require(balance > 0, "nothing to withdraw");
>         require(token.transfer(_to, balance), "token didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(_to); // The contract can disappear.

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ServiceRegistry
Line:        321
Source: 
>         // Check if the contract is indeed a token contract
>         require(token.totalSupply() > 0, "total supply zero");
>                 ^^^^^^^^^^^^^^^^^^^
>         controller = _controller;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ServiceRegistry
Line:        366
Source: 
>         Deposit depo = new Deposit(address(token), valid_till, msg.sender, address(this));
>         require(token.transferFrom(msg.sender, address(depo), amount), "Token transfer for deposit failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UserDeposit
Line:        477
Source: 
>         token = Token(_token_address);
>         require(token.totalSupply() > 0, "token has no total supply"); // Check if the contract is indeed a token contract
>                 ^^^^^^^^^^^^^^^^^^^
>         // check and set the whole balance limit

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UserDeposit
Line:        530
Source: 
>         // Actual transfer.
>         require(token.transferFrom(msg.sender, address(this), added_deposit), "tokens didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UserDeposit
Line:        598
Source: 
> 
>         require(token.transfer(msg.sender, withdrawable), "tokens didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OneToN
Line:        754
Source: 
>     {
>         require(service_registry_contract.hasValidRegistration(receiver), "receiver not registered");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.number <= expiration_block, "IOU expired");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OneToN
Line:        773
Source: 
>         // claim as much as possible
>         uint256 transferable = min(amount, deposit_contract.balances(sender));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (transferable > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OneToN
Line:        780
Source: 
> 
>             require(deposit_contract.transfer(sender, receiver, transferable), "deposit did not transfer");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Utils
Line:        33
Source: 
> 
>         return size > 0;
>                ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ECVerify
Line:        670
Source: 
>         // Version of signature should be 27 or 28, but 0 and 1 are also possible
>         if (v < 27) {
>             ^
>             v += 27;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        88
Source: 
>     // the price decays according to decayedPrice().
>     uint256 public set_price;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public set_price_at;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        89
Source: 
>     uint256 public set_price;
>     uint256 public set_price_at;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        79
Source: 
> contract ServiceRegistryConfigurableParameters {
>     address public controller;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        88
Source: 
>     // the price decays according to decayedPrice().
>     uint256 public set_price;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public set_price_at;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        89
Source: 
>     uint256 public set_price;
>     uint256 public set_price_at;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UserDeposit
Line:        425
Source: 
>     // Trusted contracts (can execute `transfer`)
>     address public msc_address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public one_to_n_address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UserDeposit
Line:        426
Source: 
>     address public msc_address;
>     address public one_to_n_address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UserDeposit
Line:        438
Source: 
>     // Deposit limit for this whole contract
>     uint256 public whole_balance_limit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        79
Source: 
> contract ServiceRegistryConfigurableParameters {
>     address public controller;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UserDeposit
Line:        496
Source: 
>         require(contractExists(_msc_address), "MS contract has no code");
>         msc_address = _msc_address;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UserDeposit
Line:        501
Source: 
>         require(contractExists(_one_to_n_address), "OneToN has no code");
>         one_to_n_address = _one_to_n_address;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UserDeposit
Line:        524
Source: 
>         require(whole_balance + added_deposit >= whole_balance, "overflowing deposit");
>         whole_balance += added_deposit;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UserDeposit
Line:        519
Source: 
> 
>         balances[beneficiary] += added_deposit;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         total_deposit[beneficiary] += added_deposit;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UserDeposit
Line:        520
Source: 
>         balances[beneficiary] += added_deposit;
>         total_deposit[beneficiary] += added_deposit;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OneToN
Line:        776
Source: 
>             // register to avoid double claiming
>             settled_sessions[_key] = expiration_block;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             assert(expiration_block > 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        98
Source: 
>     // Whenever a deposit comes in, the price is multiplied by numerator / denominator.
>     uint256 public price_bump_numerator = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price_bump_denominator = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        99
Source: 
>     uint256 public price_bump_numerator = 1;
>     uint256 public price_bump_denominator = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        102
Source: 
>     // The duration of service registration/extension in seconds
>     uint256 public registration_duration = 180 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        105
Source: 
>     // If true, new deposits are no longer accepted.
>     bool public deprecated = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
