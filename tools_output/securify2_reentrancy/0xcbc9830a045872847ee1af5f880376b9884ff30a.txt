[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Fairbet
Line:        22
Source: 
>     uint startTime = 0;
>     uint ethWei = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint oneDayCount = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Fairbet
Line:        26
Source: 
>     uint totalCount = 0;
> 	uint private beginTime = 1;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint lineCountTimes = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Fairbet
Line:        27
Source: 
> 	uint private beginTime = 1;
>     uint lineCountTimes = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 	uint184 private currentIndex = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Fairbet
Line:        30
Source: 
> 	address private owner;
> 	uint private actStu = 0;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	uint counts=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Fairbet
Line:        83
Source: 
>     Invest[] invests;
>     auid  util = auid(0xff090ec478a1814e8b148804cF93d8306d1b030D);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier onlyOwner {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        115
Source: 
>     
>     function invest(address userAddress ,uint inputAmount,string memory  inviteCode,string memory  beInvitedCode) public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!util.compareStr(inviteCode,"000000"),"Code  exit");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        227
Source: 
>     
>     function sunshimeplan(uint184 startLength ,uint184 endLength) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        333
Source: 
>     
>     function countRecommend(uint184 startLength ,uint184 endLength,uint times) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        456
Source: 
>     }
>     function getUserByAddress(address userAddress) public view returns(uint,uint,uint,uint,uint,uint,uint,uint,uint,string memory,string memory,uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             User memory user = userMapping[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        462
Source: 
>     
>     function getUserByAddress2(address userAddress) public view returns(uint,bool,uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             User memory user = userMapping[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        467
Source: 
>     
>     function getUserByAddress1(address userAddress) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           User memory user = userMapping[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        471
Source: 
>     }
>         function getAmountByAddress(address userAddress) public view returns(uint,uint,uint,uint){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Amounts memory amounts =  amountsMapping[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        485
Source: 
>     }
>     function getaddress(string memory inviteCode) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          address  userAddressCode = addressMapping[inviteCode];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        489
Source: 
>     }
>     function getSomeInfo() public view returns(uint,uint,uint,uint,uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return(totalMoney,totalCount,beginTime,suneth,lotteryeth);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        492
Source: 
>     }
>     function test() public view returns(uint,uint,uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (invests.length-2,currentIndex,actStu);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        502
Source: 
>    
>     function usadr(uint184 t)public view returns (address)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fairbet
Line:        519
Source: 
>     }
>     function getContractBanla()public view returns (uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address (this).balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        116
Source: 
>     function invest(address userAddress ,uint inputAmount,string memory  inviteCode,string memory  beInvitedCode) public payable{
>         require(!util.compareStr(inviteCode,"000000"),"Code  exit");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userAddress = msg.sender;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        126
Source: 
>         User memory userTest = userMapping[userAddress];
>         if(util.compareStr(beInvitedCode,"1a90d0a3")&&now-15 days<startTime){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(inputAmount == 50 * ethWei,"Amount error");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        496
Source: 
>     function sendFeetoAdmin(uint amount) private {
>         0x08447F9c60adc5C16670ea0D029f713d41B3EF94.transfer(amount/25);    // %4
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x9FEA1699aa52D6287eD24EF9718c083062C3000a.transfer(amount/50);    // %2

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        497
Source: 
>         0x08447F9c60adc5C16670ea0D029f713d41B3EF94.transfer(amount/25);    // %4
>         0x9FEA1699aa52D6287eD24EF9718c083062C3000a.transfer(amount/50);    // %2
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x707e2685A3039673032E1b5BB978c2EF3C8B2b95.transfer(amount/50);    //%2

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        498
Source: 
>         0x9FEA1699aa52D6287eD24EF9718c083062C3000a.transfer(amount/50);    // %2
>         0x707e2685A3039673032E1b5BB978c2EF3C8B2b95.transfer(amount/50);    //%2
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        130
Source: 
>         }else{
>             if(inputAmount < 1* ethWei || inputAmount > 30* ethWei || util.compareStr(inviteCode,"")){
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        132
Source: 
>                  
>                     require(inputAmount >= 1* ethWei && inputAmount <= 30* ethWei && !util.compareStr(inviteCode,""), "between 1 and 30");
>                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        137
Source: 
>             if(userTest.isVaild && userTest.status != 2){
>                 require(util.compareStr(userTest.beInvitedCode,beInvitedCode),"error");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     if(userTest.ft==0){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        141
Source: 
>                     userTest.lineAmount = userTest.lineAmount + lineAmount;
>                     userTest.level =util.getlevel(userTest.freezeAmount);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userTest.lineLevel = util.getLineLevel(userTest.freezeAmount + userTest.freeAmount +userTest.lineAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        142
Source: 
>                     userTest.level =util.getlevel(userTest.freezeAmount);
>                     userTest.lineLevel = util.getLineLevel(userTest.freezeAmount + userTest.freeAmount +userTest.lineAmount);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userMapping[userAddress] = userTest;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        155
Source: 
>                     }
>                     require(util.compareStr(beInvitedCode,userTest.beInvitedCode),"");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else{

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        157
Source: 
>             }else{
>                  uint level =util.getlevel(inputAmount);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  uint lineLevel = util.getLineLevel(lineAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        158
Source: 
>                  uint level =util.getlevel(inputAmount);
>                  uint lineLevel = util.getLineLevel(lineAmount);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(userAddressCode == 0x0000000000000000000000000000000000000000||userAddressCode==userAddress,"error");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        162
Source: 
>                     userTest = User(0,userAddress,0,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true,1,0);
>                 if(util.compareStr(beInvitedCode,"1a90d0a3")){
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userTest = User(0,userAddress,0,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true,0,0);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        529
Source: 
>                amount=amount*7/100; 
>                address(uint160(userAddressCode)).transfer(amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*2  <= user.resTime){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        532
Source: 
>                amount=amount*5/100; 
>                 address(uint160(userAddressCode)).transfer(amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*3  <= user.resTime){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        535
Source: 
>                amount=amount*3/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*4  <= user.resTime){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        538
Source: 
>                amount=amount*2/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        368
Source: 
>                   
>                   uint fireSc = util.getFireScBylevel(user.lineLevel);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   uint recommendSc = util.getRecommendScaleBylevelandTim(user.lineLevel,runtimes);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fairbet
Line:        369
Source: 
>                   uint fireSc = util.getFireScBylevel(user.lineLevel);
>                   uint recommendSc = util.getRecommendScaleBylevelandTim(user.lineLevel,runtimes);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   uint moneyResult = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Fairbet
Line:        275
Source: 
>             if(level_awardl1>0&&address (this).balance>level_awardl1&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl1);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl1;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Fairbet
Line:        282
Source: 
>              if(level_awardl2>0&&address (this).balance>level_awardl2&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl2);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl2;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Fairbet
Line:        289
Source: 
>              if(level_awardl3>0&&address (this).balance>level_awardl3&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl3);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl3;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Fairbet
Line:        297
Source: 
>             if(level_awardl4>0&&address (this).balance>level_awardl4&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl4);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                    amounts.sumzAmount+=level_awardl4;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Fairbet
Line:        315
Source: 
>             if(user.ft==0){
>                 uint scale = util.getScBylevel(user.level);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint _bouns = scale*user.freezeAmount/1000;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Fairbet
Line:        340
Source: 
>                 if(user.status == 1 && user.freezeAmount >= 1 * ethWei&&user.ft==0){
>                     uint scale = util.getScBylevel(user.level);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     execute(user.beInvitedCode,1,user.freezeAmount,scale);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Fairbet
Line:        400
Source: 
>         uint256 _eth = money;
>         address(uint160(userAddress)).transfer(_eth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        115
Source: 
>     
>     function invest(address userAddress ,uint inputAmount,string memory  inviteCode,string memory  beInvitedCode) public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!util.compareStr(inviteCode,"000000"),"Code  exit");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        333
Source: 
>     
>     function countRecommend(uint184 startLength ,uint184 endLength,uint times) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        402
Source: 
>     }
>     function sendAward(uint184 startLength ,uint184 endLength,uint times)  external onlyOwner  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          for(uint184 i = startLength; i <= endLength; i++) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        456
Source: 
>     }
>     function getUserByAddress(address userAddress) public view returns(uint,uint,uint,uint,uint,uint,uint,uint,uint,string memory,string memory,uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             User memory user = userMapping[userAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        462
Source: 
>     
>     function getUserByAddress2(address userAddress) public view returns(uint,bool,uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             User memory user = userMapping[userAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        467
Source: 
>     
>     function getUserByAddress1(address userAddress) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           User memory user = userMapping[userAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        471
Source: 
>     }
>         function getAmountByAddress(address userAddress) public view returns(uint,uint,uint,uint){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Amounts memory amounts =  amountsMapping[userAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        475
Source: 
>     }
>     function getUserByinviteCode(string memory inviteCode) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address  userAddressCode = addressMapping[inviteCode];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        485
Source: 
>     }
>     function getaddress(string memory inviteCode) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          address  userAddressCode = addressMapping[inviteCode];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fairbet
Line:        502
Source: 
>    
>     function usadr(uint184 t)public view returns (address)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Fairbet
Line:        172
Source: 
>         totalMoney = totalMoney + inputAmount;
>         suneth=suneth+(inputAmount/100)*5;
>                       ^^^^^^^^^^^^^^^^^^^
>         address  userAddressCode1 = addressMapping[beInvitedCode];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Fairbet
Line:        255
Source: 
>         if(l1>0){
>              level_awardl1=(suneth*10/100)/l1;
>                             ^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Fairbet
Line:        258
Source: 
>         if(l2>0){
>             level_awardl2=(suneth*20/100)/l2;
>                            ^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Fairbet
Line:        261
Source: 
>         if(l3>0){
>              level_awardl3=(suneth*30/100)/l3;
>                             ^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Fairbet
Line:        264
Source: 
>         if(l4>0){
>             level_awardl4 =(suneth*40/100)/l4;
>                             ^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        116
Source: 
>     function invest(address userAddress ,uint inputAmount,string memory  inviteCode,string memory  beInvitedCode) public payable{
>         require(!util.compareStr(inviteCode,"000000"),"Code  exit");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userAddress = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        126
Source: 
>         User memory userTest = userMapping[userAddress];
>         if(util.compareStr(beInvitedCode,"1a90d0a3")&&now-15 days<startTime){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(inputAmount == 50 * ethWei,"Amount error");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        130
Source: 
>         }else{
>             if(inputAmount < 1* ethWei || inputAmount > 30* ethWei || util.compareStr(inviteCode,"")){
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        132
Source: 
>                  
>                     require(inputAmount >= 1* ethWei && inputAmount <= 30* ethWei && !util.compareStr(inviteCode,""), "between 1 and 30");
>                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        137
Source: 
>             if(userTest.isVaild && userTest.status != 2){
>                 require(util.compareStr(userTest.beInvitedCode,beInvitedCode),"error");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     if(userTest.ft==0){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        141
Source: 
>                     userTest.lineAmount = userTest.lineAmount + lineAmount;
>                     userTest.level =util.getlevel(userTest.freezeAmount);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userTest.lineLevel = util.getLineLevel(userTest.freezeAmount + userTest.freeAmount +userTest.lineAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        142
Source: 
>                     userTest.level =util.getlevel(userTest.freezeAmount);
>                     userTest.lineLevel = util.getLineLevel(userTest.freezeAmount + userTest.freeAmount +userTest.lineAmount);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userMapping[userAddress] = userTest;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        155
Source: 
>                     }
>                     require(util.compareStr(beInvitedCode,userTest.beInvitedCode),"");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        157
Source: 
>             }else{
>                  uint level =util.getlevel(inputAmount);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  uint lineLevel = util.getLineLevel(lineAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        158
Source: 
>                  uint level =util.getlevel(inputAmount);
>                  uint lineLevel = util.getLineLevel(lineAmount);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(userAddressCode == 0x0000000000000000000000000000000000000000||userAddressCode==userAddress,"error");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        162
Source: 
>                     userTest = User(0,userAddress,0,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true,1,0);
>                 if(util.compareStr(beInvitedCode,"1a90d0a3")){
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userTest = User(0,userAddress,0,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true,0,0);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        315
Source: 
>             if(user.ft==0){
>                 uint scale = util.getScBylevel(user.level);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint _bouns = scale*user.freezeAmount/1000;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        368
Source: 
>                   
>                   uint fireSc = util.getFireScBylevel(user.lineLevel);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   uint recommendSc = util.getRecommendScaleBylevelandTim(user.lineLevel,runtimes);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fairbet
Line:        369
Source: 
>                   uint fireSc = util.getFireScBylevel(user.lineLevel);
>                   uint recommendSc = util.getRecommendScaleBylevelandTim(user.lineLevel,runtimes);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   uint moneyResult = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Fairbet
Line:        275
Source: 
>             if(level_awardl1>0&&address (this).balance>level_awardl1&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl1);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Fairbet
Line:        282
Source: 
>              if(level_awardl2>0&&address (this).balance>level_awardl2&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl2);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl2;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Fairbet
Line:        289
Source: 
>              if(level_awardl3>0&&address (this).balance>level_awardl3&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl3);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl3;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Fairbet
Line:        297
Source: 
>             if(level_awardl4>0&&address (this).balance>level_awardl4&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl4);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                    amounts.sumzAmount+=level_awardl4;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Fairbet
Line:        529
Source: 
>                amount=amount*7/100; 
>                address(uint160(userAddressCode)).transfer(amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*2  <= user.resTime){

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Fairbet
Line:        532
Source: 
>                amount=amount*5/100; 
>                 address(uint160(userAddressCode)).transfer(amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*3  <= user.resTime){

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Fairbet
Line:        535
Source: 
>                amount=amount*3/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*4  <= user.resTime){

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Fairbet
Line:        538
Source: 
>                amount=amount*2/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Fairbet
Line:        275
Source: 
>             if(level_awardl1>0&&address (this).balance>level_awardl1&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl1);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Fairbet
Line:        282
Source: 
>              if(level_awardl2>0&&address (this).balance>level_awardl2&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl2);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl2;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Fairbet
Line:        289
Source: 
>              if(level_awardl3>0&&address (this).balance>level_awardl3&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl3);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl3;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Fairbet
Line:        297
Source: 
>             if(level_awardl4>0&&address (this).balance>level_awardl4&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl4);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                    amounts.sumzAmount+=level_awardl4;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Fairbet
Line:        96
Source: 
>         addressMapping["0000000"]=owner;
>         Invest memory invest = Invest(owner,0,now, "0000000", "000000" ,1,2,0);
>         ^^^^^^^^^^^^^^^^^^^^
>         invests.push(invest);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Fairbet
Line:        181
Source: 
>       
>          Invest memory invest;
>          ^^^^^^^^^^^^^^^^^^^^
>         if(beginTime==1){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    auid
Line:        7
Source: 
> 
> contract auid  {
> ^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fairbet
Line:        249
Source: 
>     function sendSun(uint l1,uint l2,uint l3,uint l4,uint184 startLength ,uint184 endLength) private {
>         uint level_awardl1=0;
>         ^^^^^^^^^^^^^^^^^^
>         uint level_awardl2=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fairbet
Line:        250
Source: 
>         uint level_awardl1=0;
>         uint level_awardl2=0;
>         ^^^^^^^^^^^^^^^^^^
>         uint level_awardl3=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fairbet
Line:        251
Source: 
>         uint level_awardl2=0;
>         uint level_awardl3=0;
>         ^^^^^^^^^^^^^^^^^^
>         uint level_awardl4=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fairbet
Line:        252
Source: 
>         uint level_awardl3=0;
>         uint level_awardl4=0;
>         ^^^^^^^^^^^^^^^^^^
>         if(suneth>0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fairbet
Line:        316
Source: 
>                 uint scale = util.getScBylevel(user.level);
>                 uint _bouns = scale*user.freezeAmount/1000;
>                 ^^^^^^^^^^^
>                 user.dayBonusAmount =user.dayBonusAmount + _bouns;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fairbet
Line:        399
Source: 
>     function sendMoneyToUser(address userAddress, uint money) private {
>         uint256 _eth = money;
>         ^^^^^^^^^^^^
>         address(uint160(userAddress)).transfer(_eth);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        21
Source: 
> contract Fairbet {
>     uint startTime = 0;
>     ^^^^^^^^^^^^^^^^^^
>     uint ethWei = 1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        22
Source: 
>     uint startTime = 0;
>     uint ethWei = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint oneDayCount = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        23
Source: 
>     uint ethWei = 1 ether;
>     uint oneDayCount = 0;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint totalMoney = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        24
Source: 
>     uint oneDayCount = 0;
>     uint totalMoney = 0;
>     ^^^^^^^^^^^^^^^^^^^
>     uint totalCount = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        25
Source: 
>     uint totalMoney = 0;
>     uint totalCount = 0;
>     ^^^^^^^^^^^^^^^^^^^
> 	uint private beginTime = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        27
Source: 
> 	uint private beginTime = 1;
>     uint lineCountTimes = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 	uint184 private currentIndex = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        31
Source: 
> 	uint private actStu = 0;
> 	uint counts=0;
>  ^^^^^^^^^^^^^
> 	uint lotteryeth=0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        32
Source: 
> 	uint counts=0;
> 	uint lotteryeth=0;
>  ^^^^^^^^^^^^^^^^^
> 	uint184 lotindex=0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        33
Source: 
> 	uint lotteryeth=0;
> 	uint184 lotindex=0;
>  ^^^^^^^^^^^^^^^^^^
> 	uint suneth=0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        34
Source: 
> 	uint184 lotindex=0;
> 	uint suneth=0;
>  ^^^^^^^^^^^^^
> 	event Instructor(address _address,uint _amount,uint _type,string _usernumber);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        77
Source: 
>     
>     mapping (address=>Amounts) amountsMapping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => User) userMapping;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        78
Source: 
>     mapping (address=>Amounts) amountsMapping;
>     mapping (address => User) userMapping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (string => address) addressMapping;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        79
Source: 
>     mapping (address => User) userMapping;
>     mapping (string => address) addressMapping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint184 => address) indexMapping;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        80
Source: 
>     mapping (string => address) addressMapping;
>     mapping (uint184 => address) indexMapping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        82
Source: 
>     
>     Invest[] invests;
>     ^^^^^^^^^^^^^^^^
>     auid  util = auid(0xff090ec478a1814e8b148804cF93d8306d1b030D);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fairbet
Line:        83
Source: 
>     Invest[] invests;
>     auid  util = auid(0xff090ec478a1814e8b148804cF93d8306d1b030D);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier onlyOwner {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fairbet
Line:        400
Source: 
>         uint256 _eth = money;
>         address(uint160(userAddress)).transfer(_eth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        275
Source: 
>             if(level_awardl1>0&&address (this).balance>level_awardl1&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl1);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        282
Source: 
>              if(level_awardl2>0&&address (this).balance>level_awardl2&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl2);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl2;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        289
Source: 
>              if(level_awardl3>0&&address (this).balance>level_awardl3&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl3);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl3;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        297
Source: 
>             if(level_awardl4>0&&address (this).balance>level_awardl4&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl4);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                    amounts.sumzAmount+=level_awardl4;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fairbet
Line:        400
Source: 
>         uint256 _eth = money;
>         address(uint160(userAddress)).transfer(_eth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        529
Source: 
>                amount=amount*7/100; 
>                address(uint160(userAddressCode)).transfer(amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*2  <= user.resTime){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        532
Source: 
>                amount=amount*5/100; 
>                 address(uint160(userAddressCode)).transfer(amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*3  <= user.resTime){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        535
Source: 
>                amount=amount*3/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*4  <= user.resTime){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        538
Source: 
>                amount=amount*2/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        275
Source: 
>             if(level_awardl1>0&&address (this).balance>level_awardl1&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl1);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        282
Source: 
>              if(level_awardl2>0&&address (this).balance>level_awardl2&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl2);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl2;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        289
Source: 
>              if(level_awardl3>0&&address (this).balance>level_awardl3&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl3);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl3;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fairbet
Line:        297
Source: 
>             if(level_awardl4>0&&address (this).balance>level_awardl4&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl4);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                    amounts.sumzAmount+=level_awardl4;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        496
Source: 
>     function sendFeetoAdmin(uint amount) private {
>         0x08447F9c60adc5C16670ea0D029f713d41B3EF94.transfer(amount/25);    // %4
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x9FEA1699aa52D6287eD24EF9718c083062C3000a.transfer(amount/50);    // %2

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        497
Source: 
>         0x08447F9c60adc5C16670ea0D029f713d41B3EF94.transfer(amount/25);    // %4
>         0x9FEA1699aa52D6287eD24EF9718c083062C3000a.transfer(amount/50);    // %2
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x707e2685A3039673032E1b5BB978c2EF3C8B2b95.transfer(amount/50);    //%2

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        498
Source: 
>         0x9FEA1699aa52D6287eD24EF9718c083062C3000a.transfer(amount/50);    // %2
>         0x707e2685A3039673032E1b5BB978c2EF3C8B2b95.transfer(amount/50);    //%2
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        529
Source: 
>                amount=amount*7/100; 
>                address(uint160(userAddressCode)).transfer(amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*2  <= user.resTime){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        532
Source: 
>                amount=amount*5/100; 
>                 address(uint160(userAddressCode)).transfer(amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*3  <= user.resTime){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        535
Source: 
>                amount=amount*3/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*4  <= user.resTime){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        538
Source: 
>                amount=amount*2/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        275
Source: 
>             if(level_awardl1>0&&address (this).balance>level_awardl1&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl1);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        282
Source: 
>              if(level_awardl2>0&&address (this).balance>level_awardl2&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl2);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl2;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        289
Source: 
>              if(level_awardl3>0&&address (this).balance>level_awardl3&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl3);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  amounts.sumzAmount+=level_awardl3;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        297
Source: 
>             if(level_awardl4>0&&address (this).balance>level_awardl4&&userAddress!=0x0000000000000000000000000000000000000001){
>                 address(uint160(userAddress)).transfer(level_awardl4);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                    amounts.sumzAmount+=level_awardl4;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fairbet
Line:        400
Source: 
>         uint256 _eth = money;
>         address(uint160(userAddress)).transfer(_eth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fairbet
Line:        116
Source: 
>     function invest(address userAddress ,uint inputAmount,string memory  inviteCode,string memory  beInvitedCode) public payable{
>         require(!util.compareStr(inviteCode,"000000"),"Code  exit");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userAddress = msg.sender;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fairbet
Line:        126
Source: 
>         User memory userTest = userMapping[userAddress];
>         if(util.compareStr(beInvitedCode,"1a90d0a3")&&now-15 days<startTime){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(inputAmount == 50 * ethWei,"Amount error");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fairbet
Line:        130
Source: 
>         }else{
>             if(inputAmount < 1* ethWei || inputAmount > 30* ethWei || util.compareStr(inviteCode,"")){
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fairbet
Line:        132
Source: 
>                  
>                     require(inputAmount >= 1* ethWei && inputAmount <= 30* ethWei && !util.compareStr(inviteCode,""), "between 1 and 30");
>                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fairbet
Line:        137
Source: 
>             if(userTest.isVaild && userTest.status != 2){
>                 require(util.compareStr(userTest.beInvitedCode,beInvitedCode),"error");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     if(userTest.ft==0){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fairbet
Line:        155
Source: 
>                     }
>                     require(util.compareStr(beInvitedCode,userTest.beInvitedCode),"");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else{

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fairbet
Line:        162
Source: 
>                     userTest = User(0,userAddress,0,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true,1,0);
>                 if(util.compareStr(beInvitedCode,"1a90d0a3")){
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userTest = User(0,userAddress,0,inputAmount,0,0,0,0,0,level,now,lineAmount,lineLevel,inviteCode, beInvitedCode ,1,1,true,0,0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fairbet
Line:        369
Source: 
>                   uint fireSc = util.getFireScBylevel(user.lineLevel);
>                   uint recommendSc = util.getRecommendScaleBylevelandTim(user.lineLevel,runtimes);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   uint moneyResult = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fairbet
Line:        141
Source: 
>                     userTest.lineAmount = userTest.lineAmount + lineAmount;
>                     userTest.level =util.getlevel(userTest.freezeAmount);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userTest.lineLevel = util.getLineLevel(userTest.freezeAmount + userTest.freeAmount +userTest.lineAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fairbet
Line:        142
Source: 
>                     userTest.level =util.getlevel(userTest.freezeAmount);
>                     userTest.lineLevel = util.getLineLevel(userTest.freezeAmount + userTest.freeAmount +userTest.lineAmount);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userMapping[userAddress] = userTest;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fairbet
Line:        157
Source: 
>             }else{
>                  uint level =util.getlevel(inputAmount);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  uint lineLevel = util.getLineLevel(lineAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fairbet
Line:        158
Source: 
>                  uint level =util.getlevel(inputAmount);
>                  uint lineLevel = util.getLineLevel(lineAmount);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(userAddressCode == 0x0000000000000000000000000000000000000000||userAddressCode==userAddress,"error");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fairbet
Line:        315
Source: 
>             if(user.ft==0){
>                 uint scale = util.getScBylevel(user.level);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint _bouns = scale*user.freezeAmount/1000;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fairbet
Line:        340
Source: 
>                 if(user.status == 1 && user.freezeAmount >= 1 * ethWei&&user.ft==0){
>                     uint scale = util.getScBylevel(user.level);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     execute(user.beInvitedCode,1,user.freezeAmount,scale);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fairbet
Line:        368
Source: 
>                   
>                   uint fireSc = util.getFireScBylevel(user.lineLevel);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   uint recommendSc = util.getRecommendScaleBylevelandTim(user.lineLevel,runtimes);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Fairbet
Line:        400
Source: 
>         uint256 _eth = money;
>         address(uint160(userAddress)).transfer(_eth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Fairbet
Line:        529
Source: 
>                amount=amount*7/100; 
>                address(uint160(userAddressCode)).transfer(amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*2  <= user.resTime){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Fairbet
Line:        532
Source: 
>                amount=amount*5/100; 
>                 address(uint160(userAddressCode)).transfer(amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*3  <= user.resTime){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Fairbet
Line:        535
Source: 
>                amount=amount*3/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if(now -30 days  > user.resTime && now -30 days*4  <= user.resTime){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Fairbet
Line:        538
Source: 
>                amount=amount*2/100; 
>                  address(uint160(userAddressCode)).transfer(amount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fairbet
Line:        390
Source: 
>             
>                       userMapping[userAddressCode] = user;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Fairbet
Line:        141
Source: 
>                     userTest.lineAmount = userTest.lineAmount + lineAmount;
>                     userTest.level =util.getlevel(userTest.freezeAmount);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userTest.lineLevel = util.getLineLevel(userTest.freezeAmount + userTest.freeAmount +userTest.lineAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Fairbet
Line:        142
Source: 
>                     userTest.level =util.getlevel(userTest.freezeAmount);
>                     userTest.lineLevel = util.getLineLevel(userTest.freezeAmount + userTest.freeAmount +userTest.lineAmount);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     userMapping[userAddress] = userTest;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Fairbet
Line:        27
Source: 
> 	uint private beginTime = 1;
>     uint lineCountTimes = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 	uint184 private currentIndex = 2;

[0m
