Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibNote
Line:        37
Source: 
>         _;
>         assembly {
>         ^^^^^^^^^^
>             // log an 'anonymous' event with a constant 6 words of calldata

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GemJoin8
Line:        132
Source: 
> 
>     function join(address urn, uint256 wad) public note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "GemJoin8/not-live");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GemJoin8
Line:        141
Source: 
> 
>     function exit(address guy, uint256 wad) public note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 wad18 = mul(wad, 10 ** (18 - dec));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GemJoin8
Line:        132
Source: 
> 
>     function join(address urn, uint256 wad) public note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "GemJoin8/not-live");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GemJoin8
Line:        141
Source: 
> 
>     function exit(address guy, uint256 wad) public note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 wad18 = mul(wad, 10 ** (18 - dec));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GemJoin8
Line:        97
Source: 
>     mapping (address => uint256) public wards;
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GemJoin8
Line:        98
Source: 
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     function deny(address usr) external note auth { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GemJoin8
Line:        124
Source: 
> 
>     function setImplementation(address implementation, uint256 permitted) public auth note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         implementations[implementation] = permitted;  // 1 live, 0 disable

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GemJoin8
Line:        115
Source: 
>         live = 1;
>         setImplementation(gem.erc20Impl(), 1);
>                           ^^^^^^^^^^^^^^^
>         vat = VatLike_17(vat_);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VatLike_17
Line:        80
Source: 
> 
> interface VatLike_17 {
> ^^^^^^^^^^^^^^^^^^^^^^
>     function slip(bytes32, address, int256) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GemLike_11
Line:        84
Source: 
> 
> interface GemLike_11 {
> ^^^^^^^^^^^^^^^^^^^^^^
>     function decimals() external view returns (uint8);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> // hevm: flattened sources of src/join-8.sol
> pragma solidity >=0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin8
Line:        111
Source: 
>         gem = GemLike_11(gem_);
>         dec = gem.decimals();
>               ^^^^^^^^^^^^^^
>         require(dec < 18, "GemJoin8/decimals-18-or-higher");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin8
Line:        136
Source: 
>         require(int256(wad18) >= 0, "GemJoin8/overflow");
>         require(implementations[gem.erc20Impl()] == 1, "GemJoin8/implementation-invalid");
>                                 ^^^^^^^^^^^^^^^
>         vat.slip(ilk, urn, int256(wad18));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin8
Line:        138
Source: 
>         vat.slip(ilk, urn, int256(wad18));
>         require(gem.transferFrom(msg.sender, address(this), wad), "GemJoin8/failed-transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin8
Line:        144
Source: 
>         require(int256(wad18) >= 0, "GemJoin8/overflow");
>         require(implementations[gem.erc20Impl()] == 1, "GemJoin8/implementation-invalid");
>                                 ^^^^^^^^^^^^^^^
>         vat.slip(ilk, msg.sender, -int256(wad18));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin8
Line:        146
Source: 
>         vat.slip(ilk, msg.sender, -int256(wad18));
>         require(gem.transfer(guy, wad), "GemJoin8/failed-transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin8
Line:        115
Source: 
>         live = 1;
>         setImplementation(gem.erc20Impl(), 1);
>                           ^^^^^^^^^^^^^^^
>         vat = VatLike_17(vat_);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin8
Line:        137
Source: 
>         require(implementations[gem.erc20Impl()] == 1, "GemJoin8/implementation-invalid");
>         vat.slip(ilk, urn, int256(wad18));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(gem.transferFrom(msg.sender, address(this), wad), "GemJoin8/failed-transfer");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin8
Line:        145
Source: 
>         require(implementations[gem.erc20Impl()] == 1, "GemJoin8/implementation-invalid");
>         vat.slip(ilk, msg.sender, -int256(wad18));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(gem.transfer(guy, wad), "GemJoin8/failed-transfer");

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    GemJoin8
Line:        129
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x, "GemJoin8/overflow");
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GemJoin8
Line:        101
Source: 
> 
>     VatLike_17  public vat;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     bytes32  public ilk;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GemJoin8
Line:        102
Source: 
>     VatLike_17  public vat;
>     bytes32  public ilk;
>     ^^^^^^^^^^^^^^^^^^^
>     GemLike_11  public gem;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GemJoin8
Line:        104
Source: 
>     GemLike_11  public gem;
>     uint256  public dec;
>     ^^^^^^^^^^^^^^^^^^^
>     uint256  public live;  // Access Flag

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GemJoin8
Line:        105
Source: 
>     uint256  public dec;
>     uint256  public live;  // Access Flag
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
