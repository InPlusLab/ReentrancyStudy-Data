Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FundSmart
Line:        12
Source: 
> 
>     uint256 private TOP_BORDER_LEVEL = 1000 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FundSmart
Line:        15
Source: 
>     
>     uint256 private MIN_DEPOSIT = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FundSmart
Line:        84
Source: 
> 
>     function Balance() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FundSmart
Line:        97
Source: 
>     
>     function setDeadline(uint _deadline) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_deadline>=15 && _deadline <=30);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FundSmart
Line:        102
Source: 
>     
>     function deposit() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FundSmart
Line:        175
Source: 
> 
>     function addNewUser(string memory _parent) public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable parent;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FundSmart
Line:        407
Source: 
>    
>     function originalWithdraw () public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable add = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FundSmart
Line:        428
Source: 
>     
>     function withdrawProfit() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable add = msg.sender;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FundSmart
Line:        415
Source: 
>                 users[add].totalUser -= _total;
>                 add.transfer(amount);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 downGradeLevel(add);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FundSmart
Line:        434
Source: 
>                 if(users[add].totalUser > profitOfUser[add].profitOfRefReceive){
>                     add.transfer(users[add].totalUser-profitOfUser[add].profitOfRefReceive);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     profitOfUser[add].profitRef = _total- users[add].totalUser;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FundSmart
Line:        439
Source: 
>             } else {
>                 add.transfer(profitOfUser[add].profitRef);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 profitOfUser[add].profitOfRefReceive += profitOfUser[add].profitRef;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    FundSmart
Line:        80
Source: 
>     event Withdraw (
>         string msg
>         ^^^^^^^^^^
>     );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    FundSmart
Line:        395
Source: 
> 
>     event LogWithdraw(address indexed accountAddress, string msg);
>                                                       ^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        12
Source: 
> 
>     uint256 private TOP_BORDER_LEVEL = 1000 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        15
Source: 
>     
>     uint256 private MIN_DEPOSIT = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        17
Source: 
>     
>     uint256 public DEADLINE = 15;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        50
Source: 
>     
>     struct profitBySystem {
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         bool exists;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        84
Source: 
> 
>     function Balance() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(this).balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        106
Source: 
>          
>         address payable _add = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        113
Source: 
>             users[_add].totalUser += msg.value;
>             uint  _deadlines = now + DEADLINE * 1 days;
>             ^^^^^^^^^^^^^^^^
>             profitOfUser[_add].exists = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        160
Source: 
>     function handlerAncestorTotal(address _add, uint256 _total) private {
>         Ancestor[] memory _ancestors = ancestors[_add];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint numberAncentors = _ancestors.length;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        187
Source: 
>         }
>         address payable _add = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^
>         if(!users[msg.sender].exists && msg.sender != parent){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        234
Source: 
>             } else {
>                 uint _percent = getProfit(level[add]);
>                 ^^^^^^^^^^^^^
>                 profitOfUser[add].profitRef += total * _percent /100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        249
Source: 
>         bool result = false;
>         address[] memory _children = children[_add];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(users[_add].total>= TOP_BORDER_LEVEL && _children.length >=3 && profitOfUser[_add].exists){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        251
Source: 
>         if(users[_add].total>= TOP_BORDER_LEVEL && _children.length >=3 && profitOfUser[_add].exists){
>             uint _currentChildTotal;
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             uint threeMin = 0 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        280
Source: 
>         bool result = false;
>          address[] memory _children = children[_add];
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(users[_add].total>= TOP_BORDER_LEVEL && _children.length >=3){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        282
Source: 
>         if(users[_add].total>= TOP_BORDER_LEVEL && _children.length >=3){
>             uint _subTotal = users[_add].total;
>             ^^^^^^^^^^^^^^
>             uint _countLevel;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        283
Source: 
>             uint _subTotal = users[_add].total;
>             uint _countLevel;
>             ^^^^^^^^^^^^^^^^
>             for(uint i = 0; i< _children.length; i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        376
Source: 
>     function userWithdraw(address _add) private returns (uint) {
>         Invest[] storage _invest = invests[_add];
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint total = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        399
Source: 
>     function downGradeLevelAncentor(address _add, uint _total) private {
>         Ancestor[] memory _ancestors = ancestors[_add];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint i =0; i <_ancestors.length; i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        401
Source: 
>         for(uint i =0; i <_ancestors.length; i++){
>             address _anc = _ancestors[_ancestors.length-1-i].add;
>             ^^^^^^^^^^^^
>             users[_anc].total -= _total;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        410
Source: 
>         if(profitOfUser[add].exists){
>             uint _total = userWithdraw(add);
>             ^^^^^^^^^^^
>             if(_total > 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FundSmart
Line:        431
Source: 
>         if(profitOfUser[add].exists){
>             uint _total = profitOfUser[add].profitRef + profitOfUser[add].profitOfRefReceive;
>             ^^^^^^^^^^^
>             if(_total >= users[add].totalUser){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FundSmart
Line:        9
Source: 
> contract FundSmart {
>     address payable manager;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FundSmart
Line:        171
Source: 
>     function payForManager(uint amount) private  {
>         manager.transfer(amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FundSmart
Line:        415
Source: 
>                 users[add].totalUser -= _total;
>                 add.transfer(amount);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 downGradeLevel(add);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FundSmart
Line:        434
Source: 
>                 if(users[add].totalUser > profitOfUser[add].profitOfRefReceive){
>                     add.transfer(users[add].totalUser-profitOfUser[add].profitOfRefReceive);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     profitOfUser[add].profitRef = _total- users[add].totalUser;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FundSmart
Line:        439
Source: 
>             } else {
>                 add.transfer(profitOfUser[add].profitRef);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 profitOfUser[add].profitOfRefReceive += profitOfUser[add].profitRef;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FundSmart
Line:        171
Source: 
>     function payForManager(uint amount) private  {
>         manager.transfer(amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FundSmart
Line:        171
Source: 
>     function payForManager(uint amount) private  {
>         manager.transfer(amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FundSmart
Line:        415
Source: 
>                 users[add].totalUser -= _total;
>                 add.transfer(amount);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 downGradeLevel(add);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FundSmart
Line:        434
Source: 
>                 if(users[add].totalUser > profitOfUser[add].profitOfRefReceive){
>                     add.transfer(users[add].totalUser-profitOfUser[add].profitOfRefReceive);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     profitOfUser[add].profitRef = _total- users[add].totalUser;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FundSmart
Line:        439
Source: 
>             } else {
>                 add.transfer(profitOfUser[add].profitRef);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 profitOfUser[add].profitOfRefReceive += profitOfUser[add].profitRef;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    FundSmart
Line:        286
Source: 
>                 if(level[_children[i]] >= _level){
>                     _countLevel++;
>                     ^^^^^^^^^^^
>                     _subTotal = _subTotal - users[_children[i]].total;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    FundSmart
Line:        171
Source: 
>     function payForManager(uint amount) private  {
>         manager.transfer(amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
