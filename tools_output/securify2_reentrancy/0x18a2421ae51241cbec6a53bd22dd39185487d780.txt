Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        275
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != accountHash && codehash != 0x0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        463
Source: 
> 
>   function setRewards(address _rewards) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        468
Source: 
> 
>   function setSplit(uint _split) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        473
Source: 
> 
>   function setOneSplit(address _onesplit) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        478
Source: 
> 
>   function setGovernance(address _governance) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        483
Source: 
> 
>   function setVault(address _token, address _vault) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        488
Source: 
> 
>   function setConverter(address _input, address _output, address _converter) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        493
Source: 
> 
>   function setStrategy(address _token, address _strategy) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        526
Source: 
> 
>   function withdrawAll(address _token) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        531
Source: 
> 
>   function inCaseTokensGetStuck(address _token, uint _amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        536
Source: 
> 
>   function inCaseStrategyTokenGetStuck(address _strategy, address _token) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        541
Source: 
> 
>   function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint _balance = IERC20(_token).balanceOf(_strategy);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        548
Source: 
>   // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield
>   function oneearn(address _strategy, address _token, uint parts) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // This contract should never have value in it, but just incase since this is a public call

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        573
Source: 
> 
>   function withdraw(address _token, uint _amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == vaults[_token], "!vault");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        383
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        463
Source: 
> 
>   function setRewards(address _rewards) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        473
Source: 
> 
>   function setOneSplit(address _onesplit) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        478
Source: 
> 
>   function setGovernance(address _governance) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        502
Source: 
> 
>   function earn(address _token, uint _amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == vaults[_token], "!vault");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        531
Source: 
> 
>   function inCaseTokensGetStuck(address _token, uint _amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        573
Source: 
> 
>   function withdraw(address _token, uint _amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == vaults[_token], "!vault");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        468
Source: 
> 
>   function setSplit(uint _split) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        483
Source: 
> 
>   function setVault(address _token, address _vault) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        488
Source: 
> 
>   function setConverter(address _input, address _output, address _converter) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        493
Source: 
> 
>   function setStrategy(address _token, address _strategy) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        518
Source: 
> 
>   function balanceOf(address _token) external view returns (uint) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return IStrategy(strategies[_token]).balanceOf();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        522
Source: 
> 
>   function riskAnalysis(address _token) external view returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return IStrategy(strategies[_token]).riskAnalysis();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        526
Source: 
> 
>   function withdrawAll(address _token) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        536
Source: 
> 
>   function inCaseStrategyTokenGetStuck(address _strategy, address _token) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        541
Source: 
> 
>   function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint _balance = IERC20(_token).balanceOf(_strategy);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        548
Source: 
>   // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield
>   function oneearn(address _strategy, address _token, uint parts) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // This contract should never have value in it, but just incase since this is a public call

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Controller
Line:        497
Source: 
>     if (_current != address(0)) {
>       IStrategy(_current).withdrawAll();
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        550
Source: 
>     // This contract should never have value in it, but just incase since this is a public call
>     uint _before = IERC20(_token).balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IStrategy(_strategy).withdraw(_token);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        552
Source: 
>     IStrategy(_strategy).withdraw(_token);
>     uint _after =  IERC20(_token).balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (_after > _before) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        558
Source: 
>       uint _expected;
>       _before = IERC20(_want).balanceOf(address(this));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       IERC20(_token).safeApprove(onesplit, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        563
Source: 
>       IOneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>       _after = IERC20(_want).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if (_after > _before) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        456
Source: 
>   uint public split = 5000;
>   uint public constant max = 10000;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        495
Source: 
>     require(msg.sender == governance, "!governance");
>     address _current = strategies[_token];
>     ^^^^^^^^^^^^^^^^
>     if (_current != address(0)) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        505
Source: 
>     
>     address _strategy = strategies[_token];
>     ^^^^^^^^^^^^^^^^^
>     address _want = IStrategy(_strategy).want();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        506
Source: 
>     address _strategy = strategies[_token];
>     address _want = IStrategy(_strategy).want();
>     ^^^^^^^^^^^^^
>     if (_want != _token) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        542
Source: 
>   function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {
>     uint _balance = IERC20(_token).balanceOf(_strategy);
>     ^^^^^^^^^^^^^
>     address _want = IStrategy(_strategy).want();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        543
Source: 
>     uint _balance = IERC20(_token).balanceOf(_strategy);
>     address _want = IStrategy(_strategy).want();
>     ^^^^^^^^^^^^^
>     (expected,) = IOneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        550
Source: 
>     // This contract should never have value in it, but just incase since this is a public call
>     uint _before = IERC20(_token).balanceOf(address(this));
>     ^^^^^^^^^^^^
>     IStrategy(_strategy).withdraw(_token);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        552
Source: 
>     IStrategy(_strategy).withdraw(_token);
>     uint _after =  IERC20(_token).balanceOf(address(this));
>     ^^^^^^^^^^^
>     if (_after > _before) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        554
Source: 
>     if (_after > _before) {
>       uint _amount = _after.sub(_before);
>       ^^^^^^^^^^^^
>       address _want = IStrategy(_strategy).want();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        555
Source: 
>       uint _amount = _after.sub(_before);
>       address _want = IStrategy(_strategy).want();
>       ^^^^^^^^^^^^^
>       uint[] memory _distribution;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        556
Source: 
>       address _want = IStrategy(_strategy).want();
>       uint[] memory _distribution;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint _expected;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        557
Source: 
>       uint[] memory _distribution;
>       uint _expected;
>       ^^^^^^^^^^^^^^
>       _before = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        566
Source: 
>         _amount = _after.sub(_before);
>         uint _reward = _amount.mul(split).div(max);
>         ^^^^^^^^^^^^
>         earn(_want, _amount.sub(_reward));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        396
Source: 
> // SPDX-License-Identifier: MIT
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        506
Source: 
>     address _strategy = strategies[_token];
>     address _want = IStrategy(_strategy).want();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (_want != _token) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        510
Source: 
>       IERC20(_token).safeTransfer(converter, _amount);
>       _amount = IConverter(converter).convert(_strategy);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       IERC20(_want).safeTransfer(_strategy, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        543
Source: 
>     uint _balance = IERC20(_token).balanceOf(_strategy);
>     address _want = IStrategy(_strategy).want();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     (expected,) = IOneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        550
Source: 
>     // This contract should never have value in it, but just incase since this is a public call
>     uint _before = IERC20(_token).balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IStrategy(_strategy).withdraw(_token);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        552
Source: 
>     IStrategy(_strategy).withdraw(_token);
>     uint _after =  IERC20(_token).balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (_after > _before) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        555
Source: 
>       uint _amount = _after.sub(_before);
>       address _want = IStrategy(_strategy).want();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint[] memory _distribution;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        558
Source: 
>       uint _expected;
>       _before = IERC20(_want).balanceOf(address(this));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       IERC20(_token).safeApprove(onesplit, 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        563
Source: 
>       IOneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>       _after = IERC20(_want).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if (_after > _before) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        349
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        497
Source: 
>     if (_current != address(0)) {
>       IStrategy(_current).withdrawAll();
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        515
Source: 
>     }
>     IStrategy(_strategy).deposit();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        519
Source: 
>   function balanceOf(address _token) external view returns (uint) {
>     return IStrategy(strategies[_token]).balanceOf();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        523
Source: 
>   function riskAnalysis(address _token) external view returns (bool) {
>     return IStrategy(strategies[_token]).riskAnalysis();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        528
Source: 
>     require(msg.sender == governance, "!governance");
>     IStrategy(strategies[_token]).withdrawAll();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        538
Source: 
>     require(msg.sender == governance, "!governance");
>     IStrategy(_strategy).withdraw(_token);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        542
Source: 
>   function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {
>     uint _balance = IERC20(_token).balanceOf(_strategy);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _want = IStrategy(_strategy).want();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        544
Source: 
>     address _want = IStrategy(_strategy).want();
>     (expected,) = IOneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        551
Source: 
>     uint _before = IERC20(_token).balanceOf(address(this));
>     IStrategy(_strategy).withdraw(_token);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint _after =  IERC20(_token).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        561
Source: 
>       IERC20(_token).safeApprove(onesplit, _amount);
>       (_expected, _distribution) = IOneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       IOneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        562
Source: 
>       (_expected, _distribution) = IOneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>       IOneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _after = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        575
Source: 
>     require(msg.sender == vaults[_token], "!vault");
>     IStrategy(strategies[_token]).withdraw(_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        276
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != accountHash && codehash != 0x0);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Controller
Line:        450
Source: 
>   address public onesplit;
>   address public rewards;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   mapping(address => address) public vaults;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        497
Source: 
>     if (_current != address(0)) {
>       IStrategy(_current).withdrawAll();
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        528
Source: 
>     require(msg.sender == governance, "!governance");
>     IStrategy(strategies[_token]).withdrawAll();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        562
Source: 
>       (_expected, _distribution) = IOneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>       IOneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _after = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        356
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        361
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
