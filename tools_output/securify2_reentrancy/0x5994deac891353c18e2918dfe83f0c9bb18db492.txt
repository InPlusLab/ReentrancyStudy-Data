[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FastMatrix
Line:        325
Source: 
>     function bytesToAddress(bytes memory _data) private pure returns(address addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(_data, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FastMatrix
Line:        18
Source: 
> 
>     uint40 public LEVEL_TIME_LIFE = 1 << 37;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool step_1 = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FastMatrix
Line:        65
Source: 
> 
>     function stepOne() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FastMatrix
Line:        83
Source: 
> 
>     function stepTwo () public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FastMatrix
Line:        227
Source: 
> 
>     function topDev() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         root.transfer(users[root].balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FastMatrix
Line:        238
Source: 
> 
>     function findFreeReferrer(address _user, uint8 _round) public view returns(address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(users[_user].referrals[_round].length < 2) return _user;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FastMatrix
Line:        262
Source: 
>     
>     function getLvlUser(uint256 _id) public view returns(uint40[20] memory lvls){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FastMatrix
Line:        314
Source: 
> 
>     function getUplines(uint _user, uint8 _round) public view returns (uint[2] memory uplines, address[2] memory uplinesWallets) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint id = _user;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FastMatrix
Line:        154
Source: 
> 
>         profiter = this.findUpline(upline, round, offset);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FastMatrix
Line:        220
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FastMatrix
Line:        221
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FastMatrix
Line:        228
Source: 
>     function topDev() public onlyOwner {
>         root.transfer(users[root].balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[root].balance = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FastMatrix
Line:        311
Source: 
> 
>         return this.findUpline(users[_user].uplines[_round], _round, _offset - 1);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    FastMatrix
Line:        93
Source: 
> 
>                     upline = this.findFreeReferrer(upline, j);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    FastMatrix
Line:        145
Source: 
> 
>             upline = this.findFreeReferrer(upline, round);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    FastMatrix
Line:        319
Source: 
>             uplines[i - 1] = users[users_ids[_user]].id;
>             uplinesWallets[i - 1] = this.findUpline(users_ids[id], _round, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FastMatrix
Line:        207
Source: 
> 
>     function register(uint256 _upline_id) payable external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _register(msg.sender, users_ids[_upline_id], msg.value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FastMatrix
Line:        308
Source: 
> 
>     function findUpline(address _user, uint8 _round, uint8 _offset) external view returns(address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_user == root || _offset == 0) return _user;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FastMatrix
Line:        314
Source: 
> 
>     function getUplines(uint _user, uint8 _round) public view returns (uint[2] memory uplines, address[2] memory uplinesWallets) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint id = _user;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FastMatrix
Line:        262
Source: 
>     
>     function getLvlUser(uint256 _id) public view returns(uint40[20] memory lvls){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FastMatrix
Line:        270
Source: 
>     
>     function getReferralTree(uint _id, uint _treeLevel, uint8 _round) external view returns (uint[] memory, uint[] memory, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FastMatrix
Line:        93
Source: 
> 
>                     upline = this.findFreeReferrer(upline, j);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    FastMatrix
Line:        220
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    FastMatrix
Line:        221
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FastMatrix
Line:        228
Source: 
>     function topDev() public onlyOwner {
>         root.transfer(users[root].balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[root].balance = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FastMatrix
Line:        18
Source: 
> 
>     uint40 public LEVEL_TIME_LIFE = 1 << 37;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool step_1 = false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FastMatrix
Line:        19
Source: 
>     uint40 public LEVEL_TIME_LIFE = 1 << 37;
>     bool step_1 = false;
>     ^^^^^^^^^^^^^^^^^^^
>     bool step_2 = false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FastMatrix
Line:        20
Source: 
>     bool step_1 = false;
>     bool step_2 = false;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FastMatrix
Line:        26
Source: 
>     address[6] private refss;
>     uint256 public last_id;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FastMatrix
Line:        30
Source: 
>     mapping(address => User) public users;
>     mapping(uint256 => address) public users_ids;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FastMatrix
Line:        19
Source: 
>     uint40 public LEVEL_TIME_LIFE = 1 << 37;
>     bool step_1 = false;
>     ^^^^^^^^^^^^^^^^^^^
>     bool step_2 = false;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FastMatrix
Line:        20
Source: 
>     bool step_1 = false;
>     bool step_2 = false;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FastMatrix
Line:        22
Source: 
> 
>     address payable owner;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FastMatrix
Line:        220
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FastMatrix
Line:        221
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FastMatrix
Line:        228
Source: 
>     function topDev() public onlyOwner {
>         root.transfer(users[root].balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[root].balance = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FastMatrix
Line:        220
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FastMatrix
Line:        221
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FastMatrix
Line:        228
Source: 
>     function topDev() public onlyOwner {
>         root.transfer(users[root].balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[root].balance = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FastMatrix
Line:        220
Source: 
> 
>         if(!payable(msg.sender).send(_value)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             root.transfer(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FastMatrix
Line:        221
Source: 
>         if(!payable(msg.sender).send(_value)) {
>             root.transfer(_value);
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FastMatrix
Line:        228
Source: 
>     function topDev() public onlyOwner {
>         root.transfer(users[root].balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[root].balance = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FastMatrix
Line:        145
Source: 
> 
>             upline = this.findFreeReferrer(upline, round);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FastMatrix
Line:        154
Source: 
> 
>         profiter = this.findUpline(upline, round, offset);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FastMatrix
Line:        93
Source: 
> 
>                     upline = this.findFreeReferrer(upline, j);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FastMatrix
Line:        311
Source: 
> 
>         return this.findUpline(users[_user].uplines[_round], _round, _offset - 1);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FastMatrix
Line:        319
Source: 
>             uplines[i - 1] = users[users_ids[_user]].id;
>             uplinesWallets[i - 1] = this.findUpline(users_ids[id], _round, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    FastMatrix
Line:        265
Source: 
>         for(uint8 i = 0; i < 20; i++ ){
>             lvls[i] = uint40(users[users_ids[_id]].expires[i]);
>             ^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    FastMatrix
Line:        318
Source: 
>             _user = users[users[users_ids[_user]].uplines[_round]].id;
>             uplines[i - 1] = users[users_ids[_user]].id;
>             ^^^^^^^
>             uplinesWallets[i - 1] = this.findUpline(users_ids[id], _round, i);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        119
Source: 
>     function _newUser(address _addr, address _inviter) private {
>         users[_addr].id = ++last_id;
>                           ^^^^^^^^^
>         users[_addr].inviter = _inviter;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        119
Source: 
>     function _newUser(address _addr, address _inviter) private {
>         users[_addr].id = ++last_id;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].inviter = _inviter;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        120
Source: 
>         users[_addr].id = ++last_id;
>         users[_addr].inviter = _inviter;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users_ids[last_id] = _addr;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        121
Source: 
>         users[_addr].inviter = _inviter;
>         users_ids[last_id] = _addr;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        131
Source: 
>         
>         users[_user].balance -= levels[_level];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_user].expires[_level] = uint40((users[_user].expires[_level] > block.timestamp ? users[_user].expires[_level] : block.timestamp) + LEVEL_TIME_LIFE);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        132
Source: 
>         users[_user].balance -= levels[_level];
>         users[_user].expires[_level] = uint40((users[_user].expires[_level] > block.timestamp ? users[_user].expires[_level] : block.timestamp) + LEVEL_TIME_LIFE);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        147
Source: 
> 
>             users[_user].uplines[round] = upline;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[upline].referrals[round].push(_user);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        148
Source: 
>             users[_user].uplines[round] = upline;
>             users[upline].referrals[round].push(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        167
Source: 
>                 }
> 				users[profiter].balance += price;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[profiter].profit += (value - price);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        168
Source: 
> 				users[profiter].balance += price;
>                 users[profiter].profit += (value - price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _autoBuyLevel(profiter);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        172
Source: 
>             } else {
>                 users[profiter].profit += value;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        177
Source: 
>         else {
>             users[root].balance += value;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[root].profit = users[root].balance;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        178
Source: 
>             users[root].balance += value;
>             users[root].profit = users[root].balance;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit ProfitEvent(root, _user, value, now, users[root].id, users[_user].id);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FastMatrix
Line:        201
Source: 
>         
>         users[_user].balance += _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FastMatrix
Line:        319
Source: 
>             uplines[i - 1] = users[users_ids[_user]].id;
>             uplinesWallets[i - 1] = this.findUpline(users_ids[id], _round, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FastMatrix
Line:        190
Source: 
> 
>             if(users[_user].expires[i] < block.timestamp) {
>                                          ^^^^^^^^^^^^^^^
>                 _buyLevel(_user, i);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FastMatrix
Line:        129
Source: 
>         require(users[_user].balance >= levels[_level], "Insufficient funds");
>         require(_level == 0 || users[_user].expires[_level - 1] > block.timestamp, "Need previous level");
>                                                                   ^^^^^^^^^^^^^^^
>         

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FastMatrix
Line:        132
Source: 
>         users[_user].balance -= levels[_level];
>         users[_user].expires[_level] = uint40((users[_user].expires[_level] > block.timestamp ? users[_user].expires[_level] : block.timestamp) + LEVEL_TIME_LIFE);
>                                                                               ^^^^^^^^^^^^^^^
>         

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FastMatrix
Line:        139
Source: 
>         if(users[_user].uplines[round] == address(0)) {
>             while(users[upline].expires[_level] < block.timestamp) {
>                                                   ^^^^^^^^^^^^^^^
>                 emit LostProfitEvent(upline, _user, levels[_level], now, users[_user].id);

[0m
