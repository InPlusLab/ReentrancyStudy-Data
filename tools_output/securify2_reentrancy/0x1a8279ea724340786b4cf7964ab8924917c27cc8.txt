Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        151
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        177
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        186
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        151
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        177
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        186
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        186
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FloatifyAccount
Line:        422
Source: 
>      */
>     function withdraw(address _withdrawalAddress) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _daiBalance = daiContract.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FloatifyAccount
Line:        433
Source: 
>      */
>     function redeemAndWithdrawMax(address _withdrawalAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // 1a. Destination address specified as an input

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FloatifyAccount
Line:        455
Source: 
>      */
>     function redeemAndWithdrawPartial(address _withdrawalAddress, uint256 _daiAmount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // 2a. Address to withdraw to and amount of DAI to withdraw specified as inputs

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FloatifyAccount
Line:        474
Source: 
>      */
>     function changeInterestFraction(uint256 _newInterestFraction) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ChangeInterestFraction(interestFraction, _newInterestFraction);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FloatifyAccount
Line:        486
Source: 
>      */
>     function withdrawInterestFraction(address _floatifyAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Get total DAI the user has, i.e. DAI principal + interest

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        264
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FloatifyAccount
Line:        398
Source: 
>     function deposit() external onlyOwner {
>         uint _daiBalance = daiContract.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalDeposited = _daiBalance.add(totalDeposited);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FloatifyAccount
Line:        401
Source: 
>         emit Deposit(_daiBalance);
>         require(cdaiContract.mint(_daiBalance) == 0, "Call to mint function failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FloatifyAccount
Line:        436
Source: 
>         // 1b. Get the cDAI balance of this contract
>         uint256 _cdaiBalance = cdaiContract.balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // 1c. Call redeem() with the balance from step 1b

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FloatifyAccount
Line:        442
Source: 
>         //   trust the DAI and cDAI contracts to be secure, the risk is mitigated
>         require(cdaiContract.redeem(_cdaiBalance) == 0, "Redemption of all cDAI for DAI failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _daiBalance = daiContract.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FloatifyAccount
Line:        443
Source: 
>         require(cdaiContract.redeem(_cdaiBalance) == 0, "Redemption of all cDAI for DAI failed");
>         uint256 _daiBalance = daiContract.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalWithdrawn = _daiBalance.add(totalWithdrawn); // right after this line we withdraw the full DAI balance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FloatifyAccount
Line:        459
Source: 
>         emit RedeemUnderlying(_daiAmount);
>         require(cdaiContract.redeemUnderlying(_daiAmount) == 0, "Redemption of some cDAI for DAI failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // EXTERNAL CONTRACT CALL -- state updates must happen after this call

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FloatifyAccount
Line:        463
Source: 
>         //   trust the DAI and cDAI contracts to be secure, the risk is mitigated
>         uint256 _daiBalance = daiContract.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalWithdrawn = _daiBalance.add(totalWithdrawn); // right after this line we withdraw the full DAI balance

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        382
Source: 
>         // Configure the ICERC20 state variables
>         address _daiAddress = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359; // mainnet DAI address
>         ^^^^^^^^^^^^^^^^^^^
>         address _cdaiAddress = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC; // mainnet cDAI address

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        383
Source: 
>         address _daiAddress = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359; // mainnet DAI address
>         address _cdaiAddress = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC; // mainnet cDAI address
>         ^^^^^^^^^^^^^^^^^^^^
>         daiContract = ICERC20(_daiAddress);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        398
Source: 
>     function deposit() external onlyOwner {
>         uint _daiBalance = daiContract.balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^
>         totalDeposited = _daiBalance.add(totalDeposited);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        423
Source: 
>     function withdraw(address _withdrawalAddress) public onlyOwner {
>         uint256 _daiBalance = daiContract.balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(_withdrawalAddress, _daiBalance);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        436
Source: 
>         // 1b. Get the cDAI balance of this contract
>         uint256 _cdaiBalance = cdaiContract.balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^^^^^
>         // 1c. Call redeem() with the balance from step 1b

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        443
Source: 
>         require(cdaiContract.redeem(_cdaiBalance) == 0, "Redemption of all cDAI for DAI failed");
>         uint256 _daiBalance = daiContract.balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^^^^
>         totalWithdrawn = _daiBalance.add(totalWithdrawn); // right after this line we withdraw the full DAI balance

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        463
Source: 
>         //   trust the DAI and cDAI contracts to be secure, the risk is mitigated
>         uint256 _daiBalance = daiContract.balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^^^^
>         totalWithdrawn = _daiBalance.add(totalWithdrawn); // right after this line we withdraw the full DAI balance

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        488
Source: 
>         // Get total DAI the user has, i.e. DAI principal + interest
>         uint256 _daiTotal = cdaiContract.balanceOfUnderlying(address(this));
>         ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        491
Source: 
>         // Get DAI principal, i.e. deposited - withdrawn
>         uint256 _daiPrincipal = totalDeposited.sub(totalWithdrawn);
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        494
Source: 
>         // Get difference between the two, i.e., interest earned
>         uint256 _daiEarned = _daiTotal.sub(_daiPrincipal);
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        498
Source: 
>         // Divide by 1e18 so _exchangeRate lets us go from cDAI > DAI with proper amount of decimals
>         uint256 _exchangeRate = cdaiContract.exchangeRateCurrent().div(1e18);
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        501
Source: 
>         // Convert the amount of DAI earned into an amount of cDAI
>         uint256 _cdaiEarned = _daiEarned.div(_exchangeRate);
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FloatifyAccount
Line:        504
Source: 
>         // Withdraw a portion of that cDAI
>         uint256 _withdrawalAmount = _cdaiEarned.mul(interestFraction).div(1000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit WithdrawInterestFraction(_floatifyAddress, _withdrawalAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        388
Source: 
>         // Approve the cDAI contract to spend our DAI balance
>         bool daiApprovalResult = daiContract.approve(_cdaiAddress, 2**256-1);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(daiApprovalResult, "Failed to approve cDAI contract to spend DAI");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        398
Source: 
>     function deposit() external onlyOwner {
>         uint _daiBalance = daiContract.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalDeposited = _daiBalance.add(totalDeposited);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        401
Source: 
>         emit Deposit(_daiBalance);
>         require(cdaiContract.mint(_daiBalance) == 0, "Call to mint function failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        423
Source: 
>     function withdraw(address _withdrawalAddress) public onlyOwner {
>         uint256 _daiBalance = daiContract.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(_withdrawalAddress, _daiBalance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        425
Source: 
>         emit Withdraw(_withdrawalAddress, _daiBalance);
>         require(daiContract.transfer(_withdrawalAddress, _daiBalance), "Withrawal of DAI failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        436
Source: 
>         // 1b. Get the cDAI balance of this contract
>         uint256 _cdaiBalance = cdaiContract.balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // 1c. Call redeem() with the balance from step 1b

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        442
Source: 
>         //   trust the DAI and cDAI contracts to be secure, the risk is mitigated
>         require(cdaiContract.redeem(_cdaiBalance) == 0, "Redemption of all cDAI for DAI failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _daiBalance = daiContract.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        443
Source: 
>         require(cdaiContract.redeem(_cdaiBalance) == 0, "Redemption of all cDAI for DAI failed");
>         uint256 _daiBalance = daiContract.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalWithdrawn = _daiBalance.add(totalWithdrawn); // right after this line we withdraw the full DAI balance

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        459
Source: 
>         emit RedeemUnderlying(_daiAmount);
>         require(cdaiContract.redeemUnderlying(_daiAmount) == 0, "Redemption of some cDAI for DAI failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // EXTERNAL CONTRACT CALL -- state updates must happen after this call

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        463
Source: 
>         //   trust the DAI and cDAI contracts to be secure, the risk is mitigated
>         uint256 _daiBalance = daiContract.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalWithdrawn = _daiBalance.add(totalWithdrawn); // right after this line we withdraw the full DAI balance

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        488
Source: 
>         // Get total DAI the user has, i.e. DAI principal + interest
>         uint256 _daiTotal = cdaiContract.balanceOfUnderlying(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        498
Source: 
>         // Divide by 1e18 so _exchangeRate lets us go from cDAI > DAI with proper amount of decimals
>         uint256 _exchangeRate = cdaiContract.exchangeRateCurrent().div(1e18);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FloatifyAccount
Line:        506
Source: 
>         emit WithdrawInterestFraction(_floatifyAddress, _withdrawalAmount);
>         require(cdaiContract.transfer(_floatifyAddress, _withdrawalAmount), "Withrawal of cDAI failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FloatifyAccount
Line:        318
Source: 
>     // Therefore, this value should be updated when the deposit function is called
>     uint256 public totalDeposited;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FloatifyAccount
Line:        323
Source: 
>     // Therefore, this value should be updated when the redeemAndWithdraw functions are callled
>     uint256 public totalWithdrawn;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
