[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        288
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        297
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setOwner(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        288
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        297
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setOwner(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Refundable
Line:        320
Source: 
> 
>     function refundETH() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount = address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Refundable
Line:        326
Source: 
> 
>     function refundERC20(address tokenContract) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20 token = IERC20(tokenContract);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        288
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        297
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setOwner(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        350
Source: 
> 
>     function saleBeginTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _saleBeginTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        354
Source: 
> 
>     function saleEndTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _saleEndTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        358
Source: 
> 
>     function isOnSale() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return now < _saleEndTime && now >= _saleBeginTime && _soldAmount < _saleMaxAmount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        362
Source: 
> 
>     function saleRate() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _saleRate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        366
Source: 
> 
>     function saleMaxAmount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _saleMaxAmount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        370
Source: 
> 
>     function soldAmount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _soldAmount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        374
Source: 
> 
>     function setSwapSale(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint256 beginTime,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        288
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        297
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setOwner(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        419
Source: 
> 
>     function lpToken() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _lpToken;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        423
Source: 
> 
>     function loanRate() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanRate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        427
Source: 
> 
>     function userLoanLpt(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanLpt[user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        431
Source: 
> 
>     function userLoanEth(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanEth[user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        435
Source: 
> 
>     function setLpToken(address lp) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require(lp != address(0), "zero address is not allowed.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        440
Source: 
> 
>     function setLoanRate(uint256 rate) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _loanRate = rate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        288
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        297
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setOwner(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Refundable
Line:        320
Source: 
> 
>     function refundETH() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount = address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Refundable
Line:        326
Source: 
> 
>     function refundERC20(address tokenContract) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20 token = IERC20(tokenContract);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        350
Source: 
> 
>     function saleBeginTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _saleBeginTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        354
Source: 
> 
>     function saleEndTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _saleEndTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        362
Source: 
> 
>     function saleRate() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _saleRate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        366
Source: 
> 
>     function saleMaxAmount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _saleMaxAmount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        370
Source: 
> 
>     function soldAmount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _soldAmount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SwapSale
Line:        374
Source: 
> 
>     function setSwapSale(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint256 beginTime,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        419
Source: 
> 
>     function lpToken() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _lpToken;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        423
Source: 
> 
>     function loanRate() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanRate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        427
Source: 
> 
>     function userLoanLpt(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanLpt[user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        431
Source: 
> 
>     function userLoanEth(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanEth[user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        435
Source: 
> 
>     function setLpToken(address lp) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require(lp != address(0), "zero address is not allowed.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidLoan
Line:        440
Source: 
> 
>     function setLoanRate(uint256 rate) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _loanRate = rate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        553
Source: 
> 
>     function borrow(uint256 lptAmount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _borrow(msg.sender, lptAmount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        560
Source: 
>      */
>     function deposit() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Deposit(msg.sender, msg.value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        567
Source: 
>      */
>     function name() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        575
Source: 
>      */
>     function symbol() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        592
Source: 
>      */
>     function decimals() public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        599
Source: 
>      */
>     function totalSupply() public override view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        606
Source: 
>      */
>     function balanceOf(address account) public override view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        618
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        626
Source: 
>      */
>     function allowance(address owner, address spender) public virtual override view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        637
Source: 
>      */
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        654
Source: 
>      */
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        676
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KeepPro
Line:        695
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        297
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SwapSale
Line:        374
Source: 
> 
>     function setSwapSale(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint256 beginTime,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LiquidLoan
Line:        435
Source: 
> 
>     function setLpToken(address lp) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require(lp != address(0), "zero address is not allowed.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LiquidLoan
Line:        440
Source: 
> 
>     function setLoanRate(uint256 rate) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _loanRate = rate;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KeepPro
Line:        553
Source: 
> 
>     function borrow(uint256 lptAmount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _borrow(msg.sender, lptAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KeepPro
Line:        618
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KeepPro
Line:        654
Source: 
>      */
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KeepPro
Line:        676
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KeepPro
Line:        695
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Refundable
Line:        326
Source: 
> 
>     function refundERC20(address tokenContract) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20 token = IERC20(tokenContract);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SwapSale
Line:        374
Source: 
> 
>     function setSwapSale(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint256 beginTime,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LiquidLoan
Line:        427
Source: 
> 
>     function userLoanLpt(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanLpt[user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LiquidLoan
Line:        431
Source: 
> 
>     function userLoanEth(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanEth[user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LiquidLoan
Line:        435
Source: 
> 
>     function setLpToken(address lp) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require(lp != address(0), "zero address is not allowed.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LiquidLoan
Line:        440
Source: 
> 
>     function setLoanRate(uint256 rate) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _loanRate = rate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Refundable
Line:        326
Source: 
> 
>     function refundERC20(address tokenContract) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20 token = IERC20(tokenContract);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LiquidLoan
Line:        427
Source: 
> 
>     function userLoanLpt(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanLpt[user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LiquidLoan
Line:        431
Source: 
> 
>     function userLoanEth(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _loanEth[user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KeepPro
Line:        606
Source: 
>      */
>     function balanceOf(address account) public override view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KeepPro
Line:        626
Source: 
>      */
>     function allowance(address owner, address spender) public virtual override view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KeepPro
Line:        637
Source: 
>      */
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SwapSale
Line:        397
Source: 
>         _soldAmount = _soldAmount.add(amount);
>         IERC20(address(this)).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidLoan
Line:        452
Source: 
>         require(lptAmount > 0, "Can not borrow with 0");
>         require(IERC20(_lpToken).transferFrom(user, address(this), lptAmount), "transferFrom failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 ethAmount = lptAmount.mul(_loanRate).div(10000);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    LiquidLoan
Line:        458
Source: 
>         _loanLpt[user] = _loanLpt[user].add(lptAmount);
>         user.transfer(ethAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Borrow(user, lptAmount, ethAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    KeepPro
Line:        626
Source: 
>      */
>     function allowance(address owner, address spender) public virtual override view returns (uint256) {
>                        ^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    KeepPro
Line:        745
Source: 
>     function _approve(
>         address owner,
>         ^^^^^^^^^^^^^
>         address spender,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    LiquidLoan
Line:        458
Source: 
>         _loanLpt[user] = _loanLpt[user].add(lptAmount);
>         user.transfer(ethAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Borrow(user, lptAmount, ethAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    LiquidLoan
Line:        475
Source: 
>         if (msg.value > ethAmount) {
>             user.transfer(msg.value.sub(ethAmount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Refundable
Line:        322
Source: 
>         uint256 amount = address(this).balance;
>         msg.sender.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RefundETH(msg.sender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    LiquidLoan
Line:        475
Source: 
>         if (msg.value > ethAmount) {
>             user.transfer(msg.value.sub(ethAmount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    LiquidLoan
Line:        458
Source: 
>         _loanLpt[user] = _loanLpt[user].add(lptAmount);
>         user.transfer(ethAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Borrow(user, lptAmount, ethAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Refundable
Line:        322
Source: 
>         uint256 amount = address(this).balance;
>         msg.sender.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RefundETH(msg.sender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LiquidLoan
Line:        458
Source: 
>         _loanLpt[user] = _loanLpt[user].add(lptAmount);
>         user.transfer(ethAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Borrow(user, lptAmount, ethAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LiquidLoan
Line:        475
Source: 
>         if (msg.value > ethAmount) {
>             user.transfer(msg.value.sub(ethAmount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Refundable
Line:        328
Source: 
>         IERC20 token = IERC20(tokenContract);
>         uint256 amount = token.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LiquidLoan
Line:        446
Source: 
>         require(_lpToken != address(0) && _loanRate != 0, "Loan is not ready");
>         _borrow(user, IERC20(_lpToken).balanceOf(user));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LiquidLoan
Line:        452
Source: 
>         require(lptAmount > 0, "Can not borrow with 0");
>         require(IERC20(_lpToken).transferFrom(user, address(this), lptAmount), "transferFrom failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 ethAmount = lptAmount.mul(_loanRate).div(10000);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Refundable
Line:        328
Source: 
>         IERC20 token = IERC20(tokenContract);
>         uint256 amount = token.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(msg.sender, amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Refundable
Line:        329
Source: 
>         uint256 amount = token.balanceOf(address(this));
>         token.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RefundERC20(msg.sender, tokenContract, amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SwapSale
Line:        397
Source: 
>         _soldAmount = _soldAmount.add(amount);
>         IERC20(address(this)).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidLoan
Line:        473
Source: 
>         _loanEth[user] = _loanEth[user].sub(ethAmount);
>         IERC20(_lpToken).transfer(user, lptAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (msg.value > ethAmount) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SwapSale
Line:        344
Source: 
> 
>     uint256 internal _saleBeginTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _saleEndTime;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SwapSale
Line:        345
Source: 
>     uint256 internal _saleBeginTime;
>     uint256 internal _saleEndTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _saleRate;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SwapSale
Line:        346
Source: 
>     uint256 internal _saleEndTime;
>     uint256 internal _saleRate;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _saleMaxAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SwapSale
Line:        347
Source: 
>     uint256 internal _saleRate;
>     uint256 internal _saleMaxAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _soldAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LiquidLoan
Line:        414
Source: 
> 
>     address internal _lpToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _loanRate; // = eth/(10000 * lpt)

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LiquidLoan
Line:        415
Source: 
>     address internal _lpToken;
>     uint256 internal _loanRate; // = eth/(10000 * lpt)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) internal _loanLpt;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SwapSale
Line:        344
Source: 
> 
>     uint256 internal _saleBeginTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _saleEndTime;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SwapSale
Line:        345
Source: 
>     uint256 internal _saleBeginTime;
>     uint256 internal _saleEndTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _saleRate;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SwapSale
Line:        346
Source: 
>     uint256 internal _saleEndTime;
>     uint256 internal _saleRate;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _saleMaxAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SwapSale
Line:        347
Source: 
>     uint256 internal _saleRate;
>     uint256 internal _saleMaxAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _soldAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SwapSale
Line:        348
Source: 
>     uint256 internal _saleMaxAmount;
>     uint256 internal _soldAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LiquidLoan
Line:        414
Source: 
> 
>     address internal _lpToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _loanRate; // = eth/(10000 * lpt)

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LiquidLoan
Line:        415
Source: 
>     address internal _lpToken;
>     uint256 internal _loanRate; // = eth/(10000 * lpt)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) internal _loanLpt;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SwapSale
Line:        348
Source: 
>     uint256 internal _saleMaxAmount;
>     uint256 internal _soldAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    LiquidLoan
Line:        458
Source: 
>         _loanLpt[user] = _loanLpt[user].add(lptAmount);
>         user.transfer(ethAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Borrow(user, lptAmount, ethAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    LiquidLoan
Line:        475
Source: 
>         if (msg.value > ethAmount) {
>             user.transfer(msg.value.sub(ethAmount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SwapSale
Line:        396
Source: 
> 
>         _soldAmount = _soldAmount.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(address(this)).transfer(msg.sender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidLoan
Line:        456
Source: 
>         require(ethAmount <= address(this).balance, "Eth pool is not enough");
>         _loanEth[user] = _loanEth[user].add(ethAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _loanLpt[user] = _loanLpt[user].add(lptAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidLoan
Line:        457
Source: 
>         _loanEth[user] = _loanEth[user].add(ethAmount);
>         _loanLpt[user] = _loanLpt[user].add(lptAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user.transfer(ethAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidLoan
Line:        471
Source: 
>         uint256 lptAmount = _loanLpt[user].mul(ethAmount).div(ethLoan);
>         _loanLpt[user] = _loanLpt[user].sub(lptAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _loanEth[user] = _loanEth[user].sub(ethAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidLoan
Line:        472
Source: 
>         _loanLpt[user] = _loanLpt[user].sub(lptAmount);
>         _loanEth[user] = _loanEth[user].sub(ethAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(_lpToken).transfer(user, lptAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KeepPro
Line:        752
Source: 
> 
>         _allowances[owner][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(owner, spender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KeepPro
Line:        726
Source: 
> 
>         _balances[sender] = _balances[sender].sub(amount, "Transfer amount exceeds balance");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KeepPro
Line:        727
Source: 
>         _balances[sender] = _balances[sender].sub(amount, "Transfer amount exceeds balance");
>         _balances[recipient] = _balances[recipient].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Refundable
Line:        329
Source: 
>         uint256 amount = token.balanceOf(address(this));
>         token.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RefundERC20(msg.sender, tokenContract, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SwapSale
Line:        397
Source: 
>         _soldAmount = _soldAmount.add(amount);
>         IERC20(address(this)).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidLoan
Line:        446
Source: 
>         require(_lpToken != address(0) && _loanRate != 0, "Loan is not ready");
>         _borrow(user, IERC20(_lpToken).balanceOf(user));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidLoan
Line:        452
Source: 
>         require(lptAmount > 0, "Can not borrow with 0");
>         require(IERC20(_lpToken).transferFrom(user, address(this), lptAmount), "transferFrom failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 ethAmount = lptAmount.mul(_loanRate).div(10000);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidLoan
Line:        473
Source: 
>         _loanEth[user] = _loanEth[user].sub(ethAmount);
>         IERC20(_lpToken).transfer(user, lptAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (msg.value > ethAmount) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Refundable
Line:        329
Source: 
>         uint256 amount = token.balanceOf(address(this));
>         token.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RefundERC20(msg.sender, tokenContract, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SwapSale
Line:        397
Source: 
>         _soldAmount = _soldAmount.add(amount);
>         IERC20(address(this)).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidLoan
Line:        473
Source: 
>         _loanEth[user] = _loanEth[user].sub(ethAmount);
>         IERC20(_lpToken).transfer(user, lptAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (msg.value > ethAmount) {

[0m
