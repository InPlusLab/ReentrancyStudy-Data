Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Violation
Contract:    AddressConfig
Line:        572
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PauserRole
Line:        237
Source: 
> 
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        140
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        255
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        259
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        255
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        259
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        307
Source: 
> 	 */
> 	function paused() public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        330
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        338
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        140
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        255
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        259
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        330
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        338
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        490
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        140
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        490
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        140
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        255
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        259
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        330
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        338
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        175
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        251
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        255
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        251
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        255
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EternalStorage
Line:        359
Source: 
> 
> 	function changeOwner(address _newOwner) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == currentOwner, "not current owner");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        175
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        251
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        255
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        474
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        478
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        175
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        251
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        255
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        474
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        478
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        626
Source: 
> 	// RewardsAmount
> 	function setRewardsAmount(address _property, uint256 _value) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().withdraw());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        632
Source: 
> 
> 	function getRewardsAmount(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        649
Source: 
> 	// CumulativePrice
> 	function setCumulativePrice(address _property, uint256 _value) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		// The previously used function

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        657
Source: 
> 
> 	function getCumulativePrice(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        674
Source: 
> 	// WithdrawalLimitTotal
> 	function setWithdrawalLimitTotal(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        687
Source: 
> 
> 	function getWithdrawalLimitTotal(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        710
Source: 
> 	// WithdrawalLimitBalance
> 	function setWithdrawalLimitBalance(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        723
Source: 
> 
> 	function getWithdrawalLimitBalance(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        746
Source: 
> 	//LastWithdrawalPrice
> 	function setLastWithdrawalPrice(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        759
Source: 
> 
> 	function getLastWithdrawalPrice(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        782
Source: 
> 	//PendingWithdrawal
> 	function setPendingWithdrawal(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        795
Source: 
> 
> 	function getPendingWithdrawal(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        814
Source: 
> 	//LastCumulativeGlobalHoldersPrice
> 	function setLastCumulativeGlobalHoldersPrice(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        827
Source: 
> 
> 	function getLastCumulativeGlobalHoldersPrice(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        22
Source: 
> 
> 	function validateIllegalAddress(address _addr) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr != address(0), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        26
Source: 
> 
> 	function validateGroup(address _addr, address _groupAddr) external view {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        30
Source: 
> 
> 	function validateGroups(
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        41
Source: 
> 
> 	function validateAddress(address _addr, address _target) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr == _target, errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        45
Source: 
> 
> 	function validateAddresses(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        56
Source: 
> 
> 	function validate3Addresses(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        365
Source: 
> 	// *** Getter Methods ***
> 	function getUint(bytes32 _key) external view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return uIntStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        369
Source: 
> 
> 	function getString(bytes32 _key) external view returns (string memory) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return stringStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        373
Source: 
> 
> 	function getAddress(bytes32 _key) external view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return addressStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        377
Source: 
> 
> 	function getBytes(bytes32 _key) external view returns (bytes32) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return bytesStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        381
Source: 
> 
> 	function getBool(bytes32 _key) external view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return boolStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        385
Source: 
> 
> 	function getInt(bytes32 _key) external view returns (int256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return intStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        390
Source: 
> 	// *** Setter Methods ***
> 	function setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uIntStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        394
Source: 
> 
> 	function setString(bytes32 _key, string calldata _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        401
Source: 
> 
> 	function setAddress(bytes32 _key, address _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        408
Source: 
> 
> 	function setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytesStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        412
Source: 
> 
> 	function setBool(bytes32 _key, bool _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		boolStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        416
Source: 
> 
> 	function setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		intStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        421
Source: 
> 	// *** Delete Methods ***
> 	function deleteUint(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete uIntStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        425
Source: 
> 
> 	function deleteString(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete stringStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        429
Source: 
> 
> 	function deleteAddress(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete addressStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        433
Source: 
> 
> 	function deleteBytes(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete bytesStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        437
Source: 
> 
> 	function deleteBool(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete boolStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        441
Source: 
> 
> 	function deleteInt(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete intStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        519
Source: 
> 
> 	function setAllocator(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocator = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        523
Source: 
> 
> 	function setAllocatorStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocatorStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        527
Source: 
> 
> 	function setWithdraw(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdraw = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        531
Source: 
> 
> 	function setWithdrawStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdrawStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        535
Source: 
> 
> 	function setMarketFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        539
Source: 
> 
> 	function setMarketGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        543
Source: 
> 
> 	function setPropertyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        547
Source: 
> 
> 	function setPropertyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        551
Source: 
> 
> 	function setMetricsFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        555
Source: 
> 
> 	function setMetricsGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        559
Source: 
> 
> 	function setPolicyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        563
Source: 
> 
> 	function setPolicyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        567
Source: 
> 
> 	function setPolicySet(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policySet = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        571
Source: 
> 
> 	function setPolicy(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, policyFactory);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        576
Source: 
> 
> 	function setToken(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		token = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        580
Source: 
> 
> 	function setLockup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        584
Source: 
> 
> 	function setLockupStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockupStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        588
Source: 
> 
> 	function setVoteTimes(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimes = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        592
Source: 
> 
> 	function setVoteTimesStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimesStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        596
Source: 
> 
> 	function setVoteCounter(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounter = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        600
Source: 
> 
> 	function setVoteCounterStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounterStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    WithdrawStorage
Line:        623
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressValidator
Line:        20
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Killable
Line:        484
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AddressValidator
Line:        20
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        27
Source: 
> 	function validateGroup(address _addr, address _groupAddr) external view {
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        35
Source: 
> 	) external view {
> 		if (IGroup(_groupAddr1).isGroup(_addr)) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			return;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        38
Source: 
> 		}
> 		require(IGroup(_groupAddr2).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        627
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        652
Source: 
> 		// This function is only used in testing
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        679
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        715
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        751
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        787
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        819
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        479
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressConfig
Line:        572
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        479
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        627
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        629
Source: 
> 
> 		eternalStorage().setUint(getRewardsAmountKey(_property), _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        637
Source: 
> 	{
> 		return eternalStorage().getUint(getRewardsAmountKey(_property));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        652
Source: 
> 		// This function is only used in testing
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        654
Source: 
> 
> 		eternalStorage().setUint(getCumulativePriceKey(_property), _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        662
Source: 
> 	{
> 		return eternalStorage().getUint(getCumulativePriceKey(_property));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        679
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        681
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getWithdrawalLimitTotalKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        693
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getWithdrawalLimitTotalKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        715
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        717
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getWithdrawalLimitBalanceKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        729
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getWithdrawalLimitBalanceKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        751
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        753
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getLastWithdrawalPriceKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        765
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getLastWithdrawalPriceKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        787
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        789
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getPendingWithdrawalKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        801
Source: 
> 		return
> 			eternalStorage().getUint(getPendingWithdrawalKey(_property, _user));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        819
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        821
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getLastCumulativeGlobalHoldersPriceKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        832
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getLastCumulativeGlobalHoldersPriceKey(_property, _user)

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        294
Source: 
> 
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        447
Source: 
> contract UsingStorage is Ownable, Pausable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        498
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        499
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        500
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        501
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        502
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        503
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        504
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        505
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        506
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        507
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        508
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        509
Source: 
> 	address public policy;
> 	address public policyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policySet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        510
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        511
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        512
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        513
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        514
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        515
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        516
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        517
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        73
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        294
Source: 
> 
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        447
Source: 
> contract UsingStorage is Ownable, Pausable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        606
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        237
Source: 
> 
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        206
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        214
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        206
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        214
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        331
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        339
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        206
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        214
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        331
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        339
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        206
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        214
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        331
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        339
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressConfig
Line:        573
Source: 
> 		addressValidator().validateAddress(msg.sender, policyFactory);
> 		policy = _addr;
>   ^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        332
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        340
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        332
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        340
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UsingStorage
Line:        460
Source: 
> 	{
> 		require(paused() == false, "You cannot use that");
>           ^^^^^^^^
> 		return EternalStorage(_storage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AddressConfig
Line:        572
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        332
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        340
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        627
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        627
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        652
Source: 
> 		// This function is only used in testing
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        652
Source: 
> 		// This function is only used in testing
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        679
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        679
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        715
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        715
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        751
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        751
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        787
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        787
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        819
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        819
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UsingValidator
Line:        73
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        497
Source: 
> contract AddressConfig is Ownable, UsingValidator, Killable {
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocator;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        498
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        499
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        500
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        501
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        502
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        503
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        504
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        505
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        506
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        507
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        508
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        510
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        511
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        512
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        513
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        514
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        515
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        516
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        517
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
