Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        36
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != accountHash && codehash != 0x0);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FlipCoin
Line:        194
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address payable  addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    FlipCoin
Line:        202
Source: 
>         uint blockNumberOffset = uint(keccak256(abi.encodePacked(address(this).balance))) % 100;
>         return uint(blockhash(block.number - 10 - blockNumberOffset)) % 2 == 0 ? true : false;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        72
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FlipCoin
Line:        236
Source: 
> 
>         uint c = a * b;
>                  ^^^^^
>         require(c / a == b, "Multiplication overflow");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FlipCoin
Line:        142
Source: 
>         assert(valueToWithdraw > 0);
>         creator.transfer(valueToWithdraw);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         platformFeeAccumulated -= valueToWithdraw;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        72
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FlipCoin
Line:        81
Source: 
>     address payable private creator;
>     mapping (uint => uint) internal CHALLENGES;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address  => mapping (uint  => uint)) internal currentGames;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FlipCoin
Line:        137
Source: 
> 
>     function WithdrawPlatformFee () external onlyCreator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(platformFeeAccumulated > 0, "Not enought balance");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> pragma solidity 0.5.6;
> pragma solidity ^0.5.5;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FlipCoin
Line:        215
Source: 
>         if(random()) {
>             msg.sender.transfer(prize);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit GameResult(opponent, CHALLENGES[betIndex], msg.sender, opponent, prize, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FlipCoin
Line:        218
Source: 
>         } else {
>             opponent.transfer(prize);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             emit GameResult(opponent, CHALLENGES[betIndex], opponent, msg.sender, prize, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FlipCoin
Line:        142
Source: 
>         assert(valueToWithdraw > 0);
>         creator.transfer(valueToWithdraw);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         platformFeeAccumulated -= valueToWithdraw;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FlipCoin
Line:        184
Source: 
>         require(amountToWithdraw > 0, "At least one bet should be expired");
>         msg.sender.transfer(amountToWithdraw);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    FlipCoin
Line:        215
Source: 
>         if(random()) {
>             msg.sender.transfer(prize);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit GameResult(opponent, CHALLENGES[betIndex], msg.sender, opponent, prize, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    FlipCoin
Line:        218
Source: 
>         } else {
>             opponent.transfer(prize);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             emit GameResult(opponent, CHALLENGES[betIndex], opponent, msg.sender, prize, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FlipCoin
Line:        142
Source: 
>         assert(valueToWithdraw > 0);
>         creator.transfer(valueToWithdraw);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         platformFeeAccumulated -= valueToWithdraw;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FlipCoin
Line:        142
Source: 
>         assert(valueToWithdraw > 0);
>         creator.transfer(valueToWithdraw);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         platformFeeAccumulated -= valueToWithdraw;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FlipCoin
Line:        215
Source: 
>         if(random()) {
>             msg.sender.transfer(prize);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit GameResult(opponent, CHALLENGES[betIndex], msg.sender, opponent, prize, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FlipCoin
Line:        218
Source: 
>         } else {
>             opponent.transfer(prize);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             emit GameResult(opponent, CHALLENGES[betIndex], opponent, msg.sender, prize, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FlipCoin
Line:        184
Source: 
>         require(amountToWithdraw > 0, "At least one bet should be expired");
>         msg.sender.transfer(amountToWithdraw);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        37
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != accountHash && codehash != 0x0);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        72
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
