Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETHERBANK
Line:        26
Source: 
>     address payable public ownerWallet;
>     address payable public partner = address(0x917fE5cCF6cfa02B7251529112B133DeE6206F1E);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETHERBANK
Line:        38
Source: 
>     
>     Variables public vars;
>     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETHERBANK
Line:        59
Source: 
>     
>     uint min_join_price            =   0.10    ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHERBANK
Line:        123
Source: 
>     
>     function join(uint _referrerID) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender != ownerWallet,'owner cant join');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHERBANK
Line:        167
Source: 
>     }
>     function rejoin() public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender != ownerWallet,'owner cant join');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHERBANK
Line:        205
Source: 
>     }
>     function withdrawROI() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User NOT Exists");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHERBANK
Line:        391
Source: 
>     
>     function getNextROI_time(address _address) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[_address].isExist == true,'user not exists');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHERBANK
Line:        443
Source: 
>     }
>     function setROI_time(uint ROI_time) onlyOwner public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vars.ROI_time = ROI_time;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHERBANK
Line:        457
Source: 
>     }
>     function getDailyRefCount(uint256 i,address _address) public view returns (uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return dailypools[i].refCount[_address];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHERBANK
Line:        466
Source: 
>     //Protect the pool in case of hacking
>     function kill() onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerWallet.transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHERBANK
Line:        470
Source: 
>     }
>     function transferFund(uint256 amount) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount<=address(this).balance,'exceed contract balance');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHERBANK
Line:        443
Source: 
>     }
>     function setROI_time(uint ROI_time) onlyOwner public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vars.ROI_time = ROI_time;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHERBANK
Line:        457
Source: 
>     }
>     function getDailyRefCount(uint256 i,address _address) public view returns (uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return dailypools[i].refCount[_address];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ETHERBANK
Line:        151
Source: 
>         uint platformEarn = msg.value * 5 / 100;
>         uint partnerEarn = platformEarn * 15 / 100;
>                            ^^^^^^^^^^^^^^^^^
>         partner.transfer(partnerEarn);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ETHERBANK
Line:        246
Source: 
>                 dailypool = DailyPoolStructure({
>                     timeStamp:dailypools[vars.dailypoolcount].timeStamp + daycount*vars.ROI_time,
>                                                                           ^^^^^^^^^^^^^^^^^^^^^^
>                     top1:address(0),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ETHERBANK
Line:        192
Source: 
>         uint platformEarn = msg.value * 5 / 100;
>         uint partnerEarn = platformEarn * 15 / 100;
>                            ^^^^^^^^^^^^^^^^^
>         partner.transfer(partnerEarn);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ETHERBANK
Line:        368
Source: 
>        
>         uint level_price_local = LEVEL_PRICE[_level] * _amount / 100;
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ETHERBANK
Line:        377
Source: 
>         {
>             uint partnerEarn = level_price_local * 15 / 100;
>                                ^^^^^^^^^^^^^^^^^^^^^^
>             partner.transfer(partnerEarn);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ETHERBANK
Line:        417
Source: 
>         //1.5% perday
>         uint ROI = (users[_address].investment * days_number *15) / 1000;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint MaxWithdraw = (users[_address].investment * 350)/100;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ETHERBANK
Line:        417
Source: 
>         //1.5% perday
>         uint ROI = (users[_address].investment * days_number *15) / 1000;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint MaxWithdraw = (users[_address].investment * 350)/100;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ETHERBANK
Line:        374
Source: 
>         if (referer != ownerWallet)
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ETHERBANK
Line:        378
Source: 
>             uint partnerEarn = level_price_local * 15 / 100;
>             partner.transfer(partnerEarn);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sent = address(uint160(ownerWallet)).send(level_price_local - partnerEarn);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ETHERBANK
Line:        379
Source: 
>             partner.transfer(partnerEarn);
>             sent = address(uint160(ownerWallet)).send(level_price_local - partnerEarn);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ETHERBANK
Line:        152
Source: 
>         uint partnerEarn = platformEarn * 15 / 100;
>         partner.transfer(partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerWallet.transfer(platformEarn - partnerEarn);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ETHERBANK
Line:        153
Source: 
>         partner.transfer(partnerEarn);
>         ownerWallet.transfer(platformEarn - partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ETHERBANK
Line:        193
Source: 
>         uint partnerEarn = platformEarn * 15 / 100;
>         partner.transfer(partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerWallet.transfer(platformEarn - partnerEarn);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ETHERBANK
Line:        194
Source: 
>         partner.transfer(partnerEarn);
>         ownerWallet.transfer(platformEarn - partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        59
Source: 
>     
>     uint min_join_price            =   0.10    ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        61
Source: 
>     
>     mapping(uint => uint) public LEVEL_PRICE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        230
Source: 
> 
>     function CreateNewDailyPool() internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //create new dailypool 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        264
Source: 
>         uint256 refcount = dailypools[vars.dailypoolcount].refCount[ref];
>         uint256 top4_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top4];
>         ^^^^^^^^^^^^^^^^^^^^^
>         // if the amount is less than the last on the leaderboard, reject

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        269
Source: 
>         }
>         uint256 top3_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top3];
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 top2_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top2];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        270
Source: 
>         uint256 top3_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top3];
>         uint256 top2_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top2];
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 top1_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top1];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        271
Source: 
>         uint256 top2_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top2];
>         uint256 top1_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top1];
>         ^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        368
Source: 
>        
>         uint level_price_local = LEVEL_PRICE[_level] * _amount / 100;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        391
Source: 
>     
>     function getNextROI_time(address _address) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[_address].isExist == true,'user not exists');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        401
Source: 
>         //uint days_number = diff / (24*60*60)
>         uint nextROI_time = 0;
>         ^^^^^^^^^^^^^^^^^
>         if (diff!=0)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        407
Source: 
>         //get ROI in ether exclude withdrawn
>     function getLatestROI_ether(address _address) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[_address].isExist == true,'user not exists');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        415
Source: 
>         //ROI everyday every (24*60*60) seconds
>         uint days_number = diff / vars.ROI_time;
>         ^^^^^^^^^^^^^^^^
>         //1.5% perday

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        417
Source: 
>         //1.5% perday
>         uint ROI = (users[_address].investment * days_number *15) / 1000;
>         ^^^^^^^^
>         uint MaxWithdraw = (users[_address].investment * 350)/100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        418
Source: 
>         uint ROI = (users[_address].investment * days_number *15) / 1000;
>         uint MaxWithdraw = (users[_address].investment * 350)/100;
>         ^^^^^^^^^^^^^^^^
>         if (ROI >= MaxWithdraw)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        426
Source: 
>     //get ROI in ether after withdrawn
>     function getlatestROI_ether_available(address _address) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[_address].isExist == true,'user not exists');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        431
Source: 
>         }
>         uint ROI = getLatestROI_ether(_address);
>         ^^^^^^^^
>         uint total_earnings = ROI + users[_address].direct_ref_earnings + users[_address].top4_earnings + users[_address].matching_earnings;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        432
Source: 
>         uint ROI = getLatestROI_ether(_address);
>         uint total_earnings = ROI + users[_address].direct_ref_earnings + users[_address].top4_earnings + users[_address].matching_earnings;
>         ^^^^^^^^^^^^^^^^^^^
>         uint MaxWithdraw = (users[_address].investment * 350)/100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        433
Source: 
>         uint total_earnings = ROI + users[_address].direct_ref_earnings + users[_address].top4_earnings + users[_address].matching_earnings;
>         uint MaxWithdraw = (users[_address].investment * 350)/100;
>         ^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        443
Source: 
>     }
>     function setROI_time(uint ROI_time) onlyOwner public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vars.ROI_time = ROI_time;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHERBANK
Line:        450
Source: 
>         
>         uint MaxWithdraw = (users[_address].investment * 350)/100;
>         ^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHERBANK
Line:        59
Source: 
>     
>     uint min_join_price            =   0.10    ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ETHERBANK
Line:        220
Source: 
>        
>         if (msg.sender.send(available))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ETHERBANK
Line:        472
Source: 
>         require(amount<=address(this).balance,'exceed contract balance');
>         ownerWallet.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        374
Source: 
>         if (referer != ownerWallet)
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        378
Source: 
>             uint partnerEarn = level_price_local * 15 / 100;
>             partner.transfer(partnerEarn);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sent = address(uint160(ownerWallet)).send(level_price_local - partnerEarn);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        379
Source: 
>             partner.transfer(partnerEarn);
>             sent = address(uint160(ownerWallet)).send(level_price_local - partnerEarn);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        467
Source: 
>     function kill() onlyOwner public {
>         ownerWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(ownerWallet);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        152
Source: 
>         uint partnerEarn = platformEarn * 15 / 100;
>         partner.transfer(partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerWallet.transfer(platformEarn - partnerEarn);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        153
Source: 
>         partner.transfer(partnerEarn);
>         ownerWallet.transfer(platformEarn - partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        193
Source: 
>         uint partnerEarn = platformEarn * 15 / 100;
>         partner.transfer(partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerWallet.transfer(platformEarn - partnerEarn);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        194
Source: 
>         partner.transfer(partnerEarn);
>         ownerWallet.transfer(platformEarn - partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        374
Source: 
>         if (referer != ownerWallet)
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        378
Source: 
>             uint partnerEarn = level_price_local * 15 / 100;
>             partner.transfer(partnerEarn);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sent = address(uint160(ownerWallet)).send(level_price_local - partnerEarn);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        379
Source: 
>             partner.transfer(partnerEarn);
>             sent = address(uint160(ownerWallet)).send(level_price_local - partnerEarn);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        467
Source: 
>     function kill() onlyOwner public {
>         ownerWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(ownerWallet);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHERBANK
Line:        472
Source: 
>         require(amount<=address(this).balance,'exceed contract balance');
>         ownerWallet.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        152
Source: 
>         uint partnerEarn = platformEarn * 15 / 100;
>         partner.transfer(partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerWallet.transfer(platformEarn - partnerEarn);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        153
Source: 
>         partner.transfer(partnerEarn);
>         ownerWallet.transfer(platformEarn - partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        193
Source: 
>         uint partnerEarn = platformEarn * 15 / 100;
>         partner.transfer(partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerWallet.transfer(platformEarn - partnerEarn);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        194
Source: 
>         partner.transfer(partnerEarn);
>         ownerWallet.transfer(platformEarn - partnerEarn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        220
Source: 
>        
>         if (msg.sender.send(available))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        374
Source: 
>         if (referer != ownerWallet)
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        378
Source: 
>             uint partnerEarn = level_price_local * 15 / 100;
>             partner.transfer(partnerEarn);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sent = address(uint160(ownerWallet)).send(level_price_local - partnerEarn);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        379
Source: 
>             partner.transfer(partnerEarn);
>             sent = address(uint160(ownerWallet)).send(level_price_local - partnerEarn);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        467
Source: 
>     function kill() onlyOwner public {
>         ownerWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(ownerWallet);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHERBANK
Line:        472
Source: 
>         require(amount<=address(this).balance,'exceed contract balance');
>         ownerWallet.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ETHERBANK
Line:        38
Source: 
>     
>     Variables public vars;
>     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETHERBANK
Line:        370
Source: 
>         
>         vars.totalMatchingEarnings+=level_price_local;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[referer].matching_earnings += level_price_local;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETHERBANK
Line:        371
Source: 
>         vars.totalMatchingEarnings+=level_price_local;
>         users[referer].matching_earnings += level_price_local;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
