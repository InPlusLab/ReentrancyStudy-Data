Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        275
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != accountHash && codehash != 0x0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ChainlinkOracle
Line:        638
Source: 
> 
>   function getPriceXAU() public view returns (bool, uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // answer has 8 decimals, it is the price of 1 oz of gold in USD

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOracle
Line:        673
Source: 
> 
>   function getPriceAUSC() public view returns (bool, uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // returns the price with 6 decimals, but we want 18

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        383
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        383
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BasicRebaser
Line:        464
Source: 
> 
>   function setGovernance(address account) external onlyGov {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     governance = account;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BasicRebaser
Line:        468
Source: 
> 
>   function setSecondaryPool(address pool) external onlyGov {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     secondaryPool = pool;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BasicRebaser
Line:        547
Source: 
>       // AUSC is too expensive, this is a positive rebase increasing the supply
>       uint256 currentSupply = IERC20(ausc).totalSupply();
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 desiredSupply = currentSupply.mul(averageAUSC).div(averageXAU);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BasicRebaser
Line:        555
Source: 
>       uint256 delta = desiredSupply.mul(BASE).div(currentSupply).sub(BASE);
>       IAUSC(ausc).rebase(epoch, delta, true);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BasicRebaser
Line:        559
Source: 
>         // notify the pool escrow that tokens are available
>         IAUSC(ausc).mint(address(this), secondaryPoolBudget);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(ausc).safeApprove(secondaryPool, 0);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BasicRebaser
Line:        562
Source: 
>         IERC20(ausc).safeApprove(secondaryPool, secondaryPoolBudget);
>         IPoolEscrow(secondaryPool).notifySecondaryTokens(secondaryPoolBudget);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BasicRebaser
Line:        569
Source: 
>       // AUSC is too cheap, this is a negative rebase decreasing the supply
>       uint256 currentSupply = IERC20(ausc).totalSupply();
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 desiredSupply = currentSupply.mul(averageAUSC).div(averageXAU);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BasicRebaser
Line:        575
Source: 
>       uint256 delta = uint256(BASE).sub(desiredSupply.mul(BASE).div(currentSupply));
>       IAUSC(ausc).rebase(epoch, delta, false);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       epoch++;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ChainlinkOracle
Line:        641
Source: 
>     // if the round is not completed, updated at is 0
>     (,int256 answer,,uint256 updatedAt,) = AggregatorV3Interface(oracle).latestRoundData();
>       ^^^^^^^^^^^^^
>     // add 10 decimals at the end

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ChainlinkOracle
Line:        631
Source: 
> 
>   address public constant oracle = 0x214eD9Da11D2fbe465a6fc601a91E62EbEc1a0D6;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public constant ozToMg = 283495231;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ChainlinkOracle
Line:        632
Source: 
>   address public constant oracle = 0x214eD9Da11D2fbe465a6fc601a91E62EbEc1a0D6;
>   uint256 public constant ozToMg = 283495231;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public constant ozToMgPrecision = 1e4;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ChainlinkOracle
Line:        633
Source: 
>   uint256 public constant ozToMg = 283495231;
>   uint256 public constant ozToMgPrecision = 1e4;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ChainlinkOracle
Line:        641
Source: 
>     // if the round is not completed, updated at is 0
>     (,int256 answer,,uint256 updatedAt,) = AggregatorV3Interface(oracle).latestRoundData();
>       ^^^^^^^^^^^^^
>     // add 10 decimals at the end

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapOracle
Line:        662
Source: 
> 
>   address public constant oracle = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapOracle
Line:        663
Source: 
>   address public constant oracle = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
>   address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapOracle
Line:        664
Source: 
>   address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
>   address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public ausc;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        587
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkOracle
Line:        641
Source: 
>     // if the round is not completed, updated at is 0
>     (,int256 answer,,uint256 updatedAt,) = AggregatorV3Interface(oracle).latestRoundData();
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // add 10 decimals at the end

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniswapOracle
Line:        675
Source: 
>     // returns the price with 6 decimals, but we want 18
>     uint256[] memory amounts = IUniswapRouterV2(oracle).getAmountsOut(1e18, path);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return (ausc != address(0), amounts[2].mul(1e12));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainlinkOracle
Line:        641
Source: 
>     // if the round is not completed, updated at is 0
>     (,int256 answer,,uint256 updatedAt,) = AggregatorV3Interface(oracle).latestRoundData();
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // add 10 decimals at the end

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BasicRebaser
Line:        547
Source: 
>       // AUSC is too expensive, this is a positive rebase increasing the supply
>       uint256 currentSupply = IERC20(ausc).totalSupply();
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 desiredSupply = currentSupply.mul(averageAUSC).div(averageXAU);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        349
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BasicRebaser
Line:        569
Source: 
>       // AUSC is too cheap, this is a negative rebase decreasing the supply
>       uint256 currentSupply = IERC20(ausc).totalSupply();
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 desiredSupply = currentSupply.mul(averageAUSC).div(averageXAU);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BasicRebaser
Line:        555
Source: 
>       uint256 delta = desiredSupply.mul(BASE).div(currentSupply).sub(BASE);
>       IAUSC(ausc).rebase(epoch, delta, true);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BasicRebaser
Line:        559
Source: 
>         // notify the pool escrow that tokens are available
>         IAUSC(ausc).mint(address(this), secondaryPoolBudget);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(ausc).safeApprove(secondaryPool, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BasicRebaser
Line:        562
Source: 
>         IERC20(ausc).safeApprove(secondaryPool, secondaryPoolBudget);
>         IPoolEscrow(secondaryPool).notifySecondaryTokens(secondaryPoolBudget);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BasicRebaser
Line:        575
Source: 
>       uint256 delta = uint256(BASE).sub(desiredSupply.mul(BASE).div(currentSupply));
>       IAUSC(ausc).rebase(epoch, delta, false);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       epoch++;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        276
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != accountHash && codehash != 0x0);
>                 ^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BasicRebaser
Line:        438
Source: 
>   bool public noPending = true;
>   uint256 public averageXAU;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public averageAUSC;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BasicRebaser
Line:        439
Source: 
>   uint256 public averageXAU;
>   uint256 public averageAUSC;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public lastUpdate;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BasicRebaser
Line:        440
Source: 
>   uint256 public averageAUSC;
>   uint256 public lastUpdate;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   // uint256 public frequency = 1 hours;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicRebaser
Line:        538
Source: 
>     } else {
>       lastRebase = block.timestamp;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicRebaser
Line:        566
Source: 
>       }
>       epoch++;
>       ^^^^^^^
>     } else if (averageAUSC < lowThreshold) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicRebaser
Line:        576
Source: 
>       IAUSC(ausc).rebase(epoch, delta, false);
>       epoch++;
>       ^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        380
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        383
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        349
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        356
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        361
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        380
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        383
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        349
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        356
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        361
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        311
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        356
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        361
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    BasicRebaser
Line:        534
Source: 
>   function rebase() public {
>     if (lastRebase.add(REBASE_DELAY) > block.timestamp) {
>                                        ^^^^^^^^^^^^^^^
>       // do not rebase more than once per day

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    BasicRebaser
Line:        460
Source: 
>     secondaryPool = _secondaryPool;
>     lastRebase = block.timestamp;
>                  ^^^^^^^^^^^^^^^
>     governance = msg.sender;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    BasicRebaser
Line:        486
Source: 
> 
>     if (block.timestamp < lastUpdate + frequency) {
>         ^^^^^^^^^^^^^^^
>       // addition is running on timestamps, this will never overflow

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    BasicRebaser
Line:        504
Source: 
>     }
>     lastUpdate = block.timestamp;
>                  ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    BasicRebaser
Line:        538
Source: 
>     } else {
>       lastRebase = block.timestamp;
>                    ^^^^^^^^^^^^^^^
>     }

[0m
