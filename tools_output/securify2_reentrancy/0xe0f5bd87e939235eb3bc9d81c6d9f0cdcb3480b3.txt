Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    multiSignatureClient
Line:        32
Source: 
>         uint256 value;
>         assembly {
>         ^^^^^^^^^^
>             value := callvalue()

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    multiSignatureClient
Line:        44
Source: 
>     {
>         assembly {
>         ^^^^^^^^^^
>             sstore(position, value)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    multiSignatureClient
Line:        49
Source: 
>     function getValue(uint256 position) internal view returns (uint256 value) {
>         assembly {
>         ^^^^^^^^^^
>             value := sload(position)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    proxyOwner
Line:        90
Source: 
>         bytes32 position = proxyOwnerPosition;
>         assembly {
>         ^^^^^^^^^^
>             sstore(position, _newOwner)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    proxyOwner
Line:        95
Source: 
>         uint256 expired = now+ownerExpired;
>         assembly {
>         ^^^^^^^^^^
>             sstore(position, expired)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    proxyOwner
Line:        101
Source: 
>         bytes32 position = proxyOwnerPosition;
>         assembly {
>         ^^^^^^^^^^
>             _owner := sload(position)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    proxyOwner
Line:        120
Source: 
>         bytes32 position = proxyOriginPosition;
>         assembly {
>         ^^^^^^^^^^
>             sstore(position, _newOrigin)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    proxyOwner
Line:        126
Source: 
>         bytes32 position = proxyOriginPosition;
>         assembly {
>         ^^^^^^^^^^
>             _origin := sload(position)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    proxyOwner
Line:        132
Source: 
>         bytes32 position = ownerExpiredPosition;
>         assembly {
>         ^^^^^^^^^^
>             _expired := sload(position)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    proxyOwner
Line:        166
Source: 
>         bytes32 position = versionPositon;
>         assembly {
>         ^^^^^^^^^^
>             sstore(position, version_)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    proxyOwner
Line:        172
Source: 
>         bytes32 position = versionPositon;
>         assembly {
>         ^^^^^^^^^^
>             version_ := sload(position)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    proxyOwner
Line:        184
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    initializable
Line:        238
Source: 
>         uint256 cs;
>         assembly { cs := extcodesize(address) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return cs == 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    proxyOwner
Line:        82
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    proxyOwner
Line:        112
Source: 
>     }
>     function transferOrigin(address _newOrigin) public onlyOrigin
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    proxyOwner
Line:        130
Source: 
>     }
>     function ownerExpiredTime() public view returns (uint256 _expired) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 position = ownerExpiredPosition;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    proxyOwner
Line:        170
Source: 
>     }
>     function version() public view returns(uint256 version_){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 position = versionPositon;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    proxyOwner
Line:        82
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    proxyOwner
Line:        112
Source: 
>     }
>     function transferOrigin(address _newOrigin) public onlyOrigin
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    versionUpdater
Line:        256
Source: 
>     function implementationVersion() public pure returns (uint256);
>     function initialize() public initializer versionUpdate {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Halt
Line:        285
Source: 
>     /// @notice contribution period to stop or not.
>     function setHalt(bool halt) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenConverter
Line:        626
Source: 
> 
>     function update() versionUpdate public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenConverter
Line:        632
Source: 
>      */ 
>     function setParameter(address _cphxAddress,address _phxAddress,uint256 _timeSpan,uint256 _dispatchTimes,uint256 _txNum) originOnce public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_cphxAddress != address(0))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenConverter
Line:        654
Source: 
>      */
>     function getbackLeftphx(address reciever)  public onlyOrigin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 bal =  IERC20(phxAddress).balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenConverter
Line:        663
Source: 
>      */ 
>     function lockedBalanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return lockedBalances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenConverter
Line:        774
Source: 
>      */ 
>     function getClaimAbleBalance(address _user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(phxAddress!=address(0),"phx token should be set");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    multiSignatureClient
Line:        38
Source: 
>         uint256 index = getValue(uint256(msgHash));
>         uint256 newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newIndex > index, "multiSignatureClient : This tx is not aprroved");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenConverter
Line:        655
Source: 
>     function getbackLeftphx(address reciever)  public onlyOrigin {
>         uint256 bal =  IERC20(phxAddress).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(phxAddress).transfer(reciever,bal);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenConverter
Line:        656
Source: 
>         uint256 bal =  IERC20(phxAddress).balanceOf(address(this));
>         IERC20(phxAddress).transfer(reciever,bal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }  

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenConverter
Line:        675
Source: 
>         
>         IERC20(cphxAddress).transferFrom(msg.sender,address(this),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 idx = now.div(24*3600);//lockedIndexs[msg.sender].totalIdx;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenConverter
Line:        700
Source: 
> 
>         IERC20(phxAddress).transfer(msg.sender,divAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenConverter
Line:        654
Source: 
>      */
>     function getbackLeftphx(address reciever)  public onlyOrigin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 bal =  IERC20(phxAddress).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    proxyOwner
Line:        82
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    proxyOwner
Line:        112
Source: 
>     }
>     function transferOrigin(address _newOrigin) public onlyOrigin
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    proxyOwner
Line:        82
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    proxyOwner
Line:        112
Source: 
>     }
>     function transferOrigin(address _newOrigin) public onlyOrigin
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Halt
Line:        285
Source: 
>     /// @notice contribution period to stop or not.
>     function setHalt(bool halt) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenConverter
Line:        663
Source: 
>      */ 
>     function lockedBalanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return lockedBalances[account];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenConverter
Line:        675
Source: 
>         
>         IERC20(cphxAddress).transferFrom(msg.sender,address(this),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 idx = now.div(24*3600);//lockedIndexs[msg.sender].totalIdx;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenConverter
Line:        700
Source: 
> 
>         IERC20(phxAddress).transfer(msg.sender,divAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    multiSignatureClient
Line:        16
Source: 
> }
> contract multiSignatureClient{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant multiSignaturePositon = uint256(keccak256("org.Phoenix.multiSignature.storage"));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    multiSignatureClient
Line:        17
Source: 
> contract multiSignatureClient{
>     uint256 private constant multiSignaturePositon = uint256(keccak256("org.Phoenix.multiSignature.storage"));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event DebugEvent(address indexed from,bytes32 msgHash,uint256 value,uint256 value1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    proxyOwner
Line:        64
Source: 
> 
> contract proxyOwner is multiSignatureClient{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 private constant ownerExpiredPosition = keccak256("org.Phoenix.ownerExpired.storage");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    proxyOwner
Line:        65
Source: 
> contract proxyOwner is multiSignatureClient{
>     bytes32 private constant ownerExpiredPosition = keccak256("org.Phoenix.ownerExpired.storage");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 private constant versionPositon = keccak256("org.Phoenix.version.storage");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    proxyOwner
Line:        66
Source: 
>     bytes32 private constant ownerExpiredPosition = keccak256("org.Phoenix.ownerExpired.storage");
>     bytes32 private constant versionPositon = keccak256("org.Phoenix.version.storage");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 private constant proxyOwnerPosition  = keccak256("org.Phoenix.Owner.storage");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    proxyOwner
Line:        67
Source: 
>     bytes32 private constant versionPositon = keccak256("org.Phoenix.version.storage");
>     bytes32 private constant proxyOwnerPosition  = keccak256("org.Phoenix.Owner.storage");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 private constant proxyOriginPosition  = keccak256("org.Phoenix.Origin.storage");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    proxyOwner
Line:        68
Source: 
>     bytes32 private constant proxyOwnerPosition  = keccak256("org.Phoenix.Owner.storage");
>     bytes32 private constant proxyOriginPosition  = keccak256("org.Phoenix.Origin.storage");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant oncePosition  = uint256(keccak256("org.Phoenix.Once.storage"));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    proxyOwner
Line:        69
Source: 
>     bytes32 private constant proxyOriginPosition  = keccak256("org.Phoenix.Origin.storage");
>     uint256 private constant oncePosition  = uint256(keccak256("org.Phoenix.Once.storage"));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant ownerExpired =  90 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    proxyOwner
Line:        70
Source: 
>     uint256 private constant oncePosition  = uint256(keccak256("org.Phoenix.Once.storage"));
>     uint256 private constant ownerExpired =  90 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    proxyOwner
Line:        154
Source: 
>     }
>     modifier OwnerOrOrigin(){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (isOwner()){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    initializable
Line:        204
Source: 
>  */
> contract initializable {
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    versionUpdater
Line:        254
Source: 
> 
> contract versionUpdater is proxyOwner,initializable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function implementationVersion() public pure returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenConverterData
Line:        300
Source: 
> contract TokenConverterData is versionUpdater,Halt {
>     uint256 constant internal currentVersion = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function implementationVersion() public pure returns (uint256) 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenConverterData
Line:        306
Source: 
>     //the locjed reward info
>     struct lockedReward {
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint256 startTime; //this tx startTime for locking

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenConverterData
Line:        312
Source: 
>     
>     struct lockedIdx {
>     ^^^^^^^^^^^^^^^^^^
>         uint256 beginIdx;//the first index for user converting input claimable tx index 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SafeMath
Line:        500
Source: 
>     }
>     uint256 constant internal calDecimal = 1e18; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function mulPrice(uint256 value,uint256[2] memory prices,uint8 id)internal pure returns(uint256){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    proxyOwner
Line:        138
Source: 
>         require (msg.sender == txOrigin(),"proxyOwner: caller is not the tx origin!");
>         uint256 key = oncePosition+uint32(msg.sig);
>         ^^^^^^^^^^^
>         require (getValue(key)==0, "proxyOwner : This function must be invoked only once!");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    initializable
Line:        222
Source: 
> 
>         bool wasInitializing = initializing;
>         ^^^^^^^^^^^^^^^^^^^^
>         initializing = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    multiSignatureClient
Line:        38
Source: 
>         uint256 index = getValue(uint256(msgHash));
>         uint256 newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newIndex > index, "multiSignatureClient : This tx is not aprroved");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenConverter
Line:        655
Source: 
>     function getbackLeftphx(address reciever)  public onlyOrigin {
>         uint256 bal =  IERC20(phxAddress).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(phxAddress).transfer(reciever,bal);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenConverter
Line:        656
Source: 
>         uint256 bal =  IERC20(phxAddress).balanceOf(address(this));
>         IERC20(phxAddress).transfer(reciever,bal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }  

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenConverter
Line:        675
Source: 
>         
>         IERC20(cphxAddress).transferFrom(msg.sender,address(this),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 idx = now.div(24*3600);//lockedIndexs[msg.sender].totalIdx;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenConverter
Line:        700
Source: 
> 
>         IERC20(phxAddress).transfer(msg.sender,divAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenConverter
Line:        765
Source: 
>         //transfer back to user
>         IERC20(phxAddress).transfer(msg.sender,totalRet);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    multiSignatureClient
Line:        35
Source: 
>         }
>         bytes32 msgHash = keccak256(abi.encodePacked(msg.sender, address(this),value,msg.data));
>                                                                                ^^^^^
>         address multiSign = getMultiSignatureAddress();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    proxyOwner
Line:        185
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    initializable
Line:        239
Source: 
>         assembly { cs := extcodesize(address) }
>         return cs == 0;
>                ^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    initializable
Line:        209
Source: 
>     */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    initializable
Line:        214
Source: 
>     */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenConverterData
Line:        317
Source: 
>     
>     address public cphxAddress; //cphx token address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public phxAddress;  //phx token address

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenConverterData
Line:        318
Source: 
>     address public cphxAddress; //cphx token address
>     address public phxAddress;  //phx token address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public timeSpan = 30*24*3600;//time interval span time ,default one month

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    initializable
Line:        209
Source: 
>     */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    initializable
Line:        214
Source: 
>     */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMath
Line:        500
Source: 
>     }
>     uint256 constant internal calDecimal = 1e18; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function mulPrice(uint256 value,uint256[2] memory prices,uint8 id)internal pure returns(uint256){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenConverter
Line:        678
Source: 
> 
>         userTxIdxs[msg.sender].push(idx);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenConverter
Line:        690
Source: 
>         //index 0 to save the left token num
>         lockedAllRewards[msg.sender][idx].alloc[0] = lockedAllRewards[msg.sender][idx].alloc[0].add(amount.sub(divAmount));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 i=2;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenConverter
Line:        696
Source: 
>         }
>         lockedAllRewards[msg.sender][idx].alloc[i] = lockedAllRewards[msg.sender][idx].alloc[i].add(amount.sub(divAmount.mul(dispatchTimes-1)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    initializable
Line:        223
Source: 
>         bool wasInitializing = initializing;
>         initializing = true;
>         ^^^^^^^^^^^^^^^^^^^
>         initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    initializable
Line:        224
Source: 
>         initializing = true;
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    initializable
Line:        227
Source: 
>         _;
>         initializing = wasInitializing;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    multiSignatureClient
Line:        38
Source: 
>         uint256 index = getValue(uint256(msgHash));
>         uint256 newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newIndex > index, "multiSignatureClient : This tx is not aprroved");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    proxyOwner
Line:        118
Source: 
>     {
>         emit OriginTransferred(txOrigin(),_newOrigin);
>                                ^^^^^^^^^^
>         bytes32 position = proxyOriginPosition;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    proxyOwner
Line:        88
Source: 
>     {
>         emit OwnershipTransferred(owner(),_newOwner);
>                                   ^^^^^^^
>         bytes32 position = proxyOwnerPosition;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenConverter
Line:        656
Source: 
>         uint256 bal =  IERC20(phxAddress).balanceOf(address(this));
>         IERC20(phxAddress).transfer(reciever,bal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }  

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenConverter
Line:        675
Source: 
>         
>         IERC20(cphxAddress).transferFrom(msg.sender,address(this),amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 idx = now.div(24*3600);//lockedIndexs[msg.sender].totalIdx;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenConverter
Line:        700
Source: 
> 
>         IERC20(phxAddress).transfer(msg.sender,divAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenConverter
Line:        765
Source: 
>         //transfer back to user
>         IERC20(phxAddress).transfer(msg.sender,totalRet);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMath
Line:        500
Source: 
>     }
>     uint256 constant internal calDecimal = 1e18; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function mulPrice(uint256 value,uint256[2] memory prices,uint8 id)internal pure returns(uint256){

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    proxyOwner
Line:        69
Source: 
>     bytes32 private constant proxyOriginPosition  = keccak256("org.Phoenix.Origin.storage");
>     uint256 private constant oncePosition  = uint256(keccak256("org.Phoenix.Once.storage"));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant ownerExpired =  90 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMath
Line:        500
Source: 
>     }
>     uint256 constant internal calDecimal = 1e18; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function mulPrice(uint256 value,uint256[2] memory prices,uint8 id)internal pure returns(uint256){

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    initializable
Line:        209
Source: 
>     */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    initializable
Line:        214
Source: 
>     */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMath
Line:        500
Source: 
>     }
>     uint256 constant internal calDecimal = 1e18; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function mulPrice(uint256 value,uint256[2] memory prices,uint8 id)internal pure returns(uint256){

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Halt
Line:        271
Source: 
> contract Halt is proxyOwner {
>     bool private halted = false; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMath
Line:        500
Source: 
>     }
>     uint256 constant internal calDecimal = 1e18; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function mulPrice(uint256 value,uint256[2] memory prices,uint8 id)internal pure returns(uint256){

[0m
