Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        217
Source: 
>     uint256 cs;
>     assembly { cs := extcodesize(address) }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return cs == 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Manageable
Line:        348
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Pausable
Line:        410
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        240
Source: 
>      */
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        248
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        273
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        282
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        248
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        273
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        282
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        310
Source: 
>      */
>     function initialize(address sender) initializer public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        319
Source: 
>      */
>     function manager() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        334
Source: 
>      */
>     function isManagerOrOwner() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (msg.sender == _manager || isOwner());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        342
Source: 
>      */
>     function transferManagement(address newManager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newManager != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        248
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        273
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        282
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        310
Source: 
>      */
>     function initialize(address sender) initializer public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        319
Source: 
>      */
>     function manager() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        342
Source: 
>      */
>     function transferManagement(address newManager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newManager != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        366
Source: 
>     /// @param sender The address of the wallet to handle permission control
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Manageable.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        374
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        397
Source: 
>      */
>     function pause() public onlyManagerOrOwner whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        405
Source: 
>      */
>     function unpause() public onlyManagerOrOwner whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        248
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        273
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        282
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        310
Source: 
>      */
>     function initialize(address sender) initializer public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        319
Source: 
>      */
>     function manager() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Manageable
Line:        342
Source: 
>      */
>     function transferManagement(address newManager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newManager != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        366
Source: 
>     /// @param sender The address of the wallet to handle permission control
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Manageable.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        374
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        397
Source: 
>      */
>     function pause() public onlyManagerOrOwner whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        405
Source: 
>      */
>     function unpause() public onlyManagerOrOwner whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        521
Source: 
>     /// @param recipient The address of the recipient
>     function recoverETH(address payable recipient) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         recipient.transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        528
Source: 
>     /// @param recipient The address of the recipient
>     function recoverNMR(address payable recipient) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = INMR(_TOKEN).balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        666
Source: 
>     /// @param confidence The confidence threshold to submit with this submission
>     function stake(
>     ^^^^^^^^^^^^^^^
>         uint256 tournamentID,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        736
Source: 
>     /// @param tournamentID The index of the tournament
>     function createTournament(uint256 tournamentID) public onlyManagerOrOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        763
Source: 
>     /// @param stakeDeadline The UNIX timestamp deadline for users to stake their submissions
>     function createRound(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint256 tournamentID,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        794
Source: 
>     /// @return roundIDs The array of index of the tournament rounds
>     function getTournamentV2(uint256 tournamentID) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 creationTime,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        807
Source: 
>     /// @return stakeDeadline The UNIX timestamp of the round deadline for staked submissions
>     function getRoundV2(uint256 tournamentID, uint256 roundID) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 creationTime,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        824
Source: 
>     /// @return resolved True if the staked submission has been resolved
>     function getStakeV2(uint256 tournamentID, uint256 roundID, address staker, bytes32 tag) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        851
Source: 
>     /// @return resolutionTime The UNIX timestamp of the round start time for resolutions
>     function getRoundV1(uint256 tournamentID, uint256 roundID) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 creationTime,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        868
Source: 
>     /// @return resolved True if the staked submission has been resolved
>     function getStakeV1(uint256 tournamentID, uint256 roundID, address staker, bytes32 tag) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 confidence,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        522
Source: 
>     function recoverETH(address payable recipient) public onlyOwner {
>         recipient.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        529
Source: 
>     function recoverNMR(address payable recipient) public onlyOwner {
>         uint256 balance = INMR(_TOKEN).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount = balance.sub(totalStaked);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        531
Source: 
>         uint256 amount = balance.sub(totalStaked);
>         require(INMR(_TOKEN).transfer(recipient, amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        637
Source: 
>         _stake(tournamentID, roundID, staker, tag, stakeAmount, confidence);
>         IRelay(_RELAY).withdraw(staker, address(this), stakeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        652
Source: 
>     ) public onlyManagerOrOwner whenNotPaused {
>         IRelay(_RELAY).withdraw(from, to, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        723
Source: 
>         require(
>             INMR(_TOKEN).transfer(staker, releaseAmount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake was not succesfully released"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        939
Source: 
>     function _burn(uint256 _value) internal {
>         if (INMR(_TOKEN).contractUpgradable()) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(INMR(_TOKEN).transfer(address(0), _value));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        940
Source: 
>         if (INMR(_TOKEN).contractUpgradable()) {
>             require(INMR(_TOKEN).transfer(address(0), _value));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        942
Source: 
>         } else {
>             require(INMR(_TOKEN).mint(_value), "burn not successful");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        674
Source: 
>         _stake(tournamentID, roundID, msg.sender, tag, stakeAmount, confidence);
>         require(INMR(_TOKEN).transferFrom(msg.sender, address(this), stakeAmount),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake was not successfully transfered");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        842
Source: 
>     ) {
>         return INMR(_TOKEN).getTournament(tournamentID);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        856
Source: 
>     ) {
>         return INMR(_TOKEN).getRound(tournamentID, roundID);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        874
Source: 
>     ) {
>         return INMR(_TOKEN).getStake(tournamentID, roundID, staker, tag);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        240
Source: 
>      */
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        282
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        240
Source: 
>      */
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        282
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Manageable
Line:        310
Source: 
>      */
>     function initialize(address sender) initializer public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        240
Source: 
>      */
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        282
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Manageable
Line:        310
Source: 
>      */
>     function initialize(address sender) initializer public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Pausable
Line:        366
Source: 
>     /// @param sender The address of the wallet to handle permission control
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Manageable.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        240
Source: 
>      */
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        282
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Manageable
Line:        310
Source: 
>      */
>     function initialize(address sender) initializer public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Pausable
Line:        366
Source: 
>     /// @param sender The address of the wallet to handle permission control
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Manageable.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        528
Source: 
>     /// @param recipient The address of the recipient
>     function recoverNMR(address payable recipient) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = INMR(_TOKEN).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        545
Source: 
>     /// @param confidence The confidence threshold to submit with this submission
>     function batchStakeOnBehalf(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] calldata tournamentID,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        571
Source: 
>     /// @param value The amount of NMR in wei
>     function batchWithdraw(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address[] calldata from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        593
Source: 
>     /// @param burnAmount The amount of NMR in wei to burn from the stake
>     function batchResolveStake(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] calldata tournamentID,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        628
Source: 
>     /// @param confidence The confidence threshold to submit with this submission
>     function stakeOnBehalf(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tournamentID,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        647
Source: 
>     /// @param value The amount of NMR in wei
>     function withdraw(
>     ^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        666
Source: 
>     /// @param confidence The confidence threshold to submit with this submission
>     function stake(
>     ^^^^^^^^^^^^^^^
>         uint256 tournamentID,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        838
Source: 
>     /// @return roundIDs The array of index of the tournament rounds
>     function getTournamentV1(uint256 tournamentID) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 creationTime,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        851
Source: 
>     /// @return resolutionTime The UNIX timestamp of the round start time for resolutions
>     function getRoundV1(uint256 tournamentID, uint256 roundID) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 creationTime,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        868
Source: 
>     /// @return resolved True if the staked submission has been resolved
>     function getStakeV1(uint256 tournamentID, uint256 roundID, address staker, bytes32 tag) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 confidence,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        521
Source: 
>     /// @param recipient The address of the recipient
>     function recoverETH(address payable recipient) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         recipient.transfer(address(this).balance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        794
Source: 
>     /// @return roundIDs The array of index of the tournament rounds
>     function getTournamentV2(uint256 tournamentID) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 creationTime,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        807
Source: 
>     /// @return stakeDeadline The UNIX timestamp of the round deadline for staked submissions
>     function getRoundV2(uint256 tournamentID, uint256 roundID) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 creationTime,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        824
Source: 
>     /// @return resolved True if the staked submission has been resolved
>     function getStakeV2(uint256 tournamentID, uint256 roundID, address staker, bytes32 tag) public view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        723
Source: 
>         require(
>             INMR(_TOKEN).transfer(staker, releaseAmount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake was not succesfully released"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Manageable
Line:        348
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Pausable
Line:        410
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5.0 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    Manageable
Line:        348
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    Pausable
Line:        410
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        200
Source: 
> 
>     bool wasInitializing = initializing;
>     ^^^^^^^^^^^^^^^^^^^^
>     initializing = true;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        488
Source: 
>     /// @dev Throws if the roundID given is not greater than the latest one
>     modifier onlyNewRounds(uint256 tournamentID, uint256 roundID) {
>                            ^^^^^^^^^^^^^^^^^^^^
>         uint256 length = tournaments[tournamentID].roundIDs.length;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        488
Source: 
>     /// @dev Throws if the roundID given is not greater than the latest one
>     modifier onlyNewRounds(uint256 tournamentID, uint256 roundID) {
>                                                  ^^^^^^^^^^^^^^^
>         uint256 length = tournaments[tournamentID].roundIDs.length;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        489
Source: 
>     modifier onlyNewRounds(uint256 tournamentID, uint256 roundID) {
>         uint256 length = tournaments[tournamentID].roundIDs.length;
>         ^^^^^^^^^^^^^^
>         if (length > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        491
Source: 
>         if (length > 0) {
>             uint256 lastRoundID = tournaments[tournamentID].roundIDs[length - 1];
>             ^^^^^^^^^^^^^^^^^^^
>             require(roundID > lastRoundID, "roundID must be increasing");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        498
Source: 
>     /// @dev Throws if the uint256 input is bigger than the max uint128
>     modifier onlyUint128(uint256 a) {
>                          ^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        923
Source: 
>         require(stakeAmount > 0 || currentStake > 0, "Cannot stake zero NMR");
>         require(confidence <= 1000000000, "Confidence is capped at 9 decimal places");
>                               ^^^^^^^^^^
>         require(currentConfidence <= confidence, "Confidence can only be increased");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        522
Source: 
>     function recoverETH(address payable recipient) public onlyOwner {
>         recipient.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        522
Source: 
>     function recoverETH(address payable recipient) public onlyOwner {
>         recipient.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        522
Source: 
>     function recoverETH(address payable recipient) public onlyOwner {
>         recipient.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        529
Source: 
>     function recoverNMR(address payable recipient) public onlyOwner {
>         uint256 balance = INMR(_TOKEN).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount = balance.sub(totalStaked);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        531
Source: 
>         uint256 amount = balance.sub(totalStaked);
>         require(INMR(_TOKEN).transfer(recipient, amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        723
Source: 
>         require(
>             INMR(_TOKEN).transfer(staker, releaseAmount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake was not succesfully released"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        939
Source: 
>     function _burn(uint256 _value) internal {
>         if (INMR(_TOKEN).contractUpgradable()) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(INMR(_TOKEN).transfer(address(0), _value));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        940
Source: 
>         if (INMR(_TOKEN).contractUpgradable()) {
>             require(INMR(_TOKEN).transfer(address(0), _value));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        942
Source: 
>         } else {
>             require(INMR(_TOKEN).mint(_value), "burn not successful");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        674
Source: 
>         _stake(tournamentID, roundID, msg.sender, tag, stakeAmount, confidence);
>         require(INMR(_TOKEN).transferFrom(msg.sender, address(this), stakeAmount),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake was not successfully transfered");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        637
Source: 
>         _stake(tournamentID, roundID, staker, tag, stakeAmount, confidence);
>         IRelay(_RELAY).withdraw(staker, address(this), stakeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        652
Source: 
>     ) public onlyManagerOrOwner whenNotPaused {
>         IRelay(_RELAY).withdraw(from, to, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        842
Source: 
>     ) {
>         return INMR(_TOKEN).getTournament(tournamentID);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        856
Source: 
>     ) {
>         return INMR(_TOKEN).getRound(tournamentID, roundID);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        874
Source: 
>     ) {
>         return INMR(_TOKEN).getStake(tournamentID, roundID, staker, tag);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        218
Source: 
>     assembly { cs := extcodesize(address) }
>     return cs == 0;
>            ^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        187
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        192
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        232
Source: 
> contract Ownable is Initializable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        187
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        192
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        232
Source: 
> contract Ownable is Initializable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Manageable
Line:        302
Source: 
> contract Manageable is Initializable, Ownable {
>     address private _manager;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        187
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        192
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        232
Source: 
> contract Ownable is Initializable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Manageable
Line:        302
Source: 
> contract Manageable is Initializable, Ownable {
>     address private _manager;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        362
Source: 
> 
>     bool private _paused;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        187
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        192
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        232
Source: 
> contract Ownable is Initializable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Manageable
Line:        302
Source: 
> contract Manageable is Initializable, Ownable {
>     address private _manager;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        362
Source: 
> 
>     bool private _paused;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        422
Source: 
> 
>     uint256 public totalStaked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        187
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        192
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Manageable
Line:        348
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Manageable
Line:        348
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Pausable
Line:        410
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Manageable
Line:        348
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Pausable
Line:        410
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        926
Source: 
> 
>         stakeObj.amount = uint128(currentStake.add(stakeAmount));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakeObj.confidence = uint32(confidence);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        927
Source: 
>         stakeObj.amount = uint128(currentStake.add(stakeAmount));
>         stakeObj.confidence = uint32(confidence);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NumeraiTournamentV2
Line:        929
Source: 
> 
>         totalStaked = totalStaked.add(stakeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        201
Source: 
>     bool wasInitializing = initializing;
>     initializing = true;
>     ^^^^^^^^^^^^^^^^^^^
>     initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        202
Source: 
>     initializing = true;
>     initialized = true;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        241
Source: 
>     function initialize(address sender) public initializer {
>         _owner = sender;
>         ^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(address(0), _owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        206
Source: 
> 
>     initializing = wasInitializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        201
Source: 
>     bool wasInitializing = initializing;
>     initializing = true;
>     ^^^^^^^^^^^^^^^^^^^
>     initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        202
Source: 
>     initializing = true;
>     initialized = true;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        241
Source: 
>     function initialize(address sender) public initializer {
>         _owner = sender;
>         ^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(address(0), _owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        206
Source: 
> 
>     initializing = wasInitializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        201
Source: 
>     bool wasInitializing = initializing;
>     initializing = true;
>     ^^^^^^^^^^^^^^^^^^^
>     initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        202
Source: 
>     initializing = true;
>     initialized = true;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Manageable
Line:        312
Source: 
>         Ownable.initialize(sender);
>         _manager = sender;
>         ^^^^^^^^^^^^^^^^^
>         emit ManagementTransferred(address(0), _manager);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        206
Source: 
> 
>     initializing = wasInitializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        201
Source: 
>     bool wasInitializing = initializing;
>     initializing = true;
>     ^^^^^^^^^^^^^^^^^^^
>     initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        202
Source: 
>     initializing = true;
>     initialized = true;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        241
Source: 
>     function initialize(address sender) public initializer {
>         _owner = sender;
>         ^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(address(0), _owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        206
Source: 
> 
>     initializing = wasInitializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        201
Source: 
>     bool wasInitializing = initializing;
>     initializing = true;
>     ^^^^^^^^^^^^^^^^^^^
>     initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        202
Source: 
>     initializing = true;
>     initialized = true;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Manageable
Line:        312
Source: 
>         Ownable.initialize(sender);
>         _manager = sender;
>         ^^^^^^^^^^^^^^^^^
>         emit ManagementTransferred(address(0), _manager);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        206
Source: 
> 
>     initializing = wasInitializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        201
Source: 
>     bool wasInitializing = initializing;
>     initializing = true;
>     ^^^^^^^^^^^^^^^^^^^
>     initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        202
Source: 
>     initializing = true;
>     initialized = true;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Pausable
Line:        368
Source: 
>         Manageable.initialize(sender);
>         _paused = false;
>         ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        206
Source: 
> 
>     initializing = wasInitializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        201
Source: 
>     bool wasInitializing = initializing;
>     initializing = true;
>     ^^^^^^^^^^^^^^^^^^^
>     initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        202
Source: 
>     initializing = true;
>     initialized = true;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        241
Source: 
>     function initialize(address sender) public initializer {
>         _owner = sender;
>         ^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(address(0), _owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        206
Source: 
> 
>     initializing = wasInitializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        201
Source: 
>     bool wasInitializing = initializing;
>     initializing = true;
>     ^^^^^^^^^^^^^^^^^^^
>     initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        202
Source: 
>     initializing = true;
>     initialized = true;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Manageable
Line:        312
Source: 
>         Ownable.initialize(sender);
>         _manager = sender;
>         ^^^^^^^^^^^^^^^^^
>         emit ManagementTransferred(address(0), _manager);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        206
Source: 
> 
>     initializing = wasInitializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        201
Source: 
>     bool wasInitializing = initializing;
>     initializing = true;
>     ^^^^^^^^^^^^^^^^^^^
>     initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        202
Source: 
>     initializing = true;
>     initialized = true;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Pausable
Line:        368
Source: 
>         Manageable.initialize(sender);
>         _paused = false;
>         ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        206
Source: 
> 
>     initializing = wasInitializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Manageable
Line:        335
Source: 
>     function isManagerOrOwner() public view returns (bool) {
>         return (msg.sender == _manager || isOwner());
>                                           ^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        637
Source: 
>         _stake(tournamentID, roundID, staker, tag, stakeAmount, confidence);
>         IRelay(_RELAY).withdraw(staker, address(this), stakeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NumeraiTournamentV2
Line:        652
Source: 
>     ) public onlyManagerOrOwner whenNotPaused {
>         IRelay(_RELAY).withdraw(from, to, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        187
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        192
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Manageable
Line:        348
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Manageable
Line:        348
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Pausable
Line:        410
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        222
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        296
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Manageable
Line:        348
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Pausable
Line:        410
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    NumeraiTournamentV2
Line:        919
Source: 
>         require(
>             uint256(round.stakeDeadline) > block.timestamp,
>                                            ^^^^^^^^^^^^^^^
>             "Cannot stake after stake deadline"

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    NumeraiTournamentV2
Line:        714
Source: 
>                 tournaments[tournamentID].rounds[roundID].stakeDeadline
>             ) < block.timestamp,
>                 ^^^^^^^^^^^^^^^
>             "Cannot resolve before stake deadline"

[0m
