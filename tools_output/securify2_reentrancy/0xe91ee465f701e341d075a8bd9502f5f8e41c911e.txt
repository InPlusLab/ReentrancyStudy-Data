Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PrivateSale
Line:        137
Source: 
>     address payable public owner;
>     uint256 public ratio = 9000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public token;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrivateSale
Line:        165
Source: 
> 
>     function permit(address account) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         permitted[account] += limit;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrivateSale
Line:        169
Source: 
>     
>     function setLimits(uint256 min, uint256 max) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minimum = min;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrivateSale
Line:        178
Source: 
>     
>     function buyWithUSDC(uint256 amountUSDC) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrivateSale
Line:        208
Source: 
>     
>     function endSale() onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tokens = token.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PrivateSale
Line:        178
Source: 
>     
>     function buyWithUSDC(uint256 amountUSDC) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PrivateSale
Line:        165
Source: 
> 
>     function permit(address account) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         permitted[account] += limit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PrivateSale
Line:        169
Source: 
>     
>     function setLimits(uint256 min, uint256 max) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minimum = min;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        195
Source: 
> 
>         (uint112 a, uint112 b, uint32 c) = uni.getReserves();
>                                            ^^^^^^^^^^^^^^^^^
>         uint256 tokens = msg.value.mul(ratio).mul(a).div(b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        198
Source: 
>         require(!saleEnded, "Sale has already ended");
>         require(tokens <= token.balanceOf(address(this)), "Not enough tokens for sale");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokens <= permitted[msg.sender], "The amount exceeds your limit");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        202
Source: 
>         permitted[msg.sender] -= tokens;
>         token.transfer(msg.sender, tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokensSold += tokens;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        182
Source: 
>         require(!saleEnded, "Sale has already ended");
>         require(tokens <= token.balanceOf(address(this)), "Not enough tokens for sale");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokens <= permitted[msg.sender], "The amount exceeds your limit");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        186
Source: 
>         permitted[msg.sender] -= tokens;
>         require(usdc.transferFrom(msg.sender, address(this), amountUSDC));        
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.transfer(msg.sender, tokens));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        187
Source: 
>         require(usdc.transferFrom(msg.sender, address(this), amountUSDC));        
>         require(token.transfer(msg.sender, tokens));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokensSold += tokens;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        209
Source: 
>     function endSale() onlyOwner public {
>         uint256 tokens = token.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 usd = usdc.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        210
Source: 
>         uint256 tokens = token.balanceOf(address(this));
>         uint256 usd = usdc.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 eth = address(this).balance;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        212
Source: 
>         uint256 eth = address(this).balance;
>         token.transfer(owner, tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdc.transfer(owner, usd);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PrivateSale
Line:        213
Source: 
>         token.transfer(owner, tokens);
>         usdc.transfer(owner, usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(eth);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    PrivateSale
Line:        214
Source: 
>         usdc.transfer(owner, usd);
>         owner.transfer(eth);
>         ^^^^^^^^^^^^^^^^^^^
>         saleEnded = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        94
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        95
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        112
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        77
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        130
Source: 
> 
> pragma solidity ^0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PrivateSale
Line:        137
Source: 
>     address payable public owner;
>     uint256 public ratio = 9000000000000;
>                            ^^^^^^^^^^^^^
>     IERC20 public token;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    PrivateSale
Line:        214
Source: 
>         usdc.transfer(owner, usd);
>         owner.transfer(eth);
>         ^^^^^^^^^^^^^^^^^^^
>         saleEnded = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PrivateSale
Line:        214
Source: 
>         usdc.transfer(owner, usd);
>         owner.transfer(eth);
>         ^^^^^^^^^^^^^^^^^^^
>         saleEnded = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PrivateSale
Line:        214
Source: 
>         usdc.transfer(owner, usd);
>         owner.transfer(eth);
>         ^^^^^^^^^^^^^^^^^^^
>         saleEnded = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PrivateSale
Line:        195
Source: 
> 
>         (uint112 a, uint112 b, uint32 c) = uni.getReserves();
>                                            ^^^^^^^^^^^^^^^^^
>         uint256 tokens = msg.value.mul(ratio).mul(a).div(b);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PrivateSale
Line:        198
Source: 
>         require(!saleEnded, "Sale has already ended");
>         require(tokens <= token.balanceOf(address(this)), "Not enough tokens for sale");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokens <= permitted[msg.sender], "The amount exceeds your limit");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PrivateSale
Line:        182
Source: 
>         require(!saleEnded, "Sale has already ended");
>         require(tokens <= token.balanceOf(address(this)), "Not enough tokens for sale");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokens <= permitted[msg.sender], "The amount exceeds your limit");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PrivateSale
Line:        186
Source: 
>         permitted[msg.sender] -= tokens;
>         require(usdc.transferFrom(msg.sender, address(this), amountUSDC));        
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.transfer(msg.sender, tokens));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PrivateSale
Line:        187
Source: 
>         require(usdc.transferFrom(msg.sender, address(this), amountUSDC));        
>         require(token.transfer(msg.sender, tokens));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokensSold += tokens;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PrivateSale
Line:        202
Source: 
>         permitted[msg.sender] -= tokens;
>         token.transfer(msg.sender, tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokensSold += tokens;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PrivateSale
Line:        209
Source: 
>     function endSale() onlyOwner public {
>         uint256 tokens = token.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 usd = usdc.balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PrivateSale
Line:        210
Source: 
>         uint256 tokens = token.balanceOf(address(this));
>         uint256 usd = usdc.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 eth = address(this).balance;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PrivateSale
Line:        212
Source: 
>         uint256 eth = address(this).balance;
>         token.transfer(owner, tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdc.transfer(owner, usd);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PrivateSale
Line:        213
Source: 
>         token.transfer(owner, tokens);
>         usdc.transfer(owner, usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(eth);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PrivateSale
Line:        141
Source: 
>     IUniswapV2Pair public uni;
>     uint256 public tokensSold;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public saleEnded;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PrivateSale
Line:        142
Source: 
>     uint256 public tokensSold;
>     bool public saleEnded;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint256 public minimum = 45000 ether;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PrivateSale
Line:        202
Source: 
>         permitted[msg.sender] -= tokens;
>         token.transfer(msg.sender, tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokensSold += tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PrivateSale
Line:        212
Source: 
>         uint256 eth = address(this).balance;
>         token.transfer(owner, tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdc.transfer(owner, usd);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PrivateSale
Line:        213
Source: 
>         token.transfer(owner, tokens);
>         usdc.transfer(owner, usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(eth);

[0m
