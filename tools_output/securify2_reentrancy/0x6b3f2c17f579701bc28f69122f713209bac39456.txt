Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        180
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        440
Source: 
> //    }
>    function Carradd(address payable token) public onlywaiter(){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          Carr.push(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        451
Source: 
> 
>    function getCarr(uint a)public view returns(address){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return Carr[a];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        459
Source: 
> 
>     function release(address a,uint amount,uint16 b,uint bamunt) public payable{
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_otc[msg.sender].Oamount == 0, "Please cancel");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        471
Source: 
> 
>     function OUTrelease() public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_otc[msg.sender].Oamount > 0, "Cannot stake 0");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        481
Source: 
> 
>    function getrelease(address a)public view returns(address,uint16,uint,uint){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return (_otc[a].O,_otc[a].C,_otc[a].Oamount,_otc[a].Camount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        485
Source: 
> 
>     function buyreleaseETH(address payable a)public payable{
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_otc[a].Oamount > 0,"Invalid order");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        500
Source: 
> 
>     function buyrelease(address payable a)public payable{
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_otc[a].Oamount > 0,"Invalid order");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        516
Source: 
> 
>     function getMT(address a)public view returns(uint){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return MT[a];//

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        520
Source: 
> 
>     function extractMT(address a)public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(a).safeTransfer(waiter,MT[a]);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        363
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        216
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OTC
Line:        485
Source: 
> 
>     function buyreleaseETH(address payable a)public payable{
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_otc[a].Oamount > 0,"Invalid order");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OTC
Line:        500
Source: 
> 
>     function buyrelease(address payable a)public payable{
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_otc[a].Oamount > 0,"Invalid order");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OTC
Line:        520
Source: 
> 
>     function extractMT(address a)public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(a).safeTransfer(waiter,MT[a]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OTC
Line:        440
Source: 
> //    }
>    function Carradd(address payable token) public onlywaiter(){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          Carr.push(token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OTC
Line:        451
Source: 
> 
>    function getCarr(uint a)public view returns(address){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return Carr[a];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OTC
Line:        459
Source: 
> 
>     function release(address a,uint amount,uint16 b,uint bamunt) public payable{
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_otc[msg.sender].Oamount == 0, "Please cancel");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OTC
Line:        481
Source: 
> 
>    function getrelease(address a)public view returns(address,uint16,uint,uint){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return (_otc[a].O,_otc[a].C,_otc[a].Oamount,_otc[a].Camount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OTC
Line:        516
Source: 
> 
>     function getMT(address a)public view returns(uint){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return MT[a];//

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    OTC
Line:        495
Source: 
>             IERC20(b).safeTransfer(msg.sender, TO);
>             a.transfer(msg.value);
>                 ^^^^^^^^^^^^^^^^^^
>             delete _otc[a];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        216
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>              ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        383
Source: 
>     //address payable[] public Oarr;
>     address[] public Carr;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        402
Source: 
> 
>     struct otc{
>         ^^^^^^^
>         address O;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        408
Source: 
>     }
>     mapping (address => otc) public _otc;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint) public MT;//

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        409
Source: 
>     mapping (address => otc) public _otc;
>     mapping (address => uint) public MT;//
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //mapping (uint => IERC20) public Otoken;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        411
Source: 
>     //mapping (uint => IERC20) public Otoken;
>     mapping (uint => IERC20) public Ctoken;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        440
Source: 
> //    }
>    function Carradd(address payable token) public onlywaiter(){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          Carr.push(token);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        471
Source: 
> 
>     function OUTrelease() public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_otc[msg.sender].Oamount > 0, "Cannot stake 0");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        474
Source: 
>         //IERC20 token = IERC20(Oarr[_otc[msg.sender].O]);//GAS..............................
>         uint OUTamount = _otc[msg.sender].Oamount;
>             ^^^^^^^^^^^^^^
>         address a = _otc[msg.sender].O;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        491
Source: 
>             address b = _otc[a].O;
>             uint MYamount = amount.div(1000);
>                 ^^^^^^^^^^^^^
>             uint TO = amount.sub(MYamount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        492
Source: 
>             uint MYamount = amount.div(1000);
>             uint TO = amount.sub(MYamount);
>                 ^^^^^^^
>             MT[b] = MT[b].add(MYamount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        505
Source: 
>             address b = _otc[a].O;
>             uint MYamount = amount.div(1000);
>                 ^^^^^^^^^^^^^
>             uint TO = amount.sub(MYamount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        506
Source: 
>             uint MYamount = amount.div(1000);
>             uint TO = amount.sub(MYamount);
>                 ^^^^^^^
>             MT[b] = MT[b].add(MYamount);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        2
Source: 
> // SPDX-License-Identifier: MIT
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        152
Source: 
> 
> pragma solidity >=0.5.5;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        221
Source: 
> 
> pragma solidity >=0.5.0;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        298
Source: 
> 
> pragma solidity >=0.5.0;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        374
Source: 
> 
> pragma solidity >=0.5.0;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OTC
Line:        380
Source: 
>     using SafeERC20 for IERC20;
>     address payable waiter;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OTC
Line:        386
Source: 
>     //uint osu;
>     uint csu;
>         ^^^^^
>     uint public myETH;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    OTC
Line:        524
Source: 
>         if(myETH>0){
>             waiter.transfer(myETH);
>                 ^^^^^^^^^^^^^^^^^^^
>             delete myETH;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    OTC
Line:        495
Source: 
>             IERC20(b).safeTransfer(msg.sender, TO);
>             a.transfer(msg.value);
>                 ^^^^^^^^^^^^^^^^^^
>             delete _otc[a];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    OTC
Line:        524
Source: 
>         if(myETH>0){
>             waiter.transfer(myETH);
>                 ^^^^^^^^^^^^^^^^^^^
>             delete myETH;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    OTC
Line:        495
Source: 
>             IERC20(b).safeTransfer(msg.sender, TO);
>             a.transfer(msg.value);
>                 ^^^^^^^^^^^^^^^^^^
>             delete _otc[a];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    OTC
Line:        524
Source: 
>         if(myETH>0){
>             waiter.transfer(myETH);
>                 ^^^^^^^^^^^^^^^^^^^
>             delete myETH;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        181
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        387
Source: 
>     uint csu;
>     uint public myETH;
>         ^^^^^^^^^^^^^^
>     event VOL(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    OTC
Line:        524
Source: 
>         if(myETH>0){
>             waiter.transfer(myETH);
>                 ^^^^^^^^^^^^^^^^^^^
>             delete myETH;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    OTC
Line:        495
Source: 
>             IERC20(b).safeTransfer(msg.sender, TO);
>             a.transfer(msg.value);
>                 ^^^^^^^^^^^^^^^^^^
>             delete _otc[a];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        426
Source: 
>     receive() payable external {//
>     myETH=myETH.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OTC
Line:        493
Source: 
>             uint TO = amount.sub(MYamount);
>             MT[b] = MT[b].add(MYamount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>             IERC20(b).safeTransfer(msg.sender, TO);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OTC
Line:        496
Source: 
>             a.transfer(msg.value);
>             delete _otc[a];
>                 ^^^^^^^^^^^
>             emit VOL(Carr[_otc[a].C], now, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OTC
Line:        507
Source: 
>             uint TO = amount.sub(MYamount);
>             MT[b] = MT[b].add(MYamount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>             IERC20(b).safeTransfer(msg.sender, TO);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OTC
Line:        510
Source: 
>             Ctoken[_otc[a].C].safeTransferFrom(msg.sender,a, _otc[a].Camount);
>             delete _otc[a];
>                 ^^^^^^^^^^^
>             emit VOL(Carr[_otc[a].C], now, _otc[a].Camount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        216
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        329
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        336
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        341
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
