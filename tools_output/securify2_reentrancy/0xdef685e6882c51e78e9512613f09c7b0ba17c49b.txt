[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Lottery1ETH
Line:        252
Source: 
>         uint size;
>         assembly { size := extcodesize(addr) }
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Lottery1ETH
Line:        421
Source: 
>     function bytesToAddress(bytes memory source) internal pure returns(address parsedReferrer) {
>         assembly {
>             ^^^^^^
>             parsedReferrer := mload(add(source,0x14))

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Lottery1ETH
Line:        303
Source: 
>         players.push(msg.sender);
>         x.purchase(msg.sender);
>             ^^^^^^^^^^^^^^^^^^^
>         RS.newTicket();

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Lottery1ETH
Line:        304
Source: 
>         x.purchase(msg.sender);
>         RS.newTicket();
>             ^^^^^^^^^^^
>         LT.emitEvent(msg.sender);

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Lottery1ETH
Line:        305
Source: 
>         RS.newTicket();
>         LT.emitEvent(msg.sender);
>             ^^^^^^^^^^^^^^^^^^^^^
>         emit NewPlayer(msg.sender, gameCount);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Lottery1ETH
Line:        216
Source: 
> 
>     uint256 public limit = 100;
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        48
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == owner);
>                     ^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Lottery1ETH
Line:        333
Source: 
>         if (drawer != address(0)) {
>             require(msg.sender == drawer);
>                         ^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Lottery1ETH
Line:        366
Source: 
>             uint256 change = (indexes) / (2 ** (j+1));
>             if (uint256(keccak256(abi.encodePacked(blockhash(futureblock - j)))) % 2 == 0) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 winnerIdx += change;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        48
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == owner);
>                     ^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Lottery1ETH
Line:        442
Source: 
>         for (uint256 i = 0; i < players.length; i++) {
>             if (players[i] == player) {
>                     ^^^^^^^^^^^^^^^^^^^
>                 index++;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LotteryTicket
Line:        20
Source: 
>     }
>     function emitEvent(address addr) public {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WinnerTicket
Line:        34
Source: 
>     }
>     function emitEvent(address addr) public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        51
Source: 
>     }
>     function renounceOwnership() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        55
Source: 
>     }
>     function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Storage
Line:        74
Source: 
> 
>     function purchase(address addr) public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == game);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Storage
Line:        97
Source: 
> 
>     function draw(uint256 goldenWinners) public view returns(address[] memory addresses) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        51
Source: 
>     }
>     function renounceOwnership() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        55
Source: 
>     }
>     function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RefStorage
Line:        146
Source: 
> 
>     function changeContracts(address contractAddr) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contracts[contractAddr] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RefStorage
Line:        150
Source: 
> 
>     function changePrize(uint256 newPrize) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         prize = newPrize;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RefStorage
Line:        154
Source: 
> 
>     function changeInterval(uint256 newInterval) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         interval = newInterval;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RefStorage
Line:        192
Source: 
> 
>     function ticketsOf(address player) public view returns(uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return players[player].tickets;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RefStorage
Line:        196
Source: 
> 
>     function referrerOf(address player) public view returns(address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return players[player].referrer;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        51
Source: 
>     }
>     function renounceOwnership() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        55
Source: 
>     }
>     function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery1ETH
Line:        391
Source: 
> 
>     function withdraw() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery1ETH
Line:        403
Source: 
> 
>     function pause() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery1ETH
Line:        407
Source: 
> 
>     function unpause() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery1ETH
Line:        411
Source: 
> 
>     function setDrawer(address account) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         drawer = account;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery1ETH
Line:        427
Source: 
> 
>     function amountOfPlayers() public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return players.length;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        281
Source: 
>         if (msg.data.length != 0) {
>             RS.addReferrer(bytesToAddress(bytes(msg.data)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        321
Source: 
>         if (drawer != address(0)) {
>             Drawer(drawer).delegatecall(11);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        299
Source: 
>         if (msg.value > PRICE) {
>             msg.sender.send(msg.value - PRICE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        303
Source: 
>         players.push(msg.sender);
>         x.purchase(msg.sender);
>             ^^^^^^^^^^^^^^^^^^^
>         RS.newTicket();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        304
Source: 
>         x.purchase(msg.sender);
>         RS.newTicket();
>             ^^^^^^^^^^^
>         LT.emitEvent(msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        305
Source: 
>         RS.newTicket();
>         LT.emitEvent(msg.sender);
>             ^^^^^^^^^^^^^^^^^^^^^
>         emit NewPlayer(msg.sender, gameCount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        287
Source: 
>         } else if (msg.value != 0) {
>             msg.sender.send(msg.value);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        347
Source: 
>         uint256 goldenPrize = gold[1];
>         if (x.count() < gold[0]) {
>                 ^^^^^^^^^
>             goldenWinners = x.count();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        348
Source: 
>         if (x.count() < gold[0]) {
>             goldenWinners = x.count();
>                                 ^^^^^^
>             goldenPrize = gold[0] * gold[1] / x.count();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        349
Source: 
>             goldenWinners = x.count();
>             goldenPrize = gold[0] * gold[1] / x.count();
>                                                   ^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        352
Source: 
>         if (goldenWinners != 0) {
>             address[] memory addresses = x.draw(goldenWinners);
>                                              ^^^^^^^^^^^^^^^^^^
>             for (uint256 k = 0; k < addresses.length; k++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        382
Source: 
>         uint256 txCost = tx.gasprice * (600000);
>         msg.sender.send(txCost);
>             ^^^^^^^^^^^^^^^^^^^^
>         emit txCostRefunded(msg.sender, txCost);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        386
Source: 
>         uint256 fee = address(this).balance - msg.value;
>         address(uint160(owner)).send(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(owner, fee);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        273
Source: 
>                 if (msg.value != 0) {
>                     msg.sender.send(msg.value);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        393
Source: 
> 
>         address(uint160(owner)).send(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        416
Source: 
>     function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(ERC20Token).transfer(recipient, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        417
Source: 
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));
>         IERC20(ERC20Token).transfer(recipient, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        432
Source: 
>     function referrerOf(address player) external view returns(address) {
>         return RS.referrerOf(player);
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        436
Source: 
>     function ticketsOf(address player) external view returns(uint256) {
>         return RS.ticketsOf(player);
>                    ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        451
Source: 
>         uint256 goldenWinners = gold[0];
>         if (x.count() < gold[0]) {
>                 ^^^^^^^^^
>             goldenWinners = x.count();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        452
Source: 
>         if (x.count() < gold[0]) {
>             goldenWinners = x.count();
>                                 ^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery1ETH
Line:        454
Source: 
>         }
>         return x.draw(goldenWinners);
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery1ETH
Line:        340
Source: 
>             address winner = players[uint((blockhash(futureblock - 1 - i))) % players.length];
>             address(uint160(winner)).send(silver[1]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             WT.emitEvent(winner);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery1ETH
Line:        341
Source: 
>             address(uint160(winner)).send(silver[1]);
>             WT.emitEvent(winner);
>                 ^^^^^^^^^^^^^^^^^
>             emit SilverWinner(winner, silver[1], gameCount);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery1ETH
Line:        354
Source: 
>             for (uint256 k = 0; k < addresses.length; k++) {
>                 address(uint160(addresses[k])).send(goldenPrize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 RS.sendBonus(addresses[k]);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery1ETH
Line:        355
Source: 
>                 address(uint160(addresses[k])).send(goldenPrize);
>                 RS.sendBonus(addresses[k]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>                 WT.emitEvent(addresses[k]);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery1ETH
Line:        356
Source: 
>                 RS.sendBonus(addresses[k]);
>                 WT.emitEvent(addresses[k]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>                 emit GoldenWinner(addresses[k], goldenPrize, gameCount);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery1ETH
Line:        371
Source: 
>         winnerIdx = winnerIdx / 1e18;
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WT.emitEvent(players[winnerIdx]);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery1ETH
Line:        372
Source: 
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>         WT.emitEvent(players[winnerIdx]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BrilliantWinner(players[winnerIdx], brilliant[1], gameCount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RefStorage
Line:        150
Source: 
> 
>     function changePrize(uint256 newPrize) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         prize = newPrize;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RefStorage
Line:        154
Source: 
> 
>     function changeInterval(uint256 newInterval) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         interval = newInterval;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RefStorage
Line:        179
Source: 
> 
>     function sendBonus(address winner) external restricted {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (token.balanceOf(address(this)) >= prize) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lottery1ETH
Line:        411
Source: 
> 
>     function setDrawer(address account) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         drawer = account;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lottery1ETH
Line:        431
Source: 
> 
>     function referrerOf(address player) external view returns(address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return RS.referrerOf(player);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lottery1ETH
Line:        435
Source: 
> 
>     function ticketsOf(address player) external view returns(uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return RS.ticketsOf(player);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lottery1ETH
Line:        439
Source: 
> 
>     function currTicketsOf(address player) external view returns(uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 index;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LotteryTicket
Line:        20
Source: 
>     }
>     function emitEvent(address addr) public {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WinnerTicket
Line:        34
Source: 
>     }
>     function emitEvent(address addr) public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Storage
Line:        97
Source: 
> 
>     function draw(uint256 goldenWinners) public view returns(address[] memory addresses) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RefStorage
Line:        146
Source: 
> 
>     function changeContracts(address contractAddr) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contracts[contractAddr] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RefStorage
Line:        187
Source: 
> 
>     function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RefStorage
Line:        192
Source: 
> 
>     function ticketsOf(address player) public view returns(uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return players[player].tickets;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RefStorage
Line:        196
Source: 
> 
>     function referrerOf(address player) public view returns(address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return players[player].referrer;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Lottery1ETH
Line:        415
Source: 
> 
>     function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery1ETH
Line:        321
Source: 
>         if (drawer != address(0)) {
>             Drawer(drawer).delegatecall(11);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery1ETH
Line:        341
Source: 
>             address(uint160(winner)).send(silver[1]);
>             WT.emitEvent(winner);
>                 ^^^^^^^^^^^^^^^^^
>             emit SilverWinner(winner, silver[1], gameCount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery1ETH
Line:        347
Source: 
>         uint256 goldenPrize = gold[1];
>         if (x.count() < gold[0]) {
>                 ^^^^^^^^^
>             goldenWinners = x.count();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery1ETH
Line:        348
Source: 
>         if (x.count() < gold[0]) {
>             goldenWinners = x.count();
>                                 ^^^^^^
>             goldenPrize = gold[0] * gold[1] / x.count();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery1ETH
Line:        349
Source: 
>             goldenWinners = x.count();
>             goldenPrize = gold[0] * gold[1] / x.count();
>                                                   ^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery1ETH
Line:        352
Source: 
>         if (goldenWinners != 0) {
>             address[] memory addresses = x.draw(goldenWinners);
>                                              ^^^^^^^^^^^^^^^^^^
>             for (uint256 k = 0; k < addresses.length; k++) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery1ETH
Line:        355
Source: 
>                 address(uint160(addresses[k])).send(goldenPrize);
>                 RS.sendBonus(addresses[k]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>                 WT.emitEvent(addresses[k]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery1ETH
Line:        356
Source: 
>                 RS.sendBonus(addresses[k]);
>                 WT.emitEvent(addresses[k]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>                 emit GoldenWinner(addresses[k], goldenPrize, gameCount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery1ETH
Line:        372
Source: 
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>         WT.emitEvent(players[winnerIdx]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BrilliantWinner(players[winnerIdx], brilliant[1], gameCount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefStorage
Line:        160
Source: 
>         players[tx.origin].tickets++;
>         if (players[tx.origin].referrer != address(0) && (players[tx.origin].tickets - players[tx.origin].checkpoint) % interval == 0) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (token.balanceOf(address(this)) >= prize * 2) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefStorage
Line:        171
Source: 
>     function addReferrer(address referrer) external restricted {
>         if (players[tx.origin].referrer == address(0) && players[referrer].tickets >= interval && referrer != tx.origin) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             players[tx.origin].referrer = referrer;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Lottery1ETH
Line:        299
Source: 
>         if (msg.value > PRICE) {
>             msg.sender.send(msg.value - PRICE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Lottery1ETH
Line:        340
Source: 
>             address winner = players[uint((blockhash(futureblock - 1 - i))) % players.length];
>             address(uint160(winner)).send(silver[1]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             WT.emitEvent(winner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Lottery1ETH
Line:        354
Source: 
>             for (uint256 k = 0; k < addresses.length; k++) {
>                 address(uint160(addresses[k])).send(goldenPrize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 RS.sendBonus(addresses[k]);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Lottery1ETH
Line:        371
Source: 
>         winnerIdx = winnerIdx / 1e18;
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WT.emitEvent(players[winnerIdx]);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Lottery1ETH
Line:        382
Source: 
>         uint256 txCost = tx.gasprice * (600000);
>         msg.sender.send(txCost);
>             ^^^^^^^^^^^^^^^^^^^^
>         emit txCostRefunded(msg.sender, txCost);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Lottery1ETH
Line:        386
Source: 
>         uint256 fee = address(this).balance - msg.value;
>         address(uint160(owner)).send(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(owner, fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Lottery1ETH
Line:        393
Source: 
> 
>         address(uint160(owner)).send(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LotteryTicket
Line:        14
Source: 
>     address owner;
>     string public constant name = "LotteryTicket";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "✓";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LotteryTicket
Line:        15
Source: 
>     string public constant name = "LotteryTicket";
>     string public constant symbol = "✓";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 value);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WinnerTicket
Line:        28
Source: 
>     address owner;
>     string public constant name = "WinnerTicket";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "✓";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WinnerTicket
Line:        29
Source: 
>     string public constant name = "WinnerTicket";
>     string public constant symbol = "✓";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 value);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery1ETH
Line:        208
Source: 
>     Storage public x;
>     RefStorage public RS;
>         ^^^^^^^^^^^^^^^^^
>     LotteryTicket public LT;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery1ETH
Line:        209
Source: 
>     RefStorage public RS;
>     LotteryTicket public LT;
>         ^^^^^^^^^^^^^^^^^^^^
>     WinnerTicket public WT;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery1ETH
Line:        210
Source: 
>     LotteryTicket public LT;
>     WinnerTicket public WT;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery1ETH
Line:        236
Source: 
>     event BrilliantWinner(address indexed addr, uint256 prize, uint256 indexed gameCount);
>     event txCostRefunded(address indexed addr, uint256 amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event FeePayed(address indexed owner, uint256 amount);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LotteryTicket
Line:        13
Source: 
> contract LotteryTicket {
>     address owner;
>     ^^^^^^^^^^^^^
>     string public constant name = "LotteryTicket";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WinnerTicket
Line:        27
Source: 
> contract WinnerTicket {
>     address owner;
>       ^^^^^^^^^^^^
>     string public constant name = "WinnerTicket";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Storage
Line:        63
Source: 
> contract Storage {
>     address game;
>         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Lottery1ETH
Line:        228
Source: 
> 
>     uint256[] silver    = [10, 0.02 ether];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[] gold      = [2,  0.05 ether];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Lottery1ETH
Line:        229
Source: 
>     uint256[] silver    = [10, 0.02 ether];
>     uint256[] gold      = [2,  0.05 ether];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[] brilliant = [1,  0.50 ether];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Lottery1ETH
Line:        230
Source: 
>     uint256[] gold      = [2,  0.05 ether];
>     uint256[] brilliant = [1,  0.50 ether];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Lottery1ETH
Line:        381
Source: 
> 
>         uint256 txCost = tx.gasprice * (600000);
>                                             ^^^^
>         msg.sender.send(txCost);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        299
Source: 
>         if (msg.value > PRICE) {
>             msg.sender.send(msg.value - PRICE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        340
Source: 
>             address winner = players[uint((blockhash(futureblock - 1 - i))) % players.length];
>             address(uint160(winner)).send(silver[1]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             WT.emitEvent(winner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        354
Source: 
>             for (uint256 k = 0; k < addresses.length; k++) {
>                 address(uint160(addresses[k])).send(goldenPrize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 RS.sendBonus(addresses[k]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        371
Source: 
>         winnerIdx = winnerIdx / 1e18;
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WT.emitEvent(players[winnerIdx]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        386
Source: 
>         uint256 fee = address(this).balance - msg.value;
>         address(uint160(owner)).send(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(owner, fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        393
Source: 
> 
>         address(uint160(owner)).send(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        299
Source: 
>         if (msg.value > PRICE) {
>             msg.sender.send(msg.value - PRICE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        287
Source: 
>         } else if (msg.value != 0) {
>             msg.sender.send(msg.value);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        340
Source: 
>             address winner = players[uint((blockhash(futureblock - 1 - i))) % players.length];
>             address(uint160(winner)).send(silver[1]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             WT.emitEvent(winner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        354
Source: 
>             for (uint256 k = 0; k < addresses.length; k++) {
>                 address(uint160(addresses[k])).send(goldenPrize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 RS.sendBonus(addresses[k]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        371
Source: 
>         winnerIdx = winnerIdx / 1e18;
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WT.emitEvent(players[winnerIdx]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        382
Source: 
>         uint256 txCost = tx.gasprice * (600000);
>         msg.sender.send(txCost);
>             ^^^^^^^^^^^^^^^^^^^^
>         emit txCostRefunded(msg.sender, txCost);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        386
Source: 
>         uint256 fee = address(this).balance - msg.value;
>         address(uint160(owner)).send(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(owner, fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        273
Source: 
>                 if (msg.value != 0) {
>                     msg.sender.send(msg.value);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Lottery1ETH
Line:        393
Source: 
> 
>         address(uint160(owner)).send(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lottery1ETH
Line:        299
Source: 
>         if (msg.value > PRICE) {
>             msg.sender.send(msg.value - PRICE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lottery1ETH
Line:        287
Source: 
>         } else if (msg.value != 0) {
>             msg.sender.send(msg.value);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lottery1ETH
Line:        340
Source: 
>             address winner = players[uint((blockhash(futureblock - 1 - i))) % players.length];
>             address(uint160(winner)).send(silver[1]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             WT.emitEvent(winner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lottery1ETH
Line:        354
Source: 
>             for (uint256 k = 0; k < addresses.length; k++) {
>                 address(uint160(addresses[k])).send(goldenPrize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 RS.sendBonus(addresses[k]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lottery1ETH
Line:        371
Source: 
>         winnerIdx = winnerIdx / 1e18;
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WT.emitEvent(players[winnerIdx]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lottery1ETH
Line:        382
Source: 
>         uint256 txCost = tx.gasprice * (600000);
>         msg.sender.send(txCost);
>             ^^^^^^^^^^^^^^^^^^^^
>         emit txCostRefunded(msg.sender, txCost);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lottery1ETH
Line:        386
Source: 
>         uint256 fee = address(this).balance - msg.value;
>         address(uint160(owner)).send(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(owner, fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lottery1ETH
Line:        273
Source: 
>                 if (msg.value != 0) {
>                     msg.sender.send(msg.value);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Lottery1ETH
Line:        393
Source: 
> 
>         address(uint160(owner)).send(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefStorage
Line:        161
Source: 
>         if (players[tx.origin].referrer != address(0) && (players[tx.origin].tickets - players[tx.origin].checkpoint) % interval == 0) {
>             if (token.balanceOf(address(this)) >= prize * 2) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 token.transfer(tx.origin, prize);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefStorage
Line:        180
Source: 
>     function sendBonus(address winner) external restricted {
>         if (token.balanceOf(address(this)) >= prize) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             token.transfer(winner, prize);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefStorage
Line:        188
Source: 
>     function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(ERC20Token).transfer(recipient, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery1ETH
Line:        347
Source: 
>         uint256 goldenPrize = gold[1];
>         if (x.count() < gold[0]) {
>                 ^^^^^^^^^
>             goldenWinners = x.count();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery1ETH
Line:        348
Source: 
>         if (x.count() < gold[0]) {
>             goldenWinners = x.count();
>                                 ^^^^^^
>             goldenPrize = gold[0] * gold[1] / x.count();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery1ETH
Line:        352
Source: 
>         if (goldenWinners != 0) {
>             address[] memory addresses = x.draw(goldenWinners);
>                                              ^^^^^^^^^^^^^^^^^^
>             for (uint256 k = 0; k < addresses.length; k++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery1ETH
Line:        416
Source: 
>     function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(ERC20Token).transfer(recipient, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery1ETH
Line:        451
Source: 
>         uint256 goldenWinners = gold[0];
>         if (x.count() < gold[0]) {
>                 ^^^^^^^^^
>             goldenWinners = x.count();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery1ETH
Line:        452
Source: 
>         if (x.count() < gold[0]) {
>             goldenWinners = x.count();
>                                 ^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefStorage
Line:        162
Source: 
>             if (token.balanceOf(address(this)) >= prize * 2) {
>                 token.transfer(tx.origin, prize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit BonusSent(tx.origin, prize);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefStorage
Line:        164
Source: 
>                 emit BonusSent(tx.origin, prize);
>                 token.transfer(players[tx.origin].referrer, prize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit BonusSent(players[tx.origin].referrer, prize);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefStorage
Line:        181
Source: 
>         if (token.balanceOf(address(this)) >= prize) {
>             token.transfer(winner, prize);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefStorage
Line:        189
Source: 
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));
>         IERC20(ERC20Token).transfer(recipient, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        281
Source: 
>         if (msg.data.length != 0) {
>             RS.addReferrer(bytesToAddress(bytes(msg.data)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        321
Source: 
>         if (drawer != address(0)) {
>             Drawer(drawer).delegatecall(11);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        299
Source: 
>         if (msg.value > PRICE) {
>             msg.sender.send(msg.value - PRICE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        303
Source: 
>         players.push(msg.sender);
>         x.purchase(msg.sender);
>             ^^^^^^^^^^^^^^^^^^^
>         RS.newTicket();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        304
Source: 
>         x.purchase(msg.sender);
>         RS.newTicket();
>             ^^^^^^^^^^^
>         LT.emitEvent(msg.sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        305
Source: 
>         RS.newTicket();
>         LT.emitEvent(msg.sender);
>             ^^^^^^^^^^^^^^^^^^^^^
>         emit NewPlayer(msg.sender, gameCount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        287
Source: 
>         } else if (msg.value != 0) {
>             msg.sender.send(msg.value);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        340
Source: 
>             address winner = players[uint((blockhash(futureblock - 1 - i))) % players.length];
>             address(uint160(winner)).send(silver[1]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             WT.emitEvent(winner);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        341
Source: 
>             address(uint160(winner)).send(silver[1]);
>             WT.emitEvent(winner);
>                 ^^^^^^^^^^^^^^^^^
>             emit SilverWinner(winner, silver[1], gameCount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        349
Source: 
>             goldenWinners = x.count();
>             goldenPrize = gold[0] * gold[1] / x.count();
>                                                   ^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        354
Source: 
>             for (uint256 k = 0; k < addresses.length; k++) {
>                 address(uint160(addresses[k])).send(goldenPrize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 RS.sendBonus(addresses[k]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        355
Source: 
>                 address(uint160(addresses[k])).send(goldenPrize);
>                 RS.sendBonus(addresses[k]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>                 WT.emitEvent(addresses[k]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        356
Source: 
>                 RS.sendBonus(addresses[k]);
>                 WT.emitEvent(addresses[k]);
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>                 emit GoldenWinner(addresses[k], goldenPrize, gameCount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        371
Source: 
>         winnerIdx = winnerIdx / 1e18;
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WT.emitEvent(players[winnerIdx]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        372
Source: 
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>         WT.emitEvent(players[winnerIdx]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BrilliantWinner(players[winnerIdx], brilliant[1], gameCount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        382
Source: 
>         uint256 txCost = tx.gasprice * (600000);
>         msg.sender.send(txCost);
>             ^^^^^^^^^^^^^^^^^^^^
>         emit txCostRefunded(msg.sender, txCost);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        386
Source: 
>         uint256 fee = address(this).balance - msg.value;
>         address(uint160(owner)).send(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(owner, fee);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        273
Source: 
>                 if (msg.value != 0) {
>                     msg.sender.send(msg.value);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        393
Source: 
> 
>         address(uint160(owner)).send(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        417
Source: 
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));
>         IERC20(ERC20Token).transfer(recipient, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        432
Source: 
>     function referrerOf(address player) external view returns(address) {
>         return RS.referrerOf(player);
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        436
Source: 
>     function ticketsOf(address player) external view returns(uint256) {
>         return RS.ticketsOf(player);
>                    ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery1ETH
Line:        454
Source: 
>         }
>         return x.draw(goldenWinners);
>                    ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Storage
Line:        105
Source: 
>                 if (level[i][j] != address(0)) {
>                     addresses[winnersCount] = level[i][j];
>                                   ^^^^^^^^^^^^
>                     winnersCount++;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Lottery1ETH
Line:        253
Source: 
>         assembly { size := extcodesize(addr) }
>         return size > 0;
>                    ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Lottery1ETH
Line:        443
Source: 
>             if (players[i] == player) {
>                 index++;
>                     ^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Storage
Line:        67
Source: 
>     mapping (uint256 => address[]) public level;
>     uint256 public count;
>         ^^^^^^^^^^^^^^^^^
>     uint256 public maximum;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Storage
Line:        68
Source: 
>     uint256 public count;
>     uint256 public maximum;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery1ETH
Line:        218
Source: 
> 
>     uint256 public futureblock;
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery1ETH
Line:        222
Source: 
> 
>     bool public paused;
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery1ETH
Line:        224
Source: 
> 
>     address public drawer;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery1ETH
Line:        226
Source: 
> 
>     bool public onDrawing;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Lottery1ETH
Line:        299
Source: 
>         if (msg.value > PRICE) {
>             msg.sender.send(msg.value - PRICE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Lottery1ETH
Line:        287
Source: 
>         } else if (msg.value != 0) {
>             msg.sender.send(msg.value);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Lottery1ETH
Line:        273
Source: 
>                 if (msg.value != 0) {
>                     msg.sender.send(msg.value);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery1ETH
Line:        313
Source: 
>         if (block.number >= futureblock + 240) {
>             futureblock = block.number + 10;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery1ETH
Line:        317
Source: 
>         if (!onDrawing) {
>             onDrawing = true;
>                 ^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery1ETH
Line:        302
Source: 
> 
>         players.push(msg.sender);
>             ^^^^^^^^^^^^^^^^^^^^^
>         x.purchase(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RefStorage
Line:        162
Source: 
>             if (token.balanceOf(address(this)) >= prize * 2) {
>                 token.transfer(tx.origin, prize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit BonusSent(tx.origin, prize);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RefStorage
Line:        164
Source: 
>                 emit BonusSent(tx.origin, prize);
>                 token.transfer(players[tx.origin].referrer, prize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit BonusSent(players[tx.origin].referrer, prize);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RefStorage
Line:        181
Source: 
>         if (token.balanceOf(address(this)) >= prize) {
>             token.transfer(winner, prize);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RefStorage
Line:        189
Source: 
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));
>         IERC20(ERC20Token).transfer(recipient, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        321
Source: 
>         if (drawer != address(0)) {
>             Drawer(drawer).delegatecall(11);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        299
Source: 
>         if (msg.value > PRICE) {
>             msg.sender.send(msg.value - PRICE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        287
Source: 
>         } else if (msg.value != 0) {
>             msg.sender.send(msg.value);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        340
Source: 
>             address winner = players[uint((blockhash(futureblock - 1 - i))) % players.length];
>             address(uint160(winner)).send(silver[1]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             WT.emitEvent(winner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        354
Source: 
>             for (uint256 k = 0; k < addresses.length; k++) {
>                 address(uint160(addresses[k])).send(goldenPrize);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 RS.sendBonus(addresses[k]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        371
Source: 
>         winnerIdx = winnerIdx / 1e18;
>         address(uint160(players[winnerIdx])).send(brilliant[1]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WT.emitEvent(players[winnerIdx]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        382
Source: 
>         uint256 txCost = tx.gasprice * (600000);
>         msg.sender.send(txCost);
>             ^^^^^^^^^^^^^^^^^^^^
>         emit txCostRefunded(msg.sender, txCost);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        386
Source: 
>         uint256 fee = address(this).balance - msg.value;
>         address(uint160(owner)).send(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(owner, fee);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        273
Source: 
>                 if (msg.value != 0) {
>                     msg.sender.send(msg.value);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        393
Source: 
> 
>         address(uint160(owner)).send(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery1ETH
Line:        417
Source: 
>         uint256 amount = IERC20(ERC20Token).balanceOf(address(this));
>         IERC20(ERC20Token).transfer(recipient, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LotteryTicket
Line:        14
Source: 
>     address owner;
>     string public constant name = "LotteryTicket";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "✓";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LotteryTicket
Line:        15
Source: 
>     string public constant name = "LotteryTicket";
>     string public constant symbol = "✓";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 value);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WinnerTicket
Line:        28
Source: 
>     address owner;
>     string public constant name = "WinnerTicket";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "✓";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WinnerTicket
Line:        29
Source: 
>     string public constant name = "WinnerTicket";
>     string public constant symbol = "✓";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 value);

[0m
