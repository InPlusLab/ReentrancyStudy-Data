pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TimeLoanPair
Line:        956
Source: 
>         uint chainId;
>         assembly { chainId := chainid() }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return chainId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    TimeLoanPair
Line:        895
Source: 
>         require(signatory != address(0), "TimeLoans::permit: invalid signature");
>         require(signatory == owner, "TimeLoans::permit: unauthorized");
>                 ^^^^^^^^^^^^^^^^^^
>         require(now <= deadline, "TimeLoans::permit: signature expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimeLoanPair
Line:        872
Source: 
>      */
>     function approve(address spender, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimeLoanPair
Line:        918
Source: 
>      */
>     function transfer(address dst, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferTokens(msg.sender, dst, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                                                                                       ^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        579
Source: 
>         pair = address(_pair);
>         token0 = _pair.token0();
>                  ^^^^^^^^^^^^^^
>         token1 = _pair.token1();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        580
Source: 
>         token0 = _pair.token0();
>         token1 = _pair.token1();
>                  ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        644
Source: 
>         
>         require(IERC20(pair).balanceOf(address(this)) > r, "TimeLoans::withdraw: insufficient liquidity to withdraw, try depositLiquidity()");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        646
Source: 
>         
>         IERC20(pair).transfer(msg.sender, r);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityWithdrawals = liquidityWithdrawals.add(r);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        657
Source: 
>     function depositAll() external returns (bool) {
>         return deposit(IERC20(pair).balanceOf(msg.sender));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        666
Source: 
>     function deposit(uint amount) public returns (bool) {
>         IERC20(pair).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _shares = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        738
Source: 
>                     .mul(IERC20(pair).balanceOf(address(this)))
>                     .div(IERC20(pair).totalSupply()));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        737
Source: 
>                 add(IERC20(asset).balanceOf(pair)
>                     .mul(IERC20(pair).balanceOf(address(this)))
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     .div(IERC20(pair).totalSupply()));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        736
Source: 
>         return IERC20(asset).balanceOf(address(this)).
>                 add(IERC20(asset).balanceOf(pair)
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     .mul(IERC20(pair).balanceOf(address(this)))

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        749
Source: 
>                 .mul(amount)
>                 .div(IERC20(asset).balanceOf(pair));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        747
Source: 
>     function calculateLiquidityToBurn(address asset, uint amount) public view returns (uint) {
>         return IERC20(pair).balanceOf(address(this))
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 .mul(amount)

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        769
Source: 
>         IERC20(pair).approve(address(UNI), withdrew);
>         UNI.removeLiquidity(token0, token1, withdrew, _amountAMin, _amountBMin, address(this), now.add(1800));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityRemoved = liquidityRemoved.add(withdrew);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        790
Source: 
>         require(msg.sender == tx.origin, "TimeLoans::depositLiquidity: not an EOA keeper");
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        790
Source: 
>         require(msg.sender == tx.origin, "TimeLoans::depositLiquidity: not an EOA keeper");
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        791
Source: 
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        791
Source: 
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        804
Source: 
>     function loan(address collateral, address borrow, uint amount, uint outMin) external returns (uint) {
>         uint _before = IERC20(collateral).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        805
Source: 
>         uint _before = IERC20(collateral).balanceOf(address(this));
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = IERC20(collateral).balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        806
Source: 
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);
>         uint _after = IERC20(collateral).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        818
Source: 
>         
>         uint _available = IERC20(borrow).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _withdrew = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        828
Source: 
>         
>         IERC20(borrow).transfer(msg.sender, _amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Borrowed(nextIndex, msg.sender, collateral, borrow, _received, _amountOut, block.number, block.number.add(DELAY));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        842
Source: 
>         require(_pos.expire < block.number, "TimeLoans::repay: position already expired");
>         IERC20(_pos.borrowed).transferFrom(msg.sender, address(this), _pos.amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _available = IERC20(_pos.collateral).balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        843
Source: 
>         IERC20(_pos.borrowed).transferFrom(msg.sender, address(this), _pos.amountOut);
>         uint _available = IERC20(_pos.collateral).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_available < _pos.creditIn) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimeLoanPair
Line:        847
Source: 
>         }
>         IERC20(_pos.collateral).transfer(msg.sender, _pos.creditIn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pos.open = false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TimeLoanPair
Line:        640
Source: 
>      */
>     function withdraw(uint _shares) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint r = liquidityBalance().mul(_shares).div(totalSupply);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TimeLoanPair
Line:        665
Source: 
>      */
>     function deposit(uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(pair).transferFrom(msg.sender, address(this), amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TimeLoanPair
Line:        803
Source: 
>      */
>     function loan(address collateral, address borrow, uint amount, uint outMin) external returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _before = IERC20(collateral).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TimeLoanPair
Line:        918
Source: 
>      */
>     function transfer(address dst, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferTokens(msg.sender, dst, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TimeLoanPair
Line:        930
Source: 
>      */
>     function transferFrom(address src, address dst, uint amount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address spender = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TimeLoanPair
Line:        734
Source: 
>      */
>     function liquidityOf(address asset) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IERC20(asset).balanceOf(address(this)).

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TimeLoanPair
Line:        746
Source: 
>      */
>     function calculateLiquidityToBurn(address asset, uint amount) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IERC20(pair).balanceOf(address(this))

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TimeLoanPair
Line:        780
Source: 
>      */
>     function quote(address collateral, address borrow, uint amount) external view returns (uint minOut) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _received = (amount.sub(amount.mul(FEE).div(BASE))).mul(LTV).div(BASE);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TimeLoanPair
Line:        860
Source: 
>      */
>     function allowance(address account, address spender) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[account][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TimeLoanPair
Line:        872
Source: 
>      */
>     function approve(address spender, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TimeLoanPair
Line:        908
Source: 
>      */
>     function balanceOf(address account) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[account];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        644
Source: 
>         
>         require(IERC20(pair).balanceOf(address(this)) > r, "TimeLoans::withdraw: insufficient liquidity to withdraw, try depositLiquidity()");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        646
Source: 
>         
>         IERC20(pair).transfer(msg.sender, r);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityWithdrawals = liquidityWithdrawals.add(r);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        666
Source: 
>     function deposit(uint amount) public returns (bool) {
>         IERC20(pair).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _shares = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        768
Source: 
>         }
>         IERC20(pair).approve(address(UNI), withdrew);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         UNI.removeLiquidity(token0, token1, withdrew, _amountAMin, _amountBMin, address(this), now.add(1800));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        769
Source: 
>         IERC20(pair).approve(address(UNI), withdrew);
>         UNI.removeLiquidity(token0, token1, withdrew, _amountAMin, _amountBMin, address(this), now.add(1800));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityRemoved = liquidityRemoved.add(withdrew);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        790
Source: 
>         require(msg.sender == tx.origin, "TimeLoans::depositLiquidity: not an EOA keeper");
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        790
Source: 
>         require(msg.sender == tx.origin, "TimeLoans::depositLiquidity: not an EOA keeper");
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        791
Source: 
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        791
Source: 
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        804
Source: 
>     function loan(address collateral, address borrow, uint amount, uint outMin) external returns (uint) {
>         uint _before = IERC20(collateral).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        805
Source: 
>         uint _before = IERC20(collateral).balanceOf(address(this));
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = IERC20(collateral).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        806
Source: 
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);
>         uint _after = IERC20(collateral).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        814
Source: 
>         
>         uint _amountOut = ORACLE.quote(collateral, borrow, _ltv);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amountOut >= outMin, "TimeLoans::loan: slippage");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        818
Source: 
>         
>         uint _available = IERC20(borrow).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _withdrew = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimeLoanPair
Line:        828
Source: 
>         
>         IERC20(borrow).transfer(msg.sender, _amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Borrowed(nextIndex, msg.sender, collateral, borrow, _received, _amountOut, block.number, block.number.add(DELAY));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                                                                                       ^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    TimeLoanPair
Line:        579
Source: 
>         pair = address(_pair);
>         token0 = _pair.token0();
>                  ^^^^^^^^^^^^^^
>         token1 = _pair.token1();

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    TimeLoanPair
Line:        580
Source: 
>         token0 = _pair.token0();
>         token1 = _pair.token1();
>                  ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    TimeLoanPair
Line:        736
Source: 
>         return IERC20(asset).balanceOf(address(this)).
>                 add(IERC20(asset).balanceOf(pair)
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     .mul(IERC20(pair).balanceOf(address(this)))

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    TimeLoanPair
Line:        804
Source: 
>     function loan(address collateral, address borrow, uint amount, uint outMin) external returns (uint) {
>         uint _before = IERC20(collateral).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    TimeLoanPair
Line:        806
Source: 
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);
>         uint _after = IERC20(collateral).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>            ^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        299
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        300
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        317
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Router01
Line:        337
Source: 
>     function factory() external pure returns (address);
>     function WETH() external pure returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        478
Source: 
>     /// @notice EIP-20 token name for this token
>     string public constant name = "Time Loan Pair LP";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        484
Source: 
>     /// @notice EIP-20 token decimals for this token
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        551
Source: 
>     
>     struct position {
>     ^^^^^^^^^^^^^^^^^
>         address owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        667
Source: 
>         IERC20(pair).transferFrom(msg.sender, address(this), amount);
>         uint _shares = 0;
>         ^^^^^^^^^^^^
>         if (liquidityBalance() == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        712
Source: 
>     function close(uint id) public returns (bool) {
>         position storage _pos = positions[id];
>         ^^^^^^^^^^^^^^^^^^^^^
>         if (_pos.owner == address(0x0)) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        761
Source: 
>         
>         uint _amountAMin = 0;
>         ^^^^^^^^^^^^^^^^
>         uint _amountBMin = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        762
Source: 
>         uint _amountAMin = 0;
>         uint _amountBMin = 0;
>         ^^^^^^^^^^^^^^^^
>         if (asset == token0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        781
Source: 
>     function quote(address collateral, address borrow, uint amount) external view returns (uint minOut) {
>         uint _received = (amount.sub(amount.mul(FEE).div(BASE))).mul(LTV).div(BASE);
>         ^^^^^^^^^^^^^^
>         return ORACLE.quote(collateral, borrow, _received);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>            ^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        804
Source: 
>     function loan(address collateral, address borrow, uint amount, uint outMin) external returns (uint) {
>         uint _before = IERC20(collateral).balanceOf(address(this));
>         ^^^^^^^^^^^^
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        806
Source: 
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);
>         uint _after = IERC20(collateral).balanceOf(address(this));
>         ^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        808
Source: 
>         
>         uint _received = _after.sub(_before);
>         ^^^^^^^^^^^^^^
>         uint _fee = _received.mul(FEE).div(BASE);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        809
Source: 
>         uint _received = _after.sub(_before);
>         uint _fee = _received.mul(FEE).div(BASE);
>         ^^^^^^^^^
>         _received = _received.sub(_fee);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        812
Source: 
>         
>         uint _ltv = _received.mul(LTV).div(BASE);
>         ^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        814
Source: 
>         
>         uint _amountOut = ORACLE.quote(collateral, borrow, _ltv);
>         ^^^^^^^^^^^^^^^
>         require(_amountOut >= outMin, "TimeLoans::loan: slippage");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        818
Source: 
>         
>         uint _available = IERC20(borrow).balanceOf(address(this));
>         ^^^^^^^^^^^^^^^
>         uint _withdrew = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        819
Source: 
>         uint _available = IERC20(borrow).balanceOf(address(this));
>         uint _withdrew = 0;
>         ^^^^^^^^^^^^^^
>         if (_available < _amountOut) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        839
Source: 
>     function repay(uint id) external returns (bool) {
>         position storage _pos = positions[id];
>         ^^^^^^^^^^^^^^^^^^^^^
>         require(_pos.open, "TimeLoans::repay: position is already closed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLoanPair
Line:        843
Source: 
>         IERC20(_pos.borrowed).transferFrom(msg.sender, address(this), _pos.amountOut);
>         uint _available = IERC20(_pos.collateral).balanceOf(address(this));
>         ^^^^^^^^^^^^^^^
>         if (_available < _pos.creditIn) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TimeLoanPairFactory
Line:        962
Source: 
> contract TimeLoanPairFactory {
>     mapping(address => address) pairs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TimeLoanPair
Line:        545
Source: 
>     /// @notice base for all % based calculations 
>     uint public constant BASE = 100000;
>                                 ^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        579
Source: 
>         pair = address(_pair);
>         token0 = _pair.token0();
>                  ^^^^^^^^^^^^^^
>         token1 = _pair.token1();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        580
Source: 
>         token0 = _pair.token0();
>         token1 = _pair.token1();
>                  ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        644
Source: 
>         
>         require(IERC20(pair).balanceOf(address(this)) > r, "TimeLoans::withdraw: insufficient liquidity to withdraw, try depositLiquidity()");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        657
Source: 
>     function depositAll() external returns (bool) {
>         return deposit(IERC20(pair).balanceOf(msg.sender));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        737
Source: 
>                 add(IERC20(asset).balanceOf(pair)
>                     .mul(IERC20(pair).balanceOf(address(this)))
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     .div(IERC20(pair).totalSupply()));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        736
Source: 
>         return IERC20(asset).balanceOf(address(this)).
>                 add(IERC20(asset).balanceOf(pair)
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     .mul(IERC20(pair).balanceOf(address(this)))

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        735
Source: 
>     function liquidityOf(address asset) public view returns (uint) {
>         return IERC20(asset).balanceOf(address(this)).
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 add(IERC20(asset).balanceOf(pair)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        747
Source: 
>     function calculateLiquidityToBurn(address asset, uint amount) public view returns (uint) {
>         return IERC20(pair).balanceOf(address(this))
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 .mul(amount)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        790
Source: 
>         require(msg.sender == tx.origin, "TimeLoans::depositLiquidity: not an EOA keeper");
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        791
Source: 
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        792
Source: 
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAdded = liquidityAdded.add(_added);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        814
Source: 
>         
>         uint _amountOut = ORACLE.quote(collateral, borrow, _ltv);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amountOut >= outMin, "TimeLoans::loan: slippage");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        818
Source: 
>         
>         uint _available = IERC20(borrow).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _withdrew = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLoanPair
Line:        843
Source: 
>         IERC20(_pos.borrowed).transferFrom(msg.sender, address(this), _pos.amountOut);
>         uint _available = IERC20(_pos.collateral).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_available < _pos.creditIn) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                                         ^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                                                                                       ^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        646
Source: 
>         
>         IERC20(pair).transfer(msg.sender, r);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityWithdrawals = liquidityWithdrawals.add(r);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        666
Source: 
>     function deposit(uint amount) public returns (bool) {
>         IERC20(pair).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _shares = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        738
Source: 
>                     .mul(IERC20(pair).balanceOf(address(this)))
>                     .div(IERC20(pair).totalSupply()));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        749
Source: 
>                 .mul(amount)
>                 .div(IERC20(asset).balanceOf(pair));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        768
Source: 
>         }
>         IERC20(pair).approve(address(UNI), withdrew);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         UNI.removeLiquidity(token0, token1, withdrew, _amountAMin, _amountBMin, address(this), now.add(1800));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        769
Source: 
>         IERC20(pair).approve(address(UNI), withdrew);
>         UNI.removeLiquidity(token0, token1, withdrew, _amountAMin, _amountBMin, address(this), now.add(1800));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityRemoved = liquidityRemoved.add(withdrew);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        782
Source: 
>         uint _received = (amount.sub(amount.mul(FEE).div(BASE))).mul(LTV).div(BASE);
>         return ORACLE.quote(collateral, borrow, _received);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        790
Source: 
>         require(msg.sender == tx.origin, "TimeLoans::depositLiquidity: not an EOA keeper");
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        791
Source: 
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        804
Source: 
>     function loan(address collateral, address borrow, uint amount, uint outMin) external returns (uint) {
>         uint _before = IERC20(collateral).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        805
Source: 
>         uint _before = IERC20(collateral).balanceOf(address(this));
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = IERC20(collateral).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        806
Source: 
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);
>         uint _after = IERC20(collateral).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        828
Source: 
>         
>         IERC20(borrow).transfer(msg.sender, _amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Borrowed(nextIndex, msg.sender, collateral, borrow, _received, _amountOut, block.number, block.number.add(DELAY));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        842
Source: 
>         require(_pos.expire < block.number, "TimeLoans::repay: position already expired");
>         IERC20(_pos.borrowed).transferFrom(msg.sender, address(this), _pos.amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _available = IERC20(_pos.collateral).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimeLoanPair
Line:        847
Source: 
>         }
>         IERC20(_pos.collateral).transfer(msg.sender, _pos.creditIn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pos.open = false;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        481
Source: 
>     /// @notice EIP-20 token symbol for this token
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        514
Source: 
>     /// @notice The underlying Uniswap Pair used for loan liquidity
>     address public pair;
>     ^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        517
Source: 
>     /// @notice The token0 of the Uniswap Pair
>     address public token0;
>     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        520
Source: 
>     /// @notice The token1 of the Uniswap Pair
>     address public token1;
>     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        567
Source: 
>     /// @notice the tip index of the positions array
>     uint public nextIndex;
>     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        570
Source: 
>     /// @notice the last index processed by the contract
>     uint public processedIndex;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        584
Source: 
>     /// @notice total liquidity deposited
>     uint public liquidityDeposits;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /// @notice total liquidity withdrawn

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        586
Source: 
>     /// @notice total liquidity withdrawn
>     uint public liquidityWithdrawals;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /// @notice total liquidity added via addLiquidity

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        588
Source: 
>     /// @notice total liquidity added via addLiquidity
>     uint public liquidityAdded;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /// @notice total liquidity removed via removeLiquidity

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        590
Source: 
>     /// @notice total liquidity removed via removeLiquidity
>     uint public liquidityRemoved;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /// @notice total liquidity currently in use by pending loans

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        592
Source: 
>     /// @notice total liquidity currently in use by pending loans
>     uint public liquidityInUse;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /// @notice total liquidity freed up from closed loans

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TimeLoanPair
Line:        594
Source: 
>     /// @notice total liquidity freed up from closed loans
>     uint public liquidityFreed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        614
Source: 
>         // transfer the amount to the recipient
>         balances[dst] = balances[dst].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), dst, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        623
Source: 
>         // transfer the amount to the recipient
>         balances[dst] = balances[dst].sub(amount, "TimeLoans::_burn: underflow");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(dst, address(0), amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        647
Source: 
>         IERC20(pair).transfer(msg.sender, r);
>         liquidityWithdrawals = liquidityWithdrawals.add(r);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrew(msg.sender, pair, _shares, r);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        723
Source: 
>         _pos.open = false;
>         liquidityInUse = liquidityInUse.sub(_pos.liquidityInUse, "TimeLoans::close: liquidityInUse overflow");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityFreed = liquidityFreed.add(_pos.liquidityInUse);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        724
Source: 
>         liquidityInUse = liquidityInUse.sub(_pos.liquidityInUse, "TimeLoans::close: liquidityInUse overflow");
>         liquidityFreed = liquidityFreed.add(_pos.liquidityInUse);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Closed(id, _pos.owner, _pos.collateral, _pos.borrowed, _pos.creditIn, _pos.amountOut, _pos.created, _pos.expire);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        689
Source: 
>         }
>         processedIndex = i;
>         ^^^^^^^^^^^^^^^^^^
>         return processedIndex;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        702
Source: 
>         }
>         processedIndex = i;
>         ^^^^^^^^^^^^^^^^^^
>         return processedIndex;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        770
Source: 
>         UNI.removeLiquidity(token0, token1, withdrew, _amountAMin, _amountBMin, address(this), now.add(1800));
>         liquidityRemoved = liquidityRemoved.add(withdrew);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        822
Source: 
>             _withdrew = _withdrawLiquidity(borrow, _amountOut.sub(_available));
>             liquidityInUse = liquidityInUse.add(_withdrew);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TimeLoanPair
Line:        830
Source: 
>         emit Borrowed(nextIndex, msg.sender, collateral, borrow, _received, _amountOut, block.number, block.number.add(DELAY));
>         return nextIndex++;
>                ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        611
Source: 
>         // mint the amount
>         totalSupply = totalSupply.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        620
Source: 
>         // burn the amount
>         totalSupply = totalSupply.sub(amount, "TimeLoans::_burn: underflow");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        674
Source: 
>         _mint(msg.sender, _shares);
>         liquidityDeposits = liquidityDeposits.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Deposited(msg.sender, pair, _shares, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        722
Source: 
>         }
>         _pos.open = false;
>         ^^^^^^^^^^^^^^^^^
>         liquidityInUse = liquidityInUse.sub(_pos.liquidityInUse, "TimeLoans::close: liquidityInUse overflow");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        825
Source: 
>         
>         positions.push(position(msg.sender, collateral, borrow, _received, _amountOut, _withdrew, block.number, block.number.add(DELAY), true));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         loans[msg.sender].push(nextIndex);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        826
Source: 
>         positions.push(position(msg.sender, collateral, borrow, _received, _amountOut, _withdrew, block.number, block.number.add(DELAY), true));
>         loans[msg.sender].push(nextIndex);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        848
Source: 
>         IERC20(_pos.collateral).transfer(msg.sender, _pos.creditIn);
>         _pos.open = false;
>         ^^^^^^^^^^^^^^^^^
>         positions[id] = _pos;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        849
Source: 
>         _pos.open = false;
>         positions[id] = _pos;
>         ^^^^^^^^^^^^^^^^^^^^
>         emit Repaid(id, _pos.owner, _pos.collateral, _pos.borrowed, _pos.creditIn, _pos.amountOut, _pos.created, _pos.expire);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        873
Source: 
>     function approve(address spender, uint amount) public returns (bool) {
>         allowances[msg.sender][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        891
Source: 
>         bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));
>         bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));
>                                                                                            ^^^^^^^^^^^^^^^
>         bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        898
Source: 
> 
>         allowances[owner][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        949
Source: 
>         
>         balances[src] = balances[src].sub(amount, "TimeLoans::_transferTokens: transfer amount exceeds balance");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[dst] = balances[dst].add(amount, "TimeLoans::_transferTokens: transfer amount overflows");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPair
Line:        950
Source: 
>         balances[src] = balances[src].sub(amount, "TimeLoans::_transferTokens: transfer amount exceeds balance");
>         balances[dst] = balances[dst].add(amount, "TimeLoans::_transferTokens: transfer amount overflows");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(src, dst, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLoanPairFactory
Line:        966
Source: 
>         require(pairs[address(_pair)] == address(0x0), "TimeLoanPairFactory::deploy: pair already created");
>         pairs[address(_pair)] = address(new TimeLoanPair(_pair));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                                         ^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        577
Source: 
>     constructor(IUniswapV2Pair _pair) public {
>         symbol = string(abi.encodePacked(IUniswapV2Pair(_pair.token0()).symbol(), "-", IUniswapV2Pair(_pair.token1()).symbol()));
>                                                                                                       ^^^^^^^^^^^^^^
>         pair = address(_pair);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        646
Source: 
>         
>         IERC20(pair).transfer(msg.sender, r);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityWithdrawals = liquidityWithdrawals.add(r);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        666
Source: 
>     function deposit(uint amount) public returns (bool) {
>         IERC20(pair).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _shares = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        768
Source: 
>         }
>         IERC20(pair).approve(address(UNI), withdrew);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         UNI.removeLiquidity(token0, token1, withdrew, _amountAMin, _amountBMin, address(this), now.add(1800));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        769
Source: 
>         IERC20(pair).approve(address(UNI), withdrew);
>         UNI.removeLiquidity(token0, token1, withdrew, _amountAMin, _amountBMin, address(this), now.add(1800));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityRemoved = liquidityRemoved.add(withdrew);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        790
Source: 
>         require(msg.sender == tx.origin, "TimeLoans::depositLiquidity: not an EOA keeper");
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        791
Source: 
>         IERC20(token0).approve(address(UNI), IERC20(token0).balanceOf(address(this)));
>         IERC20(token1).approve(address(UNI), IERC20(token1).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (,,uint _added) = UNI.addLiquidity(token0, token1, IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), 0, 0, address(this), now.add(1800));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        805
Source: 
>         uint _before = IERC20(collateral).balanceOf(address(this));
>         IERC20(collateral).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = IERC20(collateral).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        828
Source: 
>         
>         IERC20(borrow).transfer(msg.sender, _amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Borrowed(nextIndex, msg.sender, collateral, borrow, _received, _amountOut, block.number, block.number.add(DELAY));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        842
Source: 
>         require(_pos.expire < block.number, "TimeLoans::repay: position already expired");
>         IERC20(_pos.borrowed).transferFrom(msg.sender, address(this), _pos.amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _available = IERC20(_pos.collateral).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimeLoanPair
Line:        847
Source: 
>         }
>         IERC20(_pos.collateral).transfer(msg.sender, _pos.creditIn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pos.open = false;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TimeLoanPair
Line:        481
Source: 
>     /// @notice EIP-20 token symbol for this token
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TimeLoanPair
Line:        484
Source: 
>     /// @notice EIP-20 token decimals for this token
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
