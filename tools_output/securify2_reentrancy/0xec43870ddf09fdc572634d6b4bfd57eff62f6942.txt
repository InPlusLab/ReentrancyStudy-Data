Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.1. Changing pragma version to 0.6.1....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        45
Source: 
> 	
>     function BuyTickets(address _sender, uint256[] memory _max) public payable returns (uint256)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        97
Source: 
> 	
> 	function transferFundsOut() public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        111
Source: 
> 	
> 	function updateFees(uint _stakeHoldersfee, uint _mnefee, uint _ethfee) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        125
Source: 
> 	
> 	function updateSystemNumber(uint _systemNumber) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        137
Source: 
> 	
> 	function updateMaxNumber(uint _maxNumber) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        149
Source: 
> 	
> 	function updatePercentWin(uint _percentWin) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        161
Source: 
> 	
> 	function updateMNEContract(address _mneAddress) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        173
Source: 
> 	
> 	function winnerLength() public view returns (uint256) { return winner.length; }
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	function lossesLength() public view returns (uint256) { return lost.length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        174
Source: 
> 	function winnerLength() public view returns (uint256) { return winner.length; }
> 	function lossesLength() public view returns (uint256) { return lost.length; }
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumLuckyDraw
Line:        72
Source: 
> 			uint totalToPay = winAmount - stakeHoldersfee;
> 			if (!add.send(totalToPay)) revert('Error While Executing Payment.');
>         ^^^^^^^^^^^^^^^^^^^^
> 			totalPaidOut += totalToPay;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumLuckyDraw
Line:        91
Source: 
> 		if (msg.value < totalEthfee) revert('Not enough ETH.');
> 		mne.Payment.value(valueStakeHolder)();
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalSentToStakeHolders += valueStakeHolder;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        91
Source: 
> 		if (msg.value < totalEthfee) revert('Not enough ETH.');
> 		mne.Payment.value(valueStakeHolder)();
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalSentToStakeHolders += valueStakeHolder;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinereumLuckyDraw
Line:        125
Source: 
> 	
> 	function updateSystemNumber(uint _systemNumber) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinereumLuckyDraw
Line:        161
Source: 
> 	
> 	function updateMNEContract(address _mneAddress) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        45
Source: 
> 	
>     function BuyTickets(address _sender, uint256[] memory _max) public payable returns (uint256)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        111
Source: 
> 	
> 	function updateFees(uint _stakeHoldersfee, uint _mnefee, uint _ethfee) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        137
Source: 
> 	
> 	function updateMaxNumber(uint _maxNumber) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        149
Source: 
> 	
> 	function updatePercentWin(uint _percentWin) public
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        72
Source: 
> 			uint totalToPay = winAmount - stakeHoldersfee;
> 			if (!add.send(totalToPay)) revert('Error While Executing Payment.');
>         ^^^^^^^^^^^^^^^^^^^^
> 			totalPaidOut += totalToPay;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Minereum
Line:        8
Source: 
> interface Minereum {
>   function Payment (  ) payable external;  
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        45
Source: 
> 	
>     function BuyTickets(address _sender, uint256[] memory _max) public payable returns (uint256)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        16
Source: 
> 	uint public percentWin = 80;
> 	uint public mnefee = 500000000;
>                       ^^^^^^^^^
> 	uint public ethfee = 10000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        17
Source: 
> 	uint public mnefee = 500000000;
> 	uint public ethfee = 10000000000000000;
>                       ^^^^^^^^^^^^^^^^^
> 	uint public totalSentToStakeHolders = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        72
Source: 
> 			uint totalToPay = winAmount - stakeHoldersfee;
> 			if (!add.send(totalToPay)) revert('Error While Executing Payment.');
>         ^^^^^^^^^^^^^^^^^^^^
> 			totalPaidOut += totalToPay;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        91
Source: 
> 		if (msg.value < totalEthfee) revert('Not enough ETH.');
> 		mne.Payment.value(valueStakeHolder)();
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalSentToStakeHolders += valueStakeHolder;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        103
Source: 
> 			uint contractBalance = address(this).balance;
> 			if (!add.send(contractBalance)) revert('Error While Executing Payment.');			
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        72
Source: 
> 			uint totalToPay = winAmount - stakeHoldersfee;
> 			if (!add.send(totalToPay)) revert('Error While Executing Payment.');
>         ^^^^^^^^^^^^^^^^^^^^
> 			totalPaidOut += totalToPay;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        91
Source: 
> 		if (msg.value < totalEthfee) revert('Not enough ETH.');
> 		mne.Payment.value(valueStakeHolder)();
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalSentToStakeHolders += valueStakeHolder;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        72
Source: 
> 			uint totalToPay = winAmount - stakeHoldersfee;
> 			if (!add.send(totalToPay)) revert('Error While Executing Payment.');
>         ^^^^^^^^^^^^^^^^^^^^
> 			totalPaidOut += totalToPay;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        91
Source: 
> 		if (msg.value < totalEthfee) revert('Not enough ETH.');
> 		mne.Payment.value(valueStakeHolder)();
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalSentToStakeHolders += valueStakeHolder;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        103
Source: 
> 			uint contractBalance = address(this).balance;
> 			if (!add.send(contractBalance)) revert('Error While Executing Payment.');			
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumLuckyDraw
Line:        91
Source: 
> 		if (msg.value < totalEthfee) revert('Not enough ETH.');
> 		mne.Payment.value(valueStakeHolder)();
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalSentToStakeHolders += valueStakeHolder;

[0m
