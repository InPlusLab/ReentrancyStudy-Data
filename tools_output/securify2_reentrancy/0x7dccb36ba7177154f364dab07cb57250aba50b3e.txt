Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenericMiner
Line:        1246
Source: 
>   */
>   function releaseMIMO(address _user) public override {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     UserInfo storage userInfo = _users[_user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenericMiner
Line:        1260
Source: 
>   */
>   function stake(address _user) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _users[_user].stake;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenericMiner
Line:        1269
Source: 
>   */
>   function pendingMIMO(address _user) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 currentBalance = a.mimo().balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenericMiner
Line:        1285
Source: 
>   **/
>   function userInfo(address _user) public view override returns (UserInfo memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _users[_user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenericMiner
Line:        1246
Source: 
>   */
>   function releaseMIMO(address _user) public override {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     UserInfo storage userInfo = _users[_user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenericMiner
Line:        1260
Source: 
>   */
>   function stake(address _user) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _users[_user].stake;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenericMiner
Line:        1269
Source: 
>   */
>   function pendingMIMO(address _user) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 currentBalance = a.mimo().balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenericMiner
Line:        1285
Source: 
>   **/
>   function userInfo(address _user) public view override returns (UserInfo memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _users[_user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SupplyMiner
Line:        1398
Source: 
>   */
>   function baseDebtChanged(address user, uint256 newBaseDebt) public override onlyNotifier {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _updateStake(user, newBaseDebt);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GenericMiner
Line:        1246
Source: 
>   */
>   function releaseMIMO(address _user) public override {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     UserInfo storage userInfo = _users[_user];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SupplyMiner
Line:        1398
Source: 
>   */
>   function baseDebtChanged(address user, uint256 newBaseDebt) public override onlyNotifier {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _updateStake(user, newBaseDebt);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GenericMiner
Line:        1260
Source: 
>   */
>   function stake(address _user) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _users[_user].stake;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GenericMiner
Line:        1269
Source: 
>   */
>   function pendingMIMO(address _user) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 currentBalance = a.mimo().balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GenericMiner
Line:        1285
Source: 
>   **/
>   function userInfo(address _user) public view override returns (UserInfo memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _users[_user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GenericMiner
Line:        1260
Source: 
>   */
>   function stake(address _user) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _users[_user].stake;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GenericMiner
Line:        1269
Source: 
>   */
>   function pendingMIMO(address _user) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 currentBalance = a.mimo().balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GenericMiner
Line:        1285
Source: 
>   **/
>   function userInfo(address _user) public view override returns (UserInfo memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _users[_user];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GenericMiner
Line:        1373
Source: 
>     }
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GenericMiner
Line:        1373
Source: 
>     }
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GenericMiner
Line:        1334
Source: 
>     if (pending > 0) {
>       require(a.mimo().transfer(user, pending));
>               ^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GenericMiner
Line:        1334
Source: 
>     if (pending > 0) {
>       require(a.mimo().transfer(user, pending));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    GenericMiner
Line:        1247
Source: 
>   function releaseMIMO(address _user) public override {
>     UserInfo storage userInfo = _users[_user];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     _refresh();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    GenericMiner
Line:        1298
Source: 
> 
>     UserInfo storage userInfo = _users[user];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(userInfo.stake >= value, "INSUFFICIENT_STAKE_FOR_USER"); //TODO cleanup error message

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    GenericMiner
Line:        1320
Source: 
> 
>     UserInfo storage userInfo = _users[user];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     _refresh();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    GenericMiner
Line:        1346
Source: 
>   */
>   function _updateStake(address user, uint256 stake) internal returns (bool) {
>                                       ^^^^^^^^^^^^^
>     uint256 oldStake = _users[user].stake;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        262
Source: 
> 
>   function MANAGER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        264
Source: 
> 
>   function MINTER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ITimelock
Line:        867
Source: 
> 
>   function GRACE_PERIOD() external view returns (uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IVaultsCore
Line:        1021
Source: 
> 
>   function WETH() external view returns (IWETH);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GenericMiner
Line:        1252
Source: 
>     userInfo.accAmountPerShare = _accAmountPerShare;
>     require(a.mimo().transfer(_user, pending));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GenericMiner
Line:        1307
Source: 
> 
>     require(a.mimo().transfer(user, pending));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit StakeDecreased(user, value);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GenericMiner
Line:        1334
Source: 
>     if (pending > 0) {
>       require(a.mimo().transfer(user, pending));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SupplyMiner
Line:        1388
Source: 
>   modifier onlyNotifier() {
>     require(msg.sender == address(a.debtNotifier()), "Caller is not DebtNotifier");
>                                   ^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1252
Source: 
>     userInfo.accAmountPerShare = _accAmountPerShare;
>     require(a.mimo().transfer(_user, pending));
>             ^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1373
Source: 
>     }
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1373
Source: 
>     }
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1270
Source: 
>   function pendingMIMO(address _user) public view override returns (uint256) {
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1270
Source: 
>   function pendingMIMO(address _user) public view override returns (uint256) {
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1252
Source: 
>     userInfo.accAmountPerShare = _accAmountPerShare;
>     require(a.mimo().transfer(_user, pending));
>             ^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1373
Source: 
>     }
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1373
Source: 
>     }
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1270
Source: 
>   function pendingMIMO(address _user) public view override returns (uint256) {
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1270
Source: 
>   function pendingMIMO(address _user) public view override returns (uint256) {
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1307
Source: 
> 
>     require(a.mimo().transfer(user, pending));
>             ^^^^^^^^
>     emit StakeDecreased(user, value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GenericMiner
Line:        1334
Source: 
>     if (pending > 0) {
>       require(a.mimo().transfer(user, pending));
>               ^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GenericMiner
Line:        1234
Source: 
> 
>   uint256 private _balanceTracker;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private _accAmountPerShare;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GenericMiner
Line:        1231
Source: 
> 
>   uint256 public override totalStake;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   IGovernanceAddressProvider public override a;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GenericMiner
Line:        1234
Source: 
> 
>   uint256 private _balanceTracker;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private _accAmountPerShare;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GenericMiner
Line:        1235
Source: 
>   uint256 private _balanceTracker;
>   uint256 private _accAmountPerShare;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    GenericMiner
Line:        1231
Source: 
> 
>   uint256 public override totalStake;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   IGovernanceAddressProvider public override a;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    GenericMiner
Line:        1235
Source: 
>   uint256 private _balanceTracker;
>   uint256 private _accAmountPerShare;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        177
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        178
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        180
Source: 
> 
>   uint256 internal constant _RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_RAY = _RAY / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        181
Source: 
>   uint256 internal constant _RAY = 1e27;
>   uint256 internal constant _HALF_RAY = _RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        183
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        177
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        178
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        180
Source: 
> 
>   uint256 internal constant _RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_RAY = _RAY / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        181
Source: 
>   uint256 internal constant _RAY = 1e27;
>   uint256 internal constant _HALF_RAY = _RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        183
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GenericMiner
Line:        1375
Source: 
>     uint256 reward = currentBalance.sub(_balanceTracker);
>     _balanceTracker = currentBalance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GenericMiner
Line:        1377
Source: 
> 
>     _accAmountPerShare = _accAmountPerShare.add(reward.rayDiv(totalStake));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GenericMiner
Line:        1250
Source: 
>     uint256 pending = userInfo.stake.rayMul(_accAmountPerShare.sub(userInfo.accAmountPerShare));
>     _balanceTracker = _balanceTracker.sub(pending);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     userInfo.accAmountPerShare = _accAmountPerShare;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GenericMiner
Line:        1251
Source: 
>     _balanceTracker = _balanceTracker.sub(pending);
>     userInfo.accAmountPerShare = _accAmountPerShare;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(a.mimo().transfer(_user, pending));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GenericMiner
Line:        1375
Source: 
>     uint256 reward = currentBalance.sub(_balanceTracker);
>     _balanceTracker = currentBalance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GenericMiner
Line:        1377
Source: 
> 
>     _accAmountPerShare = _accAmountPerShare.add(reward.rayDiv(totalStake));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GenericMiner
Line:        1250
Source: 
>     uint256 pending = userInfo.stake.rayMul(_accAmountPerShare.sub(userInfo.accAmountPerShare));
>     _balanceTracker = _balanceTracker.sub(pending);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     userInfo.accAmountPerShare = _accAmountPerShare;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GenericMiner
Line:        1251
Source: 
>     _balanceTracker = _balanceTracker.sub(pending);
>     userInfo.accAmountPerShare = _accAmountPerShare;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(a.mimo().transfer(_user, pending));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1252
Source: 
>     userInfo.accAmountPerShare = _accAmountPerShare;
>     require(a.mimo().transfer(_user, pending));
>             ^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1373
Source: 
>     }
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1270
Source: 
>   function pendingMIMO(address _user) public view override returns (uint256) {
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1307
Source: 
> 
>     require(a.mimo().transfer(user, pending));
>             ^^^^^^^^
>     emit StakeDecreased(user, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1307
Source: 
> 
>     require(a.mimo().transfer(user, pending));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit StakeDecreased(user, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1334
Source: 
>     if (pending > 0) {
>       require(a.mimo().transfer(user, pending));
>               ^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1334
Source: 
>     if (pending > 0) {
>       require(a.mimo().transfer(user, pending));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1363
Source: 
>   function _newTokensReceived() internal view returns (uint256) {
>     return a.mimo().balanceOf(address(this)).sub(_balanceTracker);
>            ^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1363
Source: 
>   function _newTokensReceived() internal view returns (uint256) {
>     return a.mimo().balanceOf(address(this)).sub(_balanceTracker);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1252
Source: 
>     userInfo.accAmountPerShare = _accAmountPerShare;
>     require(a.mimo().transfer(_user, pending));
>             ^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1373
Source: 
>     }
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1270
Source: 
>   function pendingMIMO(address _user) public view override returns (uint256) {
>     uint256 currentBalance = a.mimo().balanceOf(address(this));
>                              ^^^^^^^^
>     uint256 reward = currentBalance.sub(_balanceTracker);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1307
Source: 
> 
>     require(a.mimo().transfer(user, pending));
>             ^^^^^^^^
>     emit StakeDecreased(user, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1334
Source: 
>     if (pending > 0) {
>       require(a.mimo().transfer(user, pending));
>               ^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1363
Source: 
>   function _newTokensReceived() internal view returns (uint256) {
>     return a.mimo().balanceOf(address(this)).sub(_balanceTracker);
>            ^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GenericMiner
Line:        1363
Source: 
>   function _newTokensReceived() internal view returns (uint256) {
>     return a.mimo().balanceOf(address(this)).sub(_balanceTracker);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        177
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        178
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        183
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        177
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        178
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        183
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
