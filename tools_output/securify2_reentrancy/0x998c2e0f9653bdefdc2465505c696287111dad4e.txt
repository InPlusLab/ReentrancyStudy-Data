[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DaiSwap
Line:        66
Source: 
>         totaldai             = safeAdd(totaldai, shares);
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transferFrom(msg.sender, address(this), usd);

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DaiSwap
Line:        67
Source: 
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         usdContract.transferFrom(msg.sender, address(this), usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DaiSwap
Line:        75
Source: 
>         daiposit[msg.sender] = 0;
>         daiContract.transfer(msg.sender, dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transfer(msg.sender, usd);

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DaiSwap
Line:        76
Source: 
>         daiContract.transfer(msg.sender, dai);
>         usdContract.transfer(msg.sender, usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DaiSwap
Line:        36
Source: 
>     uint public totaldai = 0;
>     uint public baseMultiplier = 40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint fee = 997; // 0.3%

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DaiSwap
Line:        37
Source: 
>     uint public baseMultiplier = 40;
>     uint fee = 997; // 0.3%
>     ^^^^^^^^^^^^^^
>     uint constant decOffset = 1e12;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DaiSwap
Line:        39
Source: 
>     uint constant decOffset = 1e12;
>     Token  daiContract = Token(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //Token  usdContract = Token(0xdAC17F958D2ee523a2206206994597C13D831ec7);  // USDT

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DaiSwap
Line:        41
Source: 
>     //Token  usdContract = Token(0xdAC17F958D2ee523a2206206994597C13D831ec7);  // USDT
>     Token  usdContract = Token(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // USDC
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //Token   daiContract = Token(0xE888757Fbf1f29B520a80f977DBE52F9AD20d6C9); //Kovan Testnet

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        25
Source: 
> contract Token {
>   function balanceOf(address _owner) public view returns (uint256 balance) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function transfer(address _to, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        26
Source: 
>   function balanceOf(address _owner) public view returns (uint256 balance) {}
>   function transfer(address _to, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   //function transfer(address _to, uint _value) public;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        28
Source: 
>   //function transfer(address _to, uint _value) public;
>   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   //function transferFrom(address from, address to, uint value) public;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaiSwap
Line:        57
Source: 
>     
>     function usdAmountFromDai(uint dai) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return usdAmountFromShares(sharesFromDai(dai));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaiSwap
Line:        61
Source: 
>     
>     function deposit(uint dai) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint shares = sharesFromDai(dai);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaiSwap
Line:        70
Source: 
>     
>     function withdraw() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint dai = safeMul(daiposit[msg.sender],  daiContract.balanceOf(address(this))) / totaldai;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaiSwap
Line:        88
Source: 
>     
>     function swapForUSD(uint dai) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint usd = calcSwapForUSD(dai);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaiSwap
Line:        102
Source: 
>     
>     function swapForDai(uint usd) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint dai = calcSwapForDai(usd);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiSwap
Line:        45
Source: 
> 
>     function sharesFromDai(uint dai) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (totaldai == 0) return dai; // Initialisation 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiSwap
Line:        51
Source: 
> 
>     function usdAmountFromShares(uint shares) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (totaldai == 0) return shares / decOffset; // Initialisation - 1 Dai = 1 Shares

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiSwap
Line:        57
Source: 
>     
>     function usdAmountFromDai(uint dai) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return usdAmountFromShares(sharesFromDai(dai));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiSwap
Line:        61
Source: 
>     
>     function deposit(uint dai) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint shares = sharesFromDai(dai);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiSwap
Line:        79
Source: 
>     
>     function calcSwapForUSD(uint dai) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint base    = safeMul(baseMultiplier, totaldai);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiSwap
Line:        88
Source: 
>     
>     function swapForUSD(uint dai) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint usd = calcSwapForUSD(dai);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiSwap
Line:        94
Source: 
>     
>     function calcSwapForDai(uint usd) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint base     = safeMul(baseMultiplier, totaldai);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiSwap
Line:        102
Source: 
>     
>     function swapForDai(uint usd) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint dai = calcSwapForDai(usd);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        25
Source: 
> contract Token {
>   function balanceOf(address _owner) public view returns (uint256 balance) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function transfer(address _to, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        26
Source: 
>   function balanceOf(address _owner) public view returns (uint256 balance) {}
>   function transfer(address _to, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   //function transfer(address _to, uint _value) public;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        28
Source: 
>   //function transfer(address _to, uint _value) public;
>   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   //function transferFrom(address from, address to, uint value) public;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        9
Source: 
>   function safeMul(uint a, uint b) internal pure returns (uint) {
>     uint c = a * b;
>              ^^^^^
>     assert(a == 0 || c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaiSwap
Line:        66
Source: 
>         totaldai             = safeAdd(totaldai, shares);
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transferFrom(msg.sender, address(this), usd);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaiSwap
Line:        67
Source: 
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         usdContract.transferFrom(msg.sender, address(this), usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaiSwap
Line:        71
Source: 
>     function withdraw() public {
>         uint dai = safeMul(daiposit[msg.sender],  daiContract.balanceOf(address(this))) / totaldai;
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint usd = safeMul(daiposit[msg.sender], usdContract.balanceOf(address(this))) / totaldai;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaiSwap
Line:        72
Source: 
>         uint dai = safeMul(daiposit[msg.sender],  daiContract.balanceOf(address(this))) / totaldai;
>         uint usd = safeMul(daiposit[msg.sender], usdContract.balanceOf(address(this))) / totaldai;
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totaldai = safeSub(totaldai, daiposit[msg.sender]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaiSwap
Line:        75
Source: 
>         daiposit[msg.sender] = 0;
>         daiContract.transfer(msg.sender, dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transfer(msg.sender, usd);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaiSwap
Line:        76
Source: 
>         daiContract.transfer(msg.sender, dai);
>         usdContract.transfer(msg.sender, usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiSwap
Line:        38
Source: 
>     uint fee = 997; // 0.3%
>     uint constant decOffset = 1e12;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Token  daiContract = Token(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiSwap
Line:        47
Source: 
>         if (totaldai == 0) return dai; // Initialisation 
>         uint amt_dai  =  daiContract.balanceOf(address(this));
>         ^^^^^^^^^^^^
>         return safeMul(dai, totaldai) / amt_dai;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiSwap
Line:        53
Source: 
>         if (totaldai == 0) return shares / decOffset; // Initialisation - 1 Dai = 1 Shares
>         uint amt_usd = safeMul(usdContract.balanceOf(address(this)), decOffset);
>         ^^^^^^^^^^^^
>         return (safeMul(shares, amt_usd) / totaldai) / decOffset;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiSwap
Line:        81
Source: 
>         uint base    = safeMul(baseMultiplier, totaldai);
>         uint amt_dai =         daiContract.balanceOf(address(this));
>         ^^^^^^^^^^^^
>         uint amt_usd = safeMul(usdContract.balanceOf(address(this)), decOffset);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiSwap
Line:        82
Source: 
>         uint amt_dai =         daiContract.balanceOf(address(this));
>         uint amt_usd = safeMul(usdContract.balanceOf(address(this)), decOffset);
>         ^^^^^^^^^^^^
>         uint usd     = safeSub(safeAdd(amt_usd, base), ( safeMul(safeAdd(base, amt_usd), safeAdd(base, amt_dai)) / safeAdd(safeAdd(base, amt_dai), dai)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiSwap
Line:        96
Source: 
>         uint base     = safeMul(baseMultiplier, totaldai);
>         uint amt_dai  =         daiContract.balanceOf(address(this));
>         ^^^^^^^^^^^^
>         uint amt_usd  = safeMul(usdContract.balanceOf(address(this)), decOffset);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiSwap
Line:        97
Source: 
>         uint amt_dai  =         daiContract.balanceOf(address(this));
>         uint amt_usd  = safeMul(usdContract.balanceOf(address(this)), decOffset);
>         ^^^^^^^^^^^^
>         uint dai      = safeSub(safeAdd(amt_dai, base), ( safeMul(safeAdd(base, amt_usd), safeAdd(base, amt_dai)) / safeAdd(safeAdd(base, amt_usd), safeMul(usd, decOffset))));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.10;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DaiSwap
Line:        37
Source: 
>     uint public baseMultiplier = 40;
>     uint fee = 997; // 0.3%
>     ^^^^^^^^^^^^^^
>     uint constant decOffset = 1e12;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DaiSwap
Line:        38
Source: 
>     uint fee = 997; // 0.3%
>     uint constant decOffset = 1e12;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Token  daiContract = Token(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DaiSwap
Line:        39
Source: 
>     uint constant decOffset = 1e12;
>     Token  daiContract = Token(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //Token  usdContract = Token(0xdAC17F958D2ee523a2206206994597C13D831ec7);  // USDT

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DaiSwap
Line:        41
Source: 
>     //Token  usdContract = Token(0xdAC17F958D2ee523a2206206994597C13D831ec7);  // USDT
>     Token  usdContract = Token(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // USDC
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //Token   daiContract = Token(0xE888757Fbf1f29B520a80f977DBE52F9AD20d6C9); //Kovan Testnet

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaiSwap
Line:        53
Source: 
>         if (totaldai == 0) return shares / decOffset; // Initialisation - 1 Dai = 1 Shares
>         uint amt_usd = safeMul(usdContract.balanceOf(address(this)), decOffset);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (safeMul(shares, amt_usd) / totaldai) / decOffset;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaiSwap
Line:        71
Source: 
>     function withdraw() public {
>         uint dai = safeMul(daiposit[msg.sender],  daiContract.balanceOf(address(this))) / totaldai;
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint usd = safeMul(daiposit[msg.sender], usdContract.balanceOf(address(this))) / totaldai;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaiSwap
Line:        72
Source: 
>         uint dai = safeMul(daiposit[msg.sender],  daiContract.balanceOf(address(this))) / totaldai;
>         uint usd = safeMul(daiposit[msg.sender], usdContract.balanceOf(address(this))) / totaldai;
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totaldai = safeSub(totaldai, daiposit[msg.sender]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaiSwap
Line:        81
Source: 
>         uint base    = safeMul(baseMultiplier, totaldai);
>         uint amt_dai =         daiContract.balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amt_usd = safeMul(usdContract.balanceOf(address(this)), decOffset);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaiSwap
Line:        82
Source: 
>         uint amt_dai =         daiContract.balanceOf(address(this));
>         uint amt_usd = safeMul(usdContract.balanceOf(address(this)), decOffset);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint usd     = safeSub(safeAdd(amt_usd, base), ( safeMul(safeAdd(base, amt_usd), safeAdd(base, amt_dai)) / safeAdd(safeAdd(base, amt_dai), dai)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaiSwap
Line:        96
Source: 
>         uint base     = safeMul(baseMultiplier, totaldai);
>         uint amt_dai  =         daiContract.balanceOf(address(this));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amt_usd  = safeMul(usdContract.balanceOf(address(this)), decOffset);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaiSwap
Line:        97
Source: 
>         uint amt_dai  =         daiContract.balanceOf(address(this));
>         uint amt_usd  = safeMul(usdContract.balanceOf(address(this)), decOffset);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint dai      = safeSub(safeAdd(amt_dai, base), ( safeMul(safeAdd(base, amt_usd), safeAdd(base, amt_dai)) / safeAdd(safeAdd(base, amt_usd), safeMul(usd, decOffset))));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiSwap
Line:        47
Source: 
>         if (totaldai == 0) return dai; // Initialisation 
>         uint amt_dai  =  daiContract.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return safeMul(dai, totaldai) / amt_dai;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiSwap
Line:        66
Source: 
>         totaldai             = safeAdd(totaldai, shares);
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transferFrom(msg.sender, address(this), usd);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiSwap
Line:        67
Source: 
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         usdContract.transferFrom(msg.sender, address(this), usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiSwap
Line:        75
Source: 
>         daiposit[msg.sender] = 0;
>         daiContract.transfer(msg.sender, dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transfer(msg.sender, usd);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiSwap
Line:        76
Source: 
>         daiContract.transfer(msg.sender, dai);
>         usdContract.transfer(msg.sender, usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiSwap
Line:        90
Source: 
>         uint usd = calcSwapForUSD(dai);
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transfer(msg.sender, usd);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiSwap
Line:        91
Source: 
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         usdContract.transfer(msg.sender, usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiSwap
Line:        104
Source: 
>         uint dai = calcSwapForDai(usd);
>         usdContract.transferFrom(msg.sender, address(this), usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiContract.transfer(msg.sender, dai);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiSwap
Line:        105
Source: 
>         usdContract.transferFrom(msg.sender, address(this), usd);
>         daiContract.transfer(msg.sender, dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DaiSwap
Line:        65
Source: 
>         daiposit[msg.sender] = safeAdd(daiposit[msg.sender], shares);
>         totaldai             = safeAdd(totaldai, shares);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiContract.transferFrom(msg.sender, address(this), dai);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DaiSwap
Line:        73
Source: 
>         uint usd = safeMul(daiposit[msg.sender], usdContract.balanceOf(address(this))) / totaldai;
>         totaldai = safeSub(totaldai, daiposit[msg.sender]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiposit[msg.sender] = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaiSwap
Line:        66
Source: 
>         totaldai             = safeAdd(totaldai, shares);
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transferFrom(msg.sender, address(this), usd);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaiSwap
Line:        67
Source: 
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         usdContract.transferFrom(msg.sender, address(this), usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaiSwap
Line:        75
Source: 
>         daiposit[msg.sender] = 0;
>         daiContract.transfer(msg.sender, dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transfer(msg.sender, usd);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaiSwap
Line:        76
Source: 
>         daiContract.transfer(msg.sender, dai);
>         usdContract.transfer(msg.sender, usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaiSwap
Line:        90
Source: 
>         uint usd = calcSwapForUSD(dai);
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdContract.transfer(msg.sender, usd);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaiSwap
Line:        91
Source: 
>         daiContract.transferFrom(msg.sender, address(this), dai);
>         usdContract.transfer(msg.sender, usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaiSwap
Line:        104
Source: 
>         uint dai = calcSwapForDai(usd);
>         usdContract.transferFrom(msg.sender, address(this), usd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiContract.transfer(msg.sender, dai);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaiSwap
Line:        105
Source: 
>         usdContract.transferFrom(msg.sender, address(this), usd);
>         daiContract.transfer(msg.sender, dai);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
