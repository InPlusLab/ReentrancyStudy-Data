Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.7. Changing pragma version to 0.5.7....
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AssetPairManager
Line:        1529
Source: 
>      */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         IRebalancingSetToken _rebalancingSetToken

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        23
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AssetPairManager
Line:        1542
Source: 
>         require(  // coverage-disable-line
>             core.validSets(address(_rebalancingSetToken)),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "AssetPairManager.initialize: Invalid or disabled RebalancingSetToken address"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AssetPairManager
Line:        1621
Source: 
>         // Get current collateral Set
>         ISetToken currentCollateralSet = ISetToken(rebalancingSetToken.currentSet());
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AssetPairManager
Line:        1625
Source: 
>         // great to run good auction. Return nextSet address.
>         ISetToken nextSet = allocator.determineNewAllocation(
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             newBaseAssetAllocation,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AssetPairManager
Line:        1632
Source: 
>         // Get current and next Set dollar values
>         uint256 currentSetDollarValue = allocator.calculateCollateralSetValue(
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             currentCollateralSet

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AssetPairManager
Line:        1636
Source: 
> 
>         uint256 nextSetDollarValue = allocator.calculateCollateralSetValue(
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nextSet

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AssetPairManager
Line:        1641
Source: 
>         // Get auction price divisor
>         uint256 auctionPriceDivisor = auctionLibrary.priceDivisor();
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AssetPairManager
Line:        1654
Source: 
>         // Propose new allocation to Rebalancing Set Token
>         rebalancingSetToken.propose(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(nextSet),

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FlexibleTimingManagerLibrary
Line:        1266
Source: 
>     {
>         uint256 SET_TOKEN_DECIMALS = 18;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPairManager
Line:        1542
Source: 
>         require(  // coverage-disable-line
>             core.validSets(address(_rebalancingSetToken)),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "AssetPairManager.initialize: Invalid or disabled RebalancingSetToken address"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPairManager
Line:        1712
Source: 
>     {
>         return trigger.isBullish() ? bullishBaseAssetAllocation : bearishBaseAssetAllocation;
>                ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FlexibleTimingManagerLibrary
Line:        1131
Source: 
>         // Require that enough time has passed from last rebalance
>         uint256 lastRebalanceTimestamp = _rebalancingSetInterface.lastRebalanceTimestamp();
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rebalanceInterval = _rebalancingSetInterface.rebalanceInterval();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FlexibleTimingManagerLibrary
Line:        1132
Source: 
>         uint256 lastRebalanceTimestamp = _rebalancingSetInterface.lastRebalanceTimestamp();
>         uint256 rebalanceInterval = _rebalancingSetInterface.rebalanceInterval();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FlexibleTimingManagerLibrary
Line:        1141
Source: 
>         require(
>             _rebalancingSetInterface.rebalanceState() == RebalancingLibrary.State.Default,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "FlexibleTimingManagerLibrary.proposeNewRebalance: State must be in Default"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPairManager
Line:        1621
Source: 
>         // Get current collateral Set
>         ISetToken currentCollateralSet = ISetToken(rebalancingSetToken.currentSet());
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPairManager
Line:        1625
Source: 
>         // great to run good auction. Return nextSet address.
>         ISetToken nextSet = allocator.determineNewAllocation(
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             newBaseAssetAllocation,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPairManager
Line:        1632
Source: 
>         // Get current and next Set dollar values
>         uint256 currentSetDollarValue = allocator.calculateCollateralSetValue(
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             currentCollateralSet

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPairManager
Line:        1636
Source: 
> 
>         uint256 nextSetDollarValue = allocator.calculateCollateralSetValue(
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nextSet

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPairManager
Line:        1641
Source: 
>         // Get auction price divisor
>         uint256 auctionPriceDivisor = auctionLibrary.priceDivisor();
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPairManager
Line:        1764
Source: 
>         // Get RebalancingSetToken timing info
>         uint256 lastRebalanceTimestamp = rebalancingSetToken.lastRebalanceTimestamp();
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rebalanceInterval = rebalancingSetToken.rebalanceInterval();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPairManager
Line:        1654
Source: 
>         // Propose new allocation to Rebalancing Set Token
>         rebalancingSetToken.propose(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(nextSet),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPairManager
Line:        1765
Source: 
>         uint256 lastRebalanceTimestamp = rebalancingSetToken.lastRebalanceTimestamp();
>         uint256 rebalanceInterval = rebalancingSetToken.rebalanceInterval();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPairManager
Line:        1769
Source: 
>         return block.timestamp.sub(lastRebalanceTimestamp) >= rebalanceInterval &&
>             rebalancingSetToken.rebalanceState() == RebalancingLibrary.State.Default;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    AssetPairManager
Line:        1440
Source: 
>     IAuctionPriceCurve public auctionLibrary;
>     IRebalancingSetToken public rebalancingSetToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public baseAssetAllocation;  // Percent of base asset currently allocated in strategy

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    AssetPairManager
Line:        1454
Source: 
>     // Timestamp of last successful initialPropose call
>     uint256 public recentInitialProposeTimestamp;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AssetPairManager
Line:        1584
Source: 
>         // Set initial trigger timestamp
>         recentInitialProposeTimestamp = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AssetPairManager
Line:        1663
Source: 
>         // Set baseAssetAllocation to new allocation amount
>         baseAssetAllocation = newBaseAssetAllocation;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FlexibleTimingManagerLibrary
Line:        1205
Source: 
>         // Get prices from oracles
>         bytes32 priceInBytes = IMedian(_priceFeedAddress).read();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    AssetPairManager
Line:        1782
Source: 
>     {
>         return block.timestamp.sub(recentInitialProposeTimestamp) > signalConfirmationMaxTime;
>                ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    FlexibleTimingManagerLibrary
Line:        1134
Source: 
>         require(
>             block.timestamp >= lastRebalanceTimestamp.add(rebalanceInterval),
>             ^^^^^^^^^^^^^^^
>             "FlexibleTimingManagerLibrary.proposeNewRebalance: Rebalance interval not elapsed"

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    AssetPairManager
Line:        1795
Source: 
>     {
>         uint256 timeSinceInitialPropose = block.timestamp.sub(recentInitialProposeTimestamp);
>                                           ^^^^^^^^^^^^^^^
>         return timeSinceInitialPropose >= signalConfirmationMinTime && timeSinceInitialPropose <= signalConfirmationMaxTime;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    AssetPairManager
Line:        1768
Source: 
>         // Require that Rebalancing Set Token is in Default state and rebalanceInterval elapsed
>         return block.timestamp.sub(lastRebalanceTimestamp) >= rebalanceInterval &&
>                ^^^^^^^^^^^^^^^
>             rebalancingSetToken.rebalanceState() == RebalancingLibrary.State.Default;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    AssetPairManager
Line:        1584
Source: 
>         // Set initial trigger timestamp
>         recentInitialProposeTimestamp = block.timestamp;
>                                         ^^^^^^^^^^^^^^^
> 

[0m
