Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OST
Line:        153
Source: 
> 	function totalSupply() public view returns (uint256) {
> 		return info.totalSupply;
>                     ^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OpenseaTraders
Line:        288
Source: 
> 	function name() external view returns (string memory) {
> 		return info.metadata.name();
>            ^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    OpenseaTraders
Line:        258
Source: 
> 		require(msg.sender == ownerOf(_tokenId));
> 		info.list[_tokenId].approved = _approved;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, _approved, _tokenId);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Metadata
Line:        53
Source: 
> 	}
> 	function baseTokenURI() public pure returns (string memory) {
>                                            ^^^^^^^^^^^^^^^^^^^
> 		return "https://api.openseatraders.io/token/";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Metadata
Line:        54
Source: 
> 	function baseTokenURI() public pure returns (string memory) {
> 		return "https://api.openseatraders.io/token/";
>                          ^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    OST
Line:        106
Source: 
> 	constructor() public {
> 		info.router = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
>                                  ^^^^^^^^^^^^^^^^^
> 		info.pair = Pair(Factory(info.router.factory()).createPair(info.router.WETH(), address(this)));

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    OpenseaTraders
Line:        212
Source: 
> 	event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
> 	event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
>                                                                                    ^^^^^^^
> 	event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    OST
Line:        106
Source: 
> 	constructor() public {
> 		info.router = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
>                                                           ^^^^^^^^^
> 		info.pair = Pair(Factory(info.router.factory()).createPair(info.router.WETH(), address(this)));

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    OST
Line:        107
Source: 
> 		info.router = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
> 		info.pair = Pair(Factory(info.router.factory()).createPair(info.router.WETH(), address(this)));
>                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.weth0 = info.pair.token0() == info.router.WETH();

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    OpenseaTraders
Line:        213
Source: 
> 	event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
> 	event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
>                                                                     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    OpenseaTraders
Line:        215
Source: 
> 
> 	event Claimed(uint256 indexed index, address indexed account, uint256 indexed tokenId);
>                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OpenseaTraders
Line:        282
Source: 
> 		if (_size > 0) {
> 			require(Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) == 0x150b7a02);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OpenseaTraders
Line:        320
Source: 
> 	function balanceOf(address _owner) public view returns (uint256) {
> 		return info.users[_owner].list.length;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OpenseaTraders
Line:        370
Source: 
> 		require(_limit > 0);
> 		totalTokens = totalSupply();
>        ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OpenseaTraders
Line:        394
Source: 
> 		require(_limit > 0);
> 		totalTokens = balanceOf(_owner);
>            ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OpenseaTraders
Line:        258
Source: 
> 		require(msg.sender == ownerOf(_tokenId));
> 		info.list[_tokenId].approved = _approved;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, _approved, _tokenId);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OpenseaTraders
Line:        291
Source: 
> 
> 	function symbol() external view returns (string memory) {
>                                                    ^^^^^^^
> 		return info.metadata.symbol();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OpenseaTraders
Line:        299
Source: 
> 
> 	function baseTokenURI() external view returns (string memory) {
>      ^^^^^^^^^^^^^^^^^^^^
> 		return info.metadata.baseTokenURI();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OpenseaTraders
Line:        300
Source: 
> 	function baseTokenURI() external view returns (string memory) {
> 		return info.metadata.baseTokenURI();
>                                      ^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OpenseaTraders
Line:        304
Source: 
> 	function tokenURI(uint256 _tokenId) external view returns (string memory) {
> 		return info.metadata.tokenURI(_tokenId);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OpenseaTraders
Line:        308
Source: 
> 	function ostAddress() external view returns (address) {
> 		return address(info.ost);
>                      ^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OpenseaTraders
Line:        315
Source: 
> 
> 	function totalSupply() public view returns (uint256) {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.totalSupply;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OST
Line:        166
Source: 
> 		totalTokens = totalSupply();
> 		totalLPTokens = info.pair.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^^^
> 		(uint256 _res0, uint256 _res1, ) = info.pair.getReserves();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OpenseaTraders
Line:        247
Source: 
> 		bytes32 _node = keccak256(abi.encodePacked(_index, _account, _amount));
> 		require(_verify(_merkleProof, _node));
>                           ^^^^^^^^^^^^^^
> 		uint256 _claimedWordIndex = _index / 256;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OpenseaTraders
Line:        311
Source: 
> 
> 	function owner() public view returns (address) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OpenseaTraders
Line:        347
Source: 
> 
> 	function isClaimed(uint256 _index) public view returns (bool) {
>                                                              ^^^
> 		uint256 _claimedWordIndex = _index / 256;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OpenseaTraders
Line:        359
Source: 
> 
> 	function getTokens(uint256[] memory _tokenIds) public view returns (address[] memory owners, address[] memory approveds) {
>                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 _length = _tokenIds.length;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OpenseaTraders
Line:        394
Source: 
> 		require(_limit > 0);
> 		totalTokens = balanceOf(_owner);
>            ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Metadata
Line:        64
Source: 
> 		}
> 		bytes memory _uri = new bytes(_base.length + _digits);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		for (uint256 i = 0; i < _uri.length; i++) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OST
Line:        120
Source: 
> 
> 	function transfer(address _to, uint256 _tokens) external returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _transfer(msg.sender, _to, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OST
Line:        125
Source: 
> 	function approve(address _spender, uint256 _tokens) external returns (bool) {
> 		info.users[msg.sender].allowance[_spender] = _tokens;
>                                     ^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, _spender, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OST
Line:        130
Source: 
> 
> 	function transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 _allowance = allowance(_from, msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OST
Line:        134
Source: 
> 		if (_allowance != UINT_MAX) {
> 			info.users[_from].allowance[msg.sender] -= _tokens;
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OST
Line:        146
Source: 
> 		if (_size > 0) {
> 			require(Callable(_to).tokenCallback(msg.sender, _tokens, _data));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OST
Line:        161
Source: 
> 	function allowance(address _user, address _spender) public view returns (uint256) {
> 		return info.users[_user].allowance[_spender];
>                                                 
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OST
Line:        164
Source: 
> 
> 	function allInfoFor(address _user) external view returns (uint256 totalTokens, uint256 totalLPTokens, uint256 wethReserve, uint256 ostReserve, uint256 userBalance, uint256 userLPBalance) {
>                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalTokens = totalSupply();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        244
Source: 
> 
> 	function claim(uint256 _index, address _account, uint256 _amount, bytes32[] calldata _merkleProof) external {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!isClaimed(_index));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        245
Source: 
> 	function claim(uint256 _index, address _account, uint256 _amount, bytes32[] calldata _merkleProof) external {
> 		require(!isClaimed(_index));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytes32 _node = keccak256(abi.encodePacked(_index, _account, _amount));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        262
Source: 
> 
> 	function setApprovalForAll(address _operator, bool _approved) external {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].approved[_operator] = _approved;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        267
Source: 
> 
> 	function transferFrom(address _from, address _to, uint256 _tokenId) external {
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_from, _to, _tokenId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        272
Source: 
> 	function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {
> 		safeTransferFrom(_from, _to, _tokenId, "");
>                                      ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        276
Source: 
> 	function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public {
> 		_transfer(_from, _to, _tokenId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint32 _size;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        282
Source: 
> 		if (_size > 0) {
> 			require(Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) == 0x150b7a02);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        325
Source: 
> 		require(_tokenId != 0 && _tokenId <= totalSupply());
> 		return info.list[_tokenId].owner;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        338
Source: 
> 	function tokenByIndex(uint256 _index) public view returns (uint256) {
> 		require(_index < totalSupply());
>                          ^^^^^^^^^
> 		return _index;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        351
Source: 
> 		uint256 _claimedWord = info.claimedBitMap[_claimedWordIndex];
> 		uint256 _mask = (1 << _claimedBitIndex);
>                          ^^^^^^^^^^^^^^^^^
> 		return _claimedWord & _mask == _mask;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OpenseaTraders
Line:        422
Source: 
> 	function _mint(address _receiver) internal returns (uint256 tokenId) {
> 		tokenId = totalSupply();
>                  ^^^^^^^^^
> 		info.totalSupply++;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Router
Line:        41
Source: 
> interface Pair {
> 	function token0() external view returns (address);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	function totalSupply() external view returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Metadata
Line:        65
Source: 
> 		bytes memory _uri = new bytes(_base.length + _digits);
> 		for (uint256 i = 0; i < _uri.length; i++) {
>                                      ^^^^^^^^
> 			if (i < _base.length) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Metadata
Line:        67
Source: 
> 			if (i < _base.length) {
> 				_uri[i] = _base[i];
>          ^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Metadata
Line:        68
Source: 
> 				_uri[i] = _base[i];
> 			} else {
>         ^^^
> 				uint256 _dec = (_tokenId / (10**(_uri.length - i - 1))) % 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Metadata
Line:        70
Source: 
> 				uint256 _dec = (_tokenId / (10**(_uri.length - i - 1))) % 10;
> 				_uri[i] = byte(uint8(_dec) + 48);
>         ^^^^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Metadata
Line:        81
Source: 
> 
> 	string constant public name = "Opensea Traders";
>                            ^^^^^^^^^^^^
> 	string constant public symbol = "OST";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OST
Line:        91
Source: 
> 	struct Info {
> 		uint256 totalSupply;
>             ^^^^^^^^^^
> 		mapping(address => User) users;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OST
Line:        93
Source: 
> 		mapping(address => User) users;
> 		Router router;
>     ^^^^^^^^^^^^
> 		Pair pair;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OST
Line:        95
Source: 
> 		Pair pair;
> 		address controller;
>              ^^^^^^^^
> 		bool weth0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OST
Line:        139
Source: 
> 
> 	function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {
>                ^^^^^^^^^^^^^^^^^^
> 		_transfer(msg.sender, _to, _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OST
Line:        153
Source: 
> 	function totalSupply() public view returns (uint256) {
> 		return info.totalSupply;
>    ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OST
Line:        175
Source: 
> 
> 	function _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {
>      ^^^^^^^^^^^^^
> 		require(balanceOf(_from) >= _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OST
Line:        175
Source: 
> 
> 	function _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {
>                     ^^^^^^^^^^^^^
> 		require(balanceOf(_from) >= _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OST
Line:        175
Source: 
> 
> 	function _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {
>      ^^^^^^^^^^^^^
> 		require(balanceOf(_from) >= _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        250
Source: 
> 		uint256 _claimedBitIndex = _index % 256;
> 		info.claimedBitMap[_claimedWordIndex] = info.claimedBitMap[_claimedWordIndex] | (1 << _claimedBitIndex);
>                                         ^^^^^^^^^^^^^
> 		info.ost.mint(_account, _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        252
Source: 
> 		info.ost.mint(_account, _amount);
> 		uint256 _tokenId = _mint(_account);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Claimed(_index, _account, _tokenId);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        253
Source: 
> 		uint256 _tokenId = _mint(_account);
> 		emit Claimed(_index, _account, _tokenId);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        258
Source: 
> 		require(msg.sender == ownerOf(_tokenId));
> 		info.list[_tokenId].approved = _approved;
>                                            
> 		emit Approval(msg.sender, _approved, _tokenId);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        287
Source: 
> 
> 	function name() external view returns (string memory) {
>                                                     ^^^^
> 		return info.metadata.name();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        355
Source: 
> 
> 	function getToken(uint256 _tokenId) public view returns (address tokenOwner, address approved) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (ownerOf(_tokenId), getApproved(_tokenId));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        355
Source: 
> 
> 	function getToken(uint256 _tokenId) public view returns (address tokenOwner, address approved) {
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (ownerOf(_tokenId), getApproved(_tokenId));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        355
Source: 
> 
> 	function getToken(uint256 _tokenId) public view returns (address tokenOwner, address approved) {
>                                                                                           ^^^^^^^
> 		return (ownerOf(_tokenId), getApproved(_tokenId));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        357
Source: 
> 		return (ownerOf(_tokenId), getApproved(_tokenId));
> 	}
>   
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        368
Source: 
> 
> 	function getTokensTable(uint256 _limit, uint256 _page, bool _isAsc) public view returns (uint256[] memory tokenIds, address[] memory owners, address[] memory approveds, uint256 totalTokens, uint256 totalPages) {
>                       ^^^^^^^^^^^^^^^
> 		require(_limit > 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        383
Source: 
> 			for (uint256 i = 0; i < _limit; i++) {
> 				tokenIds[i] = tokenByIndex(_isAsc ? _offset + i : totalTokens - _offset - i - 1);
>                     ^^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        407
Source: 
> 			for (uint256 i = 0; i < _limit; i++) {
> 				tokenIds[i] = tokenOfOwnerByIndex(_owner, _isAsc ? _offset + i : totalTokens - _offset - i - 1);
>                     ^^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        435
Source: 
> 		info.list[_tokenId].owner = _to;
> 		if (_approved != address(0x0)) {
>                   ^^^^^^^^^^^^^^
> 			info.list[_tokenId].approved = address(0x0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        435
Source: 
> 		info.list[_tokenId].owner = _to;
> 		if (_approved != address(0x0)) {
>                                   
> 			info.list[_tokenId].approved = address(0x0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        444
Source: 
> 		info.users[_from].indexOf[_moved] = _index + 1;
> 		info.users[_from].list.length--;
>            ^^^^^^^^^^^^^^
> 		delete info.users[_from].indexOf[_tokenId];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        445
Source: 
> 		info.users[_from].list.length--;
> 		delete info.users[_from].indexOf[_tokenId];
>                                     ^^^^^^^^^
> 		info.users[_to].indexOf[_tokenId] = info.users[_to].list.push(_tokenId);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        456
Source: 
> 				_computedHash = keccak256(abi.encodePacked(_computedHash, _proofElement));
> 			} else {
>   ^^^^^^^^^
> 				_computedHash = keccak256(abi.encodePacked(_proofElement, _computedHash));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OpenseaTraders
Line:        457
Source: 
> 			} else {
> 				_computedHash = keccak256(abi.encodePacked(_proofElement, _computedHash));
>                                                                          ^^^^^
> 			}

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Metadata
Line:        53
Source: 
> 	}
> 	function baseTokenURI() public pure returns (string memory) {
>                                            ^^^^^^^^^^^^^^^^^^^
> 		return "https://api.openseatraders.io/token/";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Metadata
Line:        54
Source: 
> 	function baseTokenURI() public pure returns (string memory) {
> 		return "https://api.openseatraders.io/token/";
>                          ^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OST
Line:        87
Source: 
> 		uint256 balance;
> 		mapping(address => uint256) allowance;
>                        ^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OST
Line:        91
Source: 
> 	struct Info {
> 		uint256 totalSupply;
>             ^^^^^^^^^^
> 		mapping(address => User) users;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OST
Line:        93
Source: 
> 		mapping(address => User) users;
> 		Router router;
>     ^^^^^^^^^^^^
> 		Pair pair;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OST
Line:        95
Source: 
> 		Pair pair;
> 		address controller;
>              ^^^^^^^^
> 		bool weth0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OST
Line:        106
Source: 
> 	constructor() public {
> 		info.router = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
>                                  ^^^^^^^^^^^^^^^^^
> 		info.pair = Pair(Factory(info.router.factory()).createPair(info.router.WETH(), address(this)));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OpenseaTraders
Line:        212
Source: 
> 	event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
> 	event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
>                                                                                    ^^^^^^^
> 	event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OpenseaTraders
Line:        213
Source: 
> 	event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
> 	event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OST
Line:        114
Source: 
> 		require(msg.sender == info.controller);
> 		info.totalSupply += _amount;
>    ^^^^^^^^^^^^^^^^^^
> 		info.users[_receiver].balance += _amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OST
Line:        156
Source: 
> 
> 	function balanceOf(address _user) public view returns (uint256) {
>                                                                 ^^
> 		return info.users[_user].balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OpenseaTraders
Line:        291
Source: 
> 
> 	function symbol() external view returns (string memory) {
>                                                    ^^^^^^^
> 		return info.metadata.symbol();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OST
Line:        113
Source: 
> 	function mint(address _receiver, uint256 _amount) external {
> 		require(msg.sender == info.controller);
>             ^^^^^^^^^^^^^^^^^^^^^
> 		info.totalSupply += _amount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OST
Line:        113
Source: 
> 	function mint(address _receiver, uint256 _amount) external {
> 		require(msg.sender == info.controller);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.totalSupply += _amount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OST
Line:        115
Source: 
> 		info.totalSupply += _amount;
> 		info.users[_receiver].balance += _amount;
>                         ^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(0x0), _receiver, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OST
Line:        116
Source: 
> 		info.users[_receiver].balance += _amount;
> 		emit Transfer(address(0x0), _receiver, _amount);
>  ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OST
Line:        171
Source: 
> 		userBalance = balanceOf(_user);
> 		userLPBalance = info.pair.balanceOf(_user);
>                                ^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OST
Line:        175
Source: 
> 
> 	function _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {
>                                        ^^^^^^^^^^^^^^^^^^^^^^^
> 		require(balanceOf(_from) >= _tokens);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OST
Line:        178
Source: 
> 		info.users[_from].balance -= _tokens;
> 		info.users[_to].balance += _tokens;
>                                  ^^^^
> 		emit Transfer(_from, _to, _tokens);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OpenseaTraders
Line:        238
Source: 
> 
> 	function setMetadata(Metadata _metadata) external {
>                                                      
> 		require(msg.sender == info.owner);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OpenseaTraders
Line:        258
Source: 
> 		require(msg.sender == ownerOf(_tokenId));
> 		info.list[_tokenId].approved = _approved;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, _approved, _tokenId);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OpenseaTraders
Line:        299
Source: 
> 
> 	function baseTokenURI() external view returns (string memory) {
>      ^^^^^^^^^^^^^^^^^^^^
> 		return info.metadata.baseTokenURI();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OpenseaTraders
Line:        300
Source: 
> 	function baseTokenURI() external view returns (string memory) {
> 		return info.metadata.baseTokenURI();
>                                      ^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OpenseaTraders
Line:        304
Source: 
> 	function tokenURI(uint256 _tokenId) external view returns (string memory) {
> 		return info.metadata.tokenURI(_tokenId);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OpenseaTraders
Line:        308
Source: 
> 	function ostAddress() external view returns (address) {
> 		return address(info.ost);
>                      ^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OpenseaTraders
Line:        315
Source: 
> 
> 	function totalSupply() public view returns (uint256) {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    OST
Line:        156
Source: 
> 
> 	function balanceOf(address _user) public view returns (uint256) {
>                                        ^^^^^
> 		return info.users[_user].balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    OpenseaTraders
Line:        291
Source: 
> 
> 	function symbol() external view returns (string memory) {
>                           ^^^^^
> 		return info.metadata.symbol();

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OST
Line:        106
Source: 
> 	constructor() public {
> 		info.router = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
>                                  ^^^^^^^^^^^^^^^^^
> 		info.pair = Pair(Factory(info.router.factory()).createPair(info.router.WETH(), address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OpenseaTraders
Line:        212
Source: 
> 	event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
> 	event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
>                                                                                    ^^^^^^^
> 	event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OST
Line:        189
Source: 
> 		mapping(address => bool) approved;
> 		mapping(uint256 => uint256) indexOf;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OST
Line:        190
Source: 
> 		mapping(uint256 => uint256) indexOf;
> 	}
>  ^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OST
Line:        131
Source: 
> 	function transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {
> 		uint256 _allowance = allowance(_from, msg.sender);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_allowance >= _tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OpenseaTraders
Line:        429
Source: 
> 	
> 	function _transfer(address _from, address _to, uint256 _tokenId) internal {
>                                      ^^^^^^^^^^^^^^^^^^
> 		(address _owner, address _approved) = getToken(_tokenId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OpenseaTraders
Line:        429
Source: 
> 	
> 	function _transfer(address _from, address _to, uint256 _tokenId) internal {
>                                                             ^^^^^^^^^^^^^^^^
> 		(address _owner, address _approved) = getToken(_tokenId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OpenseaTraders
Line:        431
Source: 
> 		(address _owner, address _approved) = getToken(_tokenId);
> 		require(_from == _owner);
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner || msg.sender == _approved || isApprovedForAll(_owner, msg.sender));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OpenseaTraders
Line:        430
Source: 
> 	function _transfer(address _from, address _to, uint256 _tokenId) internal {
> 		(address _owner, address _approved) = getToken(_tokenId);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_from == _owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OpenseaTraders
Line:        256
Source: 
> 	
> 	function approve(address _approved, uint256 _tokenId) external {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == ownerOf(_tokenId));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OpenseaTraders
Line:        271
Source: 
> 
> 	function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		safeTransferFrom(_from, _to, _tokenId, "");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OST
Line:        113
Source: 
> 	function mint(address _receiver, uint256 _amount) external {
> 		require(msg.sender == info.controller);
>             ^^^^^^^^^^^^^^^^^^^^^
> 		info.totalSupply += _amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OST
Line:        113
Source: 
> 	function mint(address _receiver, uint256 _amount) external {
> 		require(msg.sender == info.controller);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.totalSupply += _amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OST
Line:        115
Source: 
> 		info.totalSupply += _amount;
> 		info.users[_receiver].balance += _amount;
>                         ^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(0x0), _receiver, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OST
Line:        116
Source: 
> 		info.users[_receiver].balance += _amount;
> 		emit Transfer(address(0x0), _receiver, _amount);
>  ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Metadata
Line:        53
Source: 
> 	}
> 	function baseTokenURI() public pure returns (string memory) {
>                                            ^^^^^^^^^^^^^^^^^^^
> 		return "https://api.openseatraders.io/token/";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Metadata
Line:        54
Source: 
> 	function baseTokenURI() public pure returns (string memory) {
> 		return "https://api.openseatraders.io/token/";
>                          ^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OST
Line:        91
Source: 
> 	struct Info {
> 		uint256 totalSupply;
>             ^^^^^^^^^^
> 		mapping(address => User) users;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OST
Line:        93
Source: 
> 		mapping(address => User) users;
> 		Router router;
>     ^^^^^^^^^^^^
> 		Pair pair;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OST
Line:        95
Source: 
> 		Pair pair;
> 		address controller;
>              ^^^^^^^^
> 		bool weth0;

[0m
