Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NTeria
Line:        45
Source: 
>         bytes32 _data = keccak256(abi.encodePacked(_private_key,_decision));
>         assembly { 
>         ^^^^^^^^^^^
>             _vote := and(_data,0xf)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NTeria
Line:        31
Source: 
>     
>     function add_funds() public payable isOwner {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NTeria
Line:        33
Source: 
>     
>     function withdraw_funds() public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(this).balance>0, 'Balance is zero');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NTeria
Line:        38
Source: 
>     
>     function open_voting(bytes32 _private_key_hashed) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         private_key_hashed = _private_key_hashed;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NTeria
Line:        51
Source: 
>     
>     function close_voting() public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(voting_in_progress, "No voting to close");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NTeria
Line:        58
Source: 
>     
>     function reveal_key_and_pay(string memory  _private_key) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!voting_in_progress, "First, close voting");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NTeria
Line:        97
Source: 
>     
>     function make_vote(string memory _decision) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(voting_in_progress, "Voting is closed");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NTeria
Line:        104
Source: 
>     
>     function cancel_vote() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(voting_in_progress, "Voting is closed");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NTeria
Line:        122
Source: 
> 
>     function get_number_votes() public view returns(uint _val){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _val = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NTeria
Line:        131
Source: 
>  
>     function destroy_contract() public isOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(owner);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    NTeria
Line:        89
Source: 
>             if (people[i].amount > 0) {
>                 people[i].voter.transfer(_qty+people[i].amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 delete people[i];

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    NTeria
Line:        108
Source: 
>             if (people[i].voter == msg.sender) {
>                 msg.sender.transfer(people[i].amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 delete people[i];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NTeria
Line:        38
Source: 
>     
>     function open_voting(bytes32 _private_key_hashed) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         private_key_hashed = _private_key_hashed;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NTeria
Line:        97
Source: 
>     
>     function make_vote(string memory _decision) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(voting_in_progress, "Voting is closed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    NTeria
Line:        89
Source: 
>             if (people[i].amount > 0) {
>                 people[i].voter.transfer(_qty+people[i].amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 delete people[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    NTeria
Line:        108
Source: 
>             if (people[i].voter == msg.sender) {
>                 msg.sender.transfer(people[i].amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 delete people[i];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        14
Source: 
>     }
>     bytes32 private_key_hashed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint people_count;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        15
Source: 
>     bytes32 private_key_hashed;
>     uint people_count;
>     ^^^^^^^^^^^^^^^^^
>     bool voting_in_progress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        16
Source: 
>     uint people_count;
>     bool voting_in_progress;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => Person) people;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        31
Source: 
>     
>     function add_funds() public payable isOwner {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        33
Source: 
>     
>     function withdraw_funds() public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(this).balance>0, 'Balance is zero');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        38
Source: 
>     
>     function open_voting(bytes32 _private_key_hashed) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         private_key_hashed = _private_key_hashed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        43
Source: 
>     
>     function get_vote(string memory _private_key, string memory _decision) internal pure returns(uint _vote) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _data = keccak256(abi.encodePacked(_private_key,_decision));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        44
Source: 
>     function get_vote(string memory _private_key, string memory _decision) internal pure returns(uint _vote) {
>         bytes32 _data = keccak256(abi.encodePacked(_private_key,_decision));
>         ^^^^^^^^^^^^^
>         assembly { 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        51
Source: 
>     
>     function close_voting() public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(voting_in_progress, "No voting to close");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        53
Source: 
>         require(voting_in_progress, "No voting to close");
>         uint _balance = get_voting_balance();
>         ^^^^^^^^^^^^^
>         delete voting_in_progress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        58
Source: 
>     
>     function reveal_key_and_pay(string memory  _private_key) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!voting_in_progress, "First, close voting");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        63
Source: 
>         
>         uint[16] memory _people_votes;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i;i<people_count;i++)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        67
Source: 
>         
>         uint _max_votes = 0;
>         ^^^^^^^^^^^^^^^
>         for (uint j;j<16;j++)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        72
Source: 
>         
>         uint _money_to_give;
>         ^^^^^^^^^^^^^^^^^^^
>         uint _winners_count = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        73
Source: 
>         uint _money_to_give;
>         uint _winners_count = 1;
>         ^^^^^^^^^^^^^^^^^^^
>         for (uint i;i<people_count;i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        75
Source: 
>         for (uint i;i<people_count;i++) {
>             uint _vote = get_vote(_private_key,people[i].decision);
>             ^^^^^^^^^^
>             if (_people_votes[_vote] == _max_votes) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        85
Source: 
>         _money_to_give -= _money_to_give%_winners_count;
>         uint _qty = _money_to_give/_winners_count;
>         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        97
Source: 
>     
>     function make_vote(string memory _decision) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(voting_in_progress, "Voting is closed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        104
Source: 
>     
>     function cancel_vote() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(voting_in_progress, "Voting is closed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        115
Source: 
>     
>     function get_voting_balance() public view returns(uint _val){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _val = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        122
Source: 
> 
>     function get_number_votes() public view returns(uint _val){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _val = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NTeria
Line:        131
Source: 
>  
>     function destroy_contract() public isOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.6.6;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NTeria
Line:        8
Source: 
> contract NTeria {
>     address payable owner;
>     ^^^^^^^^^^^^^^^^^^^^^
>     struct Person {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NTeria
Line:        15
Source: 
>     bytes32 private_key_hashed;
>     uint people_count;
>     ^^^^^^^^^^^^^^^^^
>     bool voting_in_progress;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NTeria
Line:        16
Source: 
>     uint people_count;
>     bool voting_in_progress;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => Person) people;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NTeria
Line:        17
Source: 
>     bool voting_in_progress;
>     mapping(uint => Person) people;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    NTeria
Line:        35
Source: 
>         require(address(this).balance>0, 'Balance is zero');
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    NTeria
Line:        89
Source: 
>             if (people[i].amount > 0) {
>                 people[i].voter.transfer(_qty+people[i].amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 delete people[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    NTeria
Line:        108
Source: 
>             if (people[i].voter == msg.sender) {
>                 msg.sender.transfer(people[i].amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 delete people[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    NTeria
Line:        35
Source: 
>         require(address(this).balance>0, 'Balance is zero');
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    NTeria
Line:        89
Source: 
>             if (people[i].amount > 0) {
>                 people[i].voter.transfer(_qty+people[i].amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 delete people[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NTeria
Line:        35
Source: 
>         require(address(this).balance>0, 'Balance is zero');
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NTeria
Line:        89
Source: 
>             if (people[i].amount > 0) {
>                 people[i].voter.transfer(_qty+people[i].amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 delete people[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NTeria
Line:        108
Source: 
>             if (people[i].voter == msg.sender) {
>                 msg.sender.transfer(people[i].amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 delete people[i];

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    NTeria
Line:        64
Source: 
>         uint[16] memory _people_votes;
>         for (uint i;i<people_count;i++)
>                                    ^
>             _people_votes[get_vote(_private_key,people[i].decision)]++;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    NTeria
Line:        106
Source: 
>         require(voting_in_progress, "Voting is closed");
>         for (uint i;i<people_count;i++) {
>                                    ^
>             if (people[i].voter == msg.sender) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    NTeria
Line:        117
Source: 
>         _val = 0;
>         for (uint i;i<people_count;i++) {
>                                    ^
>             _val += people[i].amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    NTeria
Line:        124
Source: 
>         _val = 0;
>         for (uint i;i<people_count;i++) {
>                                    ^
>             if (people[i].amount>0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NTeria
Line:        14
Source: 
>     }
>     bytes32 private_key_hashed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint people_count;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NTeria
Line:        15
Source: 
>     bytes32 private_key_hashed;
>     uint people_count;
>     ^^^^^^^^^^^^^^^^^
>     bool voting_in_progress;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NTeria
Line:        16
Source: 
>     uint people_count;
>     bool voting_in_progress;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => Person) people;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NTeria
Line:        100
Source: 
>         require(msg.value > 0, "You should pay something");
>         people[people_count] = Person(msg.sender,msg.value,_decision);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         people_count ++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NTeria
Line:        101
Source: 
>         people[people_count] = Person(msg.sender,msg.value,_decision);
>         people_count ++;
>         ^^^^^^^^^^^^^^^
>     }

[0m
