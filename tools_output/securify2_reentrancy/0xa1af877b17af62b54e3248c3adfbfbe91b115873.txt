Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.9. Changing pragma version to 0.5.9....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        25
Source: 
> 
>     Logging logger = Logging(0xe21ADf5002f257df1b743F1B03F5F5352DE300e7);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        27
Source: 
> 
>     uint256 min_deposit = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public balances;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        44
Source: 
> 
>     function deposit() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value >= min_deposit);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        51
Source: 
> 
>     function withdraw(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balances[msg.sender] >= amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        60
Source: 
>     
>     function ownerWithdraw() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner.transfer(address(this).balance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SharedWalletWithLogging
Line:        48
Source: 
>         
>         logger.log('Deposit', msg.value, msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SharedWalletWithLogging
Line:        57
Source: 
> 
>         logger.log('Withdrawal', amount, msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    SharedWalletWithLogging
Line:        55
Source: 
>         balances[msg.sender] -= amount;
>         msg.sender.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        27
Source: 
> 
>     uint256 min_deposit = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public balances;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        29
Source: 
>     mapping(address => uint256) public balances;
>     address payable public _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        40
Source: 
>     
>     function _init() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = msg.sender; 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        25
Source: 
> 
>     Logging logger = Logging(0xe21ADf5002f257df1b743F1B03F5F5352DE300e7);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        27
Source: 
> 
>     uint256 min_deposit = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public balances;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SharedWalletWithLogging
Line:        55
Source: 
>         balances[msg.sender] -= amount;
>         msg.sender.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        61
Source: 
>     function ownerWithdraw() public onlyOwner {
>         _owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        55
Source: 
>         balances[msg.sender] -= amount;
>         msg.sender.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        61
Source: 
>     function ownerWithdraw() public onlyOwner {
>         _owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        55
Source: 
>         balances[msg.sender] -= amount;
>         msg.sender.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        61
Source: 
>     function ownerWithdraw() public onlyOwner {
>         _owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        48
Source: 
>         
>         logger.log('Deposit', msg.value, msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        57
Source: 
> 
>         logger.log('Withdrawal', amount, msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        63
Source: 
>         
>         logger.log('OwnerWithdrawal', address(this).balance, msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SharedWalletWithLogging
Line:        41
Source: 
>     function _init() public {
>         _owner = msg.sender; 
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
