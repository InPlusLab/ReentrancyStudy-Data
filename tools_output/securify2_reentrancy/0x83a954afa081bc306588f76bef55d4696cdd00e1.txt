[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        112
Source: 
>      */
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    x2jp
Line:        214
Source: 
> 
>     function getDepositsCount() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return deposits.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    x2jp
Line:        218
Source: 
> 
>     function lastDepositId() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return deposits.length - 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    x2jp
Line:        222
Source: 
> 
>     function getDeposit(uint _id) public view returns (address, uint, uint, uint, uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (deposits[_id].depositor, deposits[_id].amount, deposits[_id].payout,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    x2jp
Line:        227
Source: 
> 
>     function getUserDepositsCount(address depositor) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return depositors[depositor].length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    x2jp
Line:        232
Source: 
>     // lastIndex from the end of payments lest (0 - last payment), returns: address of depositor, payment time, payment amount
>     function getLastPayments(uint lastIndex) public view returns (address, uint, uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint depositIndex = currentPaymentIndex.sub(lastIndex + 1);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    x2jp
Line:        242
Source: 
> 
>     function getUserDeposit(address depositor, uint depositNumber) public view returns(uint, uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (deposits[depositors[depositor][depositNumber]].amount,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    x2jp
Line:        250
Source: 
>     //_interval in seconds
>     function setLastWinnerPeriod(uint _interval) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_interval > 0);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        112
Source: 
>      */
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    x2jp
Line:        232
Source: 
>     // lastIndex from the end of payments lest (0 - last payment), returns: address of depositor, payment time, payment amount
>     function getLastPayments(uint lastIndex) public view returns (address, uint, uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint depositIndex = currentPaymentIndex.sub(lastIndex + 1);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    x2jp
Line:        222
Source: 
> 
>     function getDeposit(uint _id) public view returns (address, uint, uint, uint, uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (deposits[_id].depositor, deposits[_id].amount, deposits[_id].payout,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    x2jp
Line:        227
Source: 
> 
>     function getUserDepositsCount(address depositor) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return depositors[depositor].length;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    x2jp
Line:        242
Source: 
> 
>     function getUserDeposit(address depositor, uint depositNumber) public view returns(uint, uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (deposits[depositors[depositor][depositNumber]].amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    x2jp
Line:        181
Source: 
>         amountRaised = amountRaised.add(msg.value);
>         owner.transfer(msg.value.mul(8500).div(100000));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         jackpotAmount = jackpotAmount.add(msg.value.mul(1500).div(100000));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    x2jp
Line:        195
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.send(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, deposits[currentPaymentIndex].payout);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    x2jp
Line:        206
Source: 
>             jackpotAmount = 0;
>             deposits[deposits.length - 1].depositor.send(val);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[deposits.length - 1].depositor, val);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    x2jp
Line:        128
Source: 
> 
> contract x2jp is Ownable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    x2jp
Line:        159
Source: 
>     constructor () public {
>         depositAmount = 100000000000000000; // 0.1 eth
>                         ^^^^^^^^^^^^^^^^^^
>         percent = 130;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    x2jp
Line:        181
Source: 
>         amountRaised = amountRaised.add(msg.value);
>         owner.transfer(msg.value.mul(8500).div(100000));
>                                                ^^^^^^
>         jackpotAmount = jackpotAmount.add(msg.value.mul(1500).div(100000));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    x2jp
Line:        182
Source: 
>         owner.transfer(msg.value.mul(8500).div(100000));
>         jackpotAmount = jackpotAmount.add(msg.value.mul(1500).div(100000));
>                                                                   ^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    x2jp
Line:        181
Source: 
>         amountRaised = amountRaised.add(msg.value);
>         owner.transfer(msg.value.mul(8500).div(100000));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         jackpotAmount = jackpotAmount.add(msg.value.mul(1500).div(100000));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    x2jp
Line:        195
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.send(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, deposits[currentPaymentIndex].payout);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    x2jp
Line:        206
Source: 
>             jackpotAmount = 0;
>             deposits[deposits.length - 1].depositor.send(val);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[deposits.length - 1].depositor, val);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    x2jp
Line:        209
Source: 
>             currentPaymentIndex = deposits.length; //if need pay jp + dep set to deposits.length -1
>             owner.transfer(address(this).balance - msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    x2jp
Line:        181
Source: 
>         amountRaised = amountRaised.add(msg.value);
>         owner.transfer(msg.value.mul(8500).div(100000));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         jackpotAmount = jackpotAmount.add(msg.value.mul(1500).div(100000));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    x2jp
Line:        195
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.send(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, deposits[currentPaymentIndex].payout);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    x2jp
Line:        206
Source: 
>             jackpotAmount = 0;
>             deposits[deposits.length - 1].depositor.send(val);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[deposits.length - 1].depositor, val);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    x2jp
Line:        209
Source: 
>             currentPaymentIndex = deposits.length; //if need pay jp + dep set to deposits.length -1
>             owner.transfer(address(this).balance - msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    x2jp
Line:        181
Source: 
>         amountRaised = amountRaised.add(msg.value);
>         owner.transfer(msg.value.mul(8500).div(100000));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         jackpotAmount = jackpotAmount.add(msg.value.mul(1500).div(100000));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    x2jp
Line:        195
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.send(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, deposits[currentPaymentIndex].payout);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    x2jp
Line:        206
Source: 
>             jackpotAmount = 0;
>             deposits[deposits.length - 1].depositor.send(val);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[deposits.length - 1].depositor, val);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    x2jp
Line:        209
Source: 
>             currentPaymentIndex = deposits.length; //if need pay jp + dep set to deposits.length -1
>             owner.transfer(address(this).balance - msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    x2jp
Line:        195
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.send(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, deposits[currentPaymentIndex].payout);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    x2jp
Line:        206
Source: 
>             jackpotAmount = 0;
>             deposits[deposits.length - 1].depositor.send(val);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[deposits.length - 1].depositor, val);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    x2jp
Line:        132
Source: 
>     uint public depositAmount;
>     uint public currentPaymentIndex;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public percent;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    x2jp
Line:        135
Source: 
>     uint public lastWinnerPeriod;
>     uint public jackpotAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    x2jp
Line:        137
Source: 
> 
>     uint public amountRaised;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public depositorsCount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    x2jp
Line:        138
Source: 
>     uint public amountRaised;
>     uint public depositorsCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    x2jp
Line:        206
Source: 
>             jackpotAmount = 0;
>             deposits[deposits.length - 1].depositor.send(val);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[deposits.length - 1].depositor, val);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    x2jp
Line:        209
Source: 
>             currentPaymentIndex = deposits.length; //if need pay jp + dep set to deposits.length -1
>             owner.transfer(address(this).balance - msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    x2jp
Line:        181
Source: 
>         amountRaised = amountRaised.add(msg.value);
>         owner.transfer(msg.value.mul(8500).div(100000));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         jackpotAmount = jackpotAmount.add(msg.value.mul(1500).div(100000));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    x2jp
Line:        182
Source: 
>         owner.transfer(msg.value.mul(8500).div(100000));
>         jackpotAmount = jackpotAmount.add(msg.value.mul(1500).div(100000));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    x2jp
Line:        205
Source: 
>             uint val = jackpotAmount;
>             jackpotAmount = 0;
>             ^^^^^^^^^^^^^^^^^
>             deposits[deposits.length - 1].depositor.send(val);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    x2jp
Line:        208
Source: 
>             emit OnPaymentSent(deposits[deposits.length - 1].depositor, val);
>             currentPaymentIndex = deposits.length; //if need pay jp + dep set to deposits.length -1
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner.transfer(address(this).balance - msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    x2jp
Line:        180
Source: 
> 
>         amountRaised = amountRaised.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(msg.value.mul(8500).div(100000));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    x2jp
Line:        185
Source: 
>         Deposit memory newDeposit = Deposit(msg.sender, msg.value, msg.value.mul(percent).div(100), now, 0);
>         deposits.push(newDeposit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    x2jp
Line:        189
Source: 
> 
>         depositors[msg.sender].push(deposits.length - 1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    x2jp
Line:        195
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.send(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, deposits[currentPaymentIndex].payout);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    x2jp
Line:        206
Source: 
>             jackpotAmount = 0;
>             deposits[deposits.length - 1].depositor.send(val);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[deposits.length - 1].depositor, val);

[0m
