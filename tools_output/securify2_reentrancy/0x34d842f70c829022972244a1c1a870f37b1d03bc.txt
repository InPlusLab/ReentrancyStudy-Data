pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery
Line:        301
Source: 
> 
>     function getTickets(address address_) public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory result = "";

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery
Line:        313
Source: 
> 
>     function getWinningNumber() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory result = "";

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery
Line:        322
Source: 
> 
>     function getWinningTickets(address address_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        342
Source: 
>     function getPot() external view returns (uint256) {
>         return inu.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        514
Source: 
>         }
>         if (rewardDev > inu.balanceOf(address(this))) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             rewardDev = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        515
Source: 
>         if (rewardDev > inu.balanceOf(address(this))) {
>             rewardDev = inu.balanceOf(address(this));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        517
Source: 
>         }
>         inu.transfer(devX, rewardDev);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         help += rewardDev;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        384
Source: 
>         } else {
>             if (inu.balanceOf(address(this)) > 0) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 previousPot = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        385
Source: 
>             if (inu.balanceOf(address(this)) > 0) {
>                 previousPot = inu.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 devR = inu.balanceOf(address(this)).div(100);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        386
Source: 
>                 previousPot = inu.balanceOf(address(this));
>                 uint256 devR = inu.balanceOf(address(this)).div(100);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 burnR = inu.balanceOf(address(this)).mul(4).div(100);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        390
Source: 
> 
>                 if (inu.balanceOf(address(this)) < burnR) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     burnR = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        391
Source: 
>                 if (inu.balanceOf(address(this)) < burnR) {
>                     burnR = inu.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        393
Source: 
>                 }
>                 inu.transfer(
>                 ^^^^^^^^^^^^^
>                     address(0x000000000000000000000000000000000000dEaD),

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        576
Source: 
>         require(buyingEnabled, "Buying Disabled");
>         require(inu.balanceOf(msg.sender) >= ticketPrice, "Low Balance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < 4; i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        597
Source: 
>         require(
>             inu.balanceOf(msg.sender) >= ticketPrice.mul(tickets_.length),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Low Balance"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        601
Source: 
> 
>         inu.transferFrom(
>         ^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        455
Source: 
> 
>         uint256 rewardRank4 = inu.balanceOf(address(this)).mul(60).div(100);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rewardRank3 = inu.balanceOf(address(this)).mul(25).div(100);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        488
Source: 
>                 if (rank == 1 && rank1 != 0) {
>                     if (rewardRank1 > inu.balanceOf(address(this))) {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         rewardRank1 = inu.balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        489
Source: 
>                     if (rewardRank1 > inu.balanceOf(address(this))) {
>                         rewardRank1 = inu.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        491
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank1);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank1;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        494
Source: 
>                 } else if (rank == 2 && rank2 != 0) {
>                     if (rewardRank2 > inu.balanceOf(address(this))) {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         rewardRank2 = inu.balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        495
Source: 
>                     if (rewardRank2 > inu.balanceOf(address(this))) {
>                         rewardRank2 = inu.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        497
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank2);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank2;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        500
Source: 
>                 } else if (rank == 3 && rank3 != 0) {
>                     if (rewardRank3 > inu.balanceOf(address(this))) {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         rewardRank3 = inu.balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        501
Source: 
>                     if (rewardRank3 > inu.balanceOf(address(this))) {
>                         rewardRank3 = inu.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        503
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank3);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank3;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        506
Source: 
>                 } else if (rank == 4 && rank4 != 0) {
>                     if (rewardRank4 > inu.balanceOf(address(this))) {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         rewardRank4 = inu.balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        507
Source: 
>                     if (rewardRank4 > inu.balanceOf(address(this))) {
>                         rewardRank4 = inu.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Lottery
Line:        509
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank4);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank4;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lottery
Line:        345
Source: 
> 
>     function setTicketPrice(uint256 price) external onlyDev() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ticketPrice = price;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lottery
Line:        375
Source: 
> 
>     function endLoto(uint256[] memory winningN) external onlyDev() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lotoEnabled = false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lottery
Line:        595
Source: 
> 
>     function buyMultipleTicket(uint256[][] memory tickets_) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Lottery
Line:        523
Source: 
> 
>     function scanTicket(uint256[] memory ticket, bool ext)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        384
Source: 
>         } else {
>             if (inu.balanceOf(address(this)) > 0) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 previousPot = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        385
Source: 
>             if (inu.balanceOf(address(this)) > 0) {
>                 previousPot = inu.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 devR = inu.balanceOf(address(this)).div(100);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        386
Source: 
>                 previousPot = inu.balanceOf(address(this));
>                 uint256 devR = inu.balanceOf(address(this)).div(100);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 burnR = inu.balanceOf(address(this)).mul(4).div(100);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        387
Source: 
>                 uint256 devR = inu.balanceOf(address(this)).div(100);
>                 uint256 burnR = inu.balanceOf(address(this)).mul(4).div(100);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 inu.transfer(devX, devR);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        388
Source: 
>                 uint256 burnR = inu.balanceOf(address(this)).mul(4).div(100);
>                 inu.transfer(devX, devR);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        390
Source: 
> 
>                 if (inu.balanceOf(address(this)) < burnR) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     burnR = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        391
Source: 
>                 if (inu.balanceOf(address(this)) < burnR) {
>                     burnR = inu.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        393
Source: 
>                 }
>                 inu.transfer(
>                 ^^^^^^^^^^^^^
>                     address(0x000000000000000000000000000000000000dEaD),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        576
Source: 
>         require(buyingEnabled, "Buying Disabled");
>         require(inu.balanceOf(msg.sender) >= ticketPrice, "Low Balance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < 4; i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        455
Source: 
> 
>         uint256 rewardRank4 = inu.balanceOf(address(this)).mul(60).div(100);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rewardRank3 = inu.balanceOf(address(this)).mul(25).div(100);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        456
Source: 
>         uint256 rewardRank4 = inu.balanceOf(address(this)).mul(60).div(100);
>         uint256 rewardRank3 = inu.balanceOf(address(this)).mul(25).div(100);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rewardRank2 = inu.balanceOf(address(this)).mul(10).div(100);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        457
Source: 
>         uint256 rewardRank3 = inu.balanceOf(address(this)).mul(25).div(100);
>         uint256 rewardRank2 = inu.balanceOf(address(this)).mul(10).div(100);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rewardRank1 = inu.balanceOf(address(this)).mul(4).div(100);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        458
Source: 
>         uint256 rewardRank2 = inu.balanceOf(address(this)).mul(10).div(100);
>         uint256 rewardRank1 = inu.balanceOf(address(this)).mul(4).div(100);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rewardDev = inu

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        488
Source: 
>                 if (rank == 1 && rank1 != 0) {
>                     if (rewardRank1 > inu.balanceOf(address(this))) {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         rewardRank1 = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        489
Source: 
>                     if (rewardRank1 > inu.balanceOf(address(this))) {
>                         rewardRank1 = inu.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        494
Source: 
>                 } else if (rank == 2 && rank2 != 0) {
>                     if (rewardRank2 > inu.balanceOf(address(this))) {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         rewardRank2 = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        495
Source: 
>                     if (rewardRank2 > inu.balanceOf(address(this))) {
>                         rewardRank2 = inu.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        500
Source: 
>                 } else if (rank == 3 && rank3 != 0) {
>                     if (rewardRank3 > inu.balanceOf(address(this))) {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         rewardRank3 = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        501
Source: 
>                     if (rewardRank3 > inu.balanceOf(address(this))) {
>                         rewardRank3 = inu.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        506
Source: 
>                 } else if (rank == 4 && rank4 != 0) {
>                     if (rewardRank4 > inu.balanceOf(address(this))) {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         rewardRank4 = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        507
Source: 
>                     if (rewardRank4 > inu.balanceOf(address(this))) {
>                         rewardRank4 = inu.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        514
Source: 
>         }
>         if (rewardDev > inu.balanceOf(address(this))) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             rewardDev = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        515
Source: 
>         if (rewardDev > inu.balanceOf(address(this))) {
>             rewardDev = inu.balanceOf(address(this));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        384
Source: 
>         } else {
>             if (inu.balanceOf(address(this)) > 0) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 previousPot = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        387
Source: 
>                 uint256 devR = inu.balanceOf(address(this)).div(100);
>                 uint256 burnR = inu.balanceOf(address(this)).mul(4).div(100);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 inu.transfer(devX, devR);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        390
Source: 
> 
>                 if (inu.balanceOf(address(this)) < burnR) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     burnR = inu.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        391
Source: 
>                 if (inu.balanceOf(address(this)) < burnR) {
>                     burnR = inu.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        576
Source: 
>         require(buyingEnabled, "Buying Disabled");
>         require(inu.balanceOf(msg.sender) >= ticketPrice, "Low Balance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < 4; i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        597
Source: 
>         require(
>             inu.balanceOf(msg.sender) >= ticketPrice.mul(tickets_.length),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Low Balance"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        342
Source: 
>     function getPot() external view returns (uint256) {
>         return inu.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        459
Source: 
>         uint256 rewardRank1 = inu.balanceOf(address(this)).mul(4).div(100);
>         uint256 rewardDev = inu
>                             ^^^
>         .balanceOf(address(this))

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        491
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank1);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        497
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank2);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank2;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        503
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank3);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank3;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        509
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank4);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank4;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        517
Source: 
>         }
>         inu.transfer(devX, rewardDev);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         help += rewardDev;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        385
Source: 
>             if (inu.balanceOf(address(this)) > 0) {
>                 previousPot = inu.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 devR = inu.balanceOf(address(this)).div(100);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        386
Source: 
>                 previousPot = inu.balanceOf(address(this));
>                 uint256 devR = inu.balanceOf(address(this)).div(100);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 burnR = inu.balanceOf(address(this)).mul(4).div(100);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        388
Source: 
>                 uint256 burnR = inu.balanceOf(address(this)).mul(4).div(100);
>                 inu.transfer(devX, devR);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        393
Source: 
>                 }
>                 inu.transfer(
>                 ^^^^^^^^^^^^^
>                     address(0x000000000000000000000000000000000000dEaD),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        601
Source: 
> 
>         inu.transferFrom(
>         ^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Lottery
Line:        229
Source: 
> 
>     uint256 public numPlayers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public numTickets;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Lottery
Line:        230
Source: 
>     uint256 public numPlayers;
>     uint256 public numTickets;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public previousPot;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Lottery
Line:        231
Source: 
>     uint256 public numTickets;
>     uint256 public previousPot;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public lotoID;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Lottery
Line:        232
Source: 
>     uint256 public previousPot;
>     uint256 public lotoID;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Lottery
Line:        249
Source: 
>     uint256 public ticketPrice;
>     bool public lotoEnabled;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     bool public buyingEnabled;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Lottery
Line:        250
Source: 
>     bool public lotoEnabled;
>     bool public buyingEnabled;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        590
Source: 
>         numOfTickets[msg.sender] = numOfTickets[msg.sender] + 1;
>         numTickets += 1;
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        491
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank1);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        497
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank2);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank2;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        503
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank3);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        509
Source: 
>                     }
>                     inu.transfer(winningPlayers[i], rewardRank4);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     help += rewardRank4;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        517
Source: 
>         }
>         inu.transfer(devX, rewardDev);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         help += rewardDev;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        385
Source: 
>             if (inu.balanceOf(address(this)) > 0) {
>                 previousPot = inu.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 devR = inu.balanceOf(address(this)).div(100);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        388
Source: 
>                 uint256 burnR = inu.balanceOf(address(this)).mul(4).div(100);
>                 inu.transfer(devX, devR);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        393
Source: 
>                 }
>                 inu.transfer(
>                 ^^^^^^^^^^^^^
>                     address(0x000000000000000000000000000000000000dEaD),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        601
Source: 
> 
>         inu.transferFrom(
>         ^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Lottery
Line:        231
Source: 
>     uint256 public numTickets;
>     uint256 public previousPot;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public lotoID;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Lottery
Line:        234
Source: 
> 
>     uint256 public rank1Num = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rank2Num = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Lottery
Line:        235
Source: 
>     uint256 public rank1Num = 0;
>     uint256 public rank2Num = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rank3Num = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Lottery
Line:        236
Source: 
>     uint256 public rank2Num = 0;
>     uint256 public rank3Num = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rank4Num = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Lottery
Line:        237
Source: 
>     uint256 public rank3Num = 0;
>     uint256 public rank4Num = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
