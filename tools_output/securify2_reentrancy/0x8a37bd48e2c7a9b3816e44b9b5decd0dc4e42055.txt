Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BKP_Sales
Line:        83
Source: 
>     using SafeMath for uint256;
>     address public tokenAddress = 0xe1B3ecdf26aF3C631715b6a49A74470e306D455b;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 unLockingDate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        16
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     if (a == 0) {
>         ^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        20
Source: 
>     uint256 c = a * b;
>     assert(c / a == b);
>            ^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        64
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        64
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        19
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        43
Source: 
>   function ceil(uint a, uint m) internal pure returns (uint r) {
>     return (a + m - 1) / m * m;
>            ^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    BKP_Sales
Line:        162
Source: 
>         // send received funds to the owner
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BKP_Sales
Line:        80
Source: 
> 
> contract BKP_Sales is Owned {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BKP_Sales
Line:        131
Source: 
>     receive() external payable {
>         uint256 _sale;
>         ^^^^^^^^^^^^^
>         if(block.timestamp >= sales[0].startDate && block.timestamp <= sales[0].endDate ){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BKP_Sales
Line:        84
Source: 
>     address public tokenAddress = 0xe1B3ecdf26aF3C631715b6a49A74470e306D455b;
>     uint256 unLockingDate;
>     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BKP_Sales
Line:        114
Source: 
>         sales[0].tokenRatePerEth = 34706; //347,06
>         sales[0].maxTokensForSale = 100000 * 10 ** (18); // 100,000 BKP for sale
>                                     ^^^^^^
>         sales[0].soldTokens = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BKP_Sales
Line:        121
Source: 
>         sales[1].tokenRatePerEth = 295;
>         sales[1].maxTokensForSale = 300000 * 10 ** (18); // 300,000 BKP for sale
>                                     ^^^^^^
>         sales[1].soldTokens = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BKP_Sales
Line:        162
Source: 
>         // send received funds to the owner
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BKP_Sales
Line:        162
Source: 
>         // send received funds to the owner
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BKP_Sales
Line:        183
Source: 
>         
>         require(IToken(tokenAddress).transfer(msg.sender, totalTokensToClaim), "Insufficient balance of sale contract!");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BKP_Sales
Line:        162
Source: 
>         // send received funds to the owner
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BKP_Sales
Line:        136
Source: 
>             require(usersTokens[msg.sender].investedInPreSale.add(msg.value) <= sales[_sale].maxInvestment, "Exceeds allowed max Investment");
>             usersTokens[msg.sender].investedInPreSale = usersTokens[msg.sender].investedInPreSale.add(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BKP_Sales
Line:        155
Source: 
>         // allocate tokens to the user
>         usersTokens[msg.sender].purchasedTokens = usersTokens[msg.sender].purchasedTokens.add(tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BKP_Sales
Line:        159
Source: 
>         
>         sales[_sale].soldTokens = sales[_sale].soldTokens.add(tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BKP_Sales
Line:        142
Source: 
>             require(usersTokens[msg.sender].investedInPubSale.add(msg.value) <= sales[_sale].maxInvestment, "Exceeds allowed max Investment");
>             usersTokens[msg.sender].investedInPubSale = usersTokens[msg.sender].investedInPubSale.add(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BKP_Sales
Line:        185
Source: 
>         
>         usersTokens[msg.sender].claimedTokens = usersTokens[msg.sender].claimedTokens.add(totalTokensToClaim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    BKP_Sales
Line:        132
Source: 
>         uint256 _sale;
>         if(block.timestamp >= sales[0].startDate && block.timestamp <= sales[0].endDate ){
>            ^^^^^^^^^^^^^^^
>             // presale

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    BKP_Sales
Line:        132
Source: 
>         uint256 _sale;
>         if(block.timestamp >= sales[0].startDate && block.timestamp <= sales[0].endDate ){
>                                                     ^^^^^^^^^^^^^^^
>             // presale

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    BKP_Sales
Line:        138
Source: 
>         }
>         else if(block.timestamp >= sales[1].startDate && block.timestamp <= sales[1].endDate){
>                 ^^^^^^^^^^^^^^^
>             // publicsale

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    BKP_Sales
Line:        138
Source: 
>         }
>         else if(block.timestamp >= sales[1].startDate && block.timestamp <= sales[1].endDate){
>                                                          ^^^^^^^^^^^^^^^
>             // publicsale

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    BKP_Sales
Line:        105
Source: 
>     modifier unLockingOpen{
>         require(block.timestamp >= unLockingDate, "unlocking will start by 2 january");
>                 ^^^^^^^^^^^^^^^
>         _;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    BKP_Sales
Line:        170
Source: 
>         
>         uint256 totalTime = block.timestamp.sub(unLockingDate); // this will give total time 
>                             ^^^^^^^^^^^^^^^
>         totalTime = totalTime.div(releasePeriod); 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    BKP_Sales
Line:        173
Source: 
>         uint256 totalPercentage;
>         if(block.timestamp > unLockingDate.add(60 days))
>            ^^^^^^^^^^^^^^^
>             totalPercentage = 100;

[0m
