Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.7. Changing pragma version to 0.5.7....
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        162
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        167
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        162
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        167
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        303
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        329
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        338
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        329
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        338
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        329
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        338
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        338
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        429
Source: 
> 
>     function setVestingTime(uint256 _vestingTimeInSeconds) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vestingTimeInSeconds = _vestingTimeInSeconds;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        450
Source: 
> 
>     function sendRestTokensAndDestruct(address payable recipient) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenContract.transfer(recipient, tokenContract.balanceOf(address(this)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        338
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        429
Source: 
> 
>     function setVestingTime(uint256 _vestingTimeInSeconds) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vestingTimeInSeconds = _vestingTimeInSeconds;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        450
Source: 
> 
>     function sendRestTokensAndDestruct(address payable recipient) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenContract.transfer(recipient, tokenContract.balanceOf(address(this)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        424
Source: 
> 
>     function setTokenContract(address _tokenAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenContract = IERC20(_tokenAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        440
Source: 
> 
>     function isAddressAlreadyClaimed(address who) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return spent[who];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        424
Source: 
> 
>     function setTokenContract(address _tokenAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenContract = IERC20(_tokenAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        440
Source: 
> 
>     function isAddressAlreadyClaimed(address who) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return spent[who];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        465
Source: 
>         uint256 mainTokensLeft = _amount.sub(mainTokensUser);
>         tokenContract.transfer(_msgSender(), mainTokensUser);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (mainTokensLeft > 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        467
Source: 
>         if (mainTokensLeft > 0) {
>             tokenContract.transfer(owner(), mainTokensLeft);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        465
Source: 
>         uint256 mainTokensLeft = _amount.sub(mainTokensUser);
>         tokenContract.transfer(_msgSender(), mainTokensUser);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (mainTokensLeft > 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        467
Source: 
>         if (mainTokensLeft > 0) {
>             tokenContract.transfer(owner(), mainTokensLeft);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        363
Source: 
> 
>     uint public constant cap = 10000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public vestingTimeInSeconds;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        459
Source: 
>         require(startTimestamp > 0, "Start timestamp is not set");
>         uint256 _amount = allowedUsersBalances[_msgSender()];
>         ^^^^^^^^^^^^^^^
>         spent[_msgSender()] = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        475
Source: 
> 
>         uint _startTimestamp = startTimestamp;
>         ^^^^^^^^^^^^^^^^^^^^
>         if(_startTimestamp == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        480
Source: 
>         
>         uint _cap = cap;
>         ^^^^^^^^^
>         uint256 contractDeployedTime = block.timestamp - _startTimestamp;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        371
Source: 
> 
>     mapping (address => bool) spent;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public allowedUsersBalances;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        496
Source: 
>                 .mul(percentageContractDeployedTime)
>                 .div(1000000000000)
>                      ^^^^^^^^^^^^^
>             ).add(minimumSwapPercentage);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        446
Source: 
>         address payable payableOwner = address(uint160(owner()));
>         tokenContract.transfer(owner(), tokenContract.balanceOf(address(this)));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(payableOwner);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        451
Source: 
>     function sendRestTokensAndDestruct(address payable recipient) external onlyOwner {
>         tokenContract.transfer(recipient, tokenContract.balanceOf(address(this)));
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(recipient);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        446
Source: 
>         address payable payableOwner = address(uint160(owner()));
>         tokenContract.transfer(owner(), tokenContract.balanceOf(address(this)));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(payableOwner);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenBonusAirdrop
Line:        451
Source: 
>     function sendRestTokensAndDestruct(address payable recipient) external onlyOwner {
>         tokenContract.transfer(recipient, tokenContract.balanceOf(address(this)));
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(recipient);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        446
Source: 
>         address payable payableOwner = address(uint160(owner()));
>         tokenContract.transfer(owner(), tokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(payableOwner);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        451
Source: 
>     function sendRestTokensAndDestruct(address payable recipient) external onlyOwner {
>         tokenContract.transfer(recipient, tokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(recipient);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        465
Source: 
>         uint256 mainTokensLeft = _amount.sub(mainTokensUser);
>         tokenContract.transfer(_msgSender(), mainTokensUser);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (mainTokensLeft > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        467
Source: 
>         if (mainTokensLeft > 0) {
>             tokenContract.transfer(owner(), mainTokensLeft);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        446
Source: 
>         address payable payableOwner = address(uint160(owner()));
>         tokenContract.transfer(owner(), tokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(payableOwner);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        451
Source: 
>     function sendRestTokensAndDestruct(address payable recipient) external onlyOwner {
>         tokenContract.transfer(recipient, tokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(recipient);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        465
Source: 
>         uint256 mainTokensLeft = _amount.sub(mainTokensUser);
>         tokenContract.transfer(_msgSender(), mainTokensUser);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (mainTokensLeft > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        467
Source: 
>         if (mainTokensLeft > 0) {
>             tokenContract.transfer(owner(), mainTokensLeft);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        426
Source: 
>         tokenContract = IERC20(_tokenAddress);
>         emit TokenChanged(_msgSender(), _tokenAddress);
>                           ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        431
Source: 
>         vestingTimeInSeconds = _vestingTimeInSeconds;
>         emit VestingTimeChanged(_msgSender(), _vestingTimeInSeconds);
>                                 ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        437
Source: 
>         startTimestamp = _startTimestamp;
>         emit StartTimestampChanged(_msgSender(), _startTimestamp);
>                                    ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        446
Source: 
>         address payable payableOwner = address(uint160(owner()));
>         tokenContract.transfer(owner(), tokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(payableOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        451
Source: 
>     function sendRestTokensAndDestruct(address payable recipient) external onlyOwner {
>         tokenContract.transfer(recipient, tokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(recipient);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        460
Source: 
>         uint256 _amount = allowedUsersBalances[_msgSender()];
>         spent[_msgSender()] = true;
>               ^^^^^^^^^^^^
>         allowedUsersBalances[_msgSender()] = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        461
Source: 
>         spent[_msgSender()] = true;
>         allowedUsersBalances[_msgSender()] = 0;
>                              ^^^^^^^^^^^^
>         uint256 biQuadraticPercentage = getVestingPercentage();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        465
Source: 
>         uint256 mainTokensLeft = _amount.sub(mainTokensUser);
>         tokenContract.transfer(_msgSender(), mainTokensUser);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (mainTokensLeft > 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        467
Source: 
>         if (mainTokensLeft > 0) {
>             tokenContract.transfer(owner(), mainTokensLeft);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        469
Source: 
>         }
>         emit Claimed(_msgSender(), mainTokensUser, mainTokensLeft);
>                      ^^^^^^^^^^^^
>         return mainTokensUser;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        426
Source: 
>         tokenContract = IERC20(_tokenAddress);
>         emit TokenChanged(_msgSender(), _tokenAddress);
>                           ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        431
Source: 
>         vestingTimeInSeconds = _vestingTimeInSeconds;
>         emit VestingTimeChanged(_msgSender(), _vestingTimeInSeconds);
>                                 ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        437
Source: 
>         startTimestamp = _startTimestamp;
>         emit StartTimestampChanged(_msgSender(), _startTimestamp);
>                                    ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        446
Source: 
>         address payable payableOwner = address(uint160(owner()));
>         tokenContract.transfer(owner(), tokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(payableOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        451
Source: 
>     function sendRestTokensAndDestruct(address payable recipient) external onlyOwner {
>         tokenContract.transfer(recipient, tokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(recipient);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        460
Source: 
>         uint256 _amount = allowedUsersBalances[_msgSender()];
>         spent[_msgSender()] = true;
>               ^^^^^^^^^^^^
>         allowedUsersBalances[_msgSender()] = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        461
Source: 
>         spent[_msgSender()] = true;
>         allowedUsersBalances[_msgSender()] = 0;
>                              ^^^^^^^^^^^^
>         uint256 biQuadraticPercentage = getVestingPercentage();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        465
Source: 
>         uint256 mainTokensLeft = _amount.sub(mainTokensUser);
>         tokenContract.transfer(_msgSender(), mainTokensUser);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (mainTokensLeft > 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        467
Source: 
>         if (mainTokensLeft > 0) {
>             tokenContract.transfer(owner(), mainTokensLeft);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        469
Source: 
>         }
>         emit Claimed(_msgSender(), mainTokensUser, mainTokensLeft);
>                      ^^^^^^^^^^^^
>         return mainTokensUser;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenBonusAirdrop
Line:        481
Source: 
>         uint _cap = cap;
>         uint256 contractDeployedTime = block.timestamp - _startTimestamp;
>                                        ^^^^^^^^^^^^^^^
> 

[0m
