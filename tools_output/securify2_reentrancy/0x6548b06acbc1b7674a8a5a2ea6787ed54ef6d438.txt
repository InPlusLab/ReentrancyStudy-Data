Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        179
Source: 
>     // Lists a synth and its parent EMP address
>     function listSynth(
>     ^^^^^^^^^^^^^^^^^^^
>         address pool,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        219
Source: 
> 
>     function delistPool(address pool) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolIsListed[pool] = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        224
Source: 
>     // Quorum Action 1
>     function addAdmin(address newAdmin) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        233
Source: 
> 
>     function transferAdmin(address newAdmin) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        245
Source: 
>     // Admin should send reward funds first
>     function snapshot(address rewardAsset) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         snapshotInEra(rewardAsset, currentEra); // Snapshots PERL balances

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        259
Source: 
>     // Snapshot with offset (in case runs out of gas)
>     function snapshotWithOffset(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address rewardAsset,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        342
Source: 
>     // Remove unclaimed rewards and disable era for claiming
>     function removeReward(uint256 era, address rewardAsset) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 amount = mapEraAsset_Reward[era][rewardAsset];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        357
Source: 
>     // Use in anger to sweep off assets (such as accidental airdropped tokens)
>     function sweep(address asset, uint256 amount) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        366
Source: 
>     // Member locks some LP tokens
>     function lock(address pool, uint256 amount) public nonReentrant {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(poolIsListed[pool] == true, "Must be listed");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        395
Source: 
>     // Member unlocks all from a pool
>     function unlock(address pool) public nonReentrant {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = mapMemberPool_Balance[msg.sender][pool];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        440
Source: 
>     // Member claims in a era
>     function claim(uint256 era, address rewardAsset)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        513
Source: 
> 
>     function adminCount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return arrayAdmins.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        521
Source: 
> 
>     function synthCount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return arraySynths.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PerlinXRewards
Line:        525
Source: 
> 
>     function memberCount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return arrayMembers.length;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PerlinXRewards
Line:        280
Source: 
>         );
>         uint256 amount = ERC20(rewardAsset).balanceOf(address(this)).sub(
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             mapAsset_Rewards[rewardAsset]

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PerlinXRewards
Line:        359
Source: 
>       require(
>             ERC20(asset).transfer(treasury, amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Must transfer"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PerlinXRewards
Line:        385
Source: 
>         require(
>             ERC20(pool).transferFrom(msg.sender, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Must transfer"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PerlinXRewards
Line:        399
Source: 
>         mapMemberPool_Balance[msg.sender][pool] = 0; // Zero out balance
>         require(ERC20(pool).transfer(msg.sender, balance), "Must transfer"); // Then transfer
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (ERC20(pool).balanceOf(address(this)) == 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PerlinXRewards
Line:        400
Source: 
>         require(ERC20(pool).transfer(msg.sender, balance), "Must transfer"); // Then transfer
>         if (ERC20(pool).balanceOf(address(this)) == 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             poolHasMembers[pool] = false; // If nobody is staking any more

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PerlinXRewards
Line:        310
Source: 
>                 uint256 weightedBalance = (
>                     ERC20(PERL).balanceOf(pool).mul(weight)).div(100); // (depth * weight) / 100
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 perlTotal = perlTotal.add(weightedBalance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        179
Source: 
>     // Lists a synth and its parent EMP address
>     function listSynth(
>     ^^^^^^^^^^^^^^^^^^^
>         address pool,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        245
Source: 
>     // Admin should send reward funds first
>     function snapshot(address rewardAsset) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         snapshotInEra(rewardAsset, currentEra); // Snapshots PERL balances

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        252
Source: 
>     // Do this after snapshotPools()
>     function snapshotInEra(address rewardAsset, uint256 era) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 start = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        259
Source: 
>     // Snapshot with offset (in case runs out of gas)
>     function snapshotWithOffset(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address rewardAsset,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        269
Source: 
>     // Snapshot a particular rewwardAsset, with offset
>     function snapshotInEraWithOffset(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address rewardAsset,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        342
Source: 
>     // Remove unclaimed rewards and disable era for claiming
>     function removeReward(uint256 era, address rewardAsset) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 amount = mapEraAsset_Reward[era][rewardAsset];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        366
Source: 
>     // Member locks some LP tokens
>     function lock(address pool, uint256 amount) public nonReentrant {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(poolIsListed[pool] == true, "Must be listed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        420
Source: 
>     // Member registers claim in all pools
>     function registerAllClaims(address member) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        440
Source: 
>     // Member claims in a era
>     function claim(uint256 era, address rewardAsset)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PerlinXRewards
Line:        469
Source: 
>     // Member checks claims in all pools
>     function checkClaim(address member, uint256 era)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PerlinXRewards
Line:        219
Source: 
> 
>     function delistPool(address pool) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolIsListed[pool] = false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PerlinXRewards
Line:        357
Source: 
>     // Use in anger to sweep off assets (such as accidental airdropped tokens)
>     function sweep(address asset, uint256 amount) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PerlinXRewards
Line:        482
Source: 
>     // Member checks claim in a single pool
>     function checkClaimInPool(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address member,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PerlinXRewards
Line:        505
Source: 
>     // Get the share of a total
>     function getShare(
>     ^^^^^^^^^^^^^^^^^^
>         uint256 part,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PerlinXRewards
Line:        280
Source: 
>         );
>         uint256 amount = ERC20(rewardAsset).balanceOf(address(this)).sub(
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             mapAsset_Rewards[rewardAsset]

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PerlinXRewards
Line:        385
Source: 
>         require(
>             ERC20(pool).transferFrom(msg.sender, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Must transfer"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PerlinXRewards
Line:        399
Source: 
>         mapMemberPool_Balance[msg.sender][pool] = 0; // Zero out balance
>         require(ERC20(pool).transfer(msg.sender, balance), "Must transfer"); // Then transfer
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (ERC20(pool).balanceOf(address(this)) == 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PerlinXRewards
Line:        400
Source: 
>         require(ERC20(pool).transfer(msg.sender, balance), "Must transfer"); // Then transfer
>         if (ERC20(pool).balanceOf(address(this)) == 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             poolHasMembers[pool] = false; // If nobody is staking any more

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PerlinXRewards
Line:        458
Source: 
>             require(
>                 ERC20(rewardAsset).transfer(msg.sender, totalClaim),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Must transfer"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        74
Source: 
> 
>     address public PERL;
>     ^^^^^^^^^^^^^^^^^^^
>     address public treasury;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        88
Source: 
>     mapping(address => bool) public poolWasListed; // Tracks if pool was ever listed
>     mapping(address => uint256) public mapAsset_Rewards; // Maps rewards for each asset (PERL, BAL, UNI etc)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public poolWeight; // Allows a reward weight to be applied; 100 = 1.0

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        90
Source: 
>     mapping(address => uint256) public poolWeight; // Allows a reward weight to be applied; 100 = 1.0
>     mapping(uint256 => uint256) public mapEra_Total; // Total PERL staked in each era
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => bool) public eraIsOpen; // Era is open of collecting rewards

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        92
Source: 
>     mapping(uint256 => bool) public eraIsOpen; // Era is open of collecting rewards
>     mapping(uint256 => mapping(address => uint256)) public mapEraAsset_Reward; // Reward allocated for era
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => uint256)) public mapEraPool_Balance; // Perls in each pool, per era

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        93
Source: 
>     mapping(uint256 => mapping(address => uint256)) public mapEraAsset_Reward; // Reward allocated for era
>     mapping(uint256 => mapping(address => uint256)) public mapEraPool_Balance; // Perls in each pool, per era
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => uint256)) public mapEraPool_Share; // Share of reward for each pool, per era

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        94
Source: 
>     mapping(uint256 => mapping(address => uint256)) public mapEraPool_Balance; // Perls in each pool, per era
>     mapping(uint256 => mapping(address => uint256)) public mapEraPool_Share; // Share of reward for each pool, per era
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => uint256)) public mapEraPool_Claims; // Total LP tokens locked for each pool, per era

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        95
Source: 
>     mapping(uint256 => mapping(address => uint256)) public mapEraPool_Share; // Share of reward for each pool, per era
>     mapping(uint256 => mapping(address => uint256)) public mapEraPool_Claims; // Total LP tokens locked for each pool, per era
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        97
Source: 
> 
>     mapping(address => address) public mapPool_Asset; // Uniswap pools provide liquidity to non-PERL asset
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => address) public mapSynth_EMP; // Synthetic Assets have a management contract

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        98
Source: 
>     mapping(address => address) public mapPool_Asset; // Uniswap pools provide liquidity to non-PERL asset
>     mapping(address => address) public mapSynth_EMP; // Synthetic Assets have a management contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        101
Source: 
>     mapping(address => bool) public isMember; // Is Member
>     mapping(address => uint256) public mapMember_poolCount; // Total number of Pools member is in
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => address[]) public mapMember_arrayPools; // Array of pools for member

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        102
Source: 
>     mapping(address => uint256) public mapMember_poolCount; // Total number of Pools member is in
>     mapping(address => address[]) public mapMember_arrayPools; // Array of pools for member
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(address => uint256))

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        103
Source: 
>     mapping(address => address[]) public mapMember_arrayPools; // Array of pools for member
>     mapping(address => mapping(address => uint256))
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public mapMemberPool_Balance; // Member's balance in pool

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        105
Source: 
>         public mapMemberPool_Balance; // Member's balance in pool
>     mapping(address => mapping(address => bool)) public mapMemberPool_Added; // Member's balance in pool
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(uint256 => bool))

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        106
Source: 
>     mapping(address => mapping(address => bool)) public mapMemberPool_Added; // Member's balance in pool
>     mapping(address => mapping(uint256 => bool))
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public mapMemberEra_hasRegistered; // Member has registered

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        108
Source: 
>         public mapMemberEra_hasRegistered; // Member has registered
>     mapping(address => mapping(uint256 => mapping(address => uint256)))
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public mapMemberEraPool_Claim; // Value of claim per pool, per era

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PerlinXRewards
Line:        110
Source: 
>         public mapMemberEraPool_Claim; // Value of claim per pool, per era
>     mapping(address => mapping(uint256 => mapping(address => bool)))
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public mapMemberEraAsset_hasClaimed; // Boolean claimed

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PerlinXRewards
Line:        310
Source: 
>                 uint256 weightedBalance = (
>                     ERC20(PERL).balanceOf(pool).mul(weight)).div(100); // (depth * weight) / 100
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 perlTotal = perlTotal.add(weightedBalance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PerlinXRewards
Line:        350
Source: 
>       require(
>             ERC20(rewardAsset).transfer(treasury, amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Must transfer"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PerlinXRewards
Line:        359
Source: 
>       require(
>             ERC20(asset).transfer(treasury, amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Must transfer"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PerlinXRewards
Line:        385
Source: 
>         require(
>             ERC20(pool).transferFrom(msg.sender, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Must transfer"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PerlinXRewards
Line:        399
Source: 
>         mapMemberPool_Balance[msg.sender][pool] = 0; // Zero out balance
>         require(ERC20(pool).transfer(msg.sender, balance), "Must transfer"); // Then transfer
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (ERC20(pool).balanceOf(address(this)) == 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PerlinXRewards
Line:        400
Source: 
>         require(ERC20(pool).transfer(msg.sender, balance), "Must transfer"); // Then transfer
>         if (ERC20(pool).balanceOf(address(this)) == 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             poolHasMembers[pool] = false; // If nobody is staking any more

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PerlinXRewards
Line:        458
Source: 
>             require(
>                 ERC20(rewardAsset).transfer(msg.sender, totalClaim),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Must transfer"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PerlinXRewards
Line:        280
Source: 
>         );
>         uint256 amount = ERC20(rewardAsset).balanceOf(address(this)).sub(
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             mapAsset_Rewards[rewardAsset]

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PerlinXRewards
Line:        162
Source: 
>         require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
>         _status = _ENTERED;
>         ^^^^^^^^^^^^^^^^^^
>         _;

[0m
