Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    GatewayComposer
Line:        1734
Source: 
>         require(
>             brandedToken.acceptStakeRequest(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _stakeRequestHash,

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    GatewayComposer
Line:        1796
Source: 
>         require(
>             brandedToken.revokeStakeRequest(_stakeRequestHash),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "BrandedToken revokeStakeRequest returned false."

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BrandedToken
Line:        837
Source: 
>     /** Domain separator per EIP 712. */
>     bytes32 private DOMAIN_SEPARATOR = keccak256(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         abi.encode(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        431
Source: 
>      */
>     function name() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenName;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        440
Source: 
>      */
>     function symbol() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenSymbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        449
Source: 
>      */
>     function decimals() public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenDecimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        460
Source: 
>      */
>     function balanceOf(address _owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        471
Source: 
>      */
>     function totalSupply()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        488
Source: 
>      */
>     function allowance(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        510
Source: 
>      */
>     function transfer(
>     ^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        544
Source: 
>      */
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        575
Source: 
>      */
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        431
Source: 
>      */
>     function name() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenName;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        440
Source: 
>      */
>     function symbol() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenSymbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        449
Source: 
>      */
>     function decimals() public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenDecimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        460
Source: 
>      */
>     function balanceOf(address _owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        471
Source: 
>      */
>     function totalSupply()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        488
Source: 
>      */
>     function allowance(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EIP20Token
Line:        575
Source: 
>      */
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BrandedToken
Line:        1288
Source: 
>      */
>     function transfer(
>     ^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BrandedToken
Line:        1309
Source: 
>      */
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BrandedToken
Line:        981
Source: 
>         require(
>             valueToken.transferFrom(msg.sender, address(this), _stake),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken.transferFrom returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BrandedToken
Line:        1439
Source: 
> 
>         return organization.isWorker(ecrecover(typedData, _v, _r, _s));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Organized
Line:        702
Source: 
>         require(
>             organization.isWorker(msg.sender),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Only whitelisted workers are allowed to call this method."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Organized
Line:        692
Source: 
>         require(
>             organization.isOrganization(msg.sender),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Only the organization is allowed to call this method."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BrandedToken
Line:        1139
Source: 
>         require(
>             valueToken.transfer(msg.sender, stake),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken.transfer returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BrandedToken
Line:        1177
Source: 
>         require(
>             valueToken.transfer(msg.sender, valueTokens),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken.transfer returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Organized
Line:        702
Source: 
>         require(
>             organization.isWorker(msg.sender),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Only whitelisted workers are allowed to call this method."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BrandedToken
Line:        1221
Source: 
>         require(
>             valueToken.transfer(stakeRequest.staker, stakeRequest.stake),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken.transfer returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Organized
Line:        702
Source: 
>         require(
>             organization.isWorker(msg.sender),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Only whitelisted workers are allowed to call this method."

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EIP20Token
Line:        510
Source: 
>      */
>     function transfer(
>     ^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EIP20Token
Line:        544
Source: 
>      */
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EIP20Token
Line:        510
Source: 
>      */
>     function transfer(
>     ^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EIP20Token
Line:        544
Source: 
>      */
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BrandedToken
Line:        945
Source: 
>      */
>     function requestStake(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _stake,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BrandedToken
Line:        1005
Source: 
>      */
>     function acceptStakeRequest(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _stakeRequestHash,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BrandedToken
Line:        1161
Source: 
>      */
>     function redeem(
>     ^^^^^^^^^^^^^^^^
>         uint256 _brandedTokens

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BrandedToken
Line:        1288
Source: 
>      */
>     function transfer(
>     ^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BrandedToken
Line:        1309
Source: 
>      */
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BrandedToken
Line:        1333
Source: 
>      */
>     function convertToBrandedTokens(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _valueTokens

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BrandedToken
Line:        1358
Source: 
>      */
>     function convertToValueTokens(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _brandedTokens

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GatewayComposer
Line:        1821
Source: 
>      */
>     function transferToken(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         EIP20Interface _token,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GatewayComposer
Line:        1857
Source: 
>      */
>     function approveToken(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         EIP20Interface _token,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GatewayComposer
Line:        1933
Source: 
>      */
>     function revertStake(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address _gateway,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EIP20Token
Line:        460
Source: 
>      */
>     function balanceOf(address _owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EIP20Token
Line:        488
Source: 
>      */
>     function allowance(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EIP20Token
Line:        575
Source: 
>      */
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EIP20Token
Line:        460
Source: 
>      */
>     function balanceOf(address _owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EIP20Token
Line:        488
Source: 
>      */
>     function allowance(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EIP20Token
Line:        575
Source: 
>      */
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BrandedToken
Line:        1078
Source: 
>      */
>     function isUnrestricted(address _actor)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BrandedToken
Line:        1238
Source: 
>      */
>     function setSymbol(
>     ^^^^^^^^^^^^^^^^^^^
>         string calldata _symbol

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BrandedToken
Line:        1262
Source: 
>      */
>     function setName(
>     ^^^^^^^^^^^^^^^^^
>         string calldata _name

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GatewayComposer
Line:        1625
Source: 
>      */
>     function requestStake(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _stakeVT,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GatewayComposer
Line:        1704
Source: 
>      */
>     function acceptStakeRequest(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _stakeRequestHash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        306
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BrandedToken
Line:        981
Source: 
>         require(
>             valueToken.transferFrom(msg.sender, address(this), _stake),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken.transferFrom returned false."

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GatewayComposer
Line:        1644
Source: 
>         require(
>             _mintBT == brandedToken.convertToBrandedTokens(_stakeVT),
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "_mintBT should match converted _stakeVT."

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GatewayComposer
Line:        1660
Source: 
>         require(
>             valueToken.transferFrom(msg.sender, address(this), _stakeVT),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken transferFrom returned false."

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GatewayComposer
Line:        1664
Source: 
>         require(
>             valueToken.approve(address(brandedToken), _stakeVT),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken approve returned false."

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GatewayComposer
Line:        1668
Source: 
> 
>         stakeRequestHash_ = brandedToken.requestStake(_stakeVT, _mintBT);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BrandedToken
Line:        837
Source: 
>     /** Domain separator per EIP 712. */
>     bytes32 private DOMAIN_SEPARATOR = keccak256(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         abi.encode(

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        168
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        260
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        361
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        593
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        650
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        730
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1445
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EIP20Token
Line:        397
Source: 
> 
>     mapping(address => uint256) balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping (address => uint256)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EIP20Token
Line:        398
Source: 
>     mapping(address => uint256) balances;
>     mapping(address => mapping (address => uint256)) allowed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BrandedToken
Line:        981
Source: 
>         require(
>             valueToken.transferFrom(msg.sender, address(this), _stake),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken.transferFrom returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BrandedToken
Line:        1439
Source: 
> 
>         return organization.isWorker(ecrecover(typedData, _v, _r, _s));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Organized
Line:        702
Source: 
>         require(
>             organization.isWorker(msg.sender),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Only whitelisted workers are allowed to call this method."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Organized
Line:        692
Source: 
>         require(
>             organization.isOrganization(msg.sender),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Only the organization is allowed to call this method."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BrandedToken
Line:        1139
Source: 
>         require(
>             valueToken.transfer(msg.sender, stake),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken.transfer returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BrandedToken
Line:        1177
Source: 
>         require(
>             valueToken.transfer(msg.sender, valueTokens),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken.transfer returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Organized
Line:        702
Source: 
>         require(
>             organization.isWorker(msg.sender),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Only whitelisted workers are allowed to call this method."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BrandedToken
Line:        1221
Source: 
>         require(
>             valueToken.transfer(stakeRequest.staker, stakeRequest.stake),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken.transfer returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Organized
Line:        702
Source: 
>         require(
>             organization.isWorker(msg.sender),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Only whitelisted workers are allowed to call this method."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1578
Source: 
>         require(
>             address(_valueToken) == address(_brandedToken.valueToken()),
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken should match BrandedToken.valueToken."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1644
Source: 
>         require(
>             _mintBT == brandedToken.convertToBrandedTokens(_stakeVT),
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "_mintBT should match converted _stakeVT."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1660
Source: 
>         require(
>             valueToken.transferFrom(msg.sender, address(this), _stakeVT),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken transferFrom returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1664
Source: 
>         require(
>             valueToken.approve(address(brandedToken), _stakeVT),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken approve returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1723
Source: 
> 
>         uint256 bounty = GatewayInterface(stakeRequest.gateway).bounty();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1725
Source: 
>         require(
>             valueToken.transferFrom(msg.sender, address(this), bounty),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken transferFrom returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1729
Source: 
>         require(
>             valueToken.approve(stakeRequest.gateway, bounty),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken approve returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1734
Source: 
>         require(
>             brandedToken.acceptStakeRequest(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _stakeRequestHash,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1743
Source: 
> 
>         uint256 mintBT = brandedToken.convertToBrandedTokens(
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             stakeRequest.stakeVT

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1748
Source: 
>         require(
>             brandedToken.approve(stakeRequest.gateway, mintBT),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "BrandedToken approve returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1796
Source: 
>         require(
>             brandedToken.revokeStakeRequest(_stakeRequestHash),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "BrandedToken revokeStakeRequest returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1800
Source: 
>         require(
>             valueToken.transfer(owner, stakeRequest.stakeVT),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken transfer returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1835
Source: 
>         require(
>             _token.transfer(_to, _value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "EIP20Token transfer returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1871
Source: 
>         require(
>             _token.approve(_spender, _value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "EIP20token approve returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1895
Source: 
>         require(
>             valueToken.balanceOf(address(this)) == 0,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken balance should be 0."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1899
Source: 
>         require(
>             brandedToken.balanceOf(address(this)) == 0,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "BrandedToken balance should be 0."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1903
Source: 
>         require(
>             brandedToken.stakeRequestHashes(address(this)) == bytes32(0),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "In progress stake requests are present."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1951
Source: 
>         require(
>             valueToken.transferFrom(msg.sender, address(this), _penalty),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken transferFrom returned false."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GatewayComposer
Line:        1955
Source: 
>         require(
>             valueToken.approve(_gateway, _penalty),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "ValueToken approve returned false."

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GatewayComposer
Line:        1668
Source: 
> 
>         stakeRequestHash_ = brandedToken.requestStake(_stakeVT, _mintBT);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GatewayComposer
Line:        1752
Source: 
> 
>         messageHash_ = GatewayInterface(stakeRequest.gateway).stake(
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             mintBT,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GatewayComposer
Line:        1959
Source: 
> 
>         GatewayInterface(_gateway).revertStake(_messageHash);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BrandedToken
Line:        821
Source: 
>     /** Global nonce for stake requests. */
>     uint256 public nonce;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BrandedToken
Line:        824
Source: 
>     /** Flag indicating whether restrictions have been lifted for all actors. */
>     bool public allRestrictionsLifted;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GatewayComposer
Line:        1488
Source: 
> 
>     address public owner;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GatewayComposer
Line:        1491
Source: 
>     /** EIP20Token value token which is staked on the value chain. */
>     EIP20Interface public valueToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GatewayComposer
Line:        1498
Source: 
>      */
>     BrandedToken public brandedToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GatewayComposer
Line:        1503
Source: 
>     /** Mutex lock status. */
>     bool private mutexAcquired;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BrandedToken
Line:        1039
Source: 
>             .add(mint);
>         totalTokenSupply = totalTokenSupply.add(mint);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BrandedToken
Line:        1168
Source: 
>         balances[msg.sender] = balances[msg.sender].sub(_brandedTokens);
>         totalTokenSupply = totalTokenSupply.sub(_brandedTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueTokens = convertToValueTokens(_brandedTokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EIP20Token
Line:        523
Source: 
>         balances[msg.sender] = balances[msg.sender].sub(_value);
>         balances[_to] = balances[_to].add(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EIP20Token
Line:        552
Source: 
>     {
>         balances[_from] = balances[_from].sub(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EIP20Token
Line:        554
Source: 
>         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
>         balances[_to] = balances[_to].add(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EIP20Token
Line:        583
Source: 
> 
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EIP20Token
Line:        523
Source: 
>         balances[msg.sender] = balances[msg.sender].sub(_value);
>         balances[_to] = balances[_to].add(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EIP20Token
Line:        552
Source: 
>     {
>         balances[_from] = balances[_from].sub(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EIP20Token
Line:        554
Source: 
>         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
>         balances[_to] = balances[_to].add(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EIP20Token
Line:        583
Source: 
> 
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BrandedToken
Line:        1023
Source: 
>         delete stakeRequestHashes[stakeRequest.staker];
>         delete stakeRequests[_stakeRequestHash];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BrandedToken
Line:        1037
Source: 
>         uint256 mint = convertToBrandedTokens(stakeRequest.stake);
>         balances[stakeRequest.staker] = balances[stakeRequest.staker]
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .add(mint);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BrandedToken
Line:        1065
Source: 
>         for (uint256 i = 0; i < _restrictionLifted.length; i++) {
>             unrestricted[_restrictionLifted[i]] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BrandedToken
Line:        1099
Source: 
>     {
>         allRestrictionsLifted = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BrandedToken
Line:        1212
Source: 
>         delete stakeRequestHashes[stakeRequest.staker];
>         delete stakeRequests[_stakeRequestHash];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BrandedToken
Line:        1245
Source: 
>     {
>         tokenSymbol = _symbol;
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BrandedToken
Line:        1269
Source: 
>     {
>         tokenName = _name;
>         ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GatewayComposer
Line:        1716
Source: 
> 
>         delete stakeRequests[_stakeRequestHash];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GatewayComposer
Line:        1959
Source: 
> 
>         GatewayInterface(_gateway).revertStake(_messageHash);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Organized
Line:        684
Source: 
>     /** Organization which holds all the keys needed to administer the economy. */
>     OrganizationInterface public organization;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
