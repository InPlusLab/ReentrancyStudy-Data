Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.4. Changing pragma version to 0.6.4....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        147
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        147
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DexmexPairCreator
Line:        218
Source: 
>     
>     function transferMasterOwnership(address newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _prediction.transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DexmexPairCreator
Line:        222
Source: 
>     
>     function addPair(address uniPair) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_token.balanceOf(msg.sender) >= 100000000000000000000000, "PairCreator: You need to hold at least 100k DEXM");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DexmexPairCreator
Line:        227
Source: 
>     
>     function addPairAuto(address uniPair) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPair(uniPair);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DexmexPairCreator
Line:        233
Source: 
>         require(!_pairs[uniPair], "PairCreator: Pair already exists");
>         _prediction.setPool(uniPair, 300000000000, 2000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pairs[uniPair] = true;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DexmexPairCreator
Line:        197
Source: 
>     
>     IERC20 _token;
>     ^^^^^^^^^^^^^
>     MasterMex _prediction;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DexmexPairCreator
Line:        198
Source: 
>     IERC20 _token;
>     MasterMex _prediction;
>     ^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => bool) _pairs;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DexmexPairCreator
Line:        199
Source: 
>     MasterMex _prediction;
>     mapping(address => bool) _pairs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DexmexPairCreator
Line:        223
Source: 
>     function addPair(address uniPair) external {
>         require(_token.balanceOf(msg.sender) >= 100000000000000000000000, "PairCreator: You need to hold at least 100k DEXM");
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPair(uniPair);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DexmexPairCreator
Line:        233
Source: 
>         require(!_pairs[uniPair], "PairCreator: Pair already exists");
>         _prediction.setPool(uniPair, 300000000000, 2000000000000000000);
>                                      ^^^^^^^^^^^^
>         _pairs[uniPair] = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DexmexPairCreator
Line:        233
Source: 
>         require(!_pairs[uniPair], "PairCreator: Pair already exists");
>         _prediction.setPool(uniPair, 300000000000, 2000000000000000000);
>                                                    ^^^^^^^^^^^^^^^^^^^
>         _pairs[uniPair] = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DexmexPairCreator
Line:        223
Source: 
>     function addPair(address uniPair) external {
>         require(_token.balanceOf(msg.sender) >= 100000000000000000000000, "PairCreator: You need to hold at least 100k DEXM");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPair(uniPair);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DexmexPairCreator
Line:        219
Source: 
>     function transferMasterOwnership(address newOwner) external onlyOwner {
>         _prediction.transferOwnership(newOwner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DexmexPairCreator
Line:        233
Source: 
>         require(!_pairs[uniPair], "PairCreator: Pair already exists");
>         _prediction.setPool(uniPair, 300000000000, 2000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pairs[uniPair] = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DexmexPairCreator
Line:        234
Source: 
>         _prediction.setPool(uniPair, 300000000000, 2000000000000000000);
>         _pairs[uniPair] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
