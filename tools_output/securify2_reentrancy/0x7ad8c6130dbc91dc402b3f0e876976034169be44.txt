pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibRichErrors
Line:        99
Source: 
>     {
>         assembly {
>         ^^^^^^^^^^
>             revert(add(errorData, 0x20), mload(errorData))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PauserRole
Line:        471
Source: 
> 
>     Roles.Role private _pausers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operational
Line:        363
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "INVALID_OWNER");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        486
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        490
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        486
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        490
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        521
Source: 
> 
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        535
Source: 
> 
>     function pause() public onlyPauser whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        540
Source: 
> 
>     function unpause() public onlyPauser whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operational
Line:        363
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "INVALID_OWNER");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        486
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        490
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        521
Source: 
> 
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        535
Source: 
> 
>     function pause() public onlyPauser whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        540
Source: 
> 
>     function unpause() public onlyPauser whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Vault
Line:        616
Source: 
> 
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(amount.safeSub(miimeFeeAmount).safeSub(issuerFeeAmount))('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Vault
Line:        634
Source: 
> 
>         (bool success, bytes memory _data) = from.call.gas(gasLimit).value(amount)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Vault
Line:        643
Source: 
>     function withdrawMiimeRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(miimeRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Vault
Line:        649
Source: 
>     function withdrawIssuerRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(issuerRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Vault
Line:        616
Source: 
> 
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(amount.safeSub(miimeFeeAmount).safeSub(issuerFeeAmount))('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Vault
Line:        634
Source: 
> 
>         (bool success, bytes memory _data) = from.call.gas(gasLimit).value(amount)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Vault
Line:        643
Source: 
>     function withdrawMiimeRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(miimeRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Vault
Line:        649
Source: 
>     function withdrawIssuerRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(issuerRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        482
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        486
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        482
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        486
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        482
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        486
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vault
Line:        604
Source: 
> 
>     function pay(bytes32 orderHash, uint256 amount, uint256 miimeFeeAmount, uint256 issuerFeeAmount) external nonReentrant onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(depositInfo[orderHash][amount].from != address(0), 'not exist deposit');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vault
Line:        596
Source: 
> 
>     function deposit(bytes32 orderHash, uint256 amount, uint256 gasFee, address payable to) external payable nonReentrant whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount.safeAdd(gasFee) == msg.value, 'invalid amount and gasFee');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vault
Line:        642
Source: 
> 
>     function withdrawMiimeRevenue(address payable to) external nonReentrant onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(miimeRevenue)('');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vault
Line:        648
Source: 
> 
>     function withdrawIssuerRevenue(address payable to) external nonReentrant onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(issuerRevenue)('');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vault
Line:        654
Source: 
> 
>     function setGasLimit(uint256 newGasLimit) external nonReentrant onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gasLimit = newGasLimit;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Vault
Line:        616
Source: 
> 
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(amount.safeSub(miimeFeeAmount).safeSub(issuerFeeAmount))('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Vault
Line:        634
Source: 
> 
>         (bool success, bytes memory _data) = from.call.gas(gasLimit).value(amount)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Vault
Line:        643
Source: 
>     function withdrawMiimeRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(miimeRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Vault
Line:        649
Source: 
>     function withdrawIssuerRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(issuerRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LibReentrancyGuardRichErrors
Line:        35
Source: 
>     // solhint-disable func-name-mixedcase
>     function IllegalReentrancyError()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LibRichErrors
Line:        79
Source: 
>     /// @return The ABI encoded error.
>     function StandardError(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         string memory message

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        193
Source: 
>     // solhint-disable func-name-mixedcase
>     function Uint256BinOpError(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         BinOpErrorCodes errorCode,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        210
Source: 
> 
>     function Uint256DowncastError(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DowncastErrorCodes errorCode,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Vault
Line:        616
Source: 
> 
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(amount.safeSub(miimeFeeAmount).safeSub(issuerFeeAmount))('');
>                        ^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Vault
Line:        634
Source: 
> 
>         (bool success, bytes memory _data) = from.call.gas(gasLimit).value(amount)('');
>                        ^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Vault
Line:        643
Source: 
>     function withdrawMiimeRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(miimeRevenue)('');
>                        ^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Vault
Line:        649
Source: 
>     function withdrawIssuerRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(issuerRevenue)('');
>                        ^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Vault
Line:        590
Source: 
>     uint256 public issuerRevenue;
>     uint256 public gasLimit = 300000;
>                               ^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Vault
Line:        616
Source: 
> 
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(amount.safeSub(miimeFeeAmount).safeSub(issuerFeeAmount))('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Vault
Line:        634
Source: 
> 
>         (bool success, bytes memory _data) = from.call.gas(gasLimit).value(amount)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Vault
Line:        643
Source: 
>     function withdrawMiimeRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(miimeRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Vault
Line:        649
Source: 
>     function withdrawIssuerRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(issuerRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Vault
Line:        643
Source: 
>     function withdrawMiimeRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(miimeRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Vault
Line:        649
Source: 
>     function withdrawIssuerRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(issuerRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Vault
Line:        616
Source: 
> 
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(amount.safeSub(miimeFeeAmount).safeSub(issuerFeeAmount))('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Vault
Line:        634
Source: 
> 
>         (bool success, bytes memory _data) = from.call.gas(gasLimit).value(amount)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Vault
Line:        616
Source: 
> 
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(amount.safeSub(miimeFeeAmount).safeSub(issuerFeeAmount))('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Vault
Line:        634
Source: 
> 
>         (bool success, bytes memory _data) = from.call.gas(gasLimit).value(amount)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Vault
Line:        643
Source: 
>     function withdrawMiimeRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(miimeRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Vault
Line:        649
Source: 
>     function withdrawIssuerRevenue(address payable to) external nonReentrant onlyOperator {
>         (bool success, bytes memory _data) = to.call.gas(gasLimit).value(issuerRevenue)('');
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'failed eth sending');

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        515
Source: 
> 
>     bool private _paused;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vault
Line:        588
Source: 
>     mapping (bytes32 => mapping (uint256 => DepositInfo)) public depositInfo;
>     uint256 public miimeRevenue;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public issuerRevenue;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vault
Line:        589
Source: 
>     uint256 public miimeRevenue;
>     uint256 public issuerRevenue;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public gasLimit = 300000;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        471
Source: 
> 
>     Roles.Role private _pausers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        438
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        446
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        438
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        446
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        536
Source: 
>     function pause() public onlyPauser whenNotPaused {
>         _paused = true;
>         ^^^^^^^^^^^^^^
>         emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        541
Source: 
>     function unpause() public onlyPauser whenPaused {
>         _paused = false;
>         ^^^^^^^^^^^^^^^
>         emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        160
Source: 
>         // Unlock mutex.
>         _locked = false;
>         ^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        438
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        446
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        536
Source: 
>     function pause() public onlyPauser whenNotPaused {
>         _paused = true;
>         ^^^^^^^^^^^^^^
>         emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        541
Source: 
>     function unpause() public onlyPauser whenPaused {
>         _paused = false;
>         ^^^^^^^^^^^^^^^
>         emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vault
Line:        593
Source: 
>     function () external payable {
>         miimeRevenue = miimeRevenue.safeAdd(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vault
Line:        600
Source: 
>         require(!depositInfo[orderHash][amount].filled, 'already filled');
>         depositInfo[orderHash][amount] = DepositInfo(msg.sender, to, gasFee, false);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Deposit(orderHash, msg.sender, to, amount, gasFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuard
Line:        153
Source: 
>         // Lock mutex.
>         _locked = true;
>         ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ReentrancyGuard
Line:        149
Source: 
>             LibRichErrors.rrevert(
>                 LibReentrancyGuardRichErrors.IllegalReentrancyError()
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        245
Source: 
>         if (c / a != b) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        260
Source: 
>         if (b == 0) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        276
Source: 
>         if (b > a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        292
Source: 
>         if (c < a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        245
Source: 
>         if (c / a != b) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        260
Source: 
>         if (b == 0) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        276
Source: 
>         if (b > a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        292
Source: 
>         if (c < a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        245
Source: 
>         if (c / a != b) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        260
Source: 
>         if (b == 0) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        276
Source: 
>         if (b > a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        292
Source: 
>         if (c < a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        245
Source: 
>         if (c / a != b) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        260
Source: 
>         if (b == 0) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        276
Source: 
>         if (b > a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        292
Source: 
>         if (c < a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        537
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        542
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        245
Source: 
>         if (c / a != b) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        260
Source: 
>         if (b == 0) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        276
Source: 
>         if (b > a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        292
Source: 
>         if (c < a) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        537
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        542
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        245
Source: 
>         if (c / a != b) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibSafeMath
Line:        260
Source: 
>         if (b == 0) {
>             LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        133
Source: 
>     // Locked state of mutex.
>     bool private _locked = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibReentrancyGuardRichErrors
Line:        31
Source: 
>     // bytes4(keccak256("IllegalReentrancyError()"))
>     bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hex"0c3b823f";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        172
Source: 
>     // bytes4(keccak256("Uint256BinOpError(uint8,uint256,uint256)"))
>     bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xe946c1bb;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibRichErrors
Line:        70
Source: 
>     // bytes4(keccak256("Error(string)"))
>     bytes4 internal constant STANDARD_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x08c379a0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LibSafeMathRichErrors
Line:        176
Source: 
>     // bytes4(keccak256("Uint256DowncastError(uint8,uint256)"))
>     bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0xc996af7b;

[0m
