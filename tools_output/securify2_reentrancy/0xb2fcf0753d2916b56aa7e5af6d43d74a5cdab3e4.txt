Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        47
Source: 
>   modifier onlyOwner() {
>     require(msg.sender == owner);
>             ^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        12
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>            ^^^^^^
>     return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        12
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>                      ^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        47
Source: 
>   modifier onlyOwner() {
>     require(msg.sender == owner);
>             ^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
> 
>   function transferOwnership(address newOwner) onlyOwner public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YearnStackingLock
Line:        84
Source: 
>     
>     function claim() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint pendingUnlocked = getPendingUnlocked();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YearnStackingLock
Line:        106
Source: 
>     // function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)
>     function transferAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tokenAddr != tokenAddress, "Cannot transfer out reward tokens");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnStackingLock
Line:        106
Source: 
>     // function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)
>     function transferAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tokenAddr != tokenAddress, "Cannot transfer out reward tokens");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    YearnStackingLock
Line:        86
Source: 
>         uint pendingUnlocked = getPendingUnlocked();
>         uint contractBalance = YSFI(tokenAddress).balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amountToSend = pendingUnlocked;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    YearnStackingLock
Line:        91
Source: 
>         }
>         require(YSFI(tokenAddress).transfer(owner, amountToSend), "Could not transfer Tokens.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastClaimedTime = now;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnStackingLock
Line:        70
Source: 
>     
>     address public constant tokenAddress = 0x0f10b084b96a676E678753726DeD0b674c5daf67;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnStackingLock
Line:        72
Source: 
>     
>     uint public constant tokensLocked = 4000e18;       // 4000 YSFI 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant unlockRate =   4000;          // 4000 YSFI unlocking at a time

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnStackingLock
Line:        73
Source: 
>     uint public constant tokensLocked = 4000e18;       // 4000 YSFI 
>     uint public constant unlockRate =   4000;          // 4000 YSFI unlocking at a time
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant lockDuration = 270 days;       // Unlocking Possible after 270 days or 9 month

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnStackingLock
Line:        74
Source: 
>     uint public constant unlockRate =   4000;          // 4000 YSFI unlocking at a time
>     uint public constant lockDuration = 270 days;       // Unlocking Possible after 270 days or 9 month
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public lastClaimedTime;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YearnStackingLock
Line:        86
Source: 
>         uint pendingUnlocked = getPendingUnlocked();
>         uint contractBalance = YSFI(tokenAddress).balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amountToSend = pendingUnlocked;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YearnStackingLock
Line:        91
Source: 
>         }
>         require(YSFI(tokenAddress).transfer(owner, amountToSend), "Could not transfer Tokens.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastClaimedTime = now;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YearnStackingLock
Line:        108
Source: 
>         require(_tokenAddr != tokenAddress, "Cannot transfer out reward tokens");
>         YSFI(_tokenAddr).transfer(_to, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YearnStackingLock
Line:        108
Source: 
>         require(_tokenAddr != tokenAddress, "Cannot transfer out reward tokens");
>         YSFI(_tokenAddr).transfer(_to, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    YearnStackingLock
Line:        76
Source: 
>     uint public lastClaimedTime;
>     uint public deployTime;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
