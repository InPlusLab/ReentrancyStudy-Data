Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    EtherizerV1
Line:        413
Source: 
>     bytes memory data = abi.encode(digest, context);
>     bytes4 magic = ERC1271Interface(owner).isValidSignature(data, signatures);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(magic == bytes4(0x20c13b0b), "Invalid signatures.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherizerV1
Line:        126
Source: 
>    */
>   function triggerCallFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>     EtherizedInterface owner,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherizerV1
Line:        175
Source: 
>    */
>   function increaseAllowance(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address spender, uint256 addedValue

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherizerV1
Line:        191
Source: 
>    */
>   function decreaseAllowance(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address spender, uint256 subtractedValue

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherizerV1
Line:        224
Source: 
>    */
>   function modifyAllowanceViaMetaTransaction(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherizerV1
Line:        161
Source: 
>    */
>   function approve(
>   ^^^^^^^^^^^^^^^^^
>     address spender, uint256 value

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherizerV1
Line:        324
Source: 
>    */
>   function getMetaTransactionMessageHash(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes4 functionSelector,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherizerV1
Line:        350
Source: 
>    */
>   function balanceOf(
>   ^^^^^^^^^^^^^^^^^^^
>     address account

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherizerV1
Line:        364
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address owner, address spender

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EtherizerV1
Line:        111
Source: 
>   // Maintain a mapping of Ether allowances.
>   mapping (address => mapping (address => uint256)) private _allowances;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EtherizerV1
Line:        114
Source: 
>   // Maintain a mapping of invalid meta-transaction message hashes.
>   mapping (bytes32 => bool) private _invalidMetaTxHashes;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherizerV1
Line:        413
Source: 
>     bytes memory data = abi.encode(digest, context);
>     bytes4 magic = ERC1271Interface(owner).isValidSignature(data, signatures);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(magic == bytes4(0x20c13b0b), "Invalid signatures.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherizerV1
Line:        413
Source: 
>     bytes memory data = abi.encode(digest, context);
>     bytes4 magic = ERC1271Interface(owner).isValidSignature(data, signatures);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(magic == bytes4(0x20c13b0b), "Invalid signatures.");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EtherizerV1
Line:        147
Source: 
>     // Trigger the call from the owner and revert if success is not returned.
>     (success, returnData) = owner.triggerCall(recipient, amount, data);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(success, "Triggered call did not return successfully.");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EtherizerV1
Line:        413
Source: 
>     bytes memory data = abi.encode(digest, context);
>     bytes4 magic = ERC1271Interface(owner).isValidSignature(data, signatures);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(magic == bytes4(0x20c13b0b), "Invalid signatures.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EtherizerV1
Line:        413
Source: 
>     bytes memory data = abi.encode(digest, context);
>     bytes4 magic = ERC1271Interface(owner).isValidSignature(data, signatures);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(magic == bytes4(0x20c13b0b), "Invalid signatures.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherizerV1
Line:        381
Source: 
> 
>     _allowances[owner][spender] = value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(owner, spender, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherizerV1
Line:        404
Source: 
>     );
>     _invalidMetaTxHashes[messageHash] = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
