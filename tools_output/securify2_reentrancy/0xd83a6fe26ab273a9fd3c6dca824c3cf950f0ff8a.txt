Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNITY
Line:        453
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UNITY
Line:        64
Source: 
>     mapping (uint => uint) public STAGE_PRICE;
>     uint REFERRER_1_STAGE_LIMIT = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        49
Source: 
> 
>   function transferOwnership(address _owner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNITY
Line:        114
Source: 
> 
>     function setMainAddress(address _mainAddress) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNITY
Line:        124
Source: 
> 
>     function setPaused(bool _paused) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNITY
Line:        129
Source: 
>     //https://etherconverter.online to Ether
>     function setStagePrice(uint _stage, uint _price) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         STAGE_PRICE[_stage] = _price;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNITY
Line:        133
Source: 
> 
>     function setCurrentUserID(uint _currentUserID) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currentUserID = _currentUserID;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNITY
Line:        138
Source: 
>     //Null address is 0x0000000000000000000000000000000000000000
>     function setUserData(uint _userID, address _wallet, uint _referrerID, uint _introducerID, address _referral1, address _referral2, address _referral3, address _referral4, uint _stage, uint _introducedTotal) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNITY
Line:        440
Source: 
> 
>     function viewUserReferrals(uint _user) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referral;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNITY
Line:        444
Source: 
> 
>     function viewUserIntroducers(uint _user) public view returns(uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].introducers;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNITY
Line:        448
Source: 
> 
>     function viewUserStage(uint _user) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].stage;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    UNITY
Line:        384
Source: 
>                     if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].stage >= _stage && users[users[_user].introducers[i]].introducedTotal >= 1){
>                         address(uint160(users[users[_user].introducers[i]].wallet)).transfer(money_upline);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         emit PaymentUpline(userList[msg.sender], users[_user].introducers[i], _stage, money_upline, now);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        49
Source: 
> 
>   function transferOwnership(address _owner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = _owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UNITY
Line:        124
Source: 
> 
>     function setPaused(bool _paused) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = _paused;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UNITY
Line:        133
Source: 
> 
>     function setCurrentUserID(uint _currentUserID) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currentUserID = _currentUserID;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UNITY
Line:        138
Source: 
>     //Null address is 0x0000000000000000000000000000000000000000
>     function setUserData(uint _userID, address _wallet, uint _referrerID, uint _introducerID, address _referral1, address _referral2, address _referral3, address _referral4, uint _stage, uint _introducedTotal) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNITY
Line:        129
Source: 
>     //https://etherconverter.online to Ether
>     function setStagePrice(uint _stage, uint _price) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         STAGE_PRICE[_stage] = _price;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNITY
Line:        440
Source: 
> 
>     function viewUserReferrals(uint _user) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referral;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNITY
Line:        444
Source: 
> 
>     function viewUserIntroducers(uint _user) public view returns(uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].introducers;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNITY
Line:        448
Source: 
> 
>     function viewUserStage(uint _user) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].stage;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    UNITY
Line:        376
Source: 
>             bool result_2;
>             result_2 = address(uint160(users[introducer_id].wallet)).send(money_introducer);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             money_left = SafeMath.sub(money_left,money_introducer);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    UNITY
Line:        384
Source: 
>                     if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].stage >= _stage && users[users[_user].introducers[i]].introducedTotal >= 1){
>                         address(uint160(users[users[_user].introducers[i]].wallet)).transfer(money_upline);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         emit PaymentUpline(userList[msg.sender], users[_user].introducers[i], _stage, money_upline, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    UNITY
Line:        363
Source: 
>                 bool result_1;
>                 result_1 = address(uint160(users[referrer_id].wallet)).send(money_sponsor);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,money_sponsor);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    UNITY
Line:        396
Source: 
>             bool result_lost;
>             result_lost = address(uint160(mainAddress)).send(money_left);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalFees = SafeMath.add(totalFees,money_left);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        63
Source: 
> 
>     mapping (uint => uint) public STAGE_PRICE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint REFERRER_1_STAGE_LIMIT = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        64
Source: 
>     mapping (uint => uint) public STAGE_PRICE;
>     uint REFERRER_1_STAGE_LIMIT = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        175
Source: 
> 
>         uint upline_2_id = users[users[_introducerID].introducerID].introducerID;
>         ^^^^^^^^^^^^^^^^
>         uint upline_3_id = users[upline_2_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        176
Source: 
>         uint upline_2_id = users[users[_introducerID].introducerID].introducerID;
>         uint upline_3_id = users[upline_2_id].introducerID;
>         ^^^^^^^^^^^^^^^^
>         uint upline_4_id = users[upline_3_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        177
Source: 
>         uint upline_3_id = users[upline_2_id].introducerID;
>         uint upline_4_id = users[upline_3_id].introducerID;
>         ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        268
Source: 
> 
>         uint _introducerID = _referrerID;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        292
Source: 
> 
>         uint upline_1_id = users[_introducerID].introducerID;
>         ^^^^^^^^^^^^^^^^
>         uint upline_2_id = users[upline_1_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        293
Source: 
>         uint upline_1_id = users[_introducerID].introducerID;
>         uint upline_2_id = users[upline_1_id].introducerID;
>         ^^^^^^^^^^^^^^^^
>         uint upline_3_id = users[upline_2_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        294
Source: 
>         uint upline_2_id = users[upline_1_id].introducerID;
>         uint upline_3_id = users[upline_2_id].introducerID;
>         ^^^^^^^^^^^^^^^^
>         uint upline_4_id = users[upline_3_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        295
Source: 
>         uint upline_3_id = users[upline_2_id].introducerID;
>         uint upline_4_id = users[upline_3_id].introducerID;
>         ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        337
Source: 
> 
>         uint referrer_id;
>         ^^^^^^^^^^^^^^^^
>         uint introducer_id;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        338
Source: 
>         uint referrer_id;
>         uint introducer_id;
>         ^^^^^^^^^^^^^^^^^^
>         uint money_sponsor = SafeMath.div(STAGE_PRICE[_stage],2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        339
Source: 
>         uint introducer_id;
>         uint money_sponsor = SafeMath.div(STAGE_PRICE[_stage],2);
>         ^^^^^^^^^^^^^^^^^^
>         uint money_introducer = SafeMath.div(money_sponsor,2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        340
Source: 
>         uint money_sponsor = SafeMath.div(STAGE_PRICE[_stage],2);
>         uint money_introducer = SafeMath.div(money_sponsor,2);
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint money_upline = SafeMath.div(money_introducer,4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        341
Source: 
>         uint money_introducer = SafeMath.div(money_sponsor,2);
>         uint money_upline = SafeMath.div(money_introducer,4);
>         ^^^^^^^^^^^^^^^^^
>         uint money_left = STAGE_PRICE[_stage];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        342
Source: 
>         uint money_upline = SafeMath.div(money_introducer,4);
>         uint money_left = STAGE_PRICE[_stage];
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        362
Source: 
>             if(users[referrer_id].stage >= _stage){
>                 bool result_1;
>                 ^^^^^^^^^^^^^
>                 result_1 = address(uint160(users[referrer_id].wallet)).send(money_sponsor);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        375
Source: 
> 
>             bool result_2;
>             ^^^^^^^^^^^^^
>             result_2 = address(uint160(users[introducer_id].wallet)).send(money_introducer);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNITY
Line:        395
Source: 
>         if(money_left > 0){
>             bool result_lost;
>             ^^^^^^^^^^^^^^^^
>             result_lost = address(uint160(mainAddress)).send(money_left);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UNITY
Line:        64
Source: 
>     mapping (uint => uint) public STAGE_PRICE;
>     uint REFERRER_1_STAGE_LIMIT = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    UNITY
Line:        376
Source: 
>             bool result_2;
>             result_2 = address(uint160(users[introducer_id].wallet)).send(money_introducer);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             money_left = SafeMath.sub(money_left,money_introducer);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    UNITY
Line:        384
Source: 
>                     if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].stage >= _stage && users[users[_user].introducers[i]].introducedTotal >= 1){
>                         address(uint160(users[users[_user].introducers[i]].wallet)).transfer(money_upline);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         emit PaymentUpline(userList[msg.sender], users[_user].introducers[i], _stage, money_upline, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    UNITY
Line:        363
Source: 
>                 bool result_1;
>                 result_1 = address(uint160(users[referrer_id].wallet)).send(money_sponsor);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,money_sponsor);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    UNITY
Line:        396
Source: 
>             bool result_lost;
>             result_lost = address(uint160(mainAddress)).send(money_left);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalFees = SafeMath.add(totalFees,money_left);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    UNITY
Line:        396
Source: 
>             bool result_lost;
>             result_lost = address(uint160(mainAddress)).send(money_left);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalFees = SafeMath.add(totalFees,money_left);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    UNITY
Line:        376
Source: 
>             bool result_2;
>             result_2 = address(uint160(users[introducer_id].wallet)).send(money_introducer);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             money_left = SafeMath.sub(money_left,money_introducer);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    UNITY
Line:        384
Source: 
>                     if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].stage >= _stage && users[users[_user].introducers[i]].introducedTotal >= 1){
>                         address(uint160(users[users[_user].introducers[i]].wallet)).transfer(money_upline);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         emit PaymentUpline(userList[msg.sender], users[_user].introducers[i], _stage, money_upline, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    UNITY
Line:        363
Source: 
>                 bool result_1;
>                 result_1 = address(uint160(users[referrer_id].wallet)).send(money_sponsor);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,money_sponsor);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UNITY
Line:        396
Source: 
>             bool result_lost;
>             result_lost = address(uint160(mainAddress)).send(money_left);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalFees = SafeMath.add(totalFees,money_left);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UNITY
Line:        376
Source: 
>             bool result_2;
>             result_2 = address(uint160(users[introducer_id].wallet)).send(money_introducer);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             money_left = SafeMath.sub(money_left,money_introducer);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UNITY
Line:        384
Source: 
>                     if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].stage >= _stage && users[users[_user].introducers[i]].introducedTotal >= 1){
>                         address(uint160(users[users[_user].introducers[i]].wallet)).transfer(money_upline);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         emit PaymentUpline(userList[msg.sender], users[_user].introducers[i], _stage, money_upline, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UNITY
Line:        363
Source: 
>                 bool result_1;
>                 result_1 = address(uint160(users[referrer_id].wallet)).send(money_sponsor);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,money_sponsor);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNITY
Line:        396
Source: 
>             bool result_lost;
>             result_lost = address(uint160(mainAddress)).send(money_left);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalFees = SafeMath.add(totalFees,money_left);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNITY
Line:        376
Source: 
>             bool result_2;
>             result_2 = address(uint160(users[introducer_id].wallet)).send(money_introducer);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             money_left = SafeMath.sub(money_left,money_introducer);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNITY
Line:        363
Source: 
>                 bool result_1;
>                 result_1 = address(uint160(users[referrer_id].wallet)).send(money_sponsor);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,money_sponsor);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        37
Source: 
>   address public owner;
>   address public mainAddress;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
