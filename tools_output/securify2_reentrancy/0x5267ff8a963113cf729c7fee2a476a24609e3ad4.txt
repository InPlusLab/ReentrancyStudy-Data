Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        144
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        163
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        172
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        144
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        163
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        172
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        374
Source: 
>     // have already purchased.
>     function pause(bool _paused)            public onlyOwner { paused = _paused;}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setPrice(uint256 _price)       public onlyOwner { price = _price; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        375
Source: 
>     function pause(bool _paused)            public onlyOwner { paused = _paused;}
>     function setPrice(uint256 _price)       public onlyOwner { price = _price; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setMinimum(uint256 _minimum)   public onlyOwner { minimum = _minimum; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        376
Source: 
>     function setPrice(uint256 _price)       public onlyOwner { price = _price; }
>     function setMinimum(uint256 _minimum)   public onlyOwner { minimum = _minimum; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setMaximum(uint256 _maximum)   public onlyOwner { maximum = _maximum; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        377
Source: 
>     function setMinimum(uint256 _minimum)   public onlyOwner { minimum = _minimum; }
>     function setMaximum(uint256 _maximum)   public onlyOwner { maximum = _maximum; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        379
Source: 
> 
>     function setEnds(uint256 _ends)   public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_ends <= maxEnds, "end date is capped");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        384
Source: 
>     
>     function unlock()                       public onlyOwner { ends = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        386
Source: 
> 
>     function withdrawETH(address payable _addr, uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addr.transfer(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        390
Source: 
> 
>     function withdrawUnsold(address _addr, uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= ethys.balanceOf(address(this)).sub(totalOwed), "insufficient balance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        396
Source: 
>     // start the presale
>     function startPresale(uint256 _maxEnds, uint256 _ends) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!started, "already started!");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        415
Source: 
>     // claim your purchased tokens
>     function claim() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solium-disable-next-line

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHYSPresale
Line:        431
Source: 
>     // purchase tokens
>     function buy() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solium-disable-next-line

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETHYSPresale
Line:        374
Source: 
>     // have already purchased.
>     function pause(bool _paused)            public onlyOwner { paused = _paused;}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setPrice(uint256 _price)       public onlyOwner { price = _price; }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETHYSPresale
Line:        375
Source: 
>     function pause(bool _paused)            public onlyOwner { paused = _paused;}
>     function setPrice(uint256 _price)       public onlyOwner { price = _price; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setMinimum(uint256 _minimum)   public onlyOwner { minimum = _minimum; }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETHYSPresale
Line:        376
Source: 
>     function setPrice(uint256 _price)       public onlyOwner { price = _price; }
>     function setMinimum(uint256 _minimum)   public onlyOwner { minimum = _minimum; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setMaximum(uint256 _maximum)   public onlyOwner { maximum = _maximum; }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETHYSPresale
Line:        377
Source: 
>     function setMinimum(uint256 _minimum)   public onlyOwner { minimum = _minimum; }
>     function setMaximum(uint256 _maximum)   public onlyOwner { maximum = _maximum; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETHYSPresale
Line:        390
Source: 
> 
>     function withdrawUnsold(address _addr, uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= ethys.balanceOf(address(this)).sub(totalOwed), "insufficient balance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHYSPresale
Line:        386
Source: 
> 
>     function withdrawETH(address payable _addr, uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addr.transfer(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHYSPresale
Line:        410
Source: 
>     // the amount of ethy purchased
>     function calculateAmountPurchased(uint256 _value) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _value.mul(BP).div(price).mul(1e18).div(BP);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETHYSPresale
Line:        427
Source: 
>         // send owed tokens
>         require(ethys.transfer(msg.sender, amount), "failed to claim");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETHYSPresale
Line:        439
Source: 
>         uint256 amount = calculateAmountPurchased(msg.value);
>         require(totalOwed.add(amount) <= ethys.balanceOf(address(this)), "sold out");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHYSPresale
Line:        352
Source: 
>     // BP
>     uint256 constant BP = 10000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ETHYSPresale
Line:        387
Source: 
>     function withdrawETH(address payable _addr, uint256 amount) public onlyOwner {
>         _addr.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    ETHYSPresale
Line:        387
Source: 
>     function withdrawETH(address payable _addr, uint256 amount) public onlyOwner {
>         _addr.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHYSPresale
Line:        387
Source: 
>     function withdrawETH(address payable _addr, uint256 amount) public onlyOwner {
>         _addr.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ETHYSPresale
Line:        427
Source: 
>         // send owed tokens
>         require(ethys.transfer(msg.sender, amount), "failed to claim");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ETHYSPresale
Line:        439
Source: 
>         uint256 amount = calculateAmountPurchased(msg.value);
>         require(totalOwed.add(amount) <= ethys.balanceOf(address(this)), "sold out");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETHYSPresale
Line:        391
Source: 
>     function withdrawUnsold(address _addr, uint256 amount) public onlyOwner {
>         require(amount <= ethys.balanceOf(address(this)).sub(totalOwed), "insufficient balance");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ethys.transfer(_addr, amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETHYSPresale
Line:        392
Source: 
>         require(amount <= ethys.balanceOf(address(this)).sub(totalOwed), "insufficient balance");
>         ethys.transfer(_addr, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ETHYSPresale
Line:        355
Source: 
>     // sale params
>     bool    public started;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ETHYSPresale
Line:        356
Source: 
>     bool    public started;
>     uint256 public price;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 public ends;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ETHYSPresale
Line:        357
Source: 
>     uint256 public price;
>     uint256 public ends;
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public maxEnds;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ETHYSPresale
Line:        358
Source: 
>     uint256 public ends;
>     uint256 public maxEnds;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     bool    public paused;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ETHYSPresale
Line:        359
Source: 
>     uint256 public maxEnds;
>     bool    public paused;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint256 public minimum;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ETHYSPresale
Line:        360
Source: 
>     bool    public paused;
>     uint256 public minimum;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public maximum;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ETHYSPresale
Line:        361
Source: 
>     uint256 public minimum;
>     uint256 public maximum;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ETHYSPresale
Line:        364
Source: 
>     // stats:
>     uint256 public totalOwed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public weiRaised;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ETHYSPresale
Line:        365
Source: 
>     uint256 public totalOwed;
>     uint256 public weiRaised;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETHYSPresale
Line:        443
Source: 
>         claimable[msg.sender] = claimable[msg.sender].add(amount);
>         totalOwed = totalOwed.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         weiRaised = weiRaised.add(msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETHYSPresale
Line:        444
Source: 
>         totalOwed = totalOwed.add(amount);
>         weiRaised = weiRaised.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ETHYSPresale
Line:        392
Source: 
>         require(amount <= ethys.balanceOf(address(this)).sub(totalOwed), "insufficient balance");
>         ethys.transfer(_addr, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ETHYSPresale
Line:        417
Source: 
>         //solium-disable-next-line
>         require(block.timestamp > ends, "presale has not yet ended");
>                 ^^^^^^^^^^^^^^^
>         require(claimable[msg.sender] > 0, "nothing to claim");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ETHYSPresale
Line:        433
Source: 
>         //solium-disable-next-line
>         require(block.timestamp < ends, "presale has ended");
>                 ^^^^^^^^^^^^^^^
>         require(!paused, "presale is paused");

[0m
